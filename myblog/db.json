{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/butterfly-icon.png","path":"img/butterfly-icon.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/error-page.png","path":"img/error-page.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/image-2.png","path":"img/image-2.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/image-3.png","path":"img/image-3.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/image-4.png","path":"img/image-4.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/img-4.png","path":"img/img-4.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/img.png","path":"img/img.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/404/index.md","hash":"f856d43418c22a2e0acda0dc8dfc338c5f591fb4","modified":1756363158051},{"_id":"source/_posts/alertmanager.md","hash":"e2c8f21409f203327d8587fc9b2f6cb145be8bfe","modified":1756363158051},{"_id":"source/_posts/elastcisearch-dump.md","hash":"4cf0a39fcac78897c22caf18962af810fcd72415","modified":1756363158058},{"_id":"source/_posts/elfk.md","hash":"23ce335111b14750cd562b15fe701ffdb78e6feb","modified":1756363158058},{"_id":"source/_posts/ftp.md","hash":"6cf9197da3fc6175c89b46cc111d4d0567a854b7","modified":1756363158058},{"_id":"source/_posts/iptables防止ddos-cc.md","hash":"7b84e1bac42476c8403b86438655f420d5340e79","modified":1756363158061},{"_id":"source/_posts/kubeclt-neat.md","hash":"a4f1f2a2ccd28027005905a7561bd5b1cf0d31ff","modified":1756363158076},{"_id":"source/_posts/miniconda3.md","hash":"f6bab37af7cad655e77e6b098841efd20c4951f2","modified":1756363158076},{"_id":"source/_posts/nginx-todo.md","hash":"2bf34ec669fb4d425a5f77e3940f0d5ec8907259","modified":1756363158077},{"_id":"source/_posts/mq.md","hash":"6893dfabe4ff94517037ab5e009fe66db7b3d5dd","modified":1756363158077},{"_id":"source/_posts/openvpn.md","hash":"a2d6e9308d75e27add859822e1c1c9f168a575d1","modified":1756363158077},{"_id":"source/_posts/prometheus.md","hash":"e8cda8a9e903fedff83cd20234953f903ebd86ee","modified":1756363158095},{"_id":"source/_posts/python-as-completed.md","hash":"4905ce9c50e9f6ab9c0a5f20e58da6ecaabff732","modified":1756363158223},{"_id":"source/_posts/proxysql.md","hash":"996516127331abcc923901e6b0c31ba7c3faac06","modified":1756363158221},{"_id":"source/_posts/rsync.md","hash":"bc219cc4332f6894f8e36fdffac22c943191ff58","modified":1756363158224},{"_id":"source/_posts/screen.md","hash":"e2baf5041a5b30f6b8e8ec7b471ca28d2d5dc645","modified":1756363158224},{"_id":"source/_posts/tcp.md","hash":"0a3f414225c8c97a36d5569921e019c66d542ea8","modified":1756363158226},{"_id":"source/_posts/websocket.md","hash":"e1d710c4eedfc347b0bd403313f2d1a8006918e7","modified":1756363158229},{"_id":"source/_posts/使用kubekey快速安装k8s.md","hash":"b4014ed65fc3e17df272f03572308ac9ce03e10d","modified":1756363158229},{"_id":"source/_posts/使用maven打包.md","hash":"082a9e87896574707cbb062c94e7489425fe9ebf","modified":1756363158236},{"_id":"source/_posts/常用压测命令.md","hash":"7807dfa85ac4b0d25c0549507f4ae707ecd74661","modified":1756363314543},{"_id":"source/_posts/常用命令记录.md","hash":"63b9d20a54606675a71a710f52674259f136d9c4","modified":1756363158236},{"_id":"source/_posts/数据库.md","hash":"3b3c69ec30773746737841684c56f31f8cef1b46","modified":1756363158236},{"_id":"source/_posts/斗地主.md","hash":"fa0a12b158319680a0070630dd6fbde3c36b29db","modified":1756363158237},{"_id":"source/_posts/部署本地大模型.md","hash":"525506942408d420900d0c45771f252a1a977bc3","modified":1756363158237},{"_id":"source/about/index.md","hash":"c7d41c11262ac61fab6ea22bb517b656ffdf106a","modified":1756363158237},{"_id":"source/categories/index.md","hash":"99ca7b710d585ec269386c6fde64c1949ca40818","modified":1756363158237},{"_id":"source/tags/index.md","hash":"2b2f4683020428f3669fba0caacc383d9bbc91fe","modified":1756363158237},{"_id":"source/_posts/python-threading.md","hash":"e8a0b83f47130759b7df7b71a71c1091bd44a9f2","modified":1756363158224},{"_id":"source/_posts/python-ThreadPoolExecutor.md","hash":"bb4bfbd461f32617347ca78bf5db5cd54b5f3b00","modified":1756363158222},{"_id":"source/_posts/prometheus进阶.md","hash":"f00163f15df57d2a2d74ad04f9e95a7707734c87","modified":1756363158220},{"_id":"source/_posts/prometheus/image-6.png","hash":"d8e9764519615d8bcbf5a2d96877f799649e5f9b","modified":1756363158197},{"_id":"source/_posts/ftp/image.png","hash":"444173c3e2869a879a139d98e51bc620e50f07ee","modified":1756363158061},{"_id":"source/_posts/prometheus/image-19.png","hash":"67edf337abdf7bd80fb9c453dc00dc2f06c83cf3","modified":1756363158145},{"_id":"source/_posts/ftp/image-1.png","hash":"760884845aa748e8006cb69e10147dbace981bd4","modified":1756363158060},{"_id":"source/_posts/prometheus/image-24.png","hash":"2704542f9fedfc2f7bbb306459e44a1434b2795a","modified":1756363158174},{"_id":"source/_posts/screen/image.png","hash":"40e05211c71099fddaaa68dacb4754ad3fdb2f28","modified":1756363158226},{"_id":"node_modules/hexo-theme-butterfly/LICENSE","hash":"c8bc7df08db9dd3b39c2c2259a163a36cf2f6808","modified":1756363157112},{"_id":"node_modules/hexo-theme-butterfly/README.md","hash":"e1b9096ae0c4e5ef0a911aec05dbad4a3aae3173","modified":1756363157112},{"_id":"node_modules/hexo-theme-butterfly/README_CN.md","hash":"92e45255b8725f0a00450c88fcfd51ec61e1db67","modified":1756363157112},{"_id":"node_modules/hexo-theme-butterfly/_config.yml","hash":"8ada0866244e751b65f6cb791a33c879d76d6a7c","modified":1756363157113},{"_id":"node_modules/hexo-theme-butterfly/package.json","hash":"0f469650107841dc1dc716aa94b3ca2bb0721762","modified":1756363157121},{"_id":"node_modules/hexo-theme-butterfly/plugins.yml","hash":"a2704f0406484fdae3410e9992cf996f9859356e","modified":1756363157121},{"_id":"node_modules/hexo-theme-butterfly/.github/FUNDING.yml","hash":"da5e77f5e0cdb7e11b36546fb6796d10e3dfbe5d","modified":1756363157112},{"_id":"node_modules/hexo-theme-butterfly/languages/default.yml","hash":"a2c938b1ef69195aec10c90dc7d1871953548e01","modified":1756363157114},{"_id":"node_modules/hexo-theme-butterfly/languages/en.yml","hash":"a2c938b1ef69195aec10c90dc7d1871953548e01","modified":1756363157114},{"_id":"node_modules/hexo-theme-butterfly/languages/ja.yml","hash":"a281d3cc3e117e90597b783dc5569dba3976d2eb","modified":1756363157114},{"_id":"node_modules/hexo-theme-butterfly/languages/ko.yml","hash":"c7d861c58f204f47a5b4d6e118e1f1e8fb8a852f","modified":1756363157114},{"_id":"node_modules/hexo-theme-butterfly/languages/zh-CN.yml","hash":"e0bf36edf18cf3380b900be7528b536252990c26","modified":1756363157114},{"_id":"node_modules/hexo-theme-butterfly/languages/zh-HK.yml","hash":"bac3063ad2892be232f7d91361c28585a3cc7eb5","modified":1756363157114},{"_id":"node_modules/hexo-theme-butterfly/languages/zh-TW.yml","hash":"bd7ee35aa30964493d2729ef105bb86331b096c3","modified":1756363157114},{"_id":"node_modules/hexo-theme-butterfly/layout/archive.pug","hash":"bc77220dfc269b8faad0930e1a4142ebf68165e5","modified":1756363157114},{"_id":"node_modules/hexo-theme-butterfly/layout/category.pug","hash":"a7e9805a781e34e38d27462e6ce2a5821c34bb9f","modified":1756363157114},{"_id":"node_modules/hexo-theme-butterfly/layout/index.pug","hash":"a93004cc8ec8050df603d32a6e6e02cd96fd9875","modified":1756363157121},{"_id":"node_modules/hexo-theme-butterfly/layout/page.pug","hash":"7ce2a49c6c41847de4ccea377ade116339984434","modified":1756363157121},{"_id":"node_modules/hexo-theme-butterfly/layout/post.pug","hash":"65c4a49c65c3fc4d9dc88b9791a75710c698c3a1","modified":1756363157121},{"_id":"node_modules/hexo-theme-butterfly/layout/tag.pug","hash":"ca5333bd262cb58c195c844b593a0eed0c721766","modified":1756363157121},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"10ce05c8dbde09f53bdabe40b5388de9ccc71a31","modified":1756363157112},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"63ad2249ad09fb3fe21bd5ff9adefb304a7ab24a","modified":1756363157112},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"6e0f9470b18bd37d4891282ac73d61676b040e8c","modified":1756363157112},{"_id":"node_modules/hexo-theme-butterfly/.github/workflows/publish.yml","hash":"e320b40c051bae1549156cd5ea4a51383cf78598","modified":1756363157112},{"_id":"node_modules/hexo-theme-butterfly/.github/workflows/stale.yml","hash":"4040c76547e270aaf184e9b219a44ca41bbb1b9f","modified":1756363157112},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/additional-js.pug","hash":"f9b02aac0dbbb2b71c037dd215e70c8b7ec7741c","modified":1756363157114},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/footer.pug","hash":"6bd41add3a45e55d5e51eab5285a2d1a909d37f3","modified":1756363157114},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head.pug","hash":"1d11e334b22dbbedcb0f751f9ee9789d4416605e","modified":1756363157114},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/layout.pug","hash":"e5e6c05a621483b3542f2884e8ba45e84b1e973a","modified":1756363157115},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/pagination.pug","hash":"bd45e6fa935ace9cb54499b0491dacfb78ccc354","modified":1756363157116},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/rightside.pug","hash":"43f951b639038f3bc01deea03368d8dcf492cbb0","modified":1756363157116},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/sidebar.pug","hash":"3e65b7bf6bccccbba7e15349f0a44f15c64c5b5e","modified":1756363157116},{"_id":"node_modules/hexo-theme-butterfly/scripts/common/postDesc.js","hash":"272613a71d16f0de6dac883be4839259f774be76","modified":1756363157121},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/404.js","hash":"039fc75f363d79669b0b2177d929cdff6f2ef7a4","modified":1756363157121},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/cdn.js","hash":"7864ba45716c51aef8d8b04fd4bc212e0008ce3b","modified":1756363157121},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/comment.js","hash":"7b1b16e1e8e08245a345764616956be50487eb53","modified":1756363157121},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/init.js","hash":"ce68e84a9ccfcf91100befbaa9afc392a0cd93bb","modified":1756363157122},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/merge_config.js","hash":"10ffed853a935498f1f5da2c5b57200c957874a7","modified":1756363157122},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/stylus.js","hash":"bac639c404588ea62e601ef0bcd368c3bd0119af","modified":1756363157122},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/welcome.js","hash":"f59e10305fef59ea3e62a7395106c0927582879d","modified":1756363157122},{"_id":"node_modules/hexo-theme-butterfly/scripts/filters/post_lazyload.js","hash":"b23108d29fff3e32384d8689c8bcd2ab306a1ae7","modified":1756363157122},{"_id":"node_modules/hexo-theme-butterfly/scripts/filters/random_cover.js","hash":"20a6ebf63439501a4b3fc81e7a2a2ea5d103bace","modified":1756363157122},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/aside_archives.js","hash":"3eb0bbb1288dc7b0ff82cc46ceb53bd666893416","modified":1756363157122},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/aside_categories.js","hash":"0cdf781a8c14d7b50d309e69f282ec7b178804bb","modified":1756363157122},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/getArchiveLength.js","hash":"bf77635e920eaf52bceebc95f87c7c87a7ca8038","modified":1756363157122},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/inject_head_js.js","hash":"00c5742ad1c75b3c5684d02ffc6a1921399e5376","modified":1756363157122},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/page.js","hash":"a07b586b510aa2df953102d998e84207acc34f9b","modified":1756363157122},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/related_post.js","hash":"950b7d0966429bf0f9e6c5e1161e50e545e320b4","modified":1756363157122},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/series.js","hash":"45367c4ce827329867dbcc750ec125da9ccb2cfd","modified":1756363157122},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/button.js","hash":"2f44e1b3ccd170b256eae178299d6fa933a8d490","modified":1756363157122},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/chartjs.js","hash":"195ba802d7e8406c155124a9c939a2318f82938b","modified":1756363157123},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/flink.js","hash":"25eefe10189caf3910a0e5d5b2f2043ae9255531","modified":1756363157123},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/gallery.js","hash":"fa3d0a64f7fce4aff7928d4ddd95548978ba001c","modified":1756363157123},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/hide.js","hash":"f02fb085a88a2c0c82aeffacc24e1b71c74bd7c0","modified":1756363157123},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/inlineImg.js","hash":"89c6c78d2db43b190055d5690741a79bab4f3e7e","modified":1756363157123},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/label.js","hash":"cf0bc17d0180231167cc6aa8a00fc64f198cb9f9","modified":1756363157123},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/mermaid.js","hash":"50d8d8fac5c5b6e26317028895d7d82a2cf46606","modified":1756363157123},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/note.js","hash":"e68d8d21f3a86e3646907a3685550ee20e8d4a9f","modified":1756363157123},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/score.js","hash":"f589fb6646bd17cf12d77a9b251dd614e1c8b899","modified":1756363157123},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/series.js","hash":"40bc9a065e3a1423e0e66f4911e00713ca9f5e9e","modified":1756363157123},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/tabs.js","hash":"3c486b149e28edd1a06843f05a5c355000991b82","modified":1756363157123},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/timeline.js","hash":"176804f07567aa80f1ed95897a968a996b155dec","modified":1756363157123},{"_id":"node_modules/hexo-theme-butterfly/source/css/index.styl","hash":"b13d96924a5534bff91d75566b196ac87b4fac22","modified":1756363157126},{"_id":"node_modules/hexo-theme-butterfly/source/css/var.styl","hash":"d1eec577074ab7b262182885576135bf1896e12c","modified":1756363157126},{"_id":"node_modules/hexo-theme-butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1756363157127},{"_id":"node_modules/hexo-theme-butterfly/source/img/error-page.png","hash":"d2519710498a871ca3e913c57e2ba20a805b6430","modified":1756363157129},{"_id":"node_modules/hexo-theme-butterfly/source/img/favicon.ico","hash":"455ac256580bf31a45813dbbdb87219bfc8bfb04","modified":1756363157129},{"_id":"node_modules/hexo-theme-butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1756363157129},{"_id":"node_modules/hexo-theme-butterfly/source/img/img.png","hash":"185ddc251df0cd80abd4f212b3213963f6561161","modified":1756363157142},{"_id":"node_modules/hexo-theme-butterfly/source/js/main.js","hash":"5a52047b8520f79864d5a4ee2379a29751aead23","modified":1756363157142},{"_id":"node_modules/hexo-theme-butterfly/source/js/tw_cn.js","hash":"fdb5482d04a75bd79946ad1ed291d281d0e9362d","modified":1756363157143},{"_id":"node_modules/hexo-theme-butterfly/source/js/utils.js","hash":"48637ad8e405306772b93837f33400bde1055819","modified":1756363157143},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/Open_Graph.pug","hash":"e93a36d3c29b5a02c7f26a23f96e1f84b063cbe8","modified":1756363157114},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/analytics.pug","hash":"e792a435afee1f9491095084a00dc77e3522c1fd","modified":1756363157114},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/config.pug","hash":"9ea75b06f19bf356f340f4a3fc1bdc0713cfe445","modified":1756363157114},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/config_site.pug","hash":"56a3c32de1a15627ff38c67f1131cdd6ec5ac924","modified":1756363157115},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/google_adsense.pug","hash":"f29123e603cbbcc6ce277d4e8f600ba67498077c","modified":1756363157115},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/preconnect.pug","hash":"1e1a69aa2cbda2e621c741b3802093244b3cc04e","modified":1756363157115},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/pwa.pug","hash":"83ed05ef1e39f2ee70c3fba2cf96e488d8ffec66","modified":1756363157115},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/site_verification.pug","hash":"5168caadc4cf541f5d6676a9c5e8ae47a948f9ad","modified":1756363157115},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/structured_data.pug","hash":"1b83ae33961528f128596753fd05067c672d6bff","modified":1756363157115},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/index.pug","hash":"44331c9db74b281b5c5c41439d3407a9076df1a1","modified":1756363157115},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/menu_item.pug","hash":"733184f88e3a586a5fcc9d193ad500556b6c8eed","modified":1756363157115},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/nav.pug","hash":"18b984ce184ea53d2dff5a03cc2d0d39d2ec3406","modified":1756363157115},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/post-info.pug","hash":"7d799c4694adb6e265e3f4b975d7f7f6a7021a17","modified":1756363157115},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/social.pug","hash":"e2d31e0f450ad42c47f7ee96375799342bf2f19b","modified":1756363157115},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/fullpage-loading.pug","hash":"a2f7d69ca7ec58f24fe7d4e04ae21d5b62b01567","modified":1756363157115},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/index.pug","hash":"d76ce71ba106e350670c021a3dcae57547d01830","modified":1756363157115},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/pace.pug","hash":"9d2d539555bab495959b9df734ed5c43a9f9e5a9","modified":1756363157115},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/mixins/article-sort.pug","hash":"ef7afe0df7a3746744ac8185da7163b7406120ca","modified":1756363157115},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/mixins/indexPostUI.pug","hash":"f3389fa9ae4fa32e3c16573286583bc3023e57ad","modified":1756363157116},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/404.pug","hash":"15d32c511e4875066fcbe9cb84c3ada07b5a7c41","modified":1756363157116},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1756363157116},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/default-page.pug","hash":"efb40388e37cca0b5e7c3c66e811a42f8d32c910","modified":1756363157116},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/flink.pug","hash":"6b0fa5f048aca8e9cbe56978301af918cf7ac34a","modified":1756363157116},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/shuoshuo.pug","hash":"b2423cfc57a5e3a0e1112ff7c18d5c5c720d89d5","modified":1756363157116},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/tags.pug","hash":"79ad31eb72a9e14007770b18a426406a25315b38","modified":1756363157116},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/post/outdate-notice.pug","hash":"b7ce9484bc5c97ea6154f0b78fb9b8951fafedbd","modified":1756363157116},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/post/post-copyright.pug","hash":"b96c232e5178d927987791d9ae386dd83679535a","modified":1756363157116},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/post/reward.pug","hash":"db92f25ff3fd061882f81bf74ca560ff66983a0c","modified":1756363157116},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/aplayer.pug","hash":"ed79fef5b5025415ea12eaed970f3fe7f6ef9596","modified":1756363157117},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/effect.pug","hash":"43014bfc63583d3ee8808d526dd165848c0ed52f","modified":1756363157118},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/pjax.pug","hash":"efe4f8019632b51c92c4f7628758538305e06e47","modified":1756363157119},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/prismjs.pug","hash":"88f979a0b1a19eeb0db229247833bf9c6865c3b9","modified":1756363157119},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/subtitle.pug","hash":"236c3ce26dd76e80b04d457789475c42da5ac0c8","modified":1756363157120},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/umami_analytics.pug","hash":"bc35a1552d26ecdeeadbf06300078dbb5128a6e5","modified":1756363157120},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_ad.pug","hash":"a8312b527493dabbadbb1280760168d3bc909a3b","modified":1756363157120},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_announcement.pug","hash":"21e019bdc3b1e796bb00976bb29af2d51f873624","modified":1756363157120},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_archives.pug","hash":"73d33b6930e7944187a4b3403daf25d27077a2dd","modified":1756363157120},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_author.pug","hash":"1aba8aa7cd767dc96879d13a13b4c8ceb9023233","modified":1756363157120},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_bottom_self.pug","hash":"1dba77d250eeebfb6e293d504352c7e9ea31980b","modified":1756363157120},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_categories.pug","hash":"66e383b4ef374951eb87dd1bf4cdb7a667193fb5","modified":1756363157120},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_newest_comment.pug","hash":"d8753772889b5d0f4d15639ed6af5e91e53b1d03","modified":1756363157120},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_post_series.pug","hash":"e0bb72fa0ce15964b11b8fe421cae3432394e35f","modified":1756363157121},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_post_toc.pug","hash":"1dd19a564320d248dbcee7f118a5b96c6466da65","modified":1756363157121},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_recent_post.pug","hash":"bb842d2aa6469d65bf06af1372f0a19a9e4ef44c","modified":1756363157121},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_tags.pug","hash":"842b772a387b576550fa127030e1c2e9bf65716d","modified":1756363157121},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_top_self.pug","hash":"7b5ae404a1205546b7de4be42291315cf918f2b3","modified":1756363157121},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_webinfo.pug","hash":"fcddd80cdeb6aa81f342cd9f0102302f6ba087a8","modified":1756363157121},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/index.pug","hash":"45f620cd87b9ef2aa9d1e024e697ed6b4eecff34","modified":1756363157121},{"_id":"node_modules/hexo-theme-butterfly/source/css/_global/function.styl","hash":"d12340a7df4601b9a23f070e16645861aeb3bb0a","modified":1756363157123},{"_id":"node_modules/hexo-theme-butterfly/source/css/_global/index.styl","hash":"4fcb8222b9548e22f7b76f12d33e3698240cbae0","modified":1756363157123},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight.styl","hash":"67062d597408068e4a59e95851e98fed34b745da","modified":1756363157123},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/theme.styl","hash":"a51edfd3e499e7d38c32241c40e8e4d371efca73","modified":1756363157124},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/aside.styl","hash":"ba174889e770ae9f6683379b9eae9d8c94253080","modified":1756363157124},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/chat.styl","hash":"4cc02bcbaa4a1933a82a9ea57a603fe2d059fc77","modified":1756363157124},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/comments.styl","hash":"fbfce4d67cacd1df22fb73d89d008693f59d9d91","modified":1756363157124},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/footer.styl","hash":"d7b988d8588207086670f39aa49fce442c429f7a","modified":1756363157124},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/head.styl","hash":"094108f2a4e351a2fa496d6bd3e2388151416b3f","modified":1756363157124},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/loading.styl","hash":"f0b01bbf321c2c24fdccaee367dd9fd448031a72","modified":1756363157124},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/pagination.styl","hash":"7d7554573c005399bc8c2264a85896d2d51be1e1","modified":1756363157124},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/post.styl","hash":"543eaf9c7df7e0db841e5946ee5f9082c3c46290","modified":1756363157124},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/relatedposts.styl","hash":"ef8e8549fe7ad4b99793844a93b4a89f77f417d5","modified":1756363157125},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/reward.styl","hash":"d9cdf564a822a585e67fd5bac8573ba87eeb3743","modified":1756363157125},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/rightside.styl","hash":"a0f5835f04358122e8b1d38dd3e8da09a1b5b431","modified":1756363157125},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/sidebar.styl","hash":"084dc4dfb41f55e237a9d6cf8c2f5dba729b83be","modified":1756363157125},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/third-party.styl","hash":"0af7c8754f04bdd9a02a14d880774753bd2e35ee","modified":1756363157125},{"_id":"node_modules/hexo-theme-butterfly/source/css/_mode/darkmode.styl","hash":"4c9849df9c68d892c7df0ca28123aeb0dc9dc424","modified":1756363157125},{"_id":"node_modules/hexo-theme-butterfly/source/css/_mode/readmode.styl","hash":"ad66212554468b7067590308ed4cf40524fea662","modified":1756363157125},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/404.styl","hash":"205ccc7d0ec6ce1193b46bc0c9ce0385594581fb","modified":1756363157125},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/archives.styl","hash":"5abe5480d83ff8b452a780a484d50a44091475bf","modified":1756363157125},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/categories.styl","hash":"c4cda7b0c99015df29ce00fdfddd2f7679653754","modified":1756363157125},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/common.styl","hash":"dcff804c4c237e1e908481b44c1ac4e39ac0da34","modified":1756363157125},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/flink.styl","hash":"1f8d715faf3b91b53426e38195c0920afb3bfa1c","modified":1756363157125},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/homepage.styl","hash":"992d192db7d1c96e995b85ed11c20c571d33fbad","modified":1756363157125},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/shuoshuo.styl","hash":"79bb1d9a27822ed5675d1e52f5dbd0e2f5d5010a","modified":1756363157125},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/tags.styl","hash":"7543bb688876a946538d66b991c71b94b5216277","modified":1756363157125},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/algolia.styl","hash":"d8a8275a68a1421c4c09b604cf78bea16c1d0463","modified":1756363157126},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/index.styl","hash":"6c4cbdadd9a49029fe0c59e29808d873e5b6b6ee","modified":1756363157126},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/local-search.styl","hash":"1f2b86df86df81c3a59377b29102314ffc73dfa6","modified":1756363157126},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/button.styl","hash":"de8437a058a315d14d7e7034066f095b7b3ed4b4","modified":1756363157126},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/gallery.styl","hash":"30d1f809efd252ed0233d96d4374efd2b01d2292","modified":1756363157126},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/hexo.styl","hash":"985b183db7b7bfd8f9bdb60494549fb7f850348b","modified":1756363157126},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/hide.styl","hash":"d27dbccaf3de1c9158d19e4fd49a25953cb5778d","modified":1756363157126},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/inlineImg.styl","hash":"3be8d0a75e7cc96548667cae0cb6a474279bd0b5","modified":1756363157126},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/label.styl","hash":"216f52fefc2274b542b549d8470503e6f1a308fb","modified":1756363157126},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/note.styl","hash":"4929382bd60788d34752a66e2fe764ef797a72a0","modified":1756363157126},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/series.styl","hash":"0657169849bc4bf4d93b5492ade040c8f58c1901","modified":1756363157126},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/tabs.styl","hash":"3a88eedcb694da79e92581ce50cb1a430b1fb615","modified":1756363157126},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/timeline.styl","hash":"e846ddaef494d46cdfa2379deacfe74fa1cc5264","modified":1756363157126},{"_id":"node_modules/hexo-theme-butterfly/source/css/_third-party/normalize.min.css","hash":"8549829fb7d3c21cd9e119884962e8c463a4a267","modified":1756363157126},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/algolia.js","hash":"7119f2f2943de71999d3dd6ba5c60cde846f114b","modified":1756363157142},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/local-search.js","hash":"a2b783230a9143de69004cfc914d9f55e6fc1660","modified":1756363157143},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/abcjs/abcjs.pug","hash":"febff991595504d8e850ced0b9cc090f02ed97f0","modified":1756363157116},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/abcjs/index.pug","hash":"f0a90d8e39915a74b16ef22e851f179415cd7eaa","modified":1756363157116},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"b03ee8625149191f9d5d057bbc9824b68d8dd0c4","modified":1756363157117},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d6fff5a7f84c8b09f282f9ddc0020a68a8aac9ea","modified":1756363157117},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"cbfbcf34a24d21ba2b21cf9eedb76f4c3c563c5a","modified":1756363157117},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"846cabae287ae31b3bbfac3da022475713dd5ecc","modified":1756363157117},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"716dc463fe4ef5112e7018ed60804125fdfa5cad","modified":1756363157117},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"b5db4203a1392385838c73549ddeae0a4be67eba","modified":1756363157117},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"7884883ec15792f7e54daacb3c62b851dde2b66a","modified":1756363157117},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"fd2320ee25507bb8ef49f932c2d170586b44ea4d","modified":1756363157117},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/chatra.pug","hash":"5b29badecbbe828112c001156023fc0566045cf6","modified":1756363157117},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/crisp.pug","hash":"24d094fd917947c0ca7492fa094328b1a183b873","modified":1756363157117},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/index.pug","hash":"e8438941085def0591a72fc9b0d705dbf107f54f","modified":1756363157117},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/tidio.pug","hash":"62466b251052cae609b6369d4cb4b6a85320757d","modified":1756363157117},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/artalk.pug","hash":"89c63a5f0c0ab6314de7158fbc8fcbc84997fc55","modified":1756363157117},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/disqus.pug","hash":"f2ea5249b3e6670f6c8c77868f4f42c502e43830","modified":1756363157117},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"c81fa7d8a5cb96d1ae07bfa8c46b84a58161add1","modified":1756363157118},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"8af585e6d6f73ee57114eefad574dc6e8ea9f570","modified":1756363157118},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/giscus.pug","hash":"592b2251db6c1abeb8b0eebe3b2e6d9aa0dec445","modified":1756363157118},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"58914c58a190e3bc0aa37cb581e77e442b563501","modified":1756363157118},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/index.pug","hash":"db6713d2b90eb8183f86ac92c26761a8501c0ddb","modified":1756363157118},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/js.pug","hash":"3abbaaa4ea575c45b3cebffd40bad1acc6ffce84","modified":1756363157118},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/livere.pug","hash":"7a80231fc71822e503879383a2d9611edf1d72dd","modified":1756363157118},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/remark42.pug","hash":"84f7cfde00f929fa3dc40349bcab060ec68f1b9f","modified":1756363157118},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"53d99831f29aeb2e336ed1407d79590041f77002","modified":1756363157118},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/utterances.pug","hash":"30a7d157890de69deab28baa47fb7bb28b040efd","modified":1756363157118},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/valine.pug","hash":"24f18b0c67803210d53abbf9c1d454c000b06eee","modified":1756363157118},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/waline.pug","hash":"e2bf15357485cd502414b3b20f5b1f762a2fd014","modified":1756363157118},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/chartjs.pug","hash":"732eb1118ea1a73aa5c164d639097c614f8e9953","modified":1756363157118},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/index.pug","hash":"af66d13204030d47537b9e31a6173e63589ce7ff","modified":1756363157118},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/katex.pug","hash":"b83db9fa64d42a0bfd97efb660e09be3f166a144","modified":1756363157119},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/mathjax.pug","hash":"db2f4fff80a1166476ea76ae004aa186df11bad3","modified":1756363157119},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"fa4b4194749d05f7249f365f2b89c0281057ce54","modified":1756363157119},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"72e2970b23570e308f8af5d8ba8e5e3321d01bbf","modified":1756363157119},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"a7c07dbc1e970a5b247091458e1ee9b144a3366d","modified":1756363157119},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"34edfebf0cace0852806be774910ccb0e0914650","modified":1756363157119},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"d2e12a9fc302a4efe52c90d44896fbd73e193a1f","modified":1756363157119},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"d376ec17fb19fcdcf0d2ad71330190146d3af879","modified":1756363157119},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"ec6c685080634ac46ffbea1b8f10313388888f43","modified":1756363157119},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/algolia.pug","hash":"7f0ede1cd3fed2669c94a8e1b21bc0b183f310b8","modified":1756363157120},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/docsearch.pug","hash":"013756ff3363344987cc00fc9bd833baf193c341","modified":1756363157120},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/index.pug","hash":"f8557548d2ad8dd149c562193991c6c6cda02415","modified":1756363157120},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/local-search.pug","hash":"2622b4cf9189fa23e4a422aaf9ef272e4f2c6137","modified":1756363157120},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/addtoany.pug","hash":"f5ee1c9c8ffa4bca972d30f4de69268b8d47f052","modified":1756363157120},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/index.pug","hash":"e51e896ccb13900de38dc81cf44dc789e2418a12","modified":1756363157120},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/share-js.pug","hash":"efef352c1d122409575386bf3894dce8e87032e2","modified":1756363157120},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight/diff.styl","hash":"9f02598b5e4296aec6470639d4bac4c9ac46392e","modified":1756363157124},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight/index.styl","hash":"ef52ebf1e8e751a412f9456fdaeee7d88afd9a72","modified":1756363157124},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/diff.styl","hash":"077ec530831be1d80e93da380406b9f5abd0918a","modified":1756363157124},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/index.styl","hash":"1883c91d43bff10aae55122a21e0b064b6f5c9dd","modified":1756363157124},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"de4bb5fc2dfca368b35e4c1109c92f7abc9e2245","modified":1756363157124},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/common.pug","hash":"27fa75affebc6e84a487c62bceff783bde595256","modified":1756363157119},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"187302dbc916852ff2fdf47061e272c061611dda","modified":1756363157119},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/mermaid.pug","hash":"ca2fc5928ca292f29fd8333c73733344994096fb","modified":1756363157119},{"_id":"source/_posts/prometheus/image-14.png","hash":"941b76bbc04ba0df5e3f977fded9e1c874f17a79","modified":1756363158122},{"_id":"node_modules/hexo-theme-butterfly/source/img/image-2.png","hash":"3f1b29a9b21b73527afab229d327f0e52a7bfab3","modified":1756363157130},{"_id":"source/_posts/tcp/image.png","hash":"b1401eec5d15d0586b04f89c443e5b16ed15fea7","modified":1756363158228},{"_id":"source/_posts/prometheus/image-9.png","hash":"cab348483b2aca8fb4865c27d51372aaf094080a","modified":1756363158214},{"_id":"node_modules/hexo-theme-butterfly/source/img/image-3.png","hash":"ccc5b72563b9731ac6f77bd61c94cd9ef033c9f8","modified":1756363157130},{"_id":"source/_posts/prometheus/image-11.png","hash":"305a988f655f2888e5b92fc8a2d7d03661fc7a68","modified":1756363158108},{"_id":"source/_posts/openvpn/image.png","hash":"de8f4ffa54004c36d88a54e32bf376e09fbe543d","modified":1756363158095},{"_id":"source/_posts/prometheus/image-17.png","hash":"4528330575961efd85d1364399af02b57b685c58","modified":1756363158138},{"_id":"node_modules/hexo-theme-butterfly/source/img/butterfly-icon.png","hash":"f5dd732fed5c3bcd4aa76bac3441bac8485fb432","modified":1756363157128},{"_id":"source/_posts/iptables防止ddos-cc/image-2.png","hash":"979c71cf1f05cb7ad79ef16fe8295587fdbf3f85","modified":1756363158070},{"_id":"source/_posts/prometheus/image-10.png","hash":"5c3f654b55c451246b24cf0f9a813559fce5ba6f","modified":1756363158104},{"_id":"source/_posts/prometheus/image-13.png","hash":"c1a565035062ef229f3c25143ec3d19e63a42547","modified":1756363158120},{"_id":"source/_posts/prometheus/image-16.png","hash":"d323cdda830c0b08502144608405b614b0f05057","modified":1756363158135},{"_id":"source/_posts/openvpn/image-2.png","hash":"41657d6c3de1e0c3c7e2b830a2b67d38464b76bf","modified":1756363158086},{"_id":"source/_posts/prometheus/image-22.png","hash":"916e40a625e46733c94949ba9d03c38e12b97d3e","modified":1756363158166},{"_id":"source/_posts/prometheus/image-20.png","hash":"10020604c51337024ddf6059eb2246ad08a636cb","modified":1756363158156},{"_id":"source/_posts/prometheus/image-18.png","hash":"569c140190b5e14042742d39499e0c6e8325c760","modified":1756363158143},{"_id":"source/_posts/iptables防止ddos-cc/image.png","hash":"cd9360694e9b8593d5859daae8411bf3a0d9241f","modified":1756363158076},{"_id":"source/_posts/prometheus/image.png","hash":"f8eea7cdc5be381d0a077c440e93976b98d68234","modified":1756363158219},{"_id":"source/_posts/prometheus/image-1.png","hash":"d0efacc51df380c64b7093b60292391763fc9518","modified":1756363158101},{"_id":"source/_posts/prometheus/image-21.png","hash":"b83bd7ceae3bd6f5f782689eda9eb2b67397554b","modified":1756363158162},{"_id":"source/_posts/openvpn/image-1.png","hash":"d7d58c339c2c1b467afe1b0b3fdf42a9f1e88b29","modified":1756363158082},{"_id":"source/_posts/prometheus/image-12.png","hash":"c29d63d28c0e12a61cb6543392c1743e6b3e10a0","modified":1756363158114},{"_id":"source/_posts/alertmanager/image.png","hash":"df66cc343743094c3cd72bcc20295194d4e74253","modified":1756363158058},{"_id":"source/_posts/prometheus/image-23.png","hash":"abcca34126a92233ebc44a1240a177fdf30e61b4","modified":1756363158172},{"_id":"source/_posts/openvpn/image-3.png","hash":"6a1c126be932c31ae58921006dc3b7b5135bd883","modified":1756363158091},{"_id":"source/_posts/prometheus/image-8.png","hash":"a0c677cb3c1a823b9bf8c2cd321541d92cd170f8","modified":1756363158211},{"_id":"source/_posts/使用kubekey快速安装k8s/image.png","hash":"19fb427077c2b8e532d98df8086b67c48b88d23f","modified":1756363158235},{"_id":"source/_posts/prometheus/image-7.png","hash":"543c3694932046264d0f499c41612eb38f560796","modified":1756363158204},{"_id":"source/_posts/prometheus/image-4.png","hash":"0c8126a6edf36927294024a8c777630756ad424f","modified":1756363158189},{"_id":"source/_posts/prometheus/image-2.png","hash":"81d6dd4e194e9741d2cbd0da19824bfa75ed6b94","modified":1756363158152},{"_id":"source/_posts/prometheus/image-5.png","hash":"d3e0cbd5bbf80d54ae281ab94ad32414001f8cf2","modified":1756363158197},{"_id":"source/_posts/iptables防止ddos-cc/image-1.png","hash":"77cb4b5ee2d44f18ff4c79207e61918bcd1c7606","modified":1756363158066},{"_id":"source/_posts/prometheus/image-3.png","hash":"56f3a0de7c38cdaace4b506df44f01316e1deb06","modified":1756363158182},{"_id":"node_modules/hexo-theme-butterfly/source/img/image-4.png","hash":"61753cd127b3a1cc66d49019e27b4c749987b74c","modified":1756363157133},{"_id":"source/_posts/prometheus/image-15.png","hash":"3e32a57c4be073c3f9de706f7c34ad5baf1dffec","modified":1756363158130},{"_id":"node_modules/hexo-theme-butterfly/source/img/img-4.png","hash":"ed2e6a5936b308caf72c51452a2bbf70e57b8f8a","modified":1756363157142},{"_id":"public/search.json","hash":"62249ec94bb4ebcab965c98d6559f355293d285d","modified":1756363459098},{"_id":"public/404.html","hash":"06f5ad69d6721607131772fe6a532cbbbd69ef5e","modified":1756363459098},{"_id":"public/404/index.html","hash":"f9525011b5585585b61ddc16bf2eea7e2d61182d","modified":1756363459098},{"_id":"public/about/index.html","hash":"39035c5af069b0359288ddbbeaa1980d2b698400","modified":1756363459098},{"_id":"public/categories/index.html","hash":"efbe4ef949dce480c9e75a7062ee02eb6150e760","modified":1756363459098},{"_id":"public/tags/index.html","hash":"1d505671e7367780f15f88ac6866698a59b929f6","modified":1756363459098},{"_id":"public/2025/04/18/elfk/index.html","hash":"c021564a1b85153a45f7846a8b230d92e9dd99fa","modified":1756363459098},{"_id":"public/2025/04/18/prometheus/index.html","hash":"a537944e91b2d0e4f27729a291a9ba6caa845868","modified":1756363459098},{"_id":"public/2025/04/21/miniconda3/index.html","hash":"d7a55c795004458ae4fb97cfb6d6f348f990d0e9","modified":1756363459098},{"_id":"public/2025/04/21/iptables防止ddos-cc/index.html","hash":"fd3c0621623e1b155c19cb01e50b9d62c9d7a776","modified":1756363459098},{"_id":"public/2025/04/21/openvpn/index.html","hash":"52cd1b39971683007a28e91f61b9bc457a468807","modified":1756363459098},{"_id":"public/2025/04/27/使用kubekey快速安装k8s/index.html","hash":"67e4d9ca3f1774e6c920321475189b2c44d4fa05","modified":1756363459098},{"_id":"public/2025/04/27/screen/index.html","hash":"6a0fb16b3fc96b6d4504a918a9d651f6103b466e","modified":1756363459098},{"_id":"public/2025/04/27/alertmanager/index.html","hash":"a6d4a0a17a1e9143726d48d9b96f1169c72b43e3","modified":1756363459098},{"_id":"public/2025/05/12/使用maven打包/index.html","hash":"b42d74636460e6a3f1b08feb17561ccb84dea4ba","modified":1756363459098},{"_id":"public/2025/05/12/部署本地大模型/index.html","hash":"1f0ff4b478b05121f765212c75122b7b0e0d8408","modified":1756363459098},{"_id":"public/2025/05/28/websocket/index.html","hash":"d23f22f1104852ff49e2d70ae66a2a3fcd5de2bb","modified":1756363459098},{"_id":"public/2025/07/21/nginx-todo/index.html","hash":"f8f23bf24d560b124bd3e89a8b7c223eec813f12","modified":1756363459098},{"_id":"public/2025/07/24/kubeclt-neat/index.html","hash":"735f880b3c8d50cd19c714f2e7e2b269c7d9849c","modified":1756363459098},{"_id":"public/2025/07/24/数据库/index.html","hash":"f0d08cb54c7c5d9c5787435a5cd077058b99560c","modified":1756363459098},{"_id":"public/2025/07/25/tcp/index.html","hash":"384f8da5816f93235365e22c857504a4593ae3e7","modified":1756363459098},{"_id":"public/2025/07/25/ftp/index.html","hash":"480ba57528c56ad564e176556176801acada2be0","modified":1756363459098},{"_id":"public/2025/08/05/rsync/index.html","hash":"d4940b30687f82babd915ad06a6df50ffd27e5f1","modified":1756363459098},{"_id":"public/2025/08/12/elastcisearch-dump/index.html","hash":"cf614a707f3f82f1d186130417eedc06b6e8aabf","modified":1756363459098},{"_id":"public/2025/08/12/常用命令记录/index.html","hash":"1ef43951374a5cc789f3bec6d84307ee2010de28","modified":1756363459098},{"_id":"public/2025/08/15/斗地主/index.html","hash":"00ea983e0018424010ea822163a121343a3ea2d5","modified":1756363459098},{"_id":"public/2025/08/19/proxysql/index.html","hash":"9b392593c390de3e86df33a68695af22572dcf3d","modified":1756363459098},{"_id":"public/2025/08/22/prometheus进阶/index.html","hash":"b789ebe0c8b33223d6f747b5d037e86b7b2dd10c","modified":1756363459098},{"_id":"public/2025/08/22/mq/index.html","hash":"d00f876bd3532d30cbefbf3a7dad85d009b39e91","modified":1756363459098},{"_id":"public/2025/08/26/python-threading/index.html","hash":"099a85fce8c6b8070e64311255fac8a77a0b8b03","modified":1756363459098},{"_id":"public/2025/08/26/python-ThreadPoolExecutor/index.html","hash":"8a106af02ee24b7f1fbf3064aeca6c78a136279d","modified":1756363459098},{"_id":"public/2025/08/26/python-as-completed/index.html","hash":"5b1ade71d14f328c3f2548519cd456526bd2d491","modified":1756363459098},{"_id":"public/2025/08/28/常用压测命令/index.html","hash":"40444d979accd526bf589e3fa5a70d19b7b3d68f","modified":1756363459098},{"_id":"public/archives/index.html","hash":"223ea654477ea510fe50cea0bc5f7fd98585606a","modified":1756363459098},{"_id":"public/archives/page/2/index.html","hash":"cd9eb0ddf898d65ef7fd4471ea3ee623b5641c5b","modified":1756363459098},{"_id":"public/archives/page/3/index.html","hash":"afc9436f0b54b0613bad37cd31a9c602b47c6076","modified":1756363459098},{"_id":"public/archives/2025/index.html","hash":"0b0577f9aeae7d7fa449e93e93b322ebe621b191","modified":1756363459098},{"_id":"public/archives/2025/page/2/index.html","hash":"5c82d54cb32fc24076b4777e9022e7d6290ddc2f","modified":1756363459098},{"_id":"public/archives/2025/page/3/index.html","hash":"2755b60dd1e35428951119be127fd9cd66f8b1f9","modified":1756363459098},{"_id":"public/archives/2025/04/index.html","hash":"237e15e0621e8afd454342f246b40529d2616c77","modified":1756363459098},{"_id":"public/archives/2025/05/index.html","hash":"c75bd9b79c34ae52034c59e56c14eb799e11d9b8","modified":1756363459098},{"_id":"public/archives/2025/07/index.html","hash":"b407b27fb4d6c2185c59498b6479235da63091af","modified":1756363459098},{"_id":"public/archives/2025/08/index.html","hash":"b7338d82b7f8508328fc8278ace331362e08efeb","modified":1756363459098},{"_id":"public/archives/2025/08/page/2/index.html","hash":"b1876e15cd4b3de767de8d4e65a0d122ed16fd9c","modified":1756363459098},{"_id":"public/categories/prometheus/index.html","hash":"00d28b9e9d8d57e1fadef219035e53a13a82a83a","modified":1756363459098},{"_id":"public/categories/中间件/index.html","hash":"8bde3707c69734460c264690b9aa859d02a78f83","modified":1756363459098},{"_id":"public/categories/linux/index.html","hash":"802b34805873d6c3b9be77f22c5e01c3782b72e9","modified":1756363459098},{"_id":"public/categories/k8s/index.html","hash":"4c41c292213f2bd64fb5eb6ea1deba47ca9cc146","modified":1756363459098},{"_id":"public/categories/python/index.html","hash":"827953c983addb64ac912dcbf6a59a43d9307019","modified":1756363459098},{"_id":"public/categories/db/index.html","hash":"03643d0b3d0ea9d503ef8fb17ca35c60966d86eb","modified":1756363459098},{"_id":"public/index.html","hash":"425f9c0a8f44b213283ed1847c7edbc21007c2cc","modified":1756363459098},{"_id":"public/page/2/index.html","hash":"bbe4e0857d4a66ab09dc828fa09d6fca6a6e2083","modified":1756363459098},{"_id":"public/page/3/index.html","hash":"c4ec98263d46b1c95374f3fc2c13e91479e41934","modified":1756363459098},{"_id":"public/tags/es/index.html","hash":"97652bc897a814a27a81ad402df99d5b111f00a6","modified":1756363459098},{"_id":"public/tags/prometheus/index.html","hash":"b78fe47b6e439940c8cd870f1c4a42d56f0a540d","modified":1756363459098},{"_id":"public/tags/websocket/index.html","hash":"14ab0d32625df91aec8807bc8d9ac02a07820b9a","modified":1756363459098},{"_id":"public/tags/maven/index.html","hash":"a3449ba1b1b32be9c9711d7986d34cf1cb8ac020","modified":1756363459098},{"_id":"public/tags/llm/index.html","hash":"09a3ef05bdd9b534dd5ddfb88d93af1c8d894f85","modified":1756363459098},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1756363459098},{"_id":"public/img/error-page.png","hash":"d2519710498a871ca3e913c57e2ba20a805b6430","modified":1756363459098},{"_id":"public/img/favicon.ico","hash":"455ac256580bf31a45813dbbdb87219bfc8bfb04","modified":1756363459098},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1756363459098},{"_id":"public/img/img.png","hash":"185ddc251df0cd80abd4f212b3213963f6561161","modified":1756363459098},{"_id":"public/img/image-2.png","hash":"3f1b29a9b21b73527afab229d327f0e52a7bfab3","modified":1756363459098},{"_id":"public/2025/04/18/prometheus/image-6.png","hash":"d8e9764519615d8bcbf5a2d96877f799649e5f9b","modified":1756363459098},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1756363459098},{"_id":"public/js/utils.js","hash":"fd3c26366c78dd82bc87d4ddebe76c582122e1b7","modified":1756363459098},{"_id":"public/js/search/algolia.js","hash":"e5821f78381af9f0f646952a7dd118daab2a79a6","modified":1756363459098},{"_id":"public/js/search/local-search.js","hash":"4e11d033fb58563f5e1b497f1a6f1c62d3501ee6","modified":1756363459098},{"_id":"public/css/index.css","hash":"7d4c802f0efe0158be855e4751d5dc38bee6a56b","modified":1756363459098},{"_id":"public/js/main.js","hash":"fb746a3e67d0373deea8481110dd436fea4ca38c","modified":1756363459098},{"_id":"public/js/tw_cn.js","hash":"7ef59df188ea523da89f4caf69c5c0f14e78da69","modified":1756363459098},{"_id":"public/img/image-3.png","hash":"ccc5b72563b9731ac6f77bd61c94cd9ef033c9f8","modified":1756363459098},{"_id":"public/2025/07/25/ftp/image.png","hash":"444173c3e2869a879a139d98e51bc620e50f07ee","modified":1756363459098},{"_id":"public/2025/04/18/prometheus/image-19.png","hash":"67edf337abdf7bd80fb9c453dc00dc2f06c83cf3","modified":1756363459098},{"_id":"public/img/butterfly-icon.png","hash":"f5dd732fed5c3bcd4aa76bac3441bac8485fb432","modified":1756363459098},{"_id":"public/2025/07/25/ftp/image-1.png","hash":"760884845aa748e8006cb69e10147dbace981bd4","modified":1756363459098},{"_id":"public/2025/04/18/prometheus/image-24.png","hash":"2704542f9fedfc2f7bbb306459e44a1434b2795a","modified":1756363459098},{"_id":"public/2025/04/27/screen/image.png","hash":"40e05211c71099fddaaa68dacb4754ad3fdb2f28","modified":1756363459098},{"_id":"public/2025/04/18/prometheus/image-14.png","hash":"941b76bbc04ba0df5e3f977fded9e1c874f17a79","modified":1756363459098},{"_id":"public/2025/04/18/prometheus/image-9.png","hash":"cab348483b2aca8fb4865c27d51372aaf094080a","modified":1756363459098},{"_id":"public/2025/07/25/tcp/image.png","hash":"b1401eec5d15d0586b04f89c443e5b16ed15fea7","modified":1756363459098},{"_id":"public/2025/04/21/openvpn/image.png","hash":"de8f4ffa54004c36d88a54e32bf376e09fbe543d","modified":1756363459098},{"_id":"public/2025/04/18/prometheus/image-11.png","hash":"305a988f655f2888e5b92fc8a2d7d03661fc7a68","modified":1756363459098},{"_id":"public/2025/04/18/prometheus/image-17.png","hash":"4528330575961efd85d1364399af02b57b685c58","modified":1756363459098},{"_id":"public/2025/04/21/iptables防止ddos-cc/image-2.png","hash":"979c71cf1f05cb7ad79ef16fe8295587fdbf3f85","modified":1756363459098},{"_id":"public/2025/04/18/prometheus/image-10.png","hash":"5c3f654b55c451246b24cf0f9a813559fce5ba6f","modified":1756363459098},{"_id":"public/2025/04/21/openvpn/image-2.png","hash":"41657d6c3de1e0c3c7e2b830a2b67d38464b76bf","modified":1756363459098},{"_id":"public/2025/04/18/prometheus/image-13.png","hash":"c1a565035062ef229f3c25143ec3d19e63a42547","modified":1756363459098},{"_id":"public/2025/04/18/prometheus/image-16.png","hash":"d323cdda830c0b08502144608405b614b0f05057","modified":1756363459098},{"_id":"public/2025/04/18/prometheus/image-20.png","hash":"10020604c51337024ddf6059eb2246ad08a636cb","modified":1756363459098},{"_id":"public/2025/04/18/prometheus/image-22.png","hash":"916e40a625e46733c94949ba9d03c38e12b97d3e","modified":1756363459098},{"_id":"public/2025/04/18/prometheus/image-18.png","hash":"569c140190b5e14042742d39499e0c6e8325c760","modified":1756363459098},{"_id":"public/2025/04/18/prometheus/image.png","hash":"f8eea7cdc5be381d0a077c440e93976b98d68234","modified":1756363459098},{"_id":"public/2025/04/21/iptables防止ddos-cc/image.png","hash":"cd9360694e9b8593d5859daae8411bf3a0d9241f","modified":1756363459098},{"_id":"public/img/image-4.png","hash":"61753cd127b3a1cc66d49019e27b4c749987b74c","modified":1756363459098},{"_id":"public/2025/04/18/prometheus/image-1.png","hash":"d0efacc51df380c64b7093b60292391763fc9518","modified":1756363459098},{"_id":"public/2025/04/18/prometheus/image-21.png","hash":"b83bd7ceae3bd6f5f782689eda9eb2b67397554b","modified":1756363459098},{"_id":"public/2025/04/21/openvpn/image-1.png","hash":"d7d58c339c2c1b467afe1b0b3fdf42a9f1e88b29","modified":1756363459098},{"_id":"public/2025/04/18/prometheus/image-12.png","hash":"c29d63d28c0e12a61cb6543392c1743e6b3e10a0","modified":1756363459098},{"_id":"public/2025/04/27/alertmanager/image.png","hash":"df66cc343743094c3cd72bcc20295194d4e74253","modified":1756363459098},{"_id":"public/2025/04/18/prometheus/image-23.png","hash":"abcca34126a92233ebc44a1240a177fdf30e61b4","modified":1756363459098},{"_id":"public/2025/04/21/openvpn/image-3.png","hash":"6a1c126be932c31ae58921006dc3b7b5135bd883","modified":1756363459098},{"_id":"public/2025/04/18/prometheus/image-4.png","hash":"0c8126a6edf36927294024a8c777630756ad424f","modified":1756363459098},{"_id":"public/2025/04/18/prometheus/image-7.png","hash":"543c3694932046264d0f499c41612eb38f560796","modified":1756363459098},{"_id":"public/2025/04/18/prometheus/image-8.png","hash":"a0c677cb3c1a823b9bf8c2cd321541d92cd170f8","modified":1756363459098},{"_id":"public/2025/04/27/使用kubekey快速安装k8s/image.png","hash":"19fb427077c2b8e532d98df8086b67c48b88d23f","modified":1756363459098},{"_id":"public/img/img-4.png","hash":"ed2e6a5936b308caf72c51452a2bbf70e57b8f8a","modified":1756363459098},{"_id":"public/2025/04/18/prometheus/image-2.png","hash":"81d6dd4e194e9741d2cbd0da19824bfa75ed6b94","modified":1756363459098},{"_id":"public/2025/04/18/prometheus/image-5.png","hash":"d3e0cbd5bbf80d54ae281ab94ad32414001f8cf2","modified":1756363459098},{"_id":"public/2025/04/21/iptables防止ddos-cc/image-1.png","hash":"77cb4b5ee2d44f18ff4c79207e61918bcd1c7606","modified":1756363459098},{"_id":"public/2025/04/18/prometheus/image-3.png","hash":"56f3a0de7c38cdaace4b506df44f01316e1deb06","modified":1756363459098},{"_id":"public/2025/04/18/prometheus/image-15.png","hash":"3e32a57c4be073c3f9de706f7c34ad5baf1dffec","modified":1756363459098}],"Category":[{"name":"prometheus","_id":"cmev1ggag0004hllz24qufd0b"},{"name":"中间件","_id":"cmev1ggb7000bhllz19hzfzsh"},{"name":"linux","_id":"cmev1ggbt000jhllzgpb02b5v"},{"name":"k8s","_id":"cmev1ggc9000uhllz7hlqdn1a"},{"name":"python","_id":"cmev1ggcf0010hllzgh161sqg"},{"name":"db","_id":"cmev1ggdl001thllzehkb8cn8"}],"Data":[],"Page":[{"title":"404","date":"2018-09-30T09:25:30.000Z","type":"404","layout":"404","description":"Oops～，我崩溃了！找不到你想要的页面 :(","_content":"","source":"404/index.md","raw":"---\ntitle: 404\ndate: 2018-09-30 17:25:30\ntype: \"404\"\nlayout: \"404\"\ndescription: \"Oops～，我崩溃了！找不到你想要的页面 :(\"\n---\n","updated":"2025-08-28T06:39:18.051Z","path":"404/index.html","comments":1,"_id":"cmev1gg9i0000hllz2d8d416x","content":"","excerpt":"","more":""},{"title":"关于我","type":"about","date":"2025-04-14T07:39:26.000Z","_content":"**人生天地之间，若白驹之过隙，忽然而已。人终将会死去总想留下点什么痕迹，希望我的博客永存**<br>\n**地球很小 不要被人类所创造出来的规则消耗一生**<br> \n[宇宙居然如此浩荡！一个让你怀疑人生的视频！](https://www.bilibili.com/video/BV1Wx41147qg/)\n","source":"about/index.md","raw":"---\ntitle: 关于我\ntype: 'about'\ndate: 2025-04-14 15:39:26\n---\n**人生天地之间，若白驹之过隙，忽然而已。人终将会死去总想留下点什么痕迹，希望我的博客永存**<br>\n**地球很小 不要被人类所创造出来的规则消耗一生**<br> \n[宇宙居然如此浩荡！一个让你怀疑人生的视频！](https://www.bilibili.com/video/BV1Wx41147qg/)\n","updated":"2025-08-28T06:39:18.237Z","path":"about/index.html","comments":1,"layout":"page","_id":"cmev1gga60002hllzga9v6d82","content":"<p><strong>人生天地之间，若白驹之过隙，忽然而已。人终将会死去总想留下点什么痕迹，希望我的博客永存</strong><br><br><strong>地球很小 不要被人类所创造出来的规则消耗一生</strong><br><br><a href=\"https://www.bilibili.com/video/BV1Wx41147qg/\">宇宙居然如此浩荡！一个让你怀疑人生的视频！</a></p>\n","excerpt":"","more":"<p><strong>人生天地之间，若白驹之过隙，忽然而已。人终将会死去总想留下点什么痕迹，希望我的博客永存</strong><br><br><strong>地球很小 不要被人类所创造出来的规则消耗一生</strong><br><br><a href=\"https://www.bilibili.com/video/BV1Wx41147qg/\">宇宙居然如此浩荡！一个让你怀疑人生的视频！</a></p>\n"},{"title":"分类","date":"2025-04-14T06:03:07.000Z","type":"categories","limit":{"value":2},"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2025-04-14 14:03:07\ntype: \"categories\"\nlimit:\n  value: 2\n---\n","updated":"2025-08-28T06:39:18.237Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cmev1ggao0005hllzhsl5e1h5","content":"","excerpt":"","more":""},{"title":"tags","type":"tags","date":"2025-04-14T07:39:26.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ntype: 'tags'\ndate: 2025-04-14 15:39:26\n---\n","updated":"2025-08-28T06:39:18.237Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cmev1ggaz0008hllz7cym3cvr","content":"","excerpt":"","more":""}],"Post":[{"title":"alertmanager","date":"2025-04-27T08:06:39.000Z","_content":"# 安装\n```shell\ncurl -SL https://github.com/docker/compose/releases/download/v2.30.3/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose\n#将可执行权限赋予安装目标路径中的独立二进制文件\nsudo chmod +x /usr/local/bin/docker-compose\nsudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose\n\nversion: '3'\nservices:\n  alertmanager:\n    image: registry.cn-hangzhou.aliyuncs.com/lky-deploy/alertmanager:v0.28.1\n    ports:\n      - \"9093:9093\"\n      - \"9094:9094\"\n    volumes:\n      - ./config:/etc/alertmanager\n      - alertmanager_data:/alertmanager\n    command:\n      - '--config.file=/etc/alertmanager/alertmanager.yml'\n      - '--storage.path=/alertmanager'\n      - '--cluster.advertise-address=alertmanager:9094'\n    networks:\n      - monitoring-net\n\nvolumes:\n  alertmanager_data:\n\nnetworks:\n  monitoring-net:\n    driver: bridge\n\n```\n# 配置文件解读\n\n```\nglobal: # 即为全局设置,在Alertmanager配置文件中,只要全局设置配置了的选项,全部为公共设置,可以让其他设置继承,作为默认值,可以子参数中覆盖其设置。\n  resolve_timeout: 1m # 用于设置处理超时时间,也是生命警报状态为解决的时间,这个时间会直接影响到警报恢复的通知时间,需要自行结合实际生产场景来设置主机的恢复时间,默认是5分钟。\n  # 整合邮件\n  smtp_smarthost: 'smtp.qq.com:465' # 邮箱smtp服务器\n  smtp_from: '1451578387@qq.com' # 发件用的邮箱地址\n  smtp_auth_username: '1451578387@qq.com' # 发件人账号\n  smtp_auth_password: 'dkuuifhdskaduasdsb' # 发件人邮箱密码\n  smtp_require_tls: false # 不进行tls验证\nroute: # 路由分组\n  group_by: ['alertname'] # 报警分组\n  group_wait: 10s # 组内等待时间,同一分组内收到第一个告警等待多久开始发送,目标是为了同组消息同时发送,不占用告警信息,默认30s。\n  group_interval: 10s # 当组内已经发送过一个告警,组内若有新增告警需要等待的时间,默认为5m,这条要确定组内信息是影响同一业务才能设置,若分组不合理,可能导致告警延迟,造成影响。\n  repeat_interval: 1h # 告警已经发送,且无新增告警,若重复告警需要间隔多久,默认4h,属于重复告警,时间间隔应根据告警的严重程度来设置。\n  receiver: 'webhook' # 告警的接收者,需要和 receivers[n].name 的值一致。\n  # 上面所有的属性都由所有子路由继承,并且可以在每个子路由上进行覆盖。\n  # 当报警信息中标签匹配到team:node时会使用email发送报警,否则使用webhook。\n templates:\n- '/etc/alertmanager/config/*.tmpl'\n# route根路由,该模块用于该根路由下的节点及子路由routes的定义,子树节点如果不对相关配置进行配置,则默认会从父路由树继承该配置选项。每一条告警都要进入route,即要求配置选项group_by的值能够匹配到每一条告警的至少一个labelkey(即通过POST请求向altermanager服务接口所发送告警的labels项所携带的<labelname>),告警进入到route后,将会根据子路由routes节点中的配置项match_re或者match来确定能进入该子路由节点的告警(由在match_re或者match下配置的labelkey:labelvalue是否为告警labels的子集决定,是的话则会进入该子路由节点,否则不能接收进入该子路由节点)。\nroute:\n  # 例如所有labelkey:labelvalue含cluster=A及altertname=LatencyHigh的labelkey的告警都会被归入单一组中\n  group_by: ['job', 'altername', 'cluster', 'service','severity']\n  # 若一组新的告警产生,则会等group_wait后再发送通知,该功能主要用于当告警在很短时间内接连产生时,在group_wait内合并为单一的告警后再发送\n  group_wait: 30s\n  # 再次告警时间间隔\n  group_interval: 5m\n  # 如果一条告警通知已成功发送,且在间隔repeat_interval后,该告警仍然未被设置为resolved,则会再次发送该告警通知\n  repeat_interval: 12h\n  # 默认告警通知接收者,凡未被匹配进入各子路由节点的告警均被发送到此接收者\n  receiver: 'wechat'\n  # 上述route的配置会被传递给子路由节点,子路由节点进行重新配置才会被覆盖\n  # 子路由树\n  routes:\n  # 该配置选项使用正则表达式来匹配告警的labels,以确定能否进入该子路由树\n  # match_re和match均用于匹配labelkey为service,labelvalue分别为指定值的告警,被匹配到的告警会将通知发送到对应的receiver\n  - match_re:\n      service: ^(foo1|foo2|baz)$\n    receiver: 'wechat'\n    # 在带有service标签的告警同时有severity标签时,他可以有自己的子路由,同时具有severity != critical的告警则被发送给接收者team-ops-mails,对severity == critical的告警则被发送到对应的接收者即team-ops-pager\n    routes:\n    - match:\n        severity: critical\n      receiver: 'wechat'\n  # 比如关于数据库服务的告警,如果子路由没有匹配到相应的owner标签,则都默认由team-DB-pager接收\n  - match:\n      service: database\n    receiver: 'wechat'\n  # 我们也可以先根据标签service:database将数据库服务告警过滤出来,然后进一步将所有同时带labelkey为database\n  - match:\n      severity: critical\n    receiver: 'wechat'\n# 抑制规则,当出现critical(关键的)告警时忽略warning。\n# 下面的这段配置是指如果出现标签为severity=critical的告警,则抑制severity=warning的告警\ninhibit_rules:\n- source_match:\n    severity: 'critical'\n  target_match:\n    severity: 'warning'\n  # 如果警报名称相同,则应用抑制。\n  # alertname、cluster和service对应的标签值需要相等\n  equal: ['alertname', 'cluster', 'service']\n# 收件人配置\nreceivers:\n- name: 'team-ops-mails'\n  email_configs:\n  - to: 'dukuan@xxx.com'\n- name: 'team-X-pager'\n  email_configs:\n  - to: 'team-X+alerts-critical@example.org'\n  pagerduty_configs:\n  - service_key: <team-X-key>\n- name: 'team-Y-mails'\n  email_configs:\n  - to: 'team-Y+alerts@example.org'\n- name: 'webhook'\n  webhook_configs:\n  - url: http://127.0.0.1:8060/dingtalk/webhook1/send\n    send_resolved: true\n```\n## 分组和路由\n>1. **路由**<br>\nmatch（精确匹配）match_re（正则表达式匹配）\n>每一个告警都会从配置文件中顶级的route进入路由树，需要注意的是顶级的route必须匹配所有告警(即不能有任何的匹配设置match和match_re)，每一个路由都可以定义自己的接受人以及匹配规则。默认情况下，告警进入到顶级route后会遍历所有的子节点，直到找到最深的匹配route，并将告警发送到该route定义的receiver中。但如果route中设置continue的值为false，那么告警在匹配到第一个子节点之后就直接停止。如果continue为true，报警则会继续进行后续子节点的匹配。如果当前告警匹配不到任何的子节点，那该告警将会基于当前路由节点的接收器配置方式进行处理\n>2. **分组**<br>\n>告警通知进行分组，将多条告警合合并为一个通知。这里我们可以使用group_by来定义分组规则。基于告警中包含的标签，如果满足group_by中定义标签名称，那么这些告警将会合并为一个通知发送给接收器。\n有的时候为了能够一次性收集和发送更多的相关信息时，可以通过group_wait参数设置等待时间，如果在等待时间内当前group接收到了新的告警，这些告警将会合并为一个通知向receiver发送\n\n```\nroute:\n  group_by: ['alertname','team']   #在这里添加team匹配的标签\n  group_wait: 5s\n  group_interval: 5s\n  repeat_interval: 5m\n  # 默认发给\"sre_system\"组用户\n  receiver: 'sre_system'\n  continue: false\n  # 配置子路由\n  routes:\n    - receiver: 'sre_dba'\n      match_re:\n        job: test\n      # 建议将continue的值设置为true，表示当前的条件是否匹配，都将继续向下匹配规则\n      # 这样做的目的是将消息发给最后的系统组(sre_system)\n      continue: true\n==================================================================\n#rule.yml\n- name: grafana\n  rules:\n  - alert: node           #这个相当于alertname的值,与之前匹配的相同\n    expr: up{job=\"grafana\"} == 0\n    for: 10s                  \n    labels:                   \n      severity: 1 \n      job: test  # 对应上面的 match_re\n      team: grafana        #这里标签设置不同的一会用\n    annotations:              \n      summary: \"{{ \\$labels.instance }} 已停止运行超过 15s\"\n      description: hello world\n\n \nalertname 等于 node 如果相同报警会一起发送\nteam 等于 grafana \n```\n## 抑制规则\n```\ninhibit_rules:\n  - source_match:\n      severity: '告警'\n    target_match:\n      severity: '提示'\n    #equal: ['type','test'] 要求 type 和 test签均相同\n     equal: ['type']type的值必须一样\n当匹配到 告警 时就会抑制提示的告警通知并检查他们是否来自于同个\nssl（即ssl标签的值相同抑制才会生效）\n当子路由匹配到不同的 severity 时就会将消息发往不同的 receiver，当子路由无法匹配到时，消息会默认发往根路由的 receiver，因此，无论是否匹配到子路由规则，消息都会发往根路由的 receiver\n对应报警规则配置为\ngroups:\n- name: node-alerts\n  rules:\n  - alert: HighNodeCPU\n    expr: (1 - avg(rate(node_cpu_seconds_total{mode=\"idle\"}[5m])) by (instance)) * 100 > 80\n    for: 5m\n    labels:\n      severity: \"告警\"\n      type: ssl\n    annotations:\n      summary: \"高节点CPU使用率 ({{ $labels.instance }})\"\n      description: \"节点 {{ $labels.instance }} CPU 使用率超过 80% 已持续 5 分钟\"\n\n- name: cluster-alerts\n  rules:\n  - alert: ClusterWideCPUProblem\n    expr: |\n      sum( (1 - avg(rate(node_cpu_seconds_total{mode=\"idle\"}[5m])) by (instance)) * 100 > 80 )\n      /\n      count( (1 - avg(rate(node_cpu_seconds_total{mode=\"idle\"}[5m])) by (instance)) )\n      * 100 > 50\n    for: 10m\n    labels:\n      severity: \"提示\"\n      type: ssl\n    annotations:\n      summary: \"集群级CPU问题\"\n      description: \"超过 50% 的节点持续高CPU使用率达 10 分钟\"\n```\n\n# alertmanager集成三方告警\n>原生alertmanager只有邮件和webhook告警；Alertmanager 的原生 Webhook 告警是一种通过 HTTP POST 请求将告警信息发送到自定义接口（Webhook 接收端）的机制；所以要对接需要开发者自行开发，这里推荐两个现成的工具来对接\n\n## PrometheusAlert使用\n>Prometheus Alert 是开源的运维告警中心消息转发系统，支持主流的监控系统 Prometheus，日志系统 Graylog 和数据可视化系统 Grafana 发出的预警消息。通知渠道支持钉钉、微信、华为云短信、腾讯云短信、腾讯云电话、阿里云短信、阿里云电话等等\n```shell\nwget https://github.com/feiyu563/PrometheusAlert/releases/download/v4.8.1/linux.zip\nchmod +x PrometheusAlert\n启动 nohup ./PrometheusAlert & 后台运行\n\n#alertmanager.yml配置集成PrometheusAlert；格式可以登录PrometheusAlert查看\nreceivers:\n- name: 'web.hook.prometheusalert'\n  webhook_configs:\n  - url: 'http://192.168.197.142:8080/prometheusalert?type=wx&tpl=prometheus-wx&wxurl=https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=53fdb356-4446-42e5-b8bd-f7da63bcfe76'\n```\n![alt text](image.png)\n\n\n## prometheus-webhook-dingtalk使用\n>Prometheus 的Alertmanager自身不支持钉钉报警，需要通过插件的方式来达到报警条件\n### 安装\n```shell\nwget https://github.com/timonwong/prometheus-webhook-dingtalk/releases/download/v2.1.0/prometheus-webhook-dingtalk-2.1.0.linux-amd64.tar.gz\n\ntar zxf prometheus-webhook-dingtalk-2.1.0.linux-amd64.tar.gz \nmv prometheus-webhook-dingtalk-2.1.0.linux-amd64 /usr/local/prometheus-webhook-dingtalk\ncat > /usr/lib/systemd/system/webhook-dingtalk.service << EOF\n[Unit]\nDescription=prometheus-webhook-dingtalk\nDocumentation=https://github.com/timonwong/prometheus-webhook-dingtalk\nAfter=network.target\n\n[Service]\nUser=root\nGroup=root\nExecStart=/usr/local/prometheus-webhook-dingtalk/prometheus-webhook-dingtalk  --config.file=/usr/local/prometheus-webhook-dingtalk/config.yml\nExecReload=/bin/kill -HUP $MAINPID\nKillMode=process\nRestart=on-failure\n\n[Install]\nWantedBy=multi-user.target\nEOF\n#集成模版/usr/local/prometheus-webhook-dingtalk/config.yml\ntemplates:\n    - /usr/local/prometheus/webhook-dingtalk/template.tmpl\ntargets:\n  webhook1:\n    url: https://oapi.dingtalk.com/robot/send?access_token=9ac4354ab7c8\n\n#alertmanager配置发送给dingtalk插件\nreceivers:\n  - name: 'email'\n    email_configs:\n      - to: 'xxxxx@163.com' #指定发送给谁\n  - name: 'webhook1'\n    webhook_configs:\n      - send_resolved: false\n        url: http://localhost:8060/dingtalk/webhook1/send\n```\n\n### 报警内容模版\n```config\nvim /usr/local/prometheus/webhook-dingtalk/template.tmpl\n\n{{ define \"__subject\" }}\n[{{ .Status | toUpper }}{{ if eq .Status \"firing\" }}:{{ .Alerts.Firing | len }}{{ end }}]\n{{ end }}\n \n \n{{ define \"__alert_list\" }}{{ range . }}\n---\n{{ if .Labels.owner }}@{{ .Labels.owner }}{{ end }}\n \n**告警主题**: {{ .Annotations.summary }}\n\n**告警类型**: {{ .Labels.alertname }}\n \n**告警级别**: {{ .Labels.severity }} \n \n**告警主机**: {{ .Labels.instance }} \n \n**告警信息**: {{ index .Annotations \"description\" }}\n \n**告警时间**: {{ dateInZone \"2006.01.02 15:04:05\" (.StartsAt) \"Asia/Shanghai\" }}\n{{ end }}{{ end }}\n \n{{ define \"__resolved_list\" }}{{ range . }}\n---\n{{ if .Labels.owner }}@{{ .Labels.owner }}{{ end }}\n\n**告警主题**: {{ .Annotations.summary }}\n\n**告警类型**: {{ .Labels.alertname }} \n \n**告警级别**: {{ .Labels.severity }}\n \n**告警主机**: {{ .Labels.instance }}\n \n**告警信息**: {{ index .Annotations \"description\" }}\n \n**告警时间**: {{ dateInZone \"2006.01.02 15:04:05\" (.StartsAt) \"Asia/Shanghai\" }}\n \n**恢复时间**: {{ dateInZone \"2006.01.02 15:04:05\" (.EndsAt) \"Asia/Shanghai\" }}\n{{ end }}{{ end }}\n \n \n{{ define \"default.title\" }}\n{{ template \"__subject\" . }}\n{{ end }}\n \n{{ define \"default.content\" }}\n{{ if gt (len .Alerts.Firing) 0 }}\n**====侦测到{{ .Alerts.Firing | len  }}个故障====**\n{{ template \"__alert_list\" .Alerts.Firing }}\n---\n{{ end }}\n \n{{ if gt (len .Alerts.Resolved) 0 }}\n**====恢复{{ .Alerts.Resolved | len  }}个故障====**\n{{ template \"__resolved_list\" .Alerts.Resolved }}\n{{ end }}\n{{ end }}\n \n \n{{ define \"ding.link.title\" }}{{ template \"default.title\" . }}{{ end }}\n{{ define \"ding.link.content\" }}{{ template \"default.content\" . }}{{ end }}\n{{ template \"default.title\" . }}\n{{ template \"default.content\" . }}\n```\n### 报警规则示例\n```config\nmkdir /usr/local/prometheus/prometheus/rule\nvim /usr/local/prometheus/prometheus/rule/node_exporter.yml\n\ngroups:\n- name: 服务器资源监控\n  rules:\n  - alert: 内存使用率过高\n    expr: 100 - (node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes) * 100 > 80\n    for: 3m \n    labels:\n      severity: 严重告警\n    annotations:\n      summary: \"{{ $labels.instance }} 内存使用率过高, 请尽快处理！\"\n      description: \"{{ $labels.instance }}内存使用率超过80%,当前使用率{{ $value }}%.\"\n          \n  - alert: 服务器宕机\n    expr: up == 0\n    for: 1s\n    labels:\n      severity: 严重告警\n    annotations:\n      summary: \"{{$labels.instance}} 服务器宕机, 请尽快处理!\"\n      description: \"{{$labels.instance}} 服务器延时超过3分钟,当前状态{{ $value }}. \"\n \n  - alert: CPU高负荷\n    expr: 100 - (avg by (instance,job)(irate(node_cpu_seconds_total{mode=\"idle\"}[5m])) * 100) > 90\n    for: 5m\n    labels:\n      severity: 严重告警\n    annotations:\n      summary: \"{{$labels.instance}} CPU使用率过高,请尽快处理！\"\n      description: \"{{$labels.instance}} CPU使用大于90%,当前使用率{{ $value }}%. \"\n      \n  - alert: 磁盘IO性能\n    expr: avg(irate(node_disk_io_time_seconds_total[1m])) by(instance,job)* 100 > 90\n    for: 5m\n    labels:\n      severity: 严重告警\n    annotations:\n      summary: \"{{$labels.instance}} 流入磁盘IO使用率过高,请尽快处理！\"\n      description: \"{{$labels.instance}} 流入磁盘IO大于90%,当前使用率{{ $value }}%.\"\n \n \n  - alert: 网络流入\n    expr: ((sum(rate (node_network_receive_bytes_total{device!~'tap.*|veth.*|br.*|docker.*|virbr*|lo*'}[5m])) by (instance,job)) / 100) > 102400\n    for: 5m\n    labels:\n      severity: 严重告警\n    annotations:\n      summary: \"{{$labels.instance}} 流入网络带宽过高，请尽快处理！\"\n      description: \"{{$labels.instance}} 流入网络带宽持续5分钟高于100M. RX带宽使用量{{$value}}.\"\n \n  - alert: 网络流出\n    expr: ((sum(rate (node_network_transmit_bytes_total{device!~'tap.*|veth.*|br.*|docker.*|virbr*|lo*'}[5m])) by (instance,job)) / 100) > 102400\n    for: 5m\n    labels:\n      severity: 严重告警\n    annotations:\n      summary: \"{{$labels.instance}} 流出网络带宽过高,请尽快处理！\"\n      description: \"{{$labels.instance}} 流出网络带宽持续5分钟高于100M. RX带宽使用量{$value}}.\"\n  \n  - alert: TCP连接数\n    expr: node_netstat_Tcp_CurrEstab > 10000\n    for: 2m\n    labels:\n      severity: 严重告警\n    annotations:\n      summary: \" TCP_ESTABLISHED过高！\"\n      description: \"{{$labels.instance}} TCP_ESTABLISHED大于100%,当前使用率{{ $value }}%.\"\n \n  - alert: 磁盘容量\n    expr: 100-(node_filesystem_free_bytes{fstype=~\"ext4|xfs\"}/node_filesystem_size_bytes {fstype=~\"ext4|xfs\"}*100) > 90\n    for: 1m\n    labels:\n      severity: 严重告警\n    annotations:\n      summary: \"{{$labels.mountpoint}} 磁盘分区使用率过高，请尽快处理！\"\n      description: \"{{$labels.instance}} 磁盘分区使用大于90%，当前使用率{{ $value }}%.\"\n```\n","source":"_posts/alertmanager.md","raw":"---\ntitle: alertmanager\ndate: 2025-04-27 16:06:39\ntags:\ncategories: prometheus\n---\n# 安装\n```shell\ncurl -SL https://github.com/docker/compose/releases/download/v2.30.3/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose\n#将可执行权限赋予安装目标路径中的独立二进制文件\nsudo chmod +x /usr/local/bin/docker-compose\nsudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose\n\nversion: '3'\nservices:\n  alertmanager:\n    image: registry.cn-hangzhou.aliyuncs.com/lky-deploy/alertmanager:v0.28.1\n    ports:\n      - \"9093:9093\"\n      - \"9094:9094\"\n    volumes:\n      - ./config:/etc/alertmanager\n      - alertmanager_data:/alertmanager\n    command:\n      - '--config.file=/etc/alertmanager/alertmanager.yml'\n      - '--storage.path=/alertmanager'\n      - '--cluster.advertise-address=alertmanager:9094'\n    networks:\n      - monitoring-net\n\nvolumes:\n  alertmanager_data:\n\nnetworks:\n  monitoring-net:\n    driver: bridge\n\n```\n# 配置文件解读\n\n```\nglobal: # 即为全局设置,在Alertmanager配置文件中,只要全局设置配置了的选项,全部为公共设置,可以让其他设置继承,作为默认值,可以子参数中覆盖其设置。\n  resolve_timeout: 1m # 用于设置处理超时时间,也是生命警报状态为解决的时间,这个时间会直接影响到警报恢复的通知时间,需要自行结合实际生产场景来设置主机的恢复时间,默认是5分钟。\n  # 整合邮件\n  smtp_smarthost: 'smtp.qq.com:465' # 邮箱smtp服务器\n  smtp_from: '1451578387@qq.com' # 发件用的邮箱地址\n  smtp_auth_username: '1451578387@qq.com' # 发件人账号\n  smtp_auth_password: 'dkuuifhdskaduasdsb' # 发件人邮箱密码\n  smtp_require_tls: false # 不进行tls验证\nroute: # 路由分组\n  group_by: ['alertname'] # 报警分组\n  group_wait: 10s # 组内等待时间,同一分组内收到第一个告警等待多久开始发送,目标是为了同组消息同时发送,不占用告警信息,默认30s。\n  group_interval: 10s # 当组内已经发送过一个告警,组内若有新增告警需要等待的时间,默认为5m,这条要确定组内信息是影响同一业务才能设置,若分组不合理,可能导致告警延迟,造成影响。\n  repeat_interval: 1h # 告警已经发送,且无新增告警,若重复告警需要间隔多久,默认4h,属于重复告警,时间间隔应根据告警的严重程度来设置。\n  receiver: 'webhook' # 告警的接收者,需要和 receivers[n].name 的值一致。\n  # 上面所有的属性都由所有子路由继承,并且可以在每个子路由上进行覆盖。\n  # 当报警信息中标签匹配到team:node时会使用email发送报警,否则使用webhook。\n templates:\n- '/etc/alertmanager/config/*.tmpl'\n# route根路由,该模块用于该根路由下的节点及子路由routes的定义,子树节点如果不对相关配置进行配置,则默认会从父路由树继承该配置选项。每一条告警都要进入route,即要求配置选项group_by的值能够匹配到每一条告警的至少一个labelkey(即通过POST请求向altermanager服务接口所发送告警的labels项所携带的<labelname>),告警进入到route后,将会根据子路由routes节点中的配置项match_re或者match来确定能进入该子路由节点的告警(由在match_re或者match下配置的labelkey:labelvalue是否为告警labels的子集决定,是的话则会进入该子路由节点,否则不能接收进入该子路由节点)。\nroute:\n  # 例如所有labelkey:labelvalue含cluster=A及altertname=LatencyHigh的labelkey的告警都会被归入单一组中\n  group_by: ['job', 'altername', 'cluster', 'service','severity']\n  # 若一组新的告警产生,则会等group_wait后再发送通知,该功能主要用于当告警在很短时间内接连产生时,在group_wait内合并为单一的告警后再发送\n  group_wait: 30s\n  # 再次告警时间间隔\n  group_interval: 5m\n  # 如果一条告警通知已成功发送,且在间隔repeat_interval后,该告警仍然未被设置为resolved,则会再次发送该告警通知\n  repeat_interval: 12h\n  # 默认告警通知接收者,凡未被匹配进入各子路由节点的告警均被发送到此接收者\n  receiver: 'wechat'\n  # 上述route的配置会被传递给子路由节点,子路由节点进行重新配置才会被覆盖\n  # 子路由树\n  routes:\n  # 该配置选项使用正则表达式来匹配告警的labels,以确定能否进入该子路由树\n  # match_re和match均用于匹配labelkey为service,labelvalue分别为指定值的告警,被匹配到的告警会将通知发送到对应的receiver\n  - match_re:\n      service: ^(foo1|foo2|baz)$\n    receiver: 'wechat'\n    # 在带有service标签的告警同时有severity标签时,他可以有自己的子路由,同时具有severity != critical的告警则被发送给接收者team-ops-mails,对severity == critical的告警则被发送到对应的接收者即team-ops-pager\n    routes:\n    - match:\n        severity: critical\n      receiver: 'wechat'\n  # 比如关于数据库服务的告警,如果子路由没有匹配到相应的owner标签,则都默认由team-DB-pager接收\n  - match:\n      service: database\n    receiver: 'wechat'\n  # 我们也可以先根据标签service:database将数据库服务告警过滤出来,然后进一步将所有同时带labelkey为database\n  - match:\n      severity: critical\n    receiver: 'wechat'\n# 抑制规则,当出现critical(关键的)告警时忽略warning。\n# 下面的这段配置是指如果出现标签为severity=critical的告警,则抑制severity=warning的告警\ninhibit_rules:\n- source_match:\n    severity: 'critical'\n  target_match:\n    severity: 'warning'\n  # 如果警报名称相同,则应用抑制。\n  # alertname、cluster和service对应的标签值需要相等\n  equal: ['alertname', 'cluster', 'service']\n# 收件人配置\nreceivers:\n- name: 'team-ops-mails'\n  email_configs:\n  - to: 'dukuan@xxx.com'\n- name: 'team-X-pager'\n  email_configs:\n  - to: 'team-X+alerts-critical@example.org'\n  pagerduty_configs:\n  - service_key: <team-X-key>\n- name: 'team-Y-mails'\n  email_configs:\n  - to: 'team-Y+alerts@example.org'\n- name: 'webhook'\n  webhook_configs:\n  - url: http://127.0.0.1:8060/dingtalk/webhook1/send\n    send_resolved: true\n```\n## 分组和路由\n>1. **路由**<br>\nmatch（精确匹配）match_re（正则表达式匹配）\n>每一个告警都会从配置文件中顶级的route进入路由树，需要注意的是顶级的route必须匹配所有告警(即不能有任何的匹配设置match和match_re)，每一个路由都可以定义自己的接受人以及匹配规则。默认情况下，告警进入到顶级route后会遍历所有的子节点，直到找到最深的匹配route，并将告警发送到该route定义的receiver中。但如果route中设置continue的值为false，那么告警在匹配到第一个子节点之后就直接停止。如果continue为true，报警则会继续进行后续子节点的匹配。如果当前告警匹配不到任何的子节点，那该告警将会基于当前路由节点的接收器配置方式进行处理\n>2. **分组**<br>\n>告警通知进行分组，将多条告警合合并为一个通知。这里我们可以使用group_by来定义分组规则。基于告警中包含的标签，如果满足group_by中定义标签名称，那么这些告警将会合并为一个通知发送给接收器。\n有的时候为了能够一次性收集和发送更多的相关信息时，可以通过group_wait参数设置等待时间，如果在等待时间内当前group接收到了新的告警，这些告警将会合并为一个通知向receiver发送\n\n```\nroute:\n  group_by: ['alertname','team']   #在这里添加team匹配的标签\n  group_wait: 5s\n  group_interval: 5s\n  repeat_interval: 5m\n  # 默认发给\"sre_system\"组用户\n  receiver: 'sre_system'\n  continue: false\n  # 配置子路由\n  routes:\n    - receiver: 'sre_dba'\n      match_re:\n        job: test\n      # 建议将continue的值设置为true，表示当前的条件是否匹配，都将继续向下匹配规则\n      # 这样做的目的是将消息发给最后的系统组(sre_system)\n      continue: true\n==================================================================\n#rule.yml\n- name: grafana\n  rules:\n  - alert: node           #这个相当于alertname的值,与之前匹配的相同\n    expr: up{job=\"grafana\"} == 0\n    for: 10s                  \n    labels:                   \n      severity: 1 \n      job: test  # 对应上面的 match_re\n      team: grafana        #这里标签设置不同的一会用\n    annotations:              \n      summary: \"{{ \\$labels.instance }} 已停止运行超过 15s\"\n      description: hello world\n\n \nalertname 等于 node 如果相同报警会一起发送\nteam 等于 grafana \n```\n## 抑制规则\n```\ninhibit_rules:\n  - source_match:\n      severity: '告警'\n    target_match:\n      severity: '提示'\n    #equal: ['type','test'] 要求 type 和 test签均相同\n     equal: ['type']type的值必须一样\n当匹配到 告警 时就会抑制提示的告警通知并检查他们是否来自于同个\nssl（即ssl标签的值相同抑制才会生效）\n当子路由匹配到不同的 severity 时就会将消息发往不同的 receiver，当子路由无法匹配到时，消息会默认发往根路由的 receiver，因此，无论是否匹配到子路由规则，消息都会发往根路由的 receiver\n对应报警规则配置为\ngroups:\n- name: node-alerts\n  rules:\n  - alert: HighNodeCPU\n    expr: (1 - avg(rate(node_cpu_seconds_total{mode=\"idle\"}[5m])) by (instance)) * 100 > 80\n    for: 5m\n    labels:\n      severity: \"告警\"\n      type: ssl\n    annotations:\n      summary: \"高节点CPU使用率 ({{ $labels.instance }})\"\n      description: \"节点 {{ $labels.instance }} CPU 使用率超过 80% 已持续 5 分钟\"\n\n- name: cluster-alerts\n  rules:\n  - alert: ClusterWideCPUProblem\n    expr: |\n      sum( (1 - avg(rate(node_cpu_seconds_total{mode=\"idle\"}[5m])) by (instance)) * 100 > 80 )\n      /\n      count( (1 - avg(rate(node_cpu_seconds_total{mode=\"idle\"}[5m])) by (instance)) )\n      * 100 > 50\n    for: 10m\n    labels:\n      severity: \"提示\"\n      type: ssl\n    annotations:\n      summary: \"集群级CPU问题\"\n      description: \"超过 50% 的节点持续高CPU使用率达 10 分钟\"\n```\n\n# alertmanager集成三方告警\n>原生alertmanager只有邮件和webhook告警；Alertmanager 的原生 Webhook 告警是一种通过 HTTP POST 请求将告警信息发送到自定义接口（Webhook 接收端）的机制；所以要对接需要开发者自行开发，这里推荐两个现成的工具来对接\n\n## PrometheusAlert使用\n>Prometheus Alert 是开源的运维告警中心消息转发系统，支持主流的监控系统 Prometheus，日志系统 Graylog 和数据可视化系统 Grafana 发出的预警消息。通知渠道支持钉钉、微信、华为云短信、腾讯云短信、腾讯云电话、阿里云短信、阿里云电话等等\n```shell\nwget https://github.com/feiyu563/PrometheusAlert/releases/download/v4.8.1/linux.zip\nchmod +x PrometheusAlert\n启动 nohup ./PrometheusAlert & 后台运行\n\n#alertmanager.yml配置集成PrometheusAlert；格式可以登录PrometheusAlert查看\nreceivers:\n- name: 'web.hook.prometheusalert'\n  webhook_configs:\n  - url: 'http://192.168.197.142:8080/prometheusalert?type=wx&tpl=prometheus-wx&wxurl=https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=53fdb356-4446-42e5-b8bd-f7da63bcfe76'\n```\n![alt text](image.png)\n\n\n## prometheus-webhook-dingtalk使用\n>Prometheus 的Alertmanager自身不支持钉钉报警，需要通过插件的方式来达到报警条件\n### 安装\n```shell\nwget https://github.com/timonwong/prometheus-webhook-dingtalk/releases/download/v2.1.0/prometheus-webhook-dingtalk-2.1.0.linux-amd64.tar.gz\n\ntar zxf prometheus-webhook-dingtalk-2.1.0.linux-amd64.tar.gz \nmv prometheus-webhook-dingtalk-2.1.0.linux-amd64 /usr/local/prometheus-webhook-dingtalk\ncat > /usr/lib/systemd/system/webhook-dingtalk.service << EOF\n[Unit]\nDescription=prometheus-webhook-dingtalk\nDocumentation=https://github.com/timonwong/prometheus-webhook-dingtalk\nAfter=network.target\n\n[Service]\nUser=root\nGroup=root\nExecStart=/usr/local/prometheus-webhook-dingtalk/prometheus-webhook-dingtalk  --config.file=/usr/local/prometheus-webhook-dingtalk/config.yml\nExecReload=/bin/kill -HUP $MAINPID\nKillMode=process\nRestart=on-failure\n\n[Install]\nWantedBy=multi-user.target\nEOF\n#集成模版/usr/local/prometheus-webhook-dingtalk/config.yml\ntemplates:\n    - /usr/local/prometheus/webhook-dingtalk/template.tmpl\ntargets:\n  webhook1:\n    url: https://oapi.dingtalk.com/robot/send?access_token=9ac4354ab7c8\n\n#alertmanager配置发送给dingtalk插件\nreceivers:\n  - name: 'email'\n    email_configs:\n      - to: 'xxxxx@163.com' #指定发送给谁\n  - name: 'webhook1'\n    webhook_configs:\n      - send_resolved: false\n        url: http://localhost:8060/dingtalk/webhook1/send\n```\n\n### 报警内容模版\n```config\nvim /usr/local/prometheus/webhook-dingtalk/template.tmpl\n\n{{ define \"__subject\" }}\n[{{ .Status | toUpper }}{{ if eq .Status \"firing\" }}:{{ .Alerts.Firing | len }}{{ end }}]\n{{ end }}\n \n \n{{ define \"__alert_list\" }}{{ range . }}\n---\n{{ if .Labels.owner }}@{{ .Labels.owner }}{{ end }}\n \n**告警主题**: {{ .Annotations.summary }}\n\n**告警类型**: {{ .Labels.alertname }}\n \n**告警级别**: {{ .Labels.severity }} \n \n**告警主机**: {{ .Labels.instance }} \n \n**告警信息**: {{ index .Annotations \"description\" }}\n \n**告警时间**: {{ dateInZone \"2006.01.02 15:04:05\" (.StartsAt) \"Asia/Shanghai\" }}\n{{ end }}{{ end }}\n \n{{ define \"__resolved_list\" }}{{ range . }}\n---\n{{ if .Labels.owner }}@{{ .Labels.owner }}{{ end }}\n\n**告警主题**: {{ .Annotations.summary }}\n\n**告警类型**: {{ .Labels.alertname }} \n \n**告警级别**: {{ .Labels.severity }}\n \n**告警主机**: {{ .Labels.instance }}\n \n**告警信息**: {{ index .Annotations \"description\" }}\n \n**告警时间**: {{ dateInZone \"2006.01.02 15:04:05\" (.StartsAt) \"Asia/Shanghai\" }}\n \n**恢复时间**: {{ dateInZone \"2006.01.02 15:04:05\" (.EndsAt) \"Asia/Shanghai\" }}\n{{ end }}{{ end }}\n \n \n{{ define \"default.title\" }}\n{{ template \"__subject\" . }}\n{{ end }}\n \n{{ define \"default.content\" }}\n{{ if gt (len .Alerts.Firing) 0 }}\n**====侦测到{{ .Alerts.Firing | len  }}个故障====**\n{{ template \"__alert_list\" .Alerts.Firing }}\n---\n{{ end }}\n \n{{ if gt (len .Alerts.Resolved) 0 }}\n**====恢复{{ .Alerts.Resolved | len  }}个故障====**\n{{ template \"__resolved_list\" .Alerts.Resolved }}\n{{ end }}\n{{ end }}\n \n \n{{ define \"ding.link.title\" }}{{ template \"default.title\" . }}{{ end }}\n{{ define \"ding.link.content\" }}{{ template \"default.content\" . }}{{ end }}\n{{ template \"default.title\" . }}\n{{ template \"default.content\" . }}\n```\n### 报警规则示例\n```config\nmkdir /usr/local/prometheus/prometheus/rule\nvim /usr/local/prometheus/prometheus/rule/node_exporter.yml\n\ngroups:\n- name: 服务器资源监控\n  rules:\n  - alert: 内存使用率过高\n    expr: 100 - (node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes) * 100 > 80\n    for: 3m \n    labels:\n      severity: 严重告警\n    annotations:\n      summary: \"{{ $labels.instance }} 内存使用率过高, 请尽快处理！\"\n      description: \"{{ $labels.instance }}内存使用率超过80%,当前使用率{{ $value }}%.\"\n          \n  - alert: 服务器宕机\n    expr: up == 0\n    for: 1s\n    labels:\n      severity: 严重告警\n    annotations:\n      summary: \"{{$labels.instance}} 服务器宕机, 请尽快处理!\"\n      description: \"{{$labels.instance}} 服务器延时超过3分钟,当前状态{{ $value }}. \"\n \n  - alert: CPU高负荷\n    expr: 100 - (avg by (instance,job)(irate(node_cpu_seconds_total{mode=\"idle\"}[5m])) * 100) > 90\n    for: 5m\n    labels:\n      severity: 严重告警\n    annotations:\n      summary: \"{{$labels.instance}} CPU使用率过高,请尽快处理！\"\n      description: \"{{$labels.instance}} CPU使用大于90%,当前使用率{{ $value }}%. \"\n      \n  - alert: 磁盘IO性能\n    expr: avg(irate(node_disk_io_time_seconds_total[1m])) by(instance,job)* 100 > 90\n    for: 5m\n    labels:\n      severity: 严重告警\n    annotations:\n      summary: \"{{$labels.instance}} 流入磁盘IO使用率过高,请尽快处理！\"\n      description: \"{{$labels.instance}} 流入磁盘IO大于90%,当前使用率{{ $value }}%.\"\n \n \n  - alert: 网络流入\n    expr: ((sum(rate (node_network_receive_bytes_total{device!~'tap.*|veth.*|br.*|docker.*|virbr*|lo*'}[5m])) by (instance,job)) / 100) > 102400\n    for: 5m\n    labels:\n      severity: 严重告警\n    annotations:\n      summary: \"{{$labels.instance}} 流入网络带宽过高，请尽快处理！\"\n      description: \"{{$labels.instance}} 流入网络带宽持续5分钟高于100M. RX带宽使用量{{$value}}.\"\n \n  - alert: 网络流出\n    expr: ((sum(rate (node_network_transmit_bytes_total{device!~'tap.*|veth.*|br.*|docker.*|virbr*|lo*'}[5m])) by (instance,job)) / 100) > 102400\n    for: 5m\n    labels:\n      severity: 严重告警\n    annotations:\n      summary: \"{{$labels.instance}} 流出网络带宽过高,请尽快处理！\"\n      description: \"{{$labels.instance}} 流出网络带宽持续5分钟高于100M. RX带宽使用量{$value}}.\"\n  \n  - alert: TCP连接数\n    expr: node_netstat_Tcp_CurrEstab > 10000\n    for: 2m\n    labels:\n      severity: 严重告警\n    annotations:\n      summary: \" TCP_ESTABLISHED过高！\"\n      description: \"{{$labels.instance}} TCP_ESTABLISHED大于100%,当前使用率{{ $value }}%.\"\n \n  - alert: 磁盘容量\n    expr: 100-(node_filesystem_free_bytes{fstype=~\"ext4|xfs\"}/node_filesystem_size_bytes {fstype=~\"ext4|xfs\"}*100) > 90\n    for: 1m\n    labels:\n      severity: 严重告警\n    annotations:\n      summary: \"{{$labels.mountpoint}} 磁盘分区使用率过高，请尽快处理！\"\n      description: \"{{$labels.instance}} 磁盘分区使用大于90%，当前使用率{{ $value }}%.\"\n```\n","slug":"alertmanager","published":1,"updated":"2025-08-28T06:39:18.051Z","comments":1,"layout":"post","photos":[],"_id":"cmev1gg9w0001hllzdqwf98ne","content":"<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -SL https://github.com/docker/compose/releases/download/v2.30.3/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">将可执行权限赋予安装目标路径中的独立二进制文件</span></span><br><span class=\"line\">sudo chmod +x /usr/local/bin/docker-compose</span><br><span class=\"line\">sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose</span><br><span class=\"line\"></span><br><span class=\"line\">version: &#x27;3&#x27;</span><br><span class=\"line\">services:</span><br><span class=\"line\">  alertmanager:</span><br><span class=\"line\">    image: registry.cn-hangzhou.aliyuncs.com/lky-deploy/alertmanager:v0.28.1</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - &quot;9093:9093&quot;</span><br><span class=\"line\">      - &quot;9094:9094&quot;</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - ./config:/etc/alertmanager</span><br><span class=\"line\">      - alertmanager_data:/alertmanager</span><br><span class=\"line\">    command:</span><br><span class=\"line\">      - &#x27;--config.file=/etc/alertmanager/alertmanager.yml&#x27;</span><br><span class=\"line\">      - &#x27;--storage.path=/alertmanager&#x27;</span><br><span class=\"line\">      - &#x27;--cluster.advertise-address=alertmanager:9094&#x27;</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - monitoring-net</span><br><span class=\"line\"></span><br><span class=\"line\">volumes:</span><br><span class=\"line\">  alertmanager_data:</span><br><span class=\"line\"></span><br><span class=\"line\">networks:</span><br><span class=\"line\">  monitoring-net:</span><br><span class=\"line\">    driver: bridge</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"配置文件解读\"><a href=\"#配置文件解读\" class=\"headerlink\" title=\"配置文件解读\"></a>配置文件解读</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">global: # 即为全局设置,在Alertmanager配置文件中,只要全局设置配置了的选项,全部为公共设置,可以让其他设置继承,作为默认值,可以子参数中覆盖其设置。</span><br><span class=\"line\">  resolve_timeout: 1m # 用于设置处理超时时间,也是生命警报状态为解决的时间,这个时间会直接影响到警报恢复的通知时间,需要自行结合实际生产场景来设置主机的恢复时间,默认是5分钟。</span><br><span class=\"line\">  # 整合邮件</span><br><span class=\"line\">  smtp_smarthost: &#x27;smtp.qq.com:465&#x27; # 邮箱smtp服务器</span><br><span class=\"line\">  smtp_from: &#x27;1451578387@qq.com&#x27; # 发件用的邮箱地址</span><br><span class=\"line\">  smtp_auth_username: &#x27;1451578387@qq.com&#x27; # 发件人账号</span><br><span class=\"line\">  smtp_auth_password: &#x27;dkuuifhdskaduasdsb&#x27; # 发件人邮箱密码</span><br><span class=\"line\">  smtp_require_tls: false # 不进行tls验证</span><br><span class=\"line\">route: # 路由分组</span><br><span class=\"line\">  group_by: [&#x27;alertname&#x27;] # 报警分组</span><br><span class=\"line\">  group_wait: 10s # 组内等待时间,同一分组内收到第一个告警等待多久开始发送,目标是为了同组消息同时发送,不占用告警信息,默认30s。</span><br><span class=\"line\">  group_interval: 10s # 当组内已经发送过一个告警,组内若有新增告警需要等待的时间,默认为5m,这条要确定组内信息是影响同一业务才能设置,若分组不合理,可能导致告警延迟,造成影响。</span><br><span class=\"line\">  repeat_interval: 1h # 告警已经发送,且无新增告警,若重复告警需要间隔多久,默认4h,属于重复告警,时间间隔应根据告警的严重程度来设置。</span><br><span class=\"line\">  receiver: &#x27;webhook&#x27; # 告警的接收者,需要和 receivers[n].name 的值一致。</span><br><span class=\"line\">  # 上面所有的属性都由所有子路由继承,并且可以在每个子路由上进行覆盖。</span><br><span class=\"line\">  # 当报警信息中标签匹配到team:node时会使用email发送报警,否则使用webhook。</span><br><span class=\"line\"> templates:</span><br><span class=\"line\">- &#x27;/etc/alertmanager/config/*.tmpl&#x27;</span><br><span class=\"line\"># route根路由,该模块用于该根路由下的节点及子路由routes的定义,子树节点如果不对相关配置进行配置,则默认会从父路由树继承该配置选项。每一条告警都要进入route,即要求配置选项group_by的值能够匹配到每一条告警的至少一个labelkey(即通过POST请求向altermanager服务接口所发送告警的labels项所携带的&lt;labelname&gt;),告警进入到route后,将会根据子路由routes节点中的配置项match_re或者match来确定能进入该子路由节点的告警(由在match_re或者match下配置的labelkey:labelvalue是否为告警labels的子集决定,是的话则会进入该子路由节点,否则不能接收进入该子路由节点)。</span><br><span class=\"line\">route:</span><br><span class=\"line\">  # 例如所有labelkey:labelvalue含cluster=A及altertname=LatencyHigh的labelkey的告警都会被归入单一组中</span><br><span class=\"line\">  group_by: [&#x27;job&#x27;, &#x27;altername&#x27;, &#x27;cluster&#x27;, &#x27;service&#x27;,&#x27;severity&#x27;]</span><br><span class=\"line\">  # 若一组新的告警产生,则会等group_wait后再发送通知,该功能主要用于当告警在很短时间内接连产生时,在group_wait内合并为单一的告警后再发送</span><br><span class=\"line\">  group_wait: 30s</span><br><span class=\"line\">  # 再次告警时间间隔</span><br><span class=\"line\">  group_interval: 5m</span><br><span class=\"line\">  # 如果一条告警通知已成功发送,且在间隔repeat_interval后,该告警仍然未被设置为resolved,则会再次发送该告警通知</span><br><span class=\"line\">  repeat_interval: 12h</span><br><span class=\"line\">  # 默认告警通知接收者,凡未被匹配进入各子路由节点的告警均被发送到此接收者</span><br><span class=\"line\">  receiver: &#x27;wechat&#x27;</span><br><span class=\"line\">  # 上述route的配置会被传递给子路由节点,子路由节点进行重新配置才会被覆盖</span><br><span class=\"line\">  # 子路由树</span><br><span class=\"line\">  routes:</span><br><span class=\"line\">  # 该配置选项使用正则表达式来匹配告警的labels,以确定能否进入该子路由树</span><br><span class=\"line\">  # match_re和match均用于匹配labelkey为service,labelvalue分别为指定值的告警,被匹配到的告警会将通知发送到对应的receiver</span><br><span class=\"line\">  - match_re:</span><br><span class=\"line\">      service: ^(foo1|foo2|baz)$</span><br><span class=\"line\">    receiver: &#x27;wechat&#x27;</span><br><span class=\"line\">    # 在带有service标签的告警同时有severity标签时,他可以有自己的子路由,同时具有severity != critical的告警则被发送给接收者team-ops-mails,对severity == critical的告警则被发送到对应的接收者即team-ops-pager</span><br><span class=\"line\">    routes:</span><br><span class=\"line\">    - match:</span><br><span class=\"line\">        severity: critical</span><br><span class=\"line\">      receiver: &#x27;wechat&#x27;</span><br><span class=\"line\">  # 比如关于数据库服务的告警,如果子路由没有匹配到相应的owner标签,则都默认由team-DB-pager接收</span><br><span class=\"line\">  - match:</span><br><span class=\"line\">      service: database</span><br><span class=\"line\">    receiver: &#x27;wechat&#x27;</span><br><span class=\"line\">  # 我们也可以先根据标签service:database将数据库服务告警过滤出来,然后进一步将所有同时带labelkey为database</span><br><span class=\"line\">  - match:</span><br><span class=\"line\">      severity: critical</span><br><span class=\"line\">    receiver: &#x27;wechat&#x27;</span><br><span class=\"line\"># 抑制规则,当出现critical(关键的)告警时忽略warning。</span><br><span class=\"line\"># 下面的这段配置是指如果出现标签为severity=critical的告警,则抑制severity=warning的告警</span><br><span class=\"line\">inhibit_rules:</span><br><span class=\"line\">- source_match:</span><br><span class=\"line\">    severity: &#x27;critical&#x27;</span><br><span class=\"line\">  target_match:</span><br><span class=\"line\">    severity: &#x27;warning&#x27;</span><br><span class=\"line\">  # 如果警报名称相同,则应用抑制。</span><br><span class=\"line\">  # alertname、cluster和service对应的标签值需要相等</span><br><span class=\"line\">  equal: [&#x27;alertname&#x27;, &#x27;cluster&#x27;, &#x27;service&#x27;]</span><br><span class=\"line\"># 收件人配置</span><br><span class=\"line\">receivers:</span><br><span class=\"line\">- name: &#x27;team-ops-mails&#x27;</span><br><span class=\"line\">  email_configs:</span><br><span class=\"line\">  - to: &#x27;dukuan@xxx.com&#x27;</span><br><span class=\"line\">- name: &#x27;team-X-pager&#x27;</span><br><span class=\"line\">  email_configs:</span><br><span class=\"line\">  - to: &#x27;team-X+alerts-critical@example.org&#x27;</span><br><span class=\"line\">  pagerduty_configs:</span><br><span class=\"line\">  - service_key: &lt;team-X-key&gt;</span><br><span class=\"line\">- name: &#x27;team-Y-mails&#x27;</span><br><span class=\"line\">  email_configs:</span><br><span class=\"line\">  - to: &#x27;team-Y+alerts@example.org&#x27;</span><br><span class=\"line\">- name: &#x27;webhook&#x27;</span><br><span class=\"line\">  webhook_configs:</span><br><span class=\"line\">  - url: http://127.0.0.1:8060/dingtalk/webhook1/send</span><br><span class=\"line\">    send_resolved: true</span><br></pre></td></tr></table></figure>\n<h2 id=\"分组和路由\"><a href=\"#分组和路由\" class=\"headerlink\" title=\"分组和路由\"></a>分组和路由</h2><blockquote>\n<ol>\n<li><strong>路由</strong><br><br>match（精确匹配）match_re（正则表达式匹配）<br>每一个告警都会从配置文件中顶级的route进入路由树，需要注意的是顶级的route必须匹配所有告警(即不能有任何的匹配设置match和match_re)，每一个路由都可以定义自己的接受人以及匹配规则。默认情况下，告警进入到顶级route后会遍历所有的子节点，直到找到最深的匹配route，并将告警发送到该route定义的receiver中。但如果route中设置continue的值为false，那么告警在匹配到第一个子节点之后就直接停止。如果continue为true，报警则会继续进行后续子节点的匹配。如果当前告警匹配不到任何的子节点，那该告警将会基于当前路由节点的接收器配置方式进行处理</li>\n<li><strong>分组</strong><br><br>告警通知进行分组，将多条告警合合并为一个通知。这里我们可以使用group_by来定义分组规则。基于告警中包含的标签，如果满足group_by中定义标签名称，那么这些告警将会合并为一个通知发送给接收器。<br>有的时候为了能够一次性收集和发送更多的相关信息时，可以通过group_wait参数设置等待时间，如果在等待时间内当前group接收到了新的告警，这些告警将会合并为一个通知向receiver发送</li>\n</ol>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">route:</span><br><span class=\"line\">  group_by: [&#x27;alertname&#x27;,&#x27;team&#x27;]   #在这里添加team匹配的标签</span><br><span class=\"line\">  group_wait: 5s</span><br><span class=\"line\">  group_interval: 5s</span><br><span class=\"line\">  repeat_interval: 5m</span><br><span class=\"line\">  # 默认发给&quot;sre_system&quot;组用户</span><br><span class=\"line\">  receiver: &#x27;sre_system&#x27;</span><br><span class=\"line\">  continue: false</span><br><span class=\"line\">  # 配置子路由</span><br><span class=\"line\">  routes:</span><br><span class=\"line\">    - receiver: &#x27;sre_dba&#x27;</span><br><span class=\"line\">      match_re:</span><br><span class=\"line\">        job: test</span><br><span class=\"line\">      # 建议将continue的值设置为true，表示当前的条件是否匹配，都将继续向下匹配规则</span><br><span class=\"line\">      # 这样做的目的是将消息发给最后的系统组(sre_system)</span><br><span class=\"line\">      continue: true</span><br><span class=\"line\">==================================================================</span><br><span class=\"line\">#rule.yml</span><br><span class=\"line\">- name: grafana</span><br><span class=\"line\">  rules:</span><br><span class=\"line\">  - alert: node           #这个相当于alertname的值,与之前匹配的相同</span><br><span class=\"line\">    expr: up&#123;job=&quot;grafana&quot;&#125; == 0</span><br><span class=\"line\">    for: 10s                  </span><br><span class=\"line\">    labels:                   </span><br><span class=\"line\">      severity: 1 </span><br><span class=\"line\">      job: test  # 对应上面的 match_re</span><br><span class=\"line\">      team: grafana        #这里标签设置不同的一会用</span><br><span class=\"line\">    annotations:              </span><br><span class=\"line\">      summary: &quot;&#123;&#123; \\$labels.instance &#125;&#125; 已停止运行超过 15s&quot;</span><br><span class=\"line\">      description: hello world</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\">alertname 等于 node 如果相同报警会一起发送</span><br><span class=\"line\">team 等于 grafana </span><br></pre></td></tr></table></figure>\n<h2 id=\"抑制规则\"><a href=\"#抑制规则\" class=\"headerlink\" title=\"抑制规则\"></a>抑制规则</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">inhibit_rules:</span><br><span class=\"line\">  - source_match:</span><br><span class=\"line\">      severity: &#x27;告警&#x27;</span><br><span class=\"line\">    target_match:</span><br><span class=\"line\">      severity: &#x27;提示&#x27;</span><br><span class=\"line\">    #equal: [&#x27;type&#x27;,&#x27;test&#x27;] 要求 type 和 test签均相同</span><br><span class=\"line\">     equal: [&#x27;type&#x27;]type的值必须一样</span><br><span class=\"line\">当匹配到 告警 时就会抑制提示的告警通知并检查他们是否来自于同个</span><br><span class=\"line\">ssl（即ssl标签的值相同抑制才会生效）</span><br><span class=\"line\">当子路由匹配到不同的 severity 时就会将消息发往不同的 receiver，当子路由无法匹配到时，消息会默认发往根路由的 receiver，因此，无论是否匹配到子路由规则，消息都会发往根路由的 receiver</span><br><span class=\"line\">对应报警规则配置为</span><br><span class=\"line\">groups:</span><br><span class=\"line\">- name: node-alerts</span><br><span class=\"line\">  rules:</span><br><span class=\"line\">  - alert: HighNodeCPU</span><br><span class=\"line\">    expr: (1 - avg(rate(node_cpu_seconds_total&#123;mode=&quot;idle&quot;&#125;[5m])) by (instance)) * 100 &gt; 80</span><br><span class=\"line\">    for: 5m</span><br><span class=\"line\">    labels:</span><br><span class=\"line\">      severity: &quot;告警&quot;</span><br><span class=\"line\">      type: ssl</span><br><span class=\"line\">    annotations:</span><br><span class=\"line\">      summary: &quot;高节点CPU使用率 (&#123;&#123; $labels.instance &#125;&#125;)&quot;</span><br><span class=\"line\">      description: &quot;节点 &#123;&#123; $labels.instance &#125;&#125; CPU 使用率超过 80% 已持续 5 分钟&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">- name: cluster-alerts</span><br><span class=\"line\">  rules:</span><br><span class=\"line\">  - alert: ClusterWideCPUProblem</span><br><span class=\"line\">    expr: |</span><br><span class=\"line\">      sum( (1 - avg(rate(node_cpu_seconds_total&#123;mode=&quot;idle&quot;&#125;[5m])) by (instance)) * 100 &gt; 80 )</span><br><span class=\"line\">      /</span><br><span class=\"line\">      count( (1 - avg(rate(node_cpu_seconds_total&#123;mode=&quot;idle&quot;&#125;[5m])) by (instance)) )</span><br><span class=\"line\">      * 100 &gt; 50</span><br><span class=\"line\">    for: 10m</span><br><span class=\"line\">    labels:</span><br><span class=\"line\">      severity: &quot;提示&quot;</span><br><span class=\"line\">      type: ssl</span><br><span class=\"line\">    annotations:</span><br><span class=\"line\">      summary: &quot;集群级CPU问题&quot;</span><br><span class=\"line\">      description: &quot;超过 50% 的节点持续高CPU使用率达 10 分钟&quot;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"alertmanager集成三方告警\"><a href=\"#alertmanager集成三方告警\" class=\"headerlink\" title=\"alertmanager集成三方告警\"></a>alertmanager集成三方告警</h1><blockquote>\n<p>原生alertmanager只有邮件和webhook告警；Alertmanager 的原生 Webhook 告警是一种通过 HTTP POST 请求将告警信息发送到自定义接口（Webhook 接收端）的机制；所以要对接需要开发者自行开发，这里推荐两个现成的工具来对接</p>\n</blockquote>\n<h2 id=\"PrometheusAlert使用\"><a href=\"#PrometheusAlert使用\" class=\"headerlink\" title=\"PrometheusAlert使用\"></a>PrometheusAlert使用</h2><blockquote>\n<p>Prometheus Alert 是开源的运维告警中心消息转发系统，支持主流的监控系统 Prometheus，日志系统 Graylog 和数据可视化系统 Grafana 发出的预警消息。通知渠道支持钉钉、微信、华为云短信、腾讯云短信、腾讯云电话、阿里云短信、阿里云电话等等</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/feiyu563/PrometheusAlert/releases/download/v4.8.1/linux.zip</span><br><span class=\"line\">chmod +x PrometheusAlert</span><br><span class=\"line\">启动 nohup ./PrometheusAlert &amp; 后台运行</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">alertmanager.yml配置集成PrometheusAlert；格式可以登录PrometheusAlert查看</span></span><br><span class=\"line\">receivers:</span><br><span class=\"line\">- name: &#x27;web.hook.prometheusalert&#x27;</span><br><span class=\"line\">  webhook_configs:</span><br><span class=\"line\">  - url: &#x27;http://192.168.197.142:8080/prometheusalert?type=wx&amp;tpl=prometheus-wx&amp;wxurl=https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=53fdb356-4446-42e5-b8bd-f7da63bcfe76&#x27;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2025/04/27/alertmanager/image.png\" alt=\"alt text\"></p>\n<h2 id=\"prometheus-webhook-dingtalk使用\"><a href=\"#prometheus-webhook-dingtalk使用\" class=\"headerlink\" title=\"prometheus-webhook-dingtalk使用\"></a>prometheus-webhook-dingtalk使用</h2><blockquote>\n<p>Prometheus 的Alertmanager自身不支持钉钉报警，需要通过插件的方式来达到报警条件</p>\n</blockquote>\n<h3 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/timonwong/prometheus-webhook-dingtalk/releases/download/v2.1.0/prometheus-webhook-dingtalk-2.1.0.linux-amd64.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">tar zxf prometheus-webhook-dingtalk-2.1.0.linux-amd64.tar.gz </span><br><span class=\"line\">mv prometheus-webhook-dingtalk-2.1.0.linux-amd64 /usr/local/prometheus-webhook-dingtalk</span><br><span class=\"line\">cat &gt; /usr/lib/systemd/system/webhook-dingtalk.service &lt;&lt; EOF</span><br><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=prometheus-webhook-dingtalk</span><br><span class=\"line\">Documentation=https://github.com/timonwong/prometheus-webhook-dingtalk</span><br><span class=\"line\">After=network.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">User=root</span><br><span class=\"line\">Group=root</span><br><span class=\"line\">ExecStart=/usr/local/prometheus-webhook-dingtalk/prometheus-webhook-dingtalk  --config.file=/usr/local/prometheus-webhook-dingtalk/config.yml</span><br><span class=\"line\">ExecReload=/bin/kill -HUP $MAINPID</span><br><span class=\"line\">KillMode=process</span><br><span class=\"line\">Restart=on-failure</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">集成模版/usr/local/prometheus-webhook-dingtalk/config.yml</span></span><br><span class=\"line\">templates:</span><br><span class=\"line\">    - /usr/local/prometheus/webhook-dingtalk/template.tmpl</span><br><span class=\"line\">targets:</span><br><span class=\"line\">  webhook1:</span><br><span class=\"line\">    url: https://oapi.dingtalk.com/robot/send?access_token=9ac4354ab7c8</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">alertmanager配置发送给dingtalk插件</span></span><br><span class=\"line\">receivers:</span><br><span class=\"line\">  - name: &#x27;email&#x27;</span><br><span class=\"line\">    email_configs:</span><br><span class=\"line\">      - to: &#x27;xxxxx@163.com&#x27; #指定发送给谁</span><br><span class=\"line\">  - name: &#x27;webhook1&#x27;</span><br><span class=\"line\">    webhook_configs:</span><br><span class=\"line\">      - send_resolved: false</span><br><span class=\"line\">        url: http://localhost:8060/dingtalk/webhook1/send</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"报警内容模版\"><a href=\"#报警内容模版\" class=\"headerlink\" title=\"报警内容模版\"></a>报警内容模版</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /usr/local/prometheus/webhook-dingtalk/template.tmpl</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; define &quot;__subject&quot; &#125;&#125;</span><br><span class=\"line\">[&#123;&#123; .Status | toUpper &#125;&#125;&#123;&#123; if eq .Status &quot;firing&quot; &#125;&#125;:&#123;&#123; .Alerts.Firing | len &#125;&#125;&#123;&#123; end &#125;&#125;]</span><br><span class=\"line\">&#123;&#123; end &#125;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">&#123;&#123; define &quot;__alert_list&quot; &#125;&#125;&#123;&#123; range . &#125;&#125;</span><br><span class=\"line\">---</span><br><span class=\"line\">&#123;&#123; if .Labels.owner &#125;&#125;@&#123;&#123; .Labels.owner &#125;&#125;&#123;&#123; end &#125;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">**告警主题**: &#123;&#123; .Annotations.summary &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">**告警类型**: &#123;&#123; .Labels.alertname &#125;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">**告警级别**: &#123;&#123; .Labels.severity &#125;&#125; </span><br><span class=\"line\"> </span><br><span class=\"line\">**告警主机**: &#123;&#123; .Labels.instance &#125;&#125; </span><br><span class=\"line\"> </span><br><span class=\"line\">**告警信息**: &#123;&#123; index .Annotations &quot;description&quot; &#125;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">**告警时间**: &#123;&#123; dateInZone &quot;2006.01.02 15:04:05&quot; (.StartsAt) &quot;Asia/Shanghai&quot; &#125;&#125;</span><br><span class=\"line\">&#123;&#123; end &#125;&#125;&#123;&#123; end &#125;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#123;&#123; define &quot;__resolved_list&quot; &#125;&#125;&#123;&#123; range . &#125;&#125;</span><br><span class=\"line\">---</span><br><span class=\"line\">&#123;&#123; if .Labels.owner &#125;&#125;@&#123;&#123; .Labels.owner &#125;&#125;&#123;&#123; end &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">**告警主题**: &#123;&#123; .Annotations.summary &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">**告警类型**: &#123;&#123; .Labels.alertname &#125;&#125; </span><br><span class=\"line\"> </span><br><span class=\"line\">**告警级别**: &#123;&#123; .Labels.severity &#125;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">**告警主机**: &#123;&#123; .Labels.instance &#125;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">**告警信息**: &#123;&#123; index .Annotations &quot;description&quot; &#125;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">**告警时间**: &#123;&#123; dateInZone &quot;2006.01.02 15:04:05&quot; (.StartsAt) &quot;Asia/Shanghai&quot; &#125;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">**恢复时间**: &#123;&#123; dateInZone &quot;2006.01.02 15:04:05&quot; (.EndsAt) &quot;Asia/Shanghai&quot; &#125;&#125;</span><br><span class=\"line\">&#123;&#123; end &#125;&#125;&#123;&#123; end &#125;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">&#123;&#123; define &quot;default.title&quot; &#125;&#125;</span><br><span class=\"line\">&#123;&#123; template &quot;__subject&quot; . &#125;&#125;</span><br><span class=\"line\">&#123;&#123; end &#125;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#123;&#123; define &quot;default.content&quot; &#125;&#125;</span><br><span class=\"line\">&#123;&#123; if gt (len .Alerts.Firing) 0 &#125;&#125;</span><br><span class=\"line\">**====侦测到&#123;&#123; .Alerts.Firing | len  &#125;&#125;个故障====**</span><br><span class=\"line\">&#123;&#123; template &quot;__alert_list&quot; .Alerts.Firing &#125;&#125;</span><br><span class=\"line\">---</span><br><span class=\"line\">&#123;&#123; end &#125;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#123;&#123; if gt (len .Alerts.Resolved) 0 &#125;&#125;</span><br><span class=\"line\">**====恢复&#123;&#123; .Alerts.Resolved | len  &#125;&#125;个故障====**</span><br><span class=\"line\">&#123;&#123; template &quot;__resolved_list&quot; .Alerts.Resolved &#125;&#125;</span><br><span class=\"line\">&#123;&#123; end &#125;&#125;</span><br><span class=\"line\">&#123;&#123; end &#125;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">&#123;&#123; define &quot;ding.link.title&quot; &#125;&#125;&#123;&#123; template &quot;default.title&quot; . &#125;&#125;&#123;&#123; end &#125;&#125;</span><br><span class=\"line\">&#123;&#123; define &quot;ding.link.content&quot; &#125;&#125;&#123;&#123; template &quot;default.content&quot; . &#125;&#125;&#123;&#123; end &#125;&#125;</span><br><span class=\"line\">&#123;&#123; template &quot;default.title&quot; . &#125;&#125;</span><br><span class=\"line\">&#123;&#123; template &quot;default.content&quot; . &#125;&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"报警规则示例\"><a href=\"#报警规则示例\" class=\"headerlink\" title=\"报警规则示例\"></a>报警规则示例</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /usr/local/prometheus/prometheus/rule</span><br><span class=\"line\">vim /usr/local/prometheus/prometheus/rule/node_exporter.yml</span><br><span class=\"line\"></span><br><span class=\"line\">groups:</span><br><span class=\"line\">- name: 服务器资源监控</span><br><span class=\"line\">  rules:</span><br><span class=\"line\">  - alert: 内存使用率过高</span><br><span class=\"line\">    expr: 100 - (node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes) * 100 &gt; 80</span><br><span class=\"line\">    for: 3m </span><br><span class=\"line\">    labels:</span><br><span class=\"line\">      severity: 严重告警</span><br><span class=\"line\">    annotations:</span><br><span class=\"line\">      summary: &quot;&#123;&#123; $labels.instance &#125;&#125; 内存使用率过高, 请尽快处理！&quot;</span><br><span class=\"line\">      description: &quot;&#123;&#123; $labels.instance &#125;&#125;内存使用率超过80%,当前使用率&#123;&#123; $value &#125;&#125;%.&quot;</span><br><span class=\"line\">          </span><br><span class=\"line\">  - alert: 服务器宕机</span><br><span class=\"line\">    expr: up == 0</span><br><span class=\"line\">    for: 1s</span><br><span class=\"line\">    labels:</span><br><span class=\"line\">      severity: 严重告警</span><br><span class=\"line\">    annotations:</span><br><span class=\"line\">      summary: &quot;&#123;&#123;$labels.instance&#125;&#125; 服务器宕机, 请尽快处理!&quot;</span><br><span class=\"line\">      description: &quot;&#123;&#123;$labels.instance&#125;&#125; 服务器延时超过3分钟,当前状态&#123;&#123; $value &#125;&#125;. &quot;</span><br><span class=\"line\"> </span><br><span class=\"line\">  - alert: CPU高负荷</span><br><span class=\"line\">    expr: 100 - (avg by (instance,job)(irate(node_cpu_seconds_total&#123;mode=&quot;idle&quot;&#125;[5m])) * 100) &gt; 90</span><br><span class=\"line\">    for: 5m</span><br><span class=\"line\">    labels:</span><br><span class=\"line\">      severity: 严重告警</span><br><span class=\"line\">    annotations:</span><br><span class=\"line\">      summary: &quot;&#123;&#123;$labels.instance&#125;&#125; CPU使用率过高,请尽快处理！&quot;</span><br><span class=\"line\">      description: &quot;&#123;&#123;$labels.instance&#125;&#125; CPU使用大于90%,当前使用率&#123;&#123; $value &#125;&#125;%. &quot;</span><br><span class=\"line\">      </span><br><span class=\"line\">  - alert: 磁盘IO性能</span><br><span class=\"line\">    expr: avg(irate(node_disk_io_time_seconds_total[1m])) by(instance,job)* 100 &gt; 90</span><br><span class=\"line\">    for: 5m</span><br><span class=\"line\">    labels:</span><br><span class=\"line\">      severity: 严重告警</span><br><span class=\"line\">    annotations:</span><br><span class=\"line\">      summary: &quot;&#123;&#123;$labels.instance&#125;&#125; 流入磁盘IO使用率过高,请尽快处理！&quot;</span><br><span class=\"line\">      description: &quot;&#123;&#123;$labels.instance&#125;&#125; 流入磁盘IO大于90%,当前使用率&#123;&#123; $value &#125;&#125;%.&quot;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">  - alert: 网络流入</span><br><span class=\"line\">    expr: ((sum(rate (node_network_receive_bytes_total&#123;device!~&#x27;tap.*|veth.*|br.*|docker.*|virbr*|lo*&#x27;&#125;[5m])) by (instance,job)) / 100) &gt; 102400</span><br><span class=\"line\">    for: 5m</span><br><span class=\"line\">    labels:</span><br><span class=\"line\">      severity: 严重告警</span><br><span class=\"line\">    annotations:</span><br><span class=\"line\">      summary: &quot;&#123;&#123;$labels.instance&#125;&#125; 流入网络带宽过高，请尽快处理！&quot;</span><br><span class=\"line\">      description: &quot;&#123;&#123;$labels.instance&#125;&#125; 流入网络带宽持续5分钟高于100M. RX带宽使用量&#123;&#123;$value&#125;&#125;.&quot;</span><br><span class=\"line\"> </span><br><span class=\"line\">  - alert: 网络流出</span><br><span class=\"line\">    expr: ((sum(rate (node_network_transmit_bytes_total&#123;device!~&#x27;tap.*|veth.*|br.*|docker.*|virbr*|lo*&#x27;&#125;[5m])) by (instance,job)) / 100) &gt; 102400</span><br><span class=\"line\">    for: 5m</span><br><span class=\"line\">    labels:</span><br><span class=\"line\">      severity: 严重告警</span><br><span class=\"line\">    annotations:</span><br><span class=\"line\">      summary: &quot;&#123;&#123;$labels.instance&#125;&#125; 流出网络带宽过高,请尽快处理！&quot;</span><br><span class=\"line\">      description: &quot;&#123;&#123;$labels.instance&#125;&#125; 流出网络带宽持续5分钟高于100M. RX带宽使用量&#123;$value&#125;&#125;.&quot;</span><br><span class=\"line\">  </span><br><span class=\"line\">  - alert: TCP连接数</span><br><span class=\"line\">    expr: node_netstat_Tcp_CurrEstab &gt; 10000</span><br><span class=\"line\">    for: 2m</span><br><span class=\"line\">    labels:</span><br><span class=\"line\">      severity: 严重告警</span><br><span class=\"line\">    annotations:</span><br><span class=\"line\">      summary: &quot; TCP_ESTABLISHED过高！&quot;</span><br><span class=\"line\">      description: &quot;&#123;&#123;$labels.instance&#125;&#125; TCP_ESTABLISHED大于100%,当前使用率&#123;&#123; $value &#125;&#125;%.&quot;</span><br><span class=\"line\"> </span><br><span class=\"line\">  - alert: 磁盘容量</span><br><span class=\"line\">    expr: 100-(node_filesystem_free_bytes&#123;fstype=~&quot;ext4|xfs&quot;&#125;/node_filesystem_size_bytes &#123;fstype=~&quot;ext4|xfs&quot;&#125;*100) &gt; 90</span><br><span class=\"line\">    for: 1m</span><br><span class=\"line\">    labels:</span><br><span class=\"line\">      severity: 严重告警</span><br><span class=\"line\">    annotations:</span><br><span class=\"line\">      summary: &quot;&#123;&#123;$labels.mountpoint&#125;&#125; 磁盘分区使用率过高，请尽快处理！&quot;</span><br><span class=\"line\">      description: &quot;&#123;&#123;$labels.instance&#125;&#125; 磁盘分区使用大于90%，当前使用率&#123;&#123; $value &#125;&#125;%.&quot;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -SL https://github.com/docker/compose/releases/download/v2.30.3/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">将可执行权限赋予安装目标路径中的独立二进制文件</span></span><br><span class=\"line\">sudo chmod +x /usr/local/bin/docker-compose</span><br><span class=\"line\">sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose</span><br><span class=\"line\"></span><br><span class=\"line\">version: &#x27;3&#x27;</span><br><span class=\"line\">services:</span><br><span class=\"line\">  alertmanager:</span><br><span class=\"line\">    image: registry.cn-hangzhou.aliyuncs.com/lky-deploy/alertmanager:v0.28.1</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - &quot;9093:9093&quot;</span><br><span class=\"line\">      - &quot;9094:9094&quot;</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - ./config:/etc/alertmanager</span><br><span class=\"line\">      - alertmanager_data:/alertmanager</span><br><span class=\"line\">    command:</span><br><span class=\"line\">      - &#x27;--config.file=/etc/alertmanager/alertmanager.yml&#x27;</span><br><span class=\"line\">      - &#x27;--storage.path=/alertmanager&#x27;</span><br><span class=\"line\">      - &#x27;--cluster.advertise-address=alertmanager:9094&#x27;</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - monitoring-net</span><br><span class=\"line\"></span><br><span class=\"line\">volumes:</span><br><span class=\"line\">  alertmanager_data:</span><br><span class=\"line\"></span><br><span class=\"line\">networks:</span><br><span class=\"line\">  monitoring-net:</span><br><span class=\"line\">    driver: bridge</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"配置文件解读\"><a href=\"#配置文件解读\" class=\"headerlink\" title=\"配置文件解读\"></a>配置文件解读</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">global: # 即为全局设置,在Alertmanager配置文件中,只要全局设置配置了的选项,全部为公共设置,可以让其他设置继承,作为默认值,可以子参数中覆盖其设置。</span><br><span class=\"line\">  resolve_timeout: 1m # 用于设置处理超时时间,也是生命警报状态为解决的时间,这个时间会直接影响到警报恢复的通知时间,需要自行结合实际生产场景来设置主机的恢复时间,默认是5分钟。</span><br><span class=\"line\">  # 整合邮件</span><br><span class=\"line\">  smtp_smarthost: &#x27;smtp.qq.com:465&#x27; # 邮箱smtp服务器</span><br><span class=\"line\">  smtp_from: &#x27;1451578387@qq.com&#x27; # 发件用的邮箱地址</span><br><span class=\"line\">  smtp_auth_username: &#x27;1451578387@qq.com&#x27; # 发件人账号</span><br><span class=\"line\">  smtp_auth_password: &#x27;dkuuifhdskaduasdsb&#x27; # 发件人邮箱密码</span><br><span class=\"line\">  smtp_require_tls: false # 不进行tls验证</span><br><span class=\"line\">route: # 路由分组</span><br><span class=\"line\">  group_by: [&#x27;alertname&#x27;] # 报警分组</span><br><span class=\"line\">  group_wait: 10s # 组内等待时间,同一分组内收到第一个告警等待多久开始发送,目标是为了同组消息同时发送,不占用告警信息,默认30s。</span><br><span class=\"line\">  group_interval: 10s # 当组内已经发送过一个告警,组内若有新增告警需要等待的时间,默认为5m,这条要确定组内信息是影响同一业务才能设置,若分组不合理,可能导致告警延迟,造成影响。</span><br><span class=\"line\">  repeat_interval: 1h # 告警已经发送,且无新增告警,若重复告警需要间隔多久,默认4h,属于重复告警,时间间隔应根据告警的严重程度来设置。</span><br><span class=\"line\">  receiver: &#x27;webhook&#x27; # 告警的接收者,需要和 receivers[n].name 的值一致。</span><br><span class=\"line\">  # 上面所有的属性都由所有子路由继承,并且可以在每个子路由上进行覆盖。</span><br><span class=\"line\">  # 当报警信息中标签匹配到team:node时会使用email发送报警,否则使用webhook。</span><br><span class=\"line\"> templates:</span><br><span class=\"line\">- &#x27;/etc/alertmanager/config/*.tmpl&#x27;</span><br><span class=\"line\"># route根路由,该模块用于该根路由下的节点及子路由routes的定义,子树节点如果不对相关配置进行配置,则默认会从父路由树继承该配置选项。每一条告警都要进入route,即要求配置选项group_by的值能够匹配到每一条告警的至少一个labelkey(即通过POST请求向altermanager服务接口所发送告警的labels项所携带的&lt;labelname&gt;),告警进入到route后,将会根据子路由routes节点中的配置项match_re或者match来确定能进入该子路由节点的告警(由在match_re或者match下配置的labelkey:labelvalue是否为告警labels的子集决定,是的话则会进入该子路由节点,否则不能接收进入该子路由节点)。</span><br><span class=\"line\">route:</span><br><span class=\"line\">  # 例如所有labelkey:labelvalue含cluster=A及altertname=LatencyHigh的labelkey的告警都会被归入单一组中</span><br><span class=\"line\">  group_by: [&#x27;job&#x27;, &#x27;altername&#x27;, &#x27;cluster&#x27;, &#x27;service&#x27;,&#x27;severity&#x27;]</span><br><span class=\"line\">  # 若一组新的告警产生,则会等group_wait后再发送通知,该功能主要用于当告警在很短时间内接连产生时,在group_wait内合并为单一的告警后再发送</span><br><span class=\"line\">  group_wait: 30s</span><br><span class=\"line\">  # 再次告警时间间隔</span><br><span class=\"line\">  group_interval: 5m</span><br><span class=\"line\">  # 如果一条告警通知已成功发送,且在间隔repeat_interval后,该告警仍然未被设置为resolved,则会再次发送该告警通知</span><br><span class=\"line\">  repeat_interval: 12h</span><br><span class=\"line\">  # 默认告警通知接收者,凡未被匹配进入各子路由节点的告警均被发送到此接收者</span><br><span class=\"line\">  receiver: &#x27;wechat&#x27;</span><br><span class=\"line\">  # 上述route的配置会被传递给子路由节点,子路由节点进行重新配置才会被覆盖</span><br><span class=\"line\">  # 子路由树</span><br><span class=\"line\">  routes:</span><br><span class=\"line\">  # 该配置选项使用正则表达式来匹配告警的labels,以确定能否进入该子路由树</span><br><span class=\"line\">  # match_re和match均用于匹配labelkey为service,labelvalue分别为指定值的告警,被匹配到的告警会将通知发送到对应的receiver</span><br><span class=\"line\">  - match_re:</span><br><span class=\"line\">      service: ^(foo1|foo2|baz)$</span><br><span class=\"line\">    receiver: &#x27;wechat&#x27;</span><br><span class=\"line\">    # 在带有service标签的告警同时有severity标签时,他可以有自己的子路由,同时具有severity != critical的告警则被发送给接收者team-ops-mails,对severity == critical的告警则被发送到对应的接收者即team-ops-pager</span><br><span class=\"line\">    routes:</span><br><span class=\"line\">    - match:</span><br><span class=\"line\">        severity: critical</span><br><span class=\"line\">      receiver: &#x27;wechat&#x27;</span><br><span class=\"line\">  # 比如关于数据库服务的告警,如果子路由没有匹配到相应的owner标签,则都默认由team-DB-pager接收</span><br><span class=\"line\">  - match:</span><br><span class=\"line\">      service: database</span><br><span class=\"line\">    receiver: &#x27;wechat&#x27;</span><br><span class=\"line\">  # 我们也可以先根据标签service:database将数据库服务告警过滤出来,然后进一步将所有同时带labelkey为database</span><br><span class=\"line\">  - match:</span><br><span class=\"line\">      severity: critical</span><br><span class=\"line\">    receiver: &#x27;wechat&#x27;</span><br><span class=\"line\"># 抑制规则,当出现critical(关键的)告警时忽略warning。</span><br><span class=\"line\"># 下面的这段配置是指如果出现标签为severity=critical的告警,则抑制severity=warning的告警</span><br><span class=\"line\">inhibit_rules:</span><br><span class=\"line\">- source_match:</span><br><span class=\"line\">    severity: &#x27;critical&#x27;</span><br><span class=\"line\">  target_match:</span><br><span class=\"line\">    severity: &#x27;warning&#x27;</span><br><span class=\"line\">  # 如果警报名称相同,则应用抑制。</span><br><span class=\"line\">  # alertname、cluster和service对应的标签值需要相等</span><br><span class=\"line\">  equal: [&#x27;alertname&#x27;, &#x27;cluster&#x27;, &#x27;service&#x27;]</span><br><span class=\"line\"># 收件人配置</span><br><span class=\"line\">receivers:</span><br><span class=\"line\">- name: &#x27;team-ops-mails&#x27;</span><br><span class=\"line\">  email_configs:</span><br><span class=\"line\">  - to: &#x27;dukuan@xxx.com&#x27;</span><br><span class=\"line\">- name: &#x27;team-X-pager&#x27;</span><br><span class=\"line\">  email_configs:</span><br><span class=\"line\">  - to: &#x27;team-X+alerts-critical@example.org&#x27;</span><br><span class=\"line\">  pagerduty_configs:</span><br><span class=\"line\">  - service_key: &lt;team-X-key&gt;</span><br><span class=\"line\">- name: &#x27;team-Y-mails&#x27;</span><br><span class=\"line\">  email_configs:</span><br><span class=\"line\">  - to: &#x27;team-Y+alerts@example.org&#x27;</span><br><span class=\"line\">- name: &#x27;webhook&#x27;</span><br><span class=\"line\">  webhook_configs:</span><br><span class=\"line\">  - url: http://127.0.0.1:8060/dingtalk/webhook1/send</span><br><span class=\"line\">    send_resolved: true</span><br></pre></td></tr></table></figure>\n<h2 id=\"分组和路由\"><a href=\"#分组和路由\" class=\"headerlink\" title=\"分组和路由\"></a>分组和路由</h2><blockquote>\n<ol>\n<li><strong>路由</strong><br><br>match（精确匹配）match_re（正则表达式匹配）<br>每一个告警都会从配置文件中顶级的route进入路由树，需要注意的是顶级的route必须匹配所有告警(即不能有任何的匹配设置match和match_re)，每一个路由都可以定义自己的接受人以及匹配规则。默认情况下，告警进入到顶级route后会遍历所有的子节点，直到找到最深的匹配route，并将告警发送到该route定义的receiver中。但如果route中设置continue的值为false，那么告警在匹配到第一个子节点之后就直接停止。如果continue为true，报警则会继续进行后续子节点的匹配。如果当前告警匹配不到任何的子节点，那该告警将会基于当前路由节点的接收器配置方式进行处理</li>\n<li><strong>分组</strong><br><br>告警通知进行分组，将多条告警合合并为一个通知。这里我们可以使用group_by来定义分组规则。基于告警中包含的标签，如果满足group_by中定义标签名称，那么这些告警将会合并为一个通知发送给接收器。<br>有的时候为了能够一次性收集和发送更多的相关信息时，可以通过group_wait参数设置等待时间，如果在等待时间内当前group接收到了新的告警，这些告警将会合并为一个通知向receiver发送</li>\n</ol>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">route:</span><br><span class=\"line\">  group_by: [&#x27;alertname&#x27;,&#x27;team&#x27;]   #在这里添加team匹配的标签</span><br><span class=\"line\">  group_wait: 5s</span><br><span class=\"line\">  group_interval: 5s</span><br><span class=\"line\">  repeat_interval: 5m</span><br><span class=\"line\">  # 默认发给&quot;sre_system&quot;组用户</span><br><span class=\"line\">  receiver: &#x27;sre_system&#x27;</span><br><span class=\"line\">  continue: false</span><br><span class=\"line\">  # 配置子路由</span><br><span class=\"line\">  routes:</span><br><span class=\"line\">    - receiver: &#x27;sre_dba&#x27;</span><br><span class=\"line\">      match_re:</span><br><span class=\"line\">        job: test</span><br><span class=\"line\">      # 建议将continue的值设置为true，表示当前的条件是否匹配，都将继续向下匹配规则</span><br><span class=\"line\">      # 这样做的目的是将消息发给最后的系统组(sre_system)</span><br><span class=\"line\">      continue: true</span><br><span class=\"line\">==================================================================</span><br><span class=\"line\">#rule.yml</span><br><span class=\"line\">- name: grafana</span><br><span class=\"line\">  rules:</span><br><span class=\"line\">  - alert: node           #这个相当于alertname的值,与之前匹配的相同</span><br><span class=\"line\">    expr: up&#123;job=&quot;grafana&quot;&#125; == 0</span><br><span class=\"line\">    for: 10s                  </span><br><span class=\"line\">    labels:                   </span><br><span class=\"line\">      severity: 1 </span><br><span class=\"line\">      job: test  # 对应上面的 match_re</span><br><span class=\"line\">      team: grafana        #这里标签设置不同的一会用</span><br><span class=\"line\">    annotations:              </span><br><span class=\"line\">      summary: &quot;&#123;&#123; \\$labels.instance &#125;&#125; 已停止运行超过 15s&quot;</span><br><span class=\"line\">      description: hello world</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\">alertname 等于 node 如果相同报警会一起发送</span><br><span class=\"line\">team 等于 grafana </span><br></pre></td></tr></table></figure>\n<h2 id=\"抑制规则\"><a href=\"#抑制规则\" class=\"headerlink\" title=\"抑制规则\"></a>抑制规则</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">inhibit_rules:</span><br><span class=\"line\">  - source_match:</span><br><span class=\"line\">      severity: &#x27;告警&#x27;</span><br><span class=\"line\">    target_match:</span><br><span class=\"line\">      severity: &#x27;提示&#x27;</span><br><span class=\"line\">    #equal: [&#x27;type&#x27;,&#x27;test&#x27;] 要求 type 和 test签均相同</span><br><span class=\"line\">     equal: [&#x27;type&#x27;]type的值必须一样</span><br><span class=\"line\">当匹配到 告警 时就会抑制提示的告警通知并检查他们是否来自于同个</span><br><span class=\"line\">ssl（即ssl标签的值相同抑制才会生效）</span><br><span class=\"line\">当子路由匹配到不同的 severity 时就会将消息发往不同的 receiver，当子路由无法匹配到时，消息会默认发往根路由的 receiver，因此，无论是否匹配到子路由规则，消息都会发往根路由的 receiver</span><br><span class=\"line\">对应报警规则配置为</span><br><span class=\"line\">groups:</span><br><span class=\"line\">- name: node-alerts</span><br><span class=\"line\">  rules:</span><br><span class=\"line\">  - alert: HighNodeCPU</span><br><span class=\"line\">    expr: (1 - avg(rate(node_cpu_seconds_total&#123;mode=&quot;idle&quot;&#125;[5m])) by (instance)) * 100 &gt; 80</span><br><span class=\"line\">    for: 5m</span><br><span class=\"line\">    labels:</span><br><span class=\"line\">      severity: &quot;告警&quot;</span><br><span class=\"line\">      type: ssl</span><br><span class=\"line\">    annotations:</span><br><span class=\"line\">      summary: &quot;高节点CPU使用率 (&#123;&#123; $labels.instance &#125;&#125;)&quot;</span><br><span class=\"line\">      description: &quot;节点 &#123;&#123; $labels.instance &#125;&#125; CPU 使用率超过 80% 已持续 5 分钟&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">- name: cluster-alerts</span><br><span class=\"line\">  rules:</span><br><span class=\"line\">  - alert: ClusterWideCPUProblem</span><br><span class=\"line\">    expr: |</span><br><span class=\"line\">      sum( (1 - avg(rate(node_cpu_seconds_total&#123;mode=&quot;idle&quot;&#125;[5m])) by (instance)) * 100 &gt; 80 )</span><br><span class=\"line\">      /</span><br><span class=\"line\">      count( (1 - avg(rate(node_cpu_seconds_total&#123;mode=&quot;idle&quot;&#125;[5m])) by (instance)) )</span><br><span class=\"line\">      * 100 &gt; 50</span><br><span class=\"line\">    for: 10m</span><br><span class=\"line\">    labels:</span><br><span class=\"line\">      severity: &quot;提示&quot;</span><br><span class=\"line\">      type: ssl</span><br><span class=\"line\">    annotations:</span><br><span class=\"line\">      summary: &quot;集群级CPU问题&quot;</span><br><span class=\"line\">      description: &quot;超过 50% 的节点持续高CPU使用率达 10 分钟&quot;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"alertmanager集成三方告警\"><a href=\"#alertmanager集成三方告警\" class=\"headerlink\" title=\"alertmanager集成三方告警\"></a>alertmanager集成三方告警</h1><blockquote>\n<p>原生alertmanager只有邮件和webhook告警；Alertmanager 的原生 Webhook 告警是一种通过 HTTP POST 请求将告警信息发送到自定义接口（Webhook 接收端）的机制；所以要对接需要开发者自行开发，这里推荐两个现成的工具来对接</p>\n</blockquote>\n<h2 id=\"PrometheusAlert使用\"><a href=\"#PrometheusAlert使用\" class=\"headerlink\" title=\"PrometheusAlert使用\"></a>PrometheusAlert使用</h2><blockquote>\n<p>Prometheus Alert 是开源的运维告警中心消息转发系统，支持主流的监控系统 Prometheus，日志系统 Graylog 和数据可视化系统 Grafana 发出的预警消息。通知渠道支持钉钉、微信、华为云短信、腾讯云短信、腾讯云电话、阿里云短信、阿里云电话等等</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/feiyu563/PrometheusAlert/releases/download/v4.8.1/linux.zip</span><br><span class=\"line\">chmod +x PrometheusAlert</span><br><span class=\"line\">启动 nohup ./PrometheusAlert &amp; 后台运行</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">alertmanager.yml配置集成PrometheusAlert；格式可以登录PrometheusAlert查看</span></span><br><span class=\"line\">receivers:</span><br><span class=\"line\">- name: &#x27;web.hook.prometheusalert&#x27;</span><br><span class=\"line\">  webhook_configs:</span><br><span class=\"line\">  - url: &#x27;http://192.168.197.142:8080/prometheusalert?type=wx&amp;tpl=prometheus-wx&amp;wxurl=https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=53fdb356-4446-42e5-b8bd-f7da63bcfe76&#x27;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2025/04/27/alertmanager/image.png\" alt=\"alt text\"></p>\n<h2 id=\"prometheus-webhook-dingtalk使用\"><a href=\"#prometheus-webhook-dingtalk使用\" class=\"headerlink\" title=\"prometheus-webhook-dingtalk使用\"></a>prometheus-webhook-dingtalk使用</h2><blockquote>\n<p>Prometheus 的Alertmanager自身不支持钉钉报警，需要通过插件的方式来达到报警条件</p>\n</blockquote>\n<h3 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/timonwong/prometheus-webhook-dingtalk/releases/download/v2.1.0/prometheus-webhook-dingtalk-2.1.0.linux-amd64.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">tar zxf prometheus-webhook-dingtalk-2.1.0.linux-amd64.tar.gz </span><br><span class=\"line\">mv prometheus-webhook-dingtalk-2.1.0.linux-amd64 /usr/local/prometheus-webhook-dingtalk</span><br><span class=\"line\">cat &gt; /usr/lib/systemd/system/webhook-dingtalk.service &lt;&lt; EOF</span><br><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=prometheus-webhook-dingtalk</span><br><span class=\"line\">Documentation=https://github.com/timonwong/prometheus-webhook-dingtalk</span><br><span class=\"line\">After=network.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">User=root</span><br><span class=\"line\">Group=root</span><br><span class=\"line\">ExecStart=/usr/local/prometheus-webhook-dingtalk/prometheus-webhook-dingtalk  --config.file=/usr/local/prometheus-webhook-dingtalk/config.yml</span><br><span class=\"line\">ExecReload=/bin/kill -HUP $MAINPID</span><br><span class=\"line\">KillMode=process</span><br><span class=\"line\">Restart=on-failure</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">集成模版/usr/local/prometheus-webhook-dingtalk/config.yml</span></span><br><span class=\"line\">templates:</span><br><span class=\"line\">    - /usr/local/prometheus/webhook-dingtalk/template.tmpl</span><br><span class=\"line\">targets:</span><br><span class=\"line\">  webhook1:</span><br><span class=\"line\">    url: https://oapi.dingtalk.com/robot/send?access_token=9ac4354ab7c8</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">alertmanager配置发送给dingtalk插件</span></span><br><span class=\"line\">receivers:</span><br><span class=\"line\">  - name: &#x27;email&#x27;</span><br><span class=\"line\">    email_configs:</span><br><span class=\"line\">      - to: &#x27;xxxxx@163.com&#x27; #指定发送给谁</span><br><span class=\"line\">  - name: &#x27;webhook1&#x27;</span><br><span class=\"line\">    webhook_configs:</span><br><span class=\"line\">      - send_resolved: false</span><br><span class=\"line\">        url: http://localhost:8060/dingtalk/webhook1/send</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"报警内容模版\"><a href=\"#报警内容模版\" class=\"headerlink\" title=\"报警内容模版\"></a>报警内容模版</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /usr/local/prometheus/webhook-dingtalk/template.tmpl</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; define &quot;__subject&quot; &#125;&#125;</span><br><span class=\"line\">[&#123;&#123; .Status | toUpper &#125;&#125;&#123;&#123; if eq .Status &quot;firing&quot; &#125;&#125;:&#123;&#123; .Alerts.Firing | len &#125;&#125;&#123;&#123; end &#125;&#125;]</span><br><span class=\"line\">&#123;&#123; end &#125;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">&#123;&#123; define &quot;__alert_list&quot; &#125;&#125;&#123;&#123; range . &#125;&#125;</span><br><span class=\"line\">---</span><br><span class=\"line\">&#123;&#123; if .Labels.owner &#125;&#125;@&#123;&#123; .Labels.owner &#125;&#125;&#123;&#123; end &#125;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">**告警主题**: &#123;&#123; .Annotations.summary &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">**告警类型**: &#123;&#123; .Labels.alertname &#125;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">**告警级别**: &#123;&#123; .Labels.severity &#125;&#125; </span><br><span class=\"line\"> </span><br><span class=\"line\">**告警主机**: &#123;&#123; .Labels.instance &#125;&#125; </span><br><span class=\"line\"> </span><br><span class=\"line\">**告警信息**: &#123;&#123; index .Annotations &quot;description&quot; &#125;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">**告警时间**: &#123;&#123; dateInZone &quot;2006.01.02 15:04:05&quot; (.StartsAt) &quot;Asia/Shanghai&quot; &#125;&#125;</span><br><span class=\"line\">&#123;&#123; end &#125;&#125;&#123;&#123; end &#125;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#123;&#123; define &quot;__resolved_list&quot; &#125;&#125;&#123;&#123; range . &#125;&#125;</span><br><span class=\"line\">---</span><br><span class=\"line\">&#123;&#123; if .Labels.owner &#125;&#125;@&#123;&#123; .Labels.owner &#125;&#125;&#123;&#123; end &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">**告警主题**: &#123;&#123; .Annotations.summary &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">**告警类型**: &#123;&#123; .Labels.alertname &#125;&#125; </span><br><span class=\"line\"> </span><br><span class=\"line\">**告警级别**: &#123;&#123; .Labels.severity &#125;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">**告警主机**: &#123;&#123; .Labels.instance &#125;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">**告警信息**: &#123;&#123; index .Annotations &quot;description&quot; &#125;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">**告警时间**: &#123;&#123; dateInZone &quot;2006.01.02 15:04:05&quot; (.StartsAt) &quot;Asia/Shanghai&quot; &#125;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">**恢复时间**: &#123;&#123; dateInZone &quot;2006.01.02 15:04:05&quot; (.EndsAt) &quot;Asia/Shanghai&quot; &#125;&#125;</span><br><span class=\"line\">&#123;&#123; end &#125;&#125;&#123;&#123; end &#125;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">&#123;&#123; define &quot;default.title&quot; &#125;&#125;</span><br><span class=\"line\">&#123;&#123; template &quot;__subject&quot; . &#125;&#125;</span><br><span class=\"line\">&#123;&#123; end &#125;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#123;&#123; define &quot;default.content&quot; &#125;&#125;</span><br><span class=\"line\">&#123;&#123; if gt (len .Alerts.Firing) 0 &#125;&#125;</span><br><span class=\"line\">**====侦测到&#123;&#123; .Alerts.Firing | len  &#125;&#125;个故障====**</span><br><span class=\"line\">&#123;&#123; template &quot;__alert_list&quot; .Alerts.Firing &#125;&#125;</span><br><span class=\"line\">---</span><br><span class=\"line\">&#123;&#123; end &#125;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#123;&#123; if gt (len .Alerts.Resolved) 0 &#125;&#125;</span><br><span class=\"line\">**====恢复&#123;&#123; .Alerts.Resolved | len  &#125;&#125;个故障====**</span><br><span class=\"line\">&#123;&#123; template &quot;__resolved_list&quot; .Alerts.Resolved &#125;&#125;</span><br><span class=\"line\">&#123;&#123; end &#125;&#125;</span><br><span class=\"line\">&#123;&#123; end &#125;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">&#123;&#123; define &quot;ding.link.title&quot; &#125;&#125;&#123;&#123; template &quot;default.title&quot; . &#125;&#125;&#123;&#123; end &#125;&#125;</span><br><span class=\"line\">&#123;&#123; define &quot;ding.link.content&quot; &#125;&#125;&#123;&#123; template &quot;default.content&quot; . &#125;&#125;&#123;&#123; end &#125;&#125;</span><br><span class=\"line\">&#123;&#123; template &quot;default.title&quot; . &#125;&#125;</span><br><span class=\"line\">&#123;&#123; template &quot;default.content&quot; . &#125;&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"报警规则示例\"><a href=\"#报警规则示例\" class=\"headerlink\" title=\"报警规则示例\"></a>报警规则示例</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /usr/local/prometheus/prometheus/rule</span><br><span class=\"line\">vim /usr/local/prometheus/prometheus/rule/node_exporter.yml</span><br><span class=\"line\"></span><br><span class=\"line\">groups:</span><br><span class=\"line\">- name: 服务器资源监控</span><br><span class=\"line\">  rules:</span><br><span class=\"line\">  - alert: 内存使用率过高</span><br><span class=\"line\">    expr: 100 - (node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes) * 100 &gt; 80</span><br><span class=\"line\">    for: 3m </span><br><span class=\"line\">    labels:</span><br><span class=\"line\">      severity: 严重告警</span><br><span class=\"line\">    annotations:</span><br><span class=\"line\">      summary: &quot;&#123;&#123; $labels.instance &#125;&#125; 内存使用率过高, 请尽快处理！&quot;</span><br><span class=\"line\">      description: &quot;&#123;&#123; $labels.instance &#125;&#125;内存使用率超过80%,当前使用率&#123;&#123; $value &#125;&#125;%.&quot;</span><br><span class=\"line\">          </span><br><span class=\"line\">  - alert: 服务器宕机</span><br><span class=\"line\">    expr: up == 0</span><br><span class=\"line\">    for: 1s</span><br><span class=\"line\">    labels:</span><br><span class=\"line\">      severity: 严重告警</span><br><span class=\"line\">    annotations:</span><br><span class=\"line\">      summary: &quot;&#123;&#123;$labels.instance&#125;&#125; 服务器宕机, 请尽快处理!&quot;</span><br><span class=\"line\">      description: &quot;&#123;&#123;$labels.instance&#125;&#125; 服务器延时超过3分钟,当前状态&#123;&#123; $value &#125;&#125;. &quot;</span><br><span class=\"line\"> </span><br><span class=\"line\">  - alert: CPU高负荷</span><br><span class=\"line\">    expr: 100 - (avg by (instance,job)(irate(node_cpu_seconds_total&#123;mode=&quot;idle&quot;&#125;[5m])) * 100) &gt; 90</span><br><span class=\"line\">    for: 5m</span><br><span class=\"line\">    labels:</span><br><span class=\"line\">      severity: 严重告警</span><br><span class=\"line\">    annotations:</span><br><span class=\"line\">      summary: &quot;&#123;&#123;$labels.instance&#125;&#125; CPU使用率过高,请尽快处理！&quot;</span><br><span class=\"line\">      description: &quot;&#123;&#123;$labels.instance&#125;&#125; CPU使用大于90%,当前使用率&#123;&#123; $value &#125;&#125;%. &quot;</span><br><span class=\"line\">      </span><br><span class=\"line\">  - alert: 磁盘IO性能</span><br><span class=\"line\">    expr: avg(irate(node_disk_io_time_seconds_total[1m])) by(instance,job)* 100 &gt; 90</span><br><span class=\"line\">    for: 5m</span><br><span class=\"line\">    labels:</span><br><span class=\"line\">      severity: 严重告警</span><br><span class=\"line\">    annotations:</span><br><span class=\"line\">      summary: &quot;&#123;&#123;$labels.instance&#125;&#125; 流入磁盘IO使用率过高,请尽快处理！&quot;</span><br><span class=\"line\">      description: &quot;&#123;&#123;$labels.instance&#125;&#125; 流入磁盘IO大于90%,当前使用率&#123;&#123; $value &#125;&#125;%.&quot;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">  - alert: 网络流入</span><br><span class=\"line\">    expr: ((sum(rate (node_network_receive_bytes_total&#123;device!~&#x27;tap.*|veth.*|br.*|docker.*|virbr*|lo*&#x27;&#125;[5m])) by (instance,job)) / 100) &gt; 102400</span><br><span class=\"line\">    for: 5m</span><br><span class=\"line\">    labels:</span><br><span class=\"line\">      severity: 严重告警</span><br><span class=\"line\">    annotations:</span><br><span class=\"line\">      summary: &quot;&#123;&#123;$labels.instance&#125;&#125; 流入网络带宽过高，请尽快处理！&quot;</span><br><span class=\"line\">      description: &quot;&#123;&#123;$labels.instance&#125;&#125; 流入网络带宽持续5分钟高于100M. RX带宽使用量&#123;&#123;$value&#125;&#125;.&quot;</span><br><span class=\"line\"> </span><br><span class=\"line\">  - alert: 网络流出</span><br><span class=\"line\">    expr: ((sum(rate (node_network_transmit_bytes_total&#123;device!~&#x27;tap.*|veth.*|br.*|docker.*|virbr*|lo*&#x27;&#125;[5m])) by (instance,job)) / 100) &gt; 102400</span><br><span class=\"line\">    for: 5m</span><br><span class=\"line\">    labels:</span><br><span class=\"line\">      severity: 严重告警</span><br><span class=\"line\">    annotations:</span><br><span class=\"line\">      summary: &quot;&#123;&#123;$labels.instance&#125;&#125; 流出网络带宽过高,请尽快处理！&quot;</span><br><span class=\"line\">      description: &quot;&#123;&#123;$labels.instance&#125;&#125; 流出网络带宽持续5分钟高于100M. RX带宽使用量&#123;$value&#125;&#125;.&quot;</span><br><span class=\"line\">  </span><br><span class=\"line\">  - alert: TCP连接数</span><br><span class=\"line\">    expr: node_netstat_Tcp_CurrEstab &gt; 10000</span><br><span class=\"line\">    for: 2m</span><br><span class=\"line\">    labels:</span><br><span class=\"line\">      severity: 严重告警</span><br><span class=\"line\">    annotations:</span><br><span class=\"line\">      summary: &quot; TCP_ESTABLISHED过高！&quot;</span><br><span class=\"line\">      description: &quot;&#123;&#123;$labels.instance&#125;&#125; TCP_ESTABLISHED大于100%,当前使用率&#123;&#123; $value &#125;&#125;%.&quot;</span><br><span class=\"line\"> </span><br><span class=\"line\">  - alert: 磁盘容量</span><br><span class=\"line\">    expr: 100-(node_filesystem_free_bytes&#123;fstype=~&quot;ext4|xfs&quot;&#125;/node_filesystem_size_bytes &#123;fstype=~&quot;ext4|xfs&quot;&#125;*100) &gt; 90</span><br><span class=\"line\">    for: 1m</span><br><span class=\"line\">    labels:</span><br><span class=\"line\">      severity: 严重告警</span><br><span class=\"line\">    annotations:</span><br><span class=\"line\">      summary: &quot;&#123;&#123;$labels.mountpoint&#125;&#125; 磁盘分区使用率过高，请尽快处理！&quot;</span><br><span class=\"line\">      description: &quot;&#123;&#123;$labels.instance&#125;&#125; 磁盘分区使用大于90%，当前使用率&#123;&#123; $value &#125;&#125;%.&quot;</span><br></pre></td></tr></table></figure>\n"},{"title":"elastcisearch_dump","date":"2025-08-12T07:16:41.000Z","_content":"\n# esdump\nhttps://github.com/elasticsearch-dump/elasticsearch-dump\n```shell\ndocker pull elasticdump/elasticsearch-dump\nor\nwget https://nodejs.org/dist/v16.18.0/node-v16.18.0-linux-x64.tar.xz\nexport PATH=$PATH:/root/node-v16.18.0-linux-x64/bin/\nnpm install elasticdump -g\n#bash\nPREFIX=\"y-logs-\"\ncurl -s \"http://localhost:9200/_cat/indices?h=index\" | grep \"^${PREFIX}\" | while read -r INDEX_NAME; do\n#INDEX_NAME=\"y-logs-2025\"\n    for TYPE in {settings,mapping,data};do\n        echo \"start $TYPE of index  [$INDEX_NAME]...\"\n        elasticdump  --input=http://localhost:9200/$INDEX_NAME     --output=http://username:passwd@dest_addr.com:9200/$INDEX_NAME     --type=$TYPE --limit 10000\n    done\n    echo '=============================================='\n    sleep 3\ndone\n# --limit 并发数\n# --output=/data/es/${INDEX_NAME}.json 备份可以保存到文件 \n# --httpAuthFile指定HTTP认证文件\n# --searchBody=\"{\\\"query\\\":{\\\"term\\\":{\\\"username\\\": \\\"admin\\\"}}}\" 过滤\n```\n\n\n# snapshot\n```shell\n#设置fs类型仓库存储路径；然后重启es\nexport path.repo=/usr/share/elasticsearch/data/es_snapshot\n#创建仓库\ncurl -XPUT 'http://localhost:9200/_snapshot/y_repo' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"type\": \"fs\",\n    \"settings\": {\n      \"location\": \"/usr/share/elasticsearch/data/es_snapshot\",\n      \"compress\": true\n    }\n  }'\n#location必须和path.repo一致\n#查看\ncurl  -s localhost:9200/_snapshot/y_repo|jq\n#删除\ncurl -XDELETE localhost:9200/_snapshot/y_repo\n=======================================================\n#创建快照\n#不指定索引就是快照所有\ncurl -XPUT   localhost:9200/_snapshot/y_repo/snapshot_all  #?wait_for_completion=true \n#指定索引快照\ncurl -H \"Content-Type: application/json\" -XPUT localhost:9200/_snapshot/y_repo/snapshot_202508_01-02?pretty -d'\n{\n\"indices\": \"y-logs-2025.08.01,y-logs-2025.08.02\"\n}'\n#查看快照信息\ncurl localhost:9200/_cat/snapshots/y_repo?v\ncurl localhost:9200/_cat/snapshots/_all?v\n#查看快照包含的索引信息\ncurl   -Ss localhost:9200/_snapshot/y_repo/_all|jq\ncurl   -Ss localhost:9200/_snapshot/y_repo/snapshot_202508_01-02|jq\ncurl   -Ss localhost:9200/_snapshot/y_repo/snapshot_202508_01-02/_status|jq\n=======================================================\n#恢复快照;目标索引名称尽量不要存在同名\ncurl -X POST \"http://localhost:9200/_snapshot/y_repo/snapshot_all/_restore\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"indices\": \"y-logs-2025.08.*\",\n    \"rename_pattern\": \"y-logs-2025.08.01\",\n    \"rename_replacement\": \"y_new_repo\"\n  }'\n#indices指定恢复的索引名称;需要精确匹配如果范围较大，rename_pattern匹配不上的会直接名称不变恢复\n#rename_pattern\t正则表达式，匹配原始索引名称中的模式（用于捕获需要替换的部分）\n#rename_replacement\t替换后的新索引名称模板（使用 $1、$2 等引用正则表达式中的捕获组）\n#示例json参数\n'{\n  \"indices\": \"y-logs-2025.08.01\"  // 仅恢复该索引，名称不变\n}'\n'{\n  \"indices\": \"y-logs-2025.08.01\",\n  \"rename_pattern\": \"(.+)\",          // 匹配整个原始名称\n  \"rename_replacement\": \"restored_$1\" // 新名称：restored_y-logs-2025.08.01\n}'\n'{\n  \"indices\": \"y-logs*\",\n  \"rename_pattern\": \"y-logs-(\\\\d{4})\\\\.(\\\\d{2})\\\\.(\\\\d{2})\",  // 捕获年、月、日\n  \"rename_replacement\": \"archive_$1-$2-$3\"  // 新名称：archive_2025-08-01\n}'\n'{\n    \"indices\": \"*,-.security*,-.kibana*\", //使用- 过滤不迁移的索引\n    \"ignore_unavailable\": \"true\"\n}'\n=========================================================================\n#查看快照恢复情况\ncurl -s -X GET \"http://localhost:9200/_recovery/\"|jq\ncurl -X GET \"http://localhost:9200/_cat/recovery/?v\"\ncurl -s -X GET \"http://localhost:9200/archive_2025-08-08/_recovery/\"|jq\ncurl -s -X GET \"http://localhost:9200/_cat/recovery/archive_2025-08-08?format=json\"|jq\n{\n    \"index\": \"archive_2025-08-08\",\n    \"shard\": \"0\",\n    \"time\": \"441ms\", 恢复总耗时（441 毫秒）\n    \"type\": \"snapshot\", 恢复类型为 快照恢复（从快照仓库恢复数据）。\n    \"stage\": \"done\", 当前恢复阶段：- init（初始化）- index（复制索引文件）- translog（传输事务日志）- finalize（完成恢复）- done（已完成）\n    \"source_host\": \"n/a\", 源数据节点的主机名或 IP（仅在跨节点恢复时出现，如分片迁移）\n    \"source_node\": \"n/a\", 源节点的名称（Elasticsearch 集群内唯一标识）。\n    \"target_host\": \"172.26.0.2\", 目标\n    \"target_node\": \"be439083dc6b\",\n    \"repository\": \"y_repo\",\n    \"snapshot\": \"snapshot_all\",\n    \"files\": \"35\", 需要恢复文件数\n    \"files_recovered\": \"35\", 已经恢复\n    \"files_percent\": \"100.0%\", 进度\n    \"files_total\": \"35\", 总文件数\n    \"bytes\": \"3429792\", 字节\n    \"bytes_recovered\": \"3429792\", 已恢复字节数\n    \"bytes_percent\": \"100.0%\", 进度\n    \"bytes_total\": \"3429792\",\n    \"translog_ops\": \"0\", 需要恢复的事务日志操作总数\n    \"translog_ops_recovered\": \"0\", \n    \"translog_ops_percent\": \"100.0%\"\n  }\n\n\n\n#查看仓库级别的进度;只显示正在执行的快照相关操作，已完成的不显示\ncurl -s -X GET \"http://localhost:9200/_snapshot/y_repo/_current\"|jq\n#通过 stats.processed_files 和 processed_size_in_bytes 估算剩余时间\n{\n  \"snapshots\": [\n    {\n      \"snapshot\": \"snapshot_all\",       // 快照名称\n      \"uuid\": \"ABC123\",                    // 快照唯一ID\n      \"state\": \"IN_PROGRESS\",              // 执行状态\n      \"include_global_state\": true,        // 是否包含集群全局状态\n      \"shards_stats\": {\n        \"initializing\": 0,                 // 初始化中的分片数\n        \"started\": 5,                      // 进行中的分片数\n        \"finalizing\": 0,                   // 最终化中的分片数\n        \"done\": 10,                        // 已完成的分片数\n        \"failed\": 0,                       // 失败的分片数\n        \"total\": 15                        // 总分片数\n      },\n      \"stats\": {\n        \"number_of_files\": 100,            // 总文件数\n        \"processed_files\": 80,             // 已处理文件数\n        \"total_size_in_bytes\": 1024000,    // 总字节数\n        \"processed_size_in_bytes\": 819200  // 已处理字节数\n      },\n      \"indices\": {                         // 涉及的索引及各自分片状态\n        \"logs-2023\": {\n          \"shards_stats\": { ... },\n          \"stats\": { ... }\n        }\n      },\n      \"start_time\": \"2023-10-05T14:00:00.000Z\",  // 任务开始时间\n      \"end_time\": null                     // 任务结束时间（未完成时为null）\n    }\n  ]\n}\n\n```\n# 迁移恢复到其他集群\n1. esdump直接导出导入即可不多讲\n2. snapshot方式需要将fs的物理存储路径拷贝到新节点，然后在新节点es重新注册同名仓库后快照可以直接来使用恢复；如果是nfs或者s3（自建minio这种）这种类型就不需要迁移文件直接注册同名仓库后恢复即可\n","source":"_posts/elastcisearch-dump.md","raw":"---\ntitle: elastcisearch_dump\ndate: 2025-08-12 15:16:41\ntags: es\ncategories: 中间件\n---\n\n# esdump\nhttps://github.com/elasticsearch-dump/elasticsearch-dump\n```shell\ndocker pull elasticdump/elasticsearch-dump\nor\nwget https://nodejs.org/dist/v16.18.0/node-v16.18.0-linux-x64.tar.xz\nexport PATH=$PATH:/root/node-v16.18.0-linux-x64/bin/\nnpm install elasticdump -g\n#bash\nPREFIX=\"y-logs-\"\ncurl -s \"http://localhost:9200/_cat/indices?h=index\" | grep \"^${PREFIX}\" | while read -r INDEX_NAME; do\n#INDEX_NAME=\"y-logs-2025\"\n    for TYPE in {settings,mapping,data};do\n        echo \"start $TYPE of index  [$INDEX_NAME]...\"\n        elasticdump  --input=http://localhost:9200/$INDEX_NAME     --output=http://username:passwd@dest_addr.com:9200/$INDEX_NAME     --type=$TYPE --limit 10000\n    done\n    echo '=============================================='\n    sleep 3\ndone\n# --limit 并发数\n# --output=/data/es/${INDEX_NAME}.json 备份可以保存到文件 \n# --httpAuthFile指定HTTP认证文件\n# --searchBody=\"{\\\"query\\\":{\\\"term\\\":{\\\"username\\\": \\\"admin\\\"}}}\" 过滤\n```\n\n\n# snapshot\n```shell\n#设置fs类型仓库存储路径；然后重启es\nexport path.repo=/usr/share/elasticsearch/data/es_snapshot\n#创建仓库\ncurl -XPUT 'http://localhost:9200/_snapshot/y_repo' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"type\": \"fs\",\n    \"settings\": {\n      \"location\": \"/usr/share/elasticsearch/data/es_snapshot\",\n      \"compress\": true\n    }\n  }'\n#location必须和path.repo一致\n#查看\ncurl  -s localhost:9200/_snapshot/y_repo|jq\n#删除\ncurl -XDELETE localhost:9200/_snapshot/y_repo\n=======================================================\n#创建快照\n#不指定索引就是快照所有\ncurl -XPUT   localhost:9200/_snapshot/y_repo/snapshot_all  #?wait_for_completion=true \n#指定索引快照\ncurl -H \"Content-Type: application/json\" -XPUT localhost:9200/_snapshot/y_repo/snapshot_202508_01-02?pretty -d'\n{\n\"indices\": \"y-logs-2025.08.01,y-logs-2025.08.02\"\n}'\n#查看快照信息\ncurl localhost:9200/_cat/snapshots/y_repo?v\ncurl localhost:9200/_cat/snapshots/_all?v\n#查看快照包含的索引信息\ncurl   -Ss localhost:9200/_snapshot/y_repo/_all|jq\ncurl   -Ss localhost:9200/_snapshot/y_repo/snapshot_202508_01-02|jq\ncurl   -Ss localhost:9200/_snapshot/y_repo/snapshot_202508_01-02/_status|jq\n=======================================================\n#恢复快照;目标索引名称尽量不要存在同名\ncurl -X POST \"http://localhost:9200/_snapshot/y_repo/snapshot_all/_restore\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"indices\": \"y-logs-2025.08.*\",\n    \"rename_pattern\": \"y-logs-2025.08.01\",\n    \"rename_replacement\": \"y_new_repo\"\n  }'\n#indices指定恢复的索引名称;需要精确匹配如果范围较大，rename_pattern匹配不上的会直接名称不变恢复\n#rename_pattern\t正则表达式，匹配原始索引名称中的模式（用于捕获需要替换的部分）\n#rename_replacement\t替换后的新索引名称模板（使用 $1、$2 等引用正则表达式中的捕获组）\n#示例json参数\n'{\n  \"indices\": \"y-logs-2025.08.01\"  // 仅恢复该索引，名称不变\n}'\n'{\n  \"indices\": \"y-logs-2025.08.01\",\n  \"rename_pattern\": \"(.+)\",          // 匹配整个原始名称\n  \"rename_replacement\": \"restored_$1\" // 新名称：restored_y-logs-2025.08.01\n}'\n'{\n  \"indices\": \"y-logs*\",\n  \"rename_pattern\": \"y-logs-(\\\\d{4})\\\\.(\\\\d{2})\\\\.(\\\\d{2})\",  // 捕获年、月、日\n  \"rename_replacement\": \"archive_$1-$2-$3\"  // 新名称：archive_2025-08-01\n}'\n'{\n    \"indices\": \"*,-.security*,-.kibana*\", //使用- 过滤不迁移的索引\n    \"ignore_unavailable\": \"true\"\n}'\n=========================================================================\n#查看快照恢复情况\ncurl -s -X GET \"http://localhost:9200/_recovery/\"|jq\ncurl -X GET \"http://localhost:9200/_cat/recovery/?v\"\ncurl -s -X GET \"http://localhost:9200/archive_2025-08-08/_recovery/\"|jq\ncurl -s -X GET \"http://localhost:9200/_cat/recovery/archive_2025-08-08?format=json\"|jq\n{\n    \"index\": \"archive_2025-08-08\",\n    \"shard\": \"0\",\n    \"time\": \"441ms\", 恢复总耗时（441 毫秒）\n    \"type\": \"snapshot\", 恢复类型为 快照恢复（从快照仓库恢复数据）。\n    \"stage\": \"done\", 当前恢复阶段：- init（初始化）- index（复制索引文件）- translog（传输事务日志）- finalize（完成恢复）- done（已完成）\n    \"source_host\": \"n/a\", 源数据节点的主机名或 IP（仅在跨节点恢复时出现，如分片迁移）\n    \"source_node\": \"n/a\", 源节点的名称（Elasticsearch 集群内唯一标识）。\n    \"target_host\": \"172.26.0.2\", 目标\n    \"target_node\": \"be439083dc6b\",\n    \"repository\": \"y_repo\",\n    \"snapshot\": \"snapshot_all\",\n    \"files\": \"35\", 需要恢复文件数\n    \"files_recovered\": \"35\", 已经恢复\n    \"files_percent\": \"100.0%\", 进度\n    \"files_total\": \"35\", 总文件数\n    \"bytes\": \"3429792\", 字节\n    \"bytes_recovered\": \"3429792\", 已恢复字节数\n    \"bytes_percent\": \"100.0%\", 进度\n    \"bytes_total\": \"3429792\",\n    \"translog_ops\": \"0\", 需要恢复的事务日志操作总数\n    \"translog_ops_recovered\": \"0\", \n    \"translog_ops_percent\": \"100.0%\"\n  }\n\n\n\n#查看仓库级别的进度;只显示正在执行的快照相关操作，已完成的不显示\ncurl -s -X GET \"http://localhost:9200/_snapshot/y_repo/_current\"|jq\n#通过 stats.processed_files 和 processed_size_in_bytes 估算剩余时间\n{\n  \"snapshots\": [\n    {\n      \"snapshot\": \"snapshot_all\",       // 快照名称\n      \"uuid\": \"ABC123\",                    // 快照唯一ID\n      \"state\": \"IN_PROGRESS\",              // 执行状态\n      \"include_global_state\": true,        // 是否包含集群全局状态\n      \"shards_stats\": {\n        \"initializing\": 0,                 // 初始化中的分片数\n        \"started\": 5,                      // 进行中的分片数\n        \"finalizing\": 0,                   // 最终化中的分片数\n        \"done\": 10,                        // 已完成的分片数\n        \"failed\": 0,                       // 失败的分片数\n        \"total\": 15                        // 总分片数\n      },\n      \"stats\": {\n        \"number_of_files\": 100,            // 总文件数\n        \"processed_files\": 80,             // 已处理文件数\n        \"total_size_in_bytes\": 1024000,    // 总字节数\n        \"processed_size_in_bytes\": 819200  // 已处理字节数\n      },\n      \"indices\": {                         // 涉及的索引及各自分片状态\n        \"logs-2023\": {\n          \"shards_stats\": { ... },\n          \"stats\": { ... }\n        }\n      },\n      \"start_time\": \"2023-10-05T14:00:00.000Z\",  // 任务开始时间\n      \"end_time\": null                     // 任务结束时间（未完成时为null）\n    }\n  ]\n}\n\n```\n# 迁移恢复到其他集群\n1. esdump直接导出导入即可不多讲\n2. snapshot方式需要将fs的物理存储路径拷贝到新节点，然后在新节点es重新注册同名仓库后快照可以直接来使用恢复；如果是nfs或者s3（自建minio这种）这种类型就不需要迁移文件直接注册同名仓库后恢复即可\n","slug":"elastcisearch-dump","published":1,"updated":"2025-08-28T06:39:18.058Z","comments":1,"layout":"post","photos":[],"_id":"cmev1gga80003hllzcnj315gd","content":"<h1 id=\"esdump\"><a href=\"#esdump\" class=\"headerlink\" title=\"esdump\"></a>esdump</h1><p><a href=\"https://github.com/elasticsearch-dump/elasticsearch-dump\">https://github.com/elasticsearch-dump/elasticsearch-dump</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull elasticdump/elasticsearch-dump</span><br><span class=\"line\">or</span><br><span class=\"line\">wget https://nodejs.org/dist/v16.18.0/node-v16.18.0-linux-x64.tar.xz</span><br><span class=\"line\">export PATH=$PATH:/root/node-v16.18.0-linux-x64/bin/</span><br><span class=\"line\">npm install elasticdump -g</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">bash</span></span><br><span class=\"line\">PREFIX=&quot;y-logs-&quot;</span><br><span class=\"line\">curl -s &quot;http://localhost:9200/_cat/indices?h=index&quot; | grep &quot;^$&#123;PREFIX&#125;&quot; | while read -r INDEX_NAME; do</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">INDEX_NAME=<span class=\"string\">&quot;y-logs-2025&quot;</span></span></span><br><span class=\"line\">    for TYPE in &#123;settings,mapping,data&#125;;do</span><br><span class=\"line\">        echo &quot;start $TYPE of index  [$INDEX_NAME]...&quot;</span><br><span class=\"line\">        elasticdump  --input=http://localhost:9200/$INDEX_NAME     --output=http://username:passwd@dest_addr.com:9200/$INDEX_NAME     --type=$TYPE --limit 10000</span><br><span class=\"line\">    done</span><br><span class=\"line\">    echo &#x27;==============================================&#x27;</span><br><span class=\"line\">    sleep 3</span><br><span class=\"line\">done</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">--<span class=\"built_in\">limit</span> 并发数</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">--output=/data/es/<span class=\"variable\">$&#123;INDEX_NAME&#125;</span>.json 备份可以保存到文件</span> </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">--httpAuthFile指定HTTP认证文件</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">--searchBody=<span class=\"string\">&quot;&#123;\\&quot;query\\&quot;:&#123;\\&quot;term\\&quot;:&#123;\\&quot;username\\&quot;: \\&quot;admin\\&quot;&#125;&#125;&#125;&quot;</span> 过滤</span></span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"snapshot\"><a href=\"#snapshot\" class=\"headerlink\" title=\"snapshot\"></a>snapshot</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">设置fs类型仓库存储路径；然后重启es</span></span><br><span class=\"line\">export path.repo=/usr/share/elasticsearch/data/es_snapshot</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">创建仓库</span></span><br><span class=\"line\">curl -XPUT &#x27;http://localhost:9200/_snapshot/y_repo&#x27; \\</span><br><span class=\"line\">  -H &#x27;Content-Type: application/json&#x27; \\</span><br><span class=\"line\">  -d &#x27;&#123;</span><br><span class=\"line\">    &quot;type&quot;: &quot;fs&quot;,</span><br><span class=\"line\">    &quot;settings&quot;: &#123;</span><br><span class=\"line\">      &quot;location&quot;: &quot;/usr/share/elasticsearch/data/es_snapshot&quot;,</span><br><span class=\"line\">      &quot;compress&quot;: true</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;&#x27;</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">location必须和path.repo一致</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">查看</span></span><br><span class=\"line\">curl  -s localhost:9200/_snapshot/y_repo|jq</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">删除</span></span><br><span class=\"line\">curl -XDELETE localhost:9200/_snapshot/y_repo</span><br><span class=\"line\">=======================================================</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">创建快照</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">不指定索引就是快照所有</span></span><br><span class=\"line\">curl -XPUT   localhost:9200/_snapshot/y_repo/snapshot_all  #?wait_for_completion=true </span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">指定索引快照</span></span><br><span class=\"line\">curl -H &quot;Content-Type: application/json&quot; -XPUT localhost:9200/_snapshot/y_repo/snapshot_202508_01-02?pretty -d&#x27;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&quot;indices&quot;: &quot;y-logs-2025.08.01,y-logs-2025.08.02&quot;</span><br><span class=\"line\">&#125;&#x27;</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">查看快照信息</span></span><br><span class=\"line\">curl localhost:9200/_cat/snapshots/y_repo?v</span><br><span class=\"line\">curl localhost:9200/_cat/snapshots/_all?v</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">查看快照包含的索引信息</span></span><br><span class=\"line\">curl   -Ss localhost:9200/_snapshot/y_repo/_all|jq</span><br><span class=\"line\">curl   -Ss localhost:9200/_snapshot/y_repo/snapshot_202508_01-02|jq</span><br><span class=\"line\">curl   -Ss localhost:9200/_snapshot/y_repo/snapshot_202508_01-02/_status|jq</span><br><span class=\"line\">=======================================================</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">恢复快照;目标索引名称尽量不要存在同名</span></span><br><span class=\"line\">curl -X POST &quot;http://localhost:9200/_snapshot/y_repo/snapshot_all/_restore&quot; \\</span><br><span class=\"line\">  -H &quot;Content-Type: application/json&quot; \\</span><br><span class=\"line\">  -d &#x27;&#123;</span><br><span class=\"line\">    &quot;indices&quot;: &quot;y-logs-2025.08.*&quot;,</span><br><span class=\"line\">    &quot;rename_pattern&quot;: &quot;y-logs-2025.08.01&quot;,</span><br><span class=\"line\">    &quot;rename_replacement&quot;: &quot;y_new_repo&quot;</span><br><span class=\"line\">  &#125;&#x27;</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">indices指定恢复的索引名称;需要精确匹配如果范围较大，rename_pattern匹配不上的会直接名称不变恢复</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">rename_pattern\t正则表达式，匹配原始索引名称中的模式（用于捕获需要替换的部分）</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">rename_replacement\t替换后的新索引名称模板（使用 <span class=\"variable\">$1</span>、<span class=\"variable\">$2</span> 等引用正则表达式中的捕获组）</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">示例json参数</span></span><br><span class=\"line\">&#x27;&#123;</span><br><span class=\"line\">  &quot;indices&quot;: &quot;y-logs-2025.08.01&quot;  // 仅恢复该索引，名称不变</span><br><span class=\"line\">&#125;&#x27;</span><br><span class=\"line\">&#x27;&#123;</span><br><span class=\"line\">  &quot;indices&quot;: &quot;y-logs-2025.08.01&quot;,</span><br><span class=\"line\">  &quot;rename_pattern&quot;: &quot;(.+)&quot;,          // 匹配整个原始名称</span><br><span class=\"line\">  &quot;rename_replacement&quot;: &quot;restored_$1&quot; // 新名称：restored_y-logs-2025.08.01</span><br><span class=\"line\">&#125;&#x27;</span><br><span class=\"line\">&#x27;&#123;</span><br><span class=\"line\">  &quot;indices&quot;: &quot;y-logs*&quot;,</span><br><span class=\"line\">  &quot;rename_pattern&quot;: &quot;y-logs-(\\\\d&#123;4&#125;)\\\\.(\\\\d&#123;2&#125;)\\\\.(\\\\d&#123;2&#125;)&quot;,  // 捕获年、月、日</span><br><span class=\"line\">  &quot;rename_replacement&quot;: &quot;archive_$1-$2-$3&quot;  // 新名称：archive_2025-08-01</span><br><span class=\"line\">&#125;&#x27;</span><br><span class=\"line\">&#x27;&#123;</span><br><span class=\"line\">    &quot;indices&quot;: &quot;*,-.security*,-.kibana*&quot;, //使用- 过滤不迁移的索引</span><br><span class=\"line\">    &quot;ignore_unavailable&quot;: &quot;true&quot;</span><br><span class=\"line\">&#125;&#x27;</span><br><span class=\"line\">=========================================================================</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">查看快照恢复情况</span></span><br><span class=\"line\">curl -s -X GET &quot;http://localhost:9200/_recovery/&quot;|jq</span><br><span class=\"line\">curl -X GET &quot;http://localhost:9200/_cat/recovery/?v&quot;</span><br><span class=\"line\">curl -s -X GET &quot;http://localhost:9200/archive_2025-08-08/_recovery/&quot;|jq</span><br><span class=\"line\">curl -s -X GET &quot;http://localhost:9200/_cat/recovery/archive_2025-08-08?format=json&quot;|jq</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;index&quot;: &quot;archive_2025-08-08&quot;,</span><br><span class=\"line\">    &quot;shard&quot;: &quot;0&quot;,</span><br><span class=\"line\">    &quot;time&quot;: &quot;441ms&quot;, 恢复总耗时（441 毫秒）</span><br><span class=\"line\">    &quot;type&quot;: &quot;snapshot&quot;, 恢复类型为 快照恢复（从快照仓库恢复数据）。</span><br><span class=\"line\">    &quot;stage&quot;: &quot;done&quot;, 当前恢复阶段：- init（初始化）- index（复制索引文件）- translog（传输事务日志）- finalize（完成恢复）- done（已完成）</span><br><span class=\"line\">    &quot;source_host&quot;: &quot;n/a&quot;, 源数据节点的主机名或 IP（仅在跨节点恢复时出现，如分片迁移）</span><br><span class=\"line\">    &quot;source_node&quot;: &quot;n/a&quot;, 源节点的名称（Elasticsearch 集群内唯一标识）。</span><br><span class=\"line\">    &quot;target_host&quot;: &quot;172.26.0.2&quot;, 目标</span><br><span class=\"line\">    &quot;target_node&quot;: &quot;be439083dc6b&quot;,</span><br><span class=\"line\">    &quot;repository&quot;: &quot;y_repo&quot;,</span><br><span class=\"line\">    &quot;snapshot&quot;: &quot;snapshot_all&quot;,</span><br><span class=\"line\">    &quot;files&quot;: &quot;35&quot;, 需要恢复文件数</span><br><span class=\"line\">    &quot;files_recovered&quot;: &quot;35&quot;, 已经恢复</span><br><span class=\"line\">    &quot;files_percent&quot;: &quot;100.0%&quot;, 进度</span><br><span class=\"line\">    &quot;files_total&quot;: &quot;35&quot;, 总文件数</span><br><span class=\"line\">    &quot;bytes&quot;: &quot;3429792&quot;, 字节</span><br><span class=\"line\">    &quot;bytes_recovered&quot;: &quot;3429792&quot;, 已恢复字节数</span><br><span class=\"line\">    &quot;bytes_percent&quot;: &quot;100.0%&quot;, 进度</span><br><span class=\"line\">    &quot;bytes_total&quot;: &quot;3429792&quot;,</span><br><span class=\"line\">    &quot;translog_ops&quot;: &quot;0&quot;, 需要恢复的事务日志操作总数</span><br><span class=\"line\">    &quot;translog_ops_recovered&quot;: &quot;0&quot;, </span><br><span class=\"line\">    &quot;translog_ops_percent&quot;: &quot;100.0%&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">查看仓库级别的进度;只显示正在执行的快照相关操作，已完成的不显示</span></span><br><span class=\"line\">curl -s -X GET &quot;http://localhost:9200/_snapshot/y_repo/_current&quot;|jq</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">通过 stats.processed_files 和 processed_size_in_bytes 估算剩余时间</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;snapshots&quot;: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;snapshot&quot;: &quot;snapshot_all&quot;,       // 快照名称</span><br><span class=\"line\">      &quot;uuid&quot;: &quot;ABC123&quot;,                    // 快照唯一ID</span><br><span class=\"line\">      &quot;state&quot;: &quot;IN_PROGRESS&quot;,              // 执行状态</span><br><span class=\"line\">      &quot;include_global_state&quot;: true,        // 是否包含集群全局状态</span><br><span class=\"line\">      &quot;shards_stats&quot;: &#123;</span><br><span class=\"line\">        &quot;initializing&quot;: 0,                 // 初始化中的分片数</span><br><span class=\"line\">        &quot;started&quot;: 5,                      // 进行中的分片数</span><br><span class=\"line\">        &quot;finalizing&quot;: 0,                   // 最终化中的分片数</span><br><span class=\"line\">        &quot;done&quot;: 10,                        // 已完成的分片数</span><br><span class=\"line\">        &quot;failed&quot;: 0,                       // 失败的分片数</span><br><span class=\"line\">        &quot;total&quot;: 15                        // 总分片数</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &quot;stats&quot;: &#123;</span><br><span class=\"line\">        &quot;number_of_files&quot;: 100,            // 总文件数</span><br><span class=\"line\">        &quot;processed_files&quot;: 80,             // 已处理文件数</span><br><span class=\"line\">        &quot;total_size_in_bytes&quot;: 1024000,    // 总字节数</span><br><span class=\"line\">        &quot;processed_size_in_bytes&quot;: 819200  // 已处理字节数</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &quot;indices&quot;: &#123;                         // 涉及的索引及各自分片状态</span><br><span class=\"line\">        &quot;logs-2023&quot;: &#123;</span><br><span class=\"line\">          &quot;shards_stats&quot;: &#123; ... &#125;,</span><br><span class=\"line\">          &quot;stats&quot;: &#123; ... &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &quot;start_time&quot;: &quot;2023-10-05T14:00:00.000Z&quot;,  // 任务开始时间</span><br><span class=\"line\">      &quot;end_time&quot;: null                     // 任务结束时间（未完成时为null）</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"迁移恢复到其他集群\"><a href=\"#迁移恢复到其他集群\" class=\"headerlink\" title=\"迁移恢复到其他集群\"></a>迁移恢复到其他集群</h1><ol>\n<li>esdump直接导出导入即可不多讲</li>\n<li>snapshot方式需要将fs的物理存储路径拷贝到新节点，然后在新节点es重新注册同名仓库后快照可以直接来使用恢复；如果是nfs或者s3（自建minio这种）这种类型就不需要迁移文件直接注册同名仓库后恢复即可</li>\n</ol>\n","excerpt":"","more":"<h1 id=\"esdump\"><a href=\"#esdump\" class=\"headerlink\" title=\"esdump\"></a>esdump</h1><p><a href=\"https://github.com/elasticsearch-dump/elasticsearch-dump\">https://github.com/elasticsearch-dump/elasticsearch-dump</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull elasticdump/elasticsearch-dump</span><br><span class=\"line\">or</span><br><span class=\"line\">wget https://nodejs.org/dist/v16.18.0/node-v16.18.0-linux-x64.tar.xz</span><br><span class=\"line\">export PATH=$PATH:/root/node-v16.18.0-linux-x64/bin/</span><br><span class=\"line\">npm install elasticdump -g</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">bash</span></span><br><span class=\"line\">PREFIX=&quot;y-logs-&quot;</span><br><span class=\"line\">curl -s &quot;http://localhost:9200/_cat/indices?h=index&quot; | grep &quot;^$&#123;PREFIX&#125;&quot; | while read -r INDEX_NAME; do</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">INDEX_NAME=<span class=\"string\">&quot;y-logs-2025&quot;</span></span></span><br><span class=\"line\">    for TYPE in &#123;settings,mapping,data&#125;;do</span><br><span class=\"line\">        echo &quot;start $TYPE of index  [$INDEX_NAME]...&quot;</span><br><span class=\"line\">        elasticdump  --input=http://localhost:9200/$INDEX_NAME     --output=http://username:passwd@dest_addr.com:9200/$INDEX_NAME     --type=$TYPE --limit 10000</span><br><span class=\"line\">    done</span><br><span class=\"line\">    echo &#x27;==============================================&#x27;</span><br><span class=\"line\">    sleep 3</span><br><span class=\"line\">done</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">--<span class=\"built_in\">limit</span> 并发数</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">--output=/data/es/<span class=\"variable\">$&#123;INDEX_NAME&#125;</span>.json 备份可以保存到文件</span> </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">--httpAuthFile指定HTTP认证文件</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">--searchBody=<span class=\"string\">&quot;&#123;\\&quot;query\\&quot;:&#123;\\&quot;term\\&quot;:&#123;\\&quot;username\\&quot;: \\&quot;admin\\&quot;&#125;&#125;&#125;&quot;</span> 过滤</span></span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"snapshot\"><a href=\"#snapshot\" class=\"headerlink\" title=\"snapshot\"></a>snapshot</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">设置fs类型仓库存储路径；然后重启es</span></span><br><span class=\"line\">export path.repo=/usr/share/elasticsearch/data/es_snapshot</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">创建仓库</span></span><br><span class=\"line\">curl -XPUT &#x27;http://localhost:9200/_snapshot/y_repo&#x27; \\</span><br><span class=\"line\">  -H &#x27;Content-Type: application/json&#x27; \\</span><br><span class=\"line\">  -d &#x27;&#123;</span><br><span class=\"line\">    &quot;type&quot;: &quot;fs&quot;,</span><br><span class=\"line\">    &quot;settings&quot;: &#123;</span><br><span class=\"line\">      &quot;location&quot;: &quot;/usr/share/elasticsearch/data/es_snapshot&quot;,</span><br><span class=\"line\">      &quot;compress&quot;: true</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;&#x27;</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">location必须和path.repo一致</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">查看</span></span><br><span class=\"line\">curl  -s localhost:9200/_snapshot/y_repo|jq</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">删除</span></span><br><span class=\"line\">curl -XDELETE localhost:9200/_snapshot/y_repo</span><br><span class=\"line\">=======================================================</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">创建快照</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">不指定索引就是快照所有</span></span><br><span class=\"line\">curl -XPUT   localhost:9200/_snapshot/y_repo/snapshot_all  #?wait_for_completion=true </span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">指定索引快照</span></span><br><span class=\"line\">curl -H &quot;Content-Type: application/json&quot; -XPUT localhost:9200/_snapshot/y_repo/snapshot_202508_01-02?pretty -d&#x27;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&quot;indices&quot;: &quot;y-logs-2025.08.01,y-logs-2025.08.02&quot;</span><br><span class=\"line\">&#125;&#x27;</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">查看快照信息</span></span><br><span class=\"line\">curl localhost:9200/_cat/snapshots/y_repo?v</span><br><span class=\"line\">curl localhost:9200/_cat/snapshots/_all?v</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">查看快照包含的索引信息</span></span><br><span class=\"line\">curl   -Ss localhost:9200/_snapshot/y_repo/_all|jq</span><br><span class=\"line\">curl   -Ss localhost:9200/_snapshot/y_repo/snapshot_202508_01-02|jq</span><br><span class=\"line\">curl   -Ss localhost:9200/_snapshot/y_repo/snapshot_202508_01-02/_status|jq</span><br><span class=\"line\">=======================================================</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">恢复快照;目标索引名称尽量不要存在同名</span></span><br><span class=\"line\">curl -X POST &quot;http://localhost:9200/_snapshot/y_repo/snapshot_all/_restore&quot; \\</span><br><span class=\"line\">  -H &quot;Content-Type: application/json&quot; \\</span><br><span class=\"line\">  -d &#x27;&#123;</span><br><span class=\"line\">    &quot;indices&quot;: &quot;y-logs-2025.08.*&quot;,</span><br><span class=\"line\">    &quot;rename_pattern&quot;: &quot;y-logs-2025.08.01&quot;,</span><br><span class=\"line\">    &quot;rename_replacement&quot;: &quot;y_new_repo&quot;</span><br><span class=\"line\">  &#125;&#x27;</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">indices指定恢复的索引名称;需要精确匹配如果范围较大，rename_pattern匹配不上的会直接名称不变恢复</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">rename_pattern\t正则表达式，匹配原始索引名称中的模式（用于捕获需要替换的部分）</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">rename_replacement\t替换后的新索引名称模板（使用 <span class=\"variable\">$1</span>、<span class=\"variable\">$2</span> 等引用正则表达式中的捕获组）</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">示例json参数</span></span><br><span class=\"line\">&#x27;&#123;</span><br><span class=\"line\">  &quot;indices&quot;: &quot;y-logs-2025.08.01&quot;  // 仅恢复该索引，名称不变</span><br><span class=\"line\">&#125;&#x27;</span><br><span class=\"line\">&#x27;&#123;</span><br><span class=\"line\">  &quot;indices&quot;: &quot;y-logs-2025.08.01&quot;,</span><br><span class=\"line\">  &quot;rename_pattern&quot;: &quot;(.+)&quot;,          // 匹配整个原始名称</span><br><span class=\"line\">  &quot;rename_replacement&quot;: &quot;restored_$1&quot; // 新名称：restored_y-logs-2025.08.01</span><br><span class=\"line\">&#125;&#x27;</span><br><span class=\"line\">&#x27;&#123;</span><br><span class=\"line\">  &quot;indices&quot;: &quot;y-logs*&quot;,</span><br><span class=\"line\">  &quot;rename_pattern&quot;: &quot;y-logs-(\\\\d&#123;4&#125;)\\\\.(\\\\d&#123;2&#125;)\\\\.(\\\\d&#123;2&#125;)&quot;,  // 捕获年、月、日</span><br><span class=\"line\">  &quot;rename_replacement&quot;: &quot;archive_$1-$2-$3&quot;  // 新名称：archive_2025-08-01</span><br><span class=\"line\">&#125;&#x27;</span><br><span class=\"line\">&#x27;&#123;</span><br><span class=\"line\">    &quot;indices&quot;: &quot;*,-.security*,-.kibana*&quot;, //使用- 过滤不迁移的索引</span><br><span class=\"line\">    &quot;ignore_unavailable&quot;: &quot;true&quot;</span><br><span class=\"line\">&#125;&#x27;</span><br><span class=\"line\">=========================================================================</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">查看快照恢复情况</span></span><br><span class=\"line\">curl -s -X GET &quot;http://localhost:9200/_recovery/&quot;|jq</span><br><span class=\"line\">curl -X GET &quot;http://localhost:9200/_cat/recovery/?v&quot;</span><br><span class=\"line\">curl -s -X GET &quot;http://localhost:9200/archive_2025-08-08/_recovery/&quot;|jq</span><br><span class=\"line\">curl -s -X GET &quot;http://localhost:9200/_cat/recovery/archive_2025-08-08?format=json&quot;|jq</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;index&quot;: &quot;archive_2025-08-08&quot;,</span><br><span class=\"line\">    &quot;shard&quot;: &quot;0&quot;,</span><br><span class=\"line\">    &quot;time&quot;: &quot;441ms&quot;, 恢复总耗时（441 毫秒）</span><br><span class=\"line\">    &quot;type&quot;: &quot;snapshot&quot;, 恢复类型为 快照恢复（从快照仓库恢复数据）。</span><br><span class=\"line\">    &quot;stage&quot;: &quot;done&quot;, 当前恢复阶段：- init（初始化）- index（复制索引文件）- translog（传输事务日志）- finalize（完成恢复）- done（已完成）</span><br><span class=\"line\">    &quot;source_host&quot;: &quot;n/a&quot;, 源数据节点的主机名或 IP（仅在跨节点恢复时出现，如分片迁移）</span><br><span class=\"line\">    &quot;source_node&quot;: &quot;n/a&quot;, 源节点的名称（Elasticsearch 集群内唯一标识）。</span><br><span class=\"line\">    &quot;target_host&quot;: &quot;172.26.0.2&quot;, 目标</span><br><span class=\"line\">    &quot;target_node&quot;: &quot;be439083dc6b&quot;,</span><br><span class=\"line\">    &quot;repository&quot;: &quot;y_repo&quot;,</span><br><span class=\"line\">    &quot;snapshot&quot;: &quot;snapshot_all&quot;,</span><br><span class=\"line\">    &quot;files&quot;: &quot;35&quot;, 需要恢复文件数</span><br><span class=\"line\">    &quot;files_recovered&quot;: &quot;35&quot;, 已经恢复</span><br><span class=\"line\">    &quot;files_percent&quot;: &quot;100.0%&quot;, 进度</span><br><span class=\"line\">    &quot;files_total&quot;: &quot;35&quot;, 总文件数</span><br><span class=\"line\">    &quot;bytes&quot;: &quot;3429792&quot;, 字节</span><br><span class=\"line\">    &quot;bytes_recovered&quot;: &quot;3429792&quot;, 已恢复字节数</span><br><span class=\"line\">    &quot;bytes_percent&quot;: &quot;100.0%&quot;, 进度</span><br><span class=\"line\">    &quot;bytes_total&quot;: &quot;3429792&quot;,</span><br><span class=\"line\">    &quot;translog_ops&quot;: &quot;0&quot;, 需要恢复的事务日志操作总数</span><br><span class=\"line\">    &quot;translog_ops_recovered&quot;: &quot;0&quot;, </span><br><span class=\"line\">    &quot;translog_ops_percent&quot;: &quot;100.0%&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">查看仓库级别的进度;只显示正在执行的快照相关操作，已完成的不显示</span></span><br><span class=\"line\">curl -s -X GET &quot;http://localhost:9200/_snapshot/y_repo/_current&quot;|jq</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">通过 stats.processed_files 和 processed_size_in_bytes 估算剩余时间</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;snapshots&quot;: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;snapshot&quot;: &quot;snapshot_all&quot;,       // 快照名称</span><br><span class=\"line\">      &quot;uuid&quot;: &quot;ABC123&quot;,                    // 快照唯一ID</span><br><span class=\"line\">      &quot;state&quot;: &quot;IN_PROGRESS&quot;,              // 执行状态</span><br><span class=\"line\">      &quot;include_global_state&quot;: true,        // 是否包含集群全局状态</span><br><span class=\"line\">      &quot;shards_stats&quot;: &#123;</span><br><span class=\"line\">        &quot;initializing&quot;: 0,                 // 初始化中的分片数</span><br><span class=\"line\">        &quot;started&quot;: 5,                      // 进行中的分片数</span><br><span class=\"line\">        &quot;finalizing&quot;: 0,                   // 最终化中的分片数</span><br><span class=\"line\">        &quot;done&quot;: 10,                        // 已完成的分片数</span><br><span class=\"line\">        &quot;failed&quot;: 0,                       // 失败的分片数</span><br><span class=\"line\">        &quot;total&quot;: 15                        // 总分片数</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &quot;stats&quot;: &#123;</span><br><span class=\"line\">        &quot;number_of_files&quot;: 100,            // 总文件数</span><br><span class=\"line\">        &quot;processed_files&quot;: 80,             // 已处理文件数</span><br><span class=\"line\">        &quot;total_size_in_bytes&quot;: 1024000,    // 总字节数</span><br><span class=\"line\">        &quot;processed_size_in_bytes&quot;: 819200  // 已处理字节数</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &quot;indices&quot;: &#123;                         // 涉及的索引及各自分片状态</span><br><span class=\"line\">        &quot;logs-2023&quot;: &#123;</span><br><span class=\"line\">          &quot;shards_stats&quot;: &#123; ... &#125;,</span><br><span class=\"line\">          &quot;stats&quot;: &#123; ... &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &quot;start_time&quot;: &quot;2023-10-05T14:00:00.000Z&quot;,  // 任务开始时间</span><br><span class=\"line\">      &quot;end_time&quot;: null                     // 任务结束时间（未完成时为null）</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"迁移恢复到其他集群\"><a href=\"#迁移恢复到其他集群\" class=\"headerlink\" title=\"迁移恢复到其他集群\"></a>迁移恢复到其他集群</h1><ol>\n<li>esdump直接导出导入即可不多讲</li>\n<li>snapshot方式需要将fs的物理存储路径拷贝到新节点，然后在新节点es重新注册同名仓库后快照可以直接来使用恢复；如果是nfs或者s3（自建minio这种）这种类型就不需要迁移文件直接注册同名仓库后恢复即可</li>\n</ol>\n"},{"title":"elfk部署使用","date":"2025-04-18T01:56:59.000Z","_content":"\n>filebeat不建议容器启动，适合放到每个节点采集日志统一发给logstash；如果全部输出到elasticsearch会导致负载比较高；不建议每个节点用logstash采集因为比较重，filebeat比较轻量级\n\n# 安装elfk\n```shell\ncurl -SL https://github.com/docker/compose/releases/download/v2.30.3/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose\n#将可执行权限赋予安装目标路径中的独立二进制文件\nsudo chmod +x /usr/local/bin/docker-compose\nsudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose\n\nyum install -y https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-6.3.2-x86_64.rpm\n\ncat >> ./elk.yml << EOF\nversion: '3.8'\nservices:\n  elasticsearch:\n    image: registry.cn-hangzhou.aliyuncs.com/lky-deploy/elasticsearch:7.14.0\n    container_name: elasticsearch\n    environment:\n      - discovery.type=single-node  # 单节点模式\n      - ES_JAVA_OPTS=-Xms512m -Xmx512m  # JVM 堆内存限制\n      - ELASTIC_PASSWORD=Ytest@123  # 设置 Elasticsearch 密码\n    volumes:\n      - ./elasticsearch/data:/usr/share/elasticsearch/data  # 数据持久化\n#      - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml  # 自定义配置（可选）\n    ports:\n      - \"9200:9200\"  # REST API\n      - \"9300:9300\"  # 集群通信\n    networks:\n      - elk\n  logstash:\n    image: registry.cn-hangzhou.aliyuncs.com/lky-deploy/logstash:7.14.0\n    container_name: logstash\n    volumes:\n      - ./logstash/config/logstash.conf:/usr/share/logstash/pipeline/logstash.conf  # 自定义 Logstash 管道配置\n      - ./logstash/logs:/usr/share/logstash/logs  # 日志持久化\n    environment:\n      - LS_JAVA_OPTS=-Xms512m -Xmx512m  # JVM 堆内存限制\n    ports:\n      - \"5044:5044\"  # Beats 输入端口（如 Filebeat）\n      - \"5000:5000/tcp\"  # TCP 输入\n      - \"5000:5000/udp\"  # UDP 输入\n    depends_on:\n      - elasticsearch\n    networks:\n      - elk\n  kibana:\n    image: registry.cn-hangzhou.aliyuncs.com/lky-deploy/kibana:7.14.0\n    container_name: kibana\n    environment:\n      - I18N_LOCALE=zh-CN\n      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200  # 指向 Elasticsearch 服务\n      - ELASTICSEARCH_USERNAME=elastic  # 默认用户名\n      - ELASTICSEARCH_PASSWORD=Ytest@123  # 与 Elasticsearch 密码一致\n    ports:\n      - \"5601:5601\"  # Kibana Web 界面\n    depends_on:\n      - elasticsearch\n    networks:\n      - elk\nnetworks:\n  elk:\n    driver: bridge\nEOF\nmkdir ./logstash/config -p\ncat >> ./logstash/config/logstash.conf << EOF\n# ./logstash/config/logstash.conf\ninput {\n  tcp {\n    port => 5000  # 监听 TCP 日志\n  }\n  beats {\n    port => 5044  # 接收 Filebeat 输入\n  }\n}\nfilter {\n  grok {\n    match => { \"message\" => \"%{COMBINEDAPACHELOG}\" }  # 解析 Apache 日志\n  }\n  date {\n    match => [ \"timestamp\", \"dd/MMM/yyyy:HH:mm:ss Z\" ]  # 时间解析\n  }\n}\noutput {\n  elasticsearch {\n    hosts => [\"elasticsearch:9200\"]\n    user => \"elastic\"\n    password => \"Ytest@123\"\n    index => \"logs-%{+YYYY.MM.dd}\"  # 按日期创建索引\n  }\n}\nEOF\nchmod 777 elasticsearch/data\n```\n# filebeat\n**根据不同tag写入不同的logstash后续分割和输出建立索引好区分**\n```\nfilebeat.inputs: # filebeat input输入\n- type: log    # 标准输入\n  enabled: true  # 启用标准输入\n  paths:\n    - /var/log/*\n  tags: [\"system\"]\n  #  fields:\n  #    type: \"system_log\"\n- type: filestream\n  paths:\n    - \"/var/log/nginx/*.log\"\n  tags: [\"nginx\"]   # 标记为 nginx 日志\n#output.console:\n# enabled: true               # 启用控制台输出\n  #  pretty: true                # 美化 JSON 格式\n  # codec.json:\n  #   pretty: true\n  # escape_html: false        # 不转义 HTML 符号（保持原始格式）\n \n# 输出到 Logstash - 用于生产数据处理\noutput.logstash:\n  enabled: true               # 启用 Logstash 输出\n  #  when:\n  #    equals:\n  #      fields.type: \"system_log\"\n  hosts: [\"127.0.0.1:5044\"]  # Logstash 的地址和端口（支持多个主机负载均衡）\n  when.contains:\n      tags: \"system\"  # 匹配 tags 包含 \"system\"\n  hosts: [\"127.0.0.1:5045\"]\n  enabled: true\n  when.contains:\n    tags: \"nginx\"  # 匹配 tags 包含 \"nginx\"\n```\n# logstash\n**根据不同type进行过滤和输出索引**\n```\nLogstash Reference [7.10] | Elastic\n\ninput {\n  tcp {\n    port => 5000  # 监听 TCP 日志\n  }\n  beats {\n    port => 5044  # 接收 Filebeat 输入\n    type => \"system\"\n  }\n  beats {\n    port => 5045  # 接收 Filebeat 输入\n    type => \"nginx\"\n  }\n}\n  \n \nfilter {\n  date {\n    match => [ \"timestamp\", \"dd/MMM/yyyy:HH:mm:ss Z\" ]  # 时间解析\n  }\n \n  if[type] == \"nginx\" {\n    grok {\n      match => { \"message\" => \"%{HTTPD_COMMONLOG}\" }  # 解析 nginx 日志,如果不区分；system类型是解析不了的，会直接报错\n      remove_field => [\"@version\"]\n     }\n  }\n  #对于system类型可以再写个if来单独过滤\n  if[type] == \"system\" {\n    grok {\n      match =>  {\"message\" => \"%{IPV4:ip}\"}  \n      remove_field => [\"@version\"]\n     }\n    mutate {  #这里过滤器乱写的，需要根据自身的业务配置\n        remove_field => [\"timestamp\"]\n        gsub => [\"message\",\"\\s\",\"| \"]\n        split => [\"message\",\"|\"]\n        replace => { \"timenew\" =>  \"%{+yyyy-MM-dd}\" }\n        add_field => {\n         \"year\" => \"%{+yyyy}\"\n         \"month\" => \"%{+MM}\"\n         \"day\" => \"%{+dd}\"\n         \"status\" => \"%{[message][1]}\"\n         \"code\" => \"%{[message][2]}\"\n        }\n    }\n  }\n \n  \n}\n#必须通过type指定不同输出创建不同的index =>,否则index的字段不一样，当第一个index结构确定后，第二个输入无法输出到第一个index，因为字段不一样\noutput {\n  if \"system\" in [tags] {\n    elasticsearch {\n      hosts => [\"elasticsearch:9200\"]\n      user => \"elastic\"\n      password => \"Ytest@123\"\n      index => \"filebeat-system-logs-%{+YYYY.MM.dd}\"  # 按日期创建索引\n    }\n  }  \n  if \"nginx\" in [tags] {\n    elasticsearch {\n      hosts => [\"elasticsearch:9200\"]\n      user => \"elastic\"\n      password => \"Ytest@123\"\n      index => \"filebeat-nginx-logs-%{+YYYY.MM.dd}\"  # 按日期创建索引\n    }\n  }  \n}\n```\n# elasticsearch\n>常用语法\n>>/_cat <br>\n/_cat/master?help<br>\n/_cat/indices?v  显示title<br>\n/_cat/indices<br>\nlogs-2025.03.24 为索引名称<br>\n/logs-2025.03.24/_search 查看文档<br>\n/logs-2025.03.24/ 查看索引结构<br>\n/logs-2025.03.24/_doc/_search?q=message:test\n","source":"_posts/elfk.md","raw":"---\ntitle: elfk部署使用\ndate: 2025-04-18 09:56:59\ntags:\ncategories: 中间件\n---\n\n>filebeat不建议容器启动，适合放到每个节点采集日志统一发给logstash；如果全部输出到elasticsearch会导致负载比较高；不建议每个节点用logstash采集因为比较重，filebeat比较轻量级\n\n# 安装elfk\n```shell\ncurl -SL https://github.com/docker/compose/releases/download/v2.30.3/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose\n#将可执行权限赋予安装目标路径中的独立二进制文件\nsudo chmod +x /usr/local/bin/docker-compose\nsudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose\n\nyum install -y https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-6.3.2-x86_64.rpm\n\ncat >> ./elk.yml << EOF\nversion: '3.8'\nservices:\n  elasticsearch:\n    image: registry.cn-hangzhou.aliyuncs.com/lky-deploy/elasticsearch:7.14.0\n    container_name: elasticsearch\n    environment:\n      - discovery.type=single-node  # 单节点模式\n      - ES_JAVA_OPTS=-Xms512m -Xmx512m  # JVM 堆内存限制\n      - ELASTIC_PASSWORD=Ytest@123  # 设置 Elasticsearch 密码\n    volumes:\n      - ./elasticsearch/data:/usr/share/elasticsearch/data  # 数据持久化\n#      - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml  # 自定义配置（可选）\n    ports:\n      - \"9200:9200\"  # REST API\n      - \"9300:9300\"  # 集群通信\n    networks:\n      - elk\n  logstash:\n    image: registry.cn-hangzhou.aliyuncs.com/lky-deploy/logstash:7.14.0\n    container_name: logstash\n    volumes:\n      - ./logstash/config/logstash.conf:/usr/share/logstash/pipeline/logstash.conf  # 自定义 Logstash 管道配置\n      - ./logstash/logs:/usr/share/logstash/logs  # 日志持久化\n    environment:\n      - LS_JAVA_OPTS=-Xms512m -Xmx512m  # JVM 堆内存限制\n    ports:\n      - \"5044:5044\"  # Beats 输入端口（如 Filebeat）\n      - \"5000:5000/tcp\"  # TCP 输入\n      - \"5000:5000/udp\"  # UDP 输入\n    depends_on:\n      - elasticsearch\n    networks:\n      - elk\n  kibana:\n    image: registry.cn-hangzhou.aliyuncs.com/lky-deploy/kibana:7.14.0\n    container_name: kibana\n    environment:\n      - I18N_LOCALE=zh-CN\n      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200  # 指向 Elasticsearch 服务\n      - ELASTICSEARCH_USERNAME=elastic  # 默认用户名\n      - ELASTICSEARCH_PASSWORD=Ytest@123  # 与 Elasticsearch 密码一致\n    ports:\n      - \"5601:5601\"  # Kibana Web 界面\n    depends_on:\n      - elasticsearch\n    networks:\n      - elk\nnetworks:\n  elk:\n    driver: bridge\nEOF\nmkdir ./logstash/config -p\ncat >> ./logstash/config/logstash.conf << EOF\n# ./logstash/config/logstash.conf\ninput {\n  tcp {\n    port => 5000  # 监听 TCP 日志\n  }\n  beats {\n    port => 5044  # 接收 Filebeat 输入\n  }\n}\nfilter {\n  grok {\n    match => { \"message\" => \"%{COMBINEDAPACHELOG}\" }  # 解析 Apache 日志\n  }\n  date {\n    match => [ \"timestamp\", \"dd/MMM/yyyy:HH:mm:ss Z\" ]  # 时间解析\n  }\n}\noutput {\n  elasticsearch {\n    hosts => [\"elasticsearch:9200\"]\n    user => \"elastic\"\n    password => \"Ytest@123\"\n    index => \"logs-%{+YYYY.MM.dd}\"  # 按日期创建索引\n  }\n}\nEOF\nchmod 777 elasticsearch/data\n```\n# filebeat\n**根据不同tag写入不同的logstash后续分割和输出建立索引好区分**\n```\nfilebeat.inputs: # filebeat input输入\n- type: log    # 标准输入\n  enabled: true  # 启用标准输入\n  paths:\n    - /var/log/*\n  tags: [\"system\"]\n  #  fields:\n  #    type: \"system_log\"\n- type: filestream\n  paths:\n    - \"/var/log/nginx/*.log\"\n  tags: [\"nginx\"]   # 标记为 nginx 日志\n#output.console:\n# enabled: true               # 启用控制台输出\n  #  pretty: true                # 美化 JSON 格式\n  # codec.json:\n  #   pretty: true\n  # escape_html: false        # 不转义 HTML 符号（保持原始格式）\n \n# 输出到 Logstash - 用于生产数据处理\noutput.logstash:\n  enabled: true               # 启用 Logstash 输出\n  #  when:\n  #    equals:\n  #      fields.type: \"system_log\"\n  hosts: [\"127.0.0.1:5044\"]  # Logstash 的地址和端口（支持多个主机负载均衡）\n  when.contains:\n      tags: \"system\"  # 匹配 tags 包含 \"system\"\n  hosts: [\"127.0.0.1:5045\"]\n  enabled: true\n  when.contains:\n    tags: \"nginx\"  # 匹配 tags 包含 \"nginx\"\n```\n# logstash\n**根据不同type进行过滤和输出索引**\n```\nLogstash Reference [7.10] | Elastic\n\ninput {\n  tcp {\n    port => 5000  # 监听 TCP 日志\n  }\n  beats {\n    port => 5044  # 接收 Filebeat 输入\n    type => \"system\"\n  }\n  beats {\n    port => 5045  # 接收 Filebeat 输入\n    type => \"nginx\"\n  }\n}\n  \n \nfilter {\n  date {\n    match => [ \"timestamp\", \"dd/MMM/yyyy:HH:mm:ss Z\" ]  # 时间解析\n  }\n \n  if[type] == \"nginx\" {\n    grok {\n      match => { \"message\" => \"%{HTTPD_COMMONLOG}\" }  # 解析 nginx 日志,如果不区分；system类型是解析不了的，会直接报错\n      remove_field => [\"@version\"]\n     }\n  }\n  #对于system类型可以再写个if来单独过滤\n  if[type] == \"system\" {\n    grok {\n      match =>  {\"message\" => \"%{IPV4:ip}\"}  \n      remove_field => [\"@version\"]\n     }\n    mutate {  #这里过滤器乱写的，需要根据自身的业务配置\n        remove_field => [\"timestamp\"]\n        gsub => [\"message\",\"\\s\",\"| \"]\n        split => [\"message\",\"|\"]\n        replace => { \"timenew\" =>  \"%{+yyyy-MM-dd}\" }\n        add_field => {\n         \"year\" => \"%{+yyyy}\"\n         \"month\" => \"%{+MM}\"\n         \"day\" => \"%{+dd}\"\n         \"status\" => \"%{[message][1]}\"\n         \"code\" => \"%{[message][2]}\"\n        }\n    }\n  }\n \n  \n}\n#必须通过type指定不同输出创建不同的index =>,否则index的字段不一样，当第一个index结构确定后，第二个输入无法输出到第一个index，因为字段不一样\noutput {\n  if \"system\" in [tags] {\n    elasticsearch {\n      hosts => [\"elasticsearch:9200\"]\n      user => \"elastic\"\n      password => \"Ytest@123\"\n      index => \"filebeat-system-logs-%{+YYYY.MM.dd}\"  # 按日期创建索引\n    }\n  }  \n  if \"nginx\" in [tags] {\n    elasticsearch {\n      hosts => [\"elasticsearch:9200\"]\n      user => \"elastic\"\n      password => \"Ytest@123\"\n      index => \"filebeat-nginx-logs-%{+YYYY.MM.dd}\"  # 按日期创建索引\n    }\n  }  \n}\n```\n# elasticsearch\n>常用语法\n>>/_cat <br>\n/_cat/master?help<br>\n/_cat/indices?v  显示title<br>\n/_cat/indices<br>\nlogs-2025.03.24 为索引名称<br>\n/logs-2025.03.24/_search 查看文档<br>\n/logs-2025.03.24/ 查看索引结构<br>\n/logs-2025.03.24/_doc/_search?q=message:test\n","slug":"elfk","published":1,"updated":"2025-08-28T06:39:18.058Z","comments":1,"layout":"post","photos":[],"_id":"cmev1ggaq0006hllz8ljvalov","content":"<blockquote>\n<p>filebeat不建议容器启动，适合放到每个节点采集日志统一发给logstash；如果全部输出到elasticsearch会导致负载比较高；不建议每个节点用logstash采集因为比较重，filebeat比较轻量级</p>\n</blockquote>\n<h1 id=\"安装elfk\"><a href=\"#安装elfk\" class=\"headerlink\" title=\"安装elfk\"></a>安装elfk</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -SL https://github.com/docker/compose/releases/download/v2.30.3/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">将可执行权限赋予安装目标路径中的独立二进制文件</span></span><br><span class=\"line\">sudo chmod +x /usr/local/bin/docker-compose</span><br><span class=\"line\">sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose</span><br><span class=\"line\"></span><br><span class=\"line\">yum install -y https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-6.3.2-x86_64.rpm</span><br><span class=\"line\"></span><br><span class=\"line\">cat &gt;&gt; ./elk.yml &lt;&lt; EOF</span><br><span class=\"line\">version: &#x27;3.8&#x27;</span><br><span class=\"line\">services:</span><br><span class=\"line\">  elasticsearch:</span><br><span class=\"line\">    image: registry.cn-hangzhou.aliyuncs.com/lky-deploy/elasticsearch:7.14.0</span><br><span class=\"line\">    container_name: elasticsearch</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      - discovery.type=single-node  # 单节点模式</span><br><span class=\"line\">      - ES_JAVA_OPTS=-Xms512m -Xmx512m  # JVM 堆内存限制</span><br><span class=\"line\">      - ELASTIC_PASSWORD=Ytest@123  # 设置 Elasticsearch 密码</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - ./elasticsearch/data:/usr/share/elasticsearch/data  # 数据持久化</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">     - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml  <span class=\"comment\"># 自定义配置（可选）</span></span></span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - &quot;9200:9200&quot;  # REST API</span><br><span class=\"line\">      - &quot;9300:9300&quot;  # 集群通信</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - elk</span><br><span class=\"line\">  logstash:</span><br><span class=\"line\">    image: registry.cn-hangzhou.aliyuncs.com/lky-deploy/logstash:7.14.0</span><br><span class=\"line\">    container_name: logstash</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - ./logstash/config/logstash.conf:/usr/share/logstash/pipeline/logstash.conf  # 自定义 Logstash 管道配置</span><br><span class=\"line\">      - ./logstash/logs:/usr/share/logstash/logs  # 日志持久化</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      - LS_JAVA_OPTS=-Xms512m -Xmx512m  # JVM 堆内存限制</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - &quot;5044:5044&quot;  # Beats 输入端口（如 Filebeat）</span><br><span class=\"line\">      - &quot;5000:5000/tcp&quot;  # TCP 输入</span><br><span class=\"line\">      - &quot;5000:5000/udp&quot;  # UDP 输入</span><br><span class=\"line\">    depends_on:</span><br><span class=\"line\">      - elasticsearch</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - elk</span><br><span class=\"line\">  kibana:</span><br><span class=\"line\">    image: registry.cn-hangzhou.aliyuncs.com/lky-deploy/kibana:7.14.0</span><br><span class=\"line\">    container_name: kibana</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      - I18N_LOCALE=zh-CN</span><br><span class=\"line\">      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200  # 指向 Elasticsearch 服务</span><br><span class=\"line\">      - ELASTICSEARCH_USERNAME=elastic  # 默认用户名</span><br><span class=\"line\">      - ELASTICSEARCH_PASSWORD=Ytest@123  # 与 Elasticsearch 密码一致</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - &quot;5601:5601&quot;  # Kibana Web 界面</span><br><span class=\"line\">    depends_on:</span><br><span class=\"line\">      - elasticsearch</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - elk</span><br><span class=\"line\">networks:</span><br><span class=\"line\">  elk:</span><br><span class=\"line\">    driver: bridge</span><br><span class=\"line\">EOF</span><br><span class=\"line\">mkdir ./logstash/config -p</span><br><span class=\"line\">cat &gt;&gt; ./logstash/config/logstash.conf &lt;&lt; EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">./logstash/config/logstash.conf</span></span><br><span class=\"line\">input &#123;</span><br><span class=\"line\">  tcp &#123;</span><br><span class=\"line\">    port =&gt; 5000  # 监听 TCP 日志</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  beats &#123;</span><br><span class=\"line\">    port =&gt; 5044  # 接收 Filebeat 输入</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">filter &#123;</span><br><span class=\"line\">  grok &#123;</span><br><span class=\"line\">    match =&gt; &#123; &quot;message&quot; =&gt; &quot;%&#123;COMBINEDAPACHELOG&#125;&quot; &#125;  # 解析 Apache 日志</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  date &#123;</span><br><span class=\"line\">    match =&gt; [ &quot;timestamp&quot;, &quot;dd/MMM/yyyy:HH:mm:ss Z&quot; ]  # 时间解析</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">output &#123;</span><br><span class=\"line\">  elasticsearch &#123;</span><br><span class=\"line\">    hosts =&gt; [&quot;elasticsearch:9200&quot;]</span><br><span class=\"line\">    user =&gt; &quot;elastic&quot;</span><br><span class=\"line\">    password =&gt; &quot;Ytest@123&quot;</span><br><span class=\"line\">    index =&gt; &quot;logs-%&#123;+YYYY.MM.dd&#125;&quot;  # 按日期创建索引</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\">chmod 777 elasticsearch/data</span><br></pre></td></tr></table></figure>\n<h1 id=\"filebeat\"><a href=\"#filebeat\" class=\"headerlink\" title=\"filebeat\"></a>filebeat</h1><p><strong>根据不同tag写入不同的logstash后续分割和输出建立索引好区分</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">filebeat.inputs: # filebeat input输入</span><br><span class=\"line\">- type: log    # 标准输入</span><br><span class=\"line\">  enabled: true  # 启用标准输入</span><br><span class=\"line\">  paths:</span><br><span class=\"line\">    - /var/log/*</span><br><span class=\"line\">  tags: [&quot;system&quot;]</span><br><span class=\"line\">  #  fields:</span><br><span class=\"line\">  #    type: &quot;system_log&quot;</span><br><span class=\"line\">- type: filestream</span><br><span class=\"line\">  paths:</span><br><span class=\"line\">    - &quot;/var/log/nginx/*.log&quot;</span><br><span class=\"line\">  tags: [&quot;nginx&quot;]   # 标记为 nginx 日志</span><br><span class=\"line\">#output.console:</span><br><span class=\"line\"># enabled: true               # 启用控制台输出</span><br><span class=\"line\">  #  pretty: true                # 美化 JSON 格式</span><br><span class=\"line\">  # codec.json:</span><br><span class=\"line\">  #   pretty: true</span><br><span class=\"line\">  # escape_html: false        # 不转义 HTML 符号（保持原始格式）</span><br><span class=\"line\"> </span><br><span class=\"line\"># 输出到 Logstash - 用于生产数据处理</span><br><span class=\"line\">output.logstash:</span><br><span class=\"line\">  enabled: true               # 启用 Logstash 输出</span><br><span class=\"line\">  #  when:</span><br><span class=\"line\">  #    equals:</span><br><span class=\"line\">  #      fields.type: &quot;system_log&quot;</span><br><span class=\"line\">  hosts: [&quot;127.0.0.1:5044&quot;]  # Logstash 的地址和端口（支持多个主机负载均衡）</span><br><span class=\"line\">  when.contains:</span><br><span class=\"line\">      tags: &quot;system&quot;  # 匹配 tags 包含 &quot;system&quot;</span><br><span class=\"line\">  hosts: [&quot;127.0.0.1:5045&quot;]</span><br><span class=\"line\">  enabled: true</span><br><span class=\"line\">  when.contains:</span><br><span class=\"line\">    tags: &quot;nginx&quot;  # 匹配 tags 包含 &quot;nginx&quot;</span><br></pre></td></tr></table></figure>\n<h1 id=\"logstash\"><a href=\"#logstash\" class=\"headerlink\" title=\"logstash\"></a>logstash</h1><p><strong>根据不同type进行过滤和输出索引</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Logstash Reference [7.10] | Elastic</span><br><span class=\"line\"></span><br><span class=\"line\">input &#123;</span><br><span class=\"line\">  tcp &#123;</span><br><span class=\"line\">    port =&gt; 5000  # 监听 TCP 日志</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  beats &#123;</span><br><span class=\"line\">    port =&gt; 5044  # 接收 Filebeat 输入</span><br><span class=\"line\">    type =&gt; &quot;system&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  beats &#123;</span><br><span class=\"line\">    port =&gt; 5045  # 接收 Filebeat 输入</span><br><span class=\"line\">    type =&gt; &quot;nginx&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\"> </span><br><span class=\"line\">filter &#123;</span><br><span class=\"line\">  date &#123;</span><br><span class=\"line\">    match =&gt; [ &quot;timestamp&quot;, &quot;dd/MMM/yyyy:HH:mm:ss Z&quot; ]  # 时间解析</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  if[type] == &quot;nginx&quot; &#123;</span><br><span class=\"line\">    grok &#123;</span><br><span class=\"line\">      match =&gt; &#123; &quot;message&quot; =&gt; &quot;%&#123;HTTPD_COMMONLOG&#125;&quot; &#125;  # 解析 nginx 日志,如果不区分；system类型是解析不了的，会直接报错</span><br><span class=\"line\">      remove_field =&gt; [&quot;@version&quot;]</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  #对于system类型可以再写个if来单独过滤</span><br><span class=\"line\">  if[type] == &quot;system&quot; &#123;</span><br><span class=\"line\">    grok &#123;</span><br><span class=\"line\">      match =&gt;  &#123;&quot;message&quot; =&gt; &quot;%&#123;IPV4:ip&#125;&quot;&#125;  </span><br><span class=\"line\">      remove_field =&gt; [&quot;@version&quot;]</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    mutate &#123;  #这里过滤器乱写的，需要根据自身的业务配置</span><br><span class=\"line\">        remove_field =&gt; [&quot;timestamp&quot;]</span><br><span class=\"line\">        gsub =&gt; [&quot;message&quot;,&quot;\\s&quot;,&quot;| &quot;]</span><br><span class=\"line\">        split =&gt; [&quot;message&quot;,&quot;|&quot;]</span><br><span class=\"line\">        replace =&gt; &#123; &quot;timenew&quot; =&gt;  &quot;%&#123;+yyyy-MM-dd&#125;&quot; &#125;</span><br><span class=\"line\">        add_field =&gt; &#123;</span><br><span class=\"line\">         &quot;year&quot; =&gt; &quot;%&#123;+yyyy&#125;&quot;</span><br><span class=\"line\">         &quot;month&quot; =&gt; &quot;%&#123;+MM&#125;&quot;</span><br><span class=\"line\">         &quot;day&quot; =&gt; &quot;%&#123;+dd&#125;&quot;</span><br><span class=\"line\">         &quot;status&quot; =&gt; &quot;%&#123;[message][1]&#125;&quot;</span><br><span class=\"line\">         &quot;code&quot; =&gt; &quot;%&#123;[message][2]&#125;&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#必须通过type指定不同输出创建不同的index =&gt;,否则index的字段不一样，当第一个index结构确定后，第二个输入无法输出到第一个index，因为字段不一样</span><br><span class=\"line\">output &#123;</span><br><span class=\"line\">  if &quot;system&quot; in [tags] &#123;</span><br><span class=\"line\">    elasticsearch &#123;</span><br><span class=\"line\">      hosts =&gt; [&quot;elasticsearch:9200&quot;]</span><br><span class=\"line\">      user =&gt; &quot;elastic&quot;</span><br><span class=\"line\">      password =&gt; &quot;Ytest@123&quot;</span><br><span class=\"line\">      index =&gt; &quot;filebeat-system-logs-%&#123;+YYYY.MM.dd&#125;&quot;  # 按日期创建索引</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">  if &quot;nginx&quot; in [tags] &#123;</span><br><span class=\"line\">    elasticsearch &#123;</span><br><span class=\"line\">      hosts =&gt; [&quot;elasticsearch:9200&quot;]</span><br><span class=\"line\">      user =&gt; &quot;elastic&quot;</span><br><span class=\"line\">      password =&gt; &quot;Ytest@123&quot;</span><br><span class=\"line\">      index =&gt; &quot;filebeat-nginx-logs-%&#123;+YYYY.MM.dd&#125;&quot;  # 按日期创建索引</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"elasticsearch\"><a href=\"#elasticsearch\" class=\"headerlink\" title=\"elasticsearch\"></a>elasticsearch</h1><blockquote>\n<p>常用语法</p>\n<blockquote>\n<p>&#x2F;_cat <br><br>&#x2F;_cat&#x2F;master?help<br><br>&#x2F;_cat&#x2F;indices?v  显示title<br><br>&#x2F;_cat&#x2F;indices<br><br>logs-2025.03.24 为索引名称<br><br>&#x2F;logs-2025.03.24&#x2F;_search 查看文档<br><br>&#x2F;logs-2025.03.24&#x2F; 查看索引结构<br><br>&#x2F;logs-2025.03.24&#x2F;_doc&#x2F;_search?q&#x3D;message:test</p>\n</blockquote>\n</blockquote>\n","excerpt":"","more":"<blockquote>\n<p>filebeat不建议容器启动，适合放到每个节点采集日志统一发给logstash；如果全部输出到elasticsearch会导致负载比较高；不建议每个节点用logstash采集因为比较重，filebeat比较轻量级</p>\n</blockquote>\n<h1 id=\"安装elfk\"><a href=\"#安装elfk\" class=\"headerlink\" title=\"安装elfk\"></a>安装elfk</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -SL https://github.com/docker/compose/releases/download/v2.30.3/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">将可执行权限赋予安装目标路径中的独立二进制文件</span></span><br><span class=\"line\">sudo chmod +x /usr/local/bin/docker-compose</span><br><span class=\"line\">sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose</span><br><span class=\"line\"></span><br><span class=\"line\">yum install -y https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-6.3.2-x86_64.rpm</span><br><span class=\"line\"></span><br><span class=\"line\">cat &gt;&gt; ./elk.yml &lt;&lt; EOF</span><br><span class=\"line\">version: &#x27;3.8&#x27;</span><br><span class=\"line\">services:</span><br><span class=\"line\">  elasticsearch:</span><br><span class=\"line\">    image: registry.cn-hangzhou.aliyuncs.com/lky-deploy/elasticsearch:7.14.0</span><br><span class=\"line\">    container_name: elasticsearch</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      - discovery.type=single-node  # 单节点模式</span><br><span class=\"line\">      - ES_JAVA_OPTS=-Xms512m -Xmx512m  # JVM 堆内存限制</span><br><span class=\"line\">      - ELASTIC_PASSWORD=Ytest@123  # 设置 Elasticsearch 密码</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - ./elasticsearch/data:/usr/share/elasticsearch/data  # 数据持久化</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">     - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml  <span class=\"comment\"># 自定义配置（可选）</span></span></span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - &quot;9200:9200&quot;  # REST API</span><br><span class=\"line\">      - &quot;9300:9300&quot;  # 集群通信</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - elk</span><br><span class=\"line\">  logstash:</span><br><span class=\"line\">    image: registry.cn-hangzhou.aliyuncs.com/lky-deploy/logstash:7.14.0</span><br><span class=\"line\">    container_name: logstash</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - ./logstash/config/logstash.conf:/usr/share/logstash/pipeline/logstash.conf  # 自定义 Logstash 管道配置</span><br><span class=\"line\">      - ./logstash/logs:/usr/share/logstash/logs  # 日志持久化</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      - LS_JAVA_OPTS=-Xms512m -Xmx512m  # JVM 堆内存限制</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - &quot;5044:5044&quot;  # Beats 输入端口（如 Filebeat）</span><br><span class=\"line\">      - &quot;5000:5000/tcp&quot;  # TCP 输入</span><br><span class=\"line\">      - &quot;5000:5000/udp&quot;  # UDP 输入</span><br><span class=\"line\">    depends_on:</span><br><span class=\"line\">      - elasticsearch</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - elk</span><br><span class=\"line\">  kibana:</span><br><span class=\"line\">    image: registry.cn-hangzhou.aliyuncs.com/lky-deploy/kibana:7.14.0</span><br><span class=\"line\">    container_name: kibana</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      - I18N_LOCALE=zh-CN</span><br><span class=\"line\">      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200  # 指向 Elasticsearch 服务</span><br><span class=\"line\">      - ELASTICSEARCH_USERNAME=elastic  # 默认用户名</span><br><span class=\"line\">      - ELASTICSEARCH_PASSWORD=Ytest@123  # 与 Elasticsearch 密码一致</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - &quot;5601:5601&quot;  # Kibana Web 界面</span><br><span class=\"line\">    depends_on:</span><br><span class=\"line\">      - elasticsearch</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - elk</span><br><span class=\"line\">networks:</span><br><span class=\"line\">  elk:</span><br><span class=\"line\">    driver: bridge</span><br><span class=\"line\">EOF</span><br><span class=\"line\">mkdir ./logstash/config -p</span><br><span class=\"line\">cat &gt;&gt; ./logstash/config/logstash.conf &lt;&lt; EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">./logstash/config/logstash.conf</span></span><br><span class=\"line\">input &#123;</span><br><span class=\"line\">  tcp &#123;</span><br><span class=\"line\">    port =&gt; 5000  # 监听 TCP 日志</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  beats &#123;</span><br><span class=\"line\">    port =&gt; 5044  # 接收 Filebeat 输入</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">filter &#123;</span><br><span class=\"line\">  grok &#123;</span><br><span class=\"line\">    match =&gt; &#123; &quot;message&quot; =&gt; &quot;%&#123;COMBINEDAPACHELOG&#125;&quot; &#125;  # 解析 Apache 日志</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  date &#123;</span><br><span class=\"line\">    match =&gt; [ &quot;timestamp&quot;, &quot;dd/MMM/yyyy:HH:mm:ss Z&quot; ]  # 时间解析</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">output &#123;</span><br><span class=\"line\">  elasticsearch &#123;</span><br><span class=\"line\">    hosts =&gt; [&quot;elasticsearch:9200&quot;]</span><br><span class=\"line\">    user =&gt; &quot;elastic&quot;</span><br><span class=\"line\">    password =&gt; &quot;Ytest@123&quot;</span><br><span class=\"line\">    index =&gt; &quot;logs-%&#123;+YYYY.MM.dd&#125;&quot;  # 按日期创建索引</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\">chmod 777 elasticsearch/data</span><br></pre></td></tr></table></figure>\n<h1 id=\"filebeat\"><a href=\"#filebeat\" class=\"headerlink\" title=\"filebeat\"></a>filebeat</h1><p><strong>根据不同tag写入不同的logstash后续分割和输出建立索引好区分</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">filebeat.inputs: # filebeat input输入</span><br><span class=\"line\">- type: log    # 标准输入</span><br><span class=\"line\">  enabled: true  # 启用标准输入</span><br><span class=\"line\">  paths:</span><br><span class=\"line\">    - /var/log/*</span><br><span class=\"line\">  tags: [&quot;system&quot;]</span><br><span class=\"line\">  #  fields:</span><br><span class=\"line\">  #    type: &quot;system_log&quot;</span><br><span class=\"line\">- type: filestream</span><br><span class=\"line\">  paths:</span><br><span class=\"line\">    - &quot;/var/log/nginx/*.log&quot;</span><br><span class=\"line\">  tags: [&quot;nginx&quot;]   # 标记为 nginx 日志</span><br><span class=\"line\">#output.console:</span><br><span class=\"line\"># enabled: true               # 启用控制台输出</span><br><span class=\"line\">  #  pretty: true                # 美化 JSON 格式</span><br><span class=\"line\">  # codec.json:</span><br><span class=\"line\">  #   pretty: true</span><br><span class=\"line\">  # escape_html: false        # 不转义 HTML 符号（保持原始格式）</span><br><span class=\"line\"> </span><br><span class=\"line\"># 输出到 Logstash - 用于生产数据处理</span><br><span class=\"line\">output.logstash:</span><br><span class=\"line\">  enabled: true               # 启用 Logstash 输出</span><br><span class=\"line\">  #  when:</span><br><span class=\"line\">  #    equals:</span><br><span class=\"line\">  #      fields.type: &quot;system_log&quot;</span><br><span class=\"line\">  hosts: [&quot;127.0.0.1:5044&quot;]  # Logstash 的地址和端口（支持多个主机负载均衡）</span><br><span class=\"line\">  when.contains:</span><br><span class=\"line\">      tags: &quot;system&quot;  # 匹配 tags 包含 &quot;system&quot;</span><br><span class=\"line\">  hosts: [&quot;127.0.0.1:5045&quot;]</span><br><span class=\"line\">  enabled: true</span><br><span class=\"line\">  when.contains:</span><br><span class=\"line\">    tags: &quot;nginx&quot;  # 匹配 tags 包含 &quot;nginx&quot;</span><br></pre></td></tr></table></figure>\n<h1 id=\"logstash\"><a href=\"#logstash\" class=\"headerlink\" title=\"logstash\"></a>logstash</h1><p><strong>根据不同type进行过滤和输出索引</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Logstash Reference [7.10] | Elastic</span><br><span class=\"line\"></span><br><span class=\"line\">input &#123;</span><br><span class=\"line\">  tcp &#123;</span><br><span class=\"line\">    port =&gt; 5000  # 监听 TCP 日志</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  beats &#123;</span><br><span class=\"line\">    port =&gt; 5044  # 接收 Filebeat 输入</span><br><span class=\"line\">    type =&gt; &quot;system&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  beats &#123;</span><br><span class=\"line\">    port =&gt; 5045  # 接收 Filebeat 输入</span><br><span class=\"line\">    type =&gt; &quot;nginx&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\"> </span><br><span class=\"line\">filter &#123;</span><br><span class=\"line\">  date &#123;</span><br><span class=\"line\">    match =&gt; [ &quot;timestamp&quot;, &quot;dd/MMM/yyyy:HH:mm:ss Z&quot; ]  # 时间解析</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  if[type] == &quot;nginx&quot; &#123;</span><br><span class=\"line\">    grok &#123;</span><br><span class=\"line\">      match =&gt; &#123; &quot;message&quot; =&gt; &quot;%&#123;HTTPD_COMMONLOG&#125;&quot; &#125;  # 解析 nginx 日志,如果不区分；system类型是解析不了的，会直接报错</span><br><span class=\"line\">      remove_field =&gt; [&quot;@version&quot;]</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  #对于system类型可以再写个if来单独过滤</span><br><span class=\"line\">  if[type] == &quot;system&quot; &#123;</span><br><span class=\"line\">    grok &#123;</span><br><span class=\"line\">      match =&gt;  &#123;&quot;message&quot; =&gt; &quot;%&#123;IPV4:ip&#125;&quot;&#125;  </span><br><span class=\"line\">      remove_field =&gt; [&quot;@version&quot;]</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    mutate &#123;  #这里过滤器乱写的，需要根据自身的业务配置</span><br><span class=\"line\">        remove_field =&gt; [&quot;timestamp&quot;]</span><br><span class=\"line\">        gsub =&gt; [&quot;message&quot;,&quot;\\s&quot;,&quot;| &quot;]</span><br><span class=\"line\">        split =&gt; [&quot;message&quot;,&quot;|&quot;]</span><br><span class=\"line\">        replace =&gt; &#123; &quot;timenew&quot; =&gt;  &quot;%&#123;+yyyy-MM-dd&#125;&quot; &#125;</span><br><span class=\"line\">        add_field =&gt; &#123;</span><br><span class=\"line\">         &quot;year&quot; =&gt; &quot;%&#123;+yyyy&#125;&quot;</span><br><span class=\"line\">         &quot;month&quot; =&gt; &quot;%&#123;+MM&#125;&quot;</span><br><span class=\"line\">         &quot;day&quot; =&gt; &quot;%&#123;+dd&#125;&quot;</span><br><span class=\"line\">         &quot;status&quot; =&gt; &quot;%&#123;[message][1]&#125;&quot;</span><br><span class=\"line\">         &quot;code&quot; =&gt; &quot;%&#123;[message][2]&#125;&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#必须通过type指定不同输出创建不同的index =&gt;,否则index的字段不一样，当第一个index结构确定后，第二个输入无法输出到第一个index，因为字段不一样</span><br><span class=\"line\">output &#123;</span><br><span class=\"line\">  if &quot;system&quot; in [tags] &#123;</span><br><span class=\"line\">    elasticsearch &#123;</span><br><span class=\"line\">      hosts =&gt; [&quot;elasticsearch:9200&quot;]</span><br><span class=\"line\">      user =&gt; &quot;elastic&quot;</span><br><span class=\"line\">      password =&gt; &quot;Ytest@123&quot;</span><br><span class=\"line\">      index =&gt; &quot;filebeat-system-logs-%&#123;+YYYY.MM.dd&#125;&quot;  # 按日期创建索引</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">  if &quot;nginx&quot; in [tags] &#123;</span><br><span class=\"line\">    elasticsearch &#123;</span><br><span class=\"line\">      hosts =&gt; [&quot;elasticsearch:9200&quot;]</span><br><span class=\"line\">      user =&gt; &quot;elastic&quot;</span><br><span class=\"line\">      password =&gt; &quot;Ytest@123&quot;</span><br><span class=\"line\">      index =&gt; &quot;filebeat-nginx-logs-%&#123;+YYYY.MM.dd&#125;&quot;  # 按日期创建索引</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"elasticsearch\"><a href=\"#elasticsearch\" class=\"headerlink\" title=\"elasticsearch\"></a>elasticsearch</h1><blockquote>\n<p>常用语法</p>\n<blockquote>\n<p>&#x2F;_cat <br><br>&#x2F;_cat&#x2F;master?help<br><br>&#x2F;_cat&#x2F;indices?v  显示title<br><br>&#x2F;_cat&#x2F;indices<br><br>logs-2025.03.24 为索引名称<br><br>&#x2F;logs-2025.03.24&#x2F;_search 查看文档<br><br>&#x2F;logs-2025.03.24&#x2F; 查看索引结构<br><br>&#x2F;logs-2025.03.24&#x2F;_doc&#x2F;_search?q&#x3D;message:test</p>\n</blockquote>\n</blockquote>\n"},{"title":"ftp","date":"2025-07-25T07:43:41.000Z","_content":"# 主动模式\nPORT中文称为主动模式，工作的原理： FTP客户端连接到FTP服务器的21端口，发送用户名和密码登录，登录成功后要list列表或者读取数据时，客户端随机开放一个端口（1024以上），发送 PORT命令到FTP服务器，告诉服务器客户端采用主动模式并开放端口；FTP服务器收到PORT主动模式命令和端口号后，通过服务器的20端口和客户端开放的端口连接，发送数据，原理如下图\n![alt text](image.png)\n\n# 被动模式\nPASV是Passive的缩写，中文成为被动模式，工作原理：FTP客户端连接到FTP服务器的21端口，发送用户名和密码登录，登录成功后要list列表或者读取数据时，发送PASV命令到FTP服务器， 服务器在本地随机开放一个端口（1024以上），然后把开放的端口告诉客户端， 客户端再连接到服务器开放的端口进行数据传输，原理如下图\n![alt text](image-1.png)\n\n从上面的运行原来看到，主动模式和被动模式的不同简单概述为： 主动模式传送数据时是“服务器”连接到“客户端”的端口；被动模式传送数据是“客户端”连接到“服务器”的端口。\n主动模式需要客户端必须开放端口给服务器，很多客户端都是在防火墙内，开放端口给FTP服务器访问比较困难。\n被动模式只需要服务器端开放端口给客户端连接就行了,所以推荐被动模式，主动模式可能会被客户端拦截\n","source":"_posts/ftp.md","raw":"---\ntitle: ftp\ndate: 2025-07-25 15:43:41\ntags:\ncategories: linux\n---\n# 主动模式\nPORT中文称为主动模式，工作的原理： FTP客户端连接到FTP服务器的21端口，发送用户名和密码登录，登录成功后要list列表或者读取数据时，客户端随机开放一个端口（1024以上），发送 PORT命令到FTP服务器，告诉服务器客户端采用主动模式并开放端口；FTP服务器收到PORT主动模式命令和端口号后，通过服务器的20端口和客户端开放的端口连接，发送数据，原理如下图\n![alt text](image.png)\n\n# 被动模式\nPASV是Passive的缩写，中文成为被动模式，工作原理：FTP客户端连接到FTP服务器的21端口，发送用户名和密码登录，登录成功后要list列表或者读取数据时，发送PASV命令到FTP服务器， 服务器在本地随机开放一个端口（1024以上），然后把开放的端口告诉客户端， 客户端再连接到服务器开放的端口进行数据传输，原理如下图\n![alt text](image-1.png)\n\n从上面的运行原来看到，主动模式和被动模式的不同简单概述为： 主动模式传送数据时是“服务器”连接到“客户端”的端口；被动模式传送数据是“客户端”连接到“服务器”的端口。\n主动模式需要客户端必须开放端口给服务器，很多客户端都是在防火墙内，开放端口给FTP服务器访问比较困难。\n被动模式只需要服务器端开放端口给客户端连接就行了,所以推荐被动模式，主动模式可能会被客户端拦截\n","slug":"ftp","published":1,"updated":"2025-08-28T06:39:18.058Z","comments":1,"layout":"post","photos":[],"_id":"cmev1ggb10009hllzc9me5z8z","content":"<h1 id=\"主动模式\"><a href=\"#主动模式\" class=\"headerlink\" title=\"主动模式\"></a>主动模式</h1><p>PORT中文称为主动模式，工作的原理： FTP客户端连接到FTP服务器的21端口，发送用户名和密码登录，登录成功后要list列表或者读取数据时，客户端随机开放一个端口（1024以上），发送 PORT命令到FTP服务器，告诉服务器客户端采用主动模式并开放端口；FTP服务器收到PORT主动模式命令和端口号后，通过服务器的20端口和客户端开放的端口连接，发送数据，原理如下图<br><img src=\"/2025/07/25/ftp/image.png\" alt=\"alt text\"></p>\n<h1 id=\"被动模式\"><a href=\"#被动模式\" class=\"headerlink\" title=\"被动模式\"></a>被动模式</h1><p>PASV是Passive的缩写，中文成为被动模式，工作原理：FTP客户端连接到FTP服务器的21端口，发送用户名和密码登录，登录成功后要list列表或者读取数据时，发送PASV命令到FTP服务器， 服务器在本地随机开放一个端口（1024以上），然后把开放的端口告诉客户端， 客户端再连接到服务器开放的端口进行数据传输，原理如下图<br><img src=\"/2025/07/25/ftp/image-1.png\" alt=\"alt text\"></p>\n<p>从上面的运行原来看到，主动模式和被动模式的不同简单概述为： 主动模式传送数据时是“服务器”连接到“客户端”的端口；被动模式传送数据是“客户端”连接到“服务器”的端口。<br>主动模式需要客户端必须开放端口给服务器，很多客户端都是在防火墙内，开放端口给FTP服务器访问比较困难。<br>被动模式只需要服务器端开放端口给客户端连接就行了,所以推荐被动模式，主动模式可能会被客户端拦截</p>\n","excerpt":"","more":"<h1 id=\"主动模式\"><a href=\"#主动模式\" class=\"headerlink\" title=\"主动模式\"></a>主动模式</h1><p>PORT中文称为主动模式，工作的原理： FTP客户端连接到FTP服务器的21端口，发送用户名和密码登录，登录成功后要list列表或者读取数据时，客户端随机开放一个端口（1024以上），发送 PORT命令到FTP服务器，告诉服务器客户端采用主动模式并开放端口；FTP服务器收到PORT主动模式命令和端口号后，通过服务器的20端口和客户端开放的端口连接，发送数据，原理如下图<br><img src=\"/2025/07/25/ftp/image.png\" alt=\"alt text\"></p>\n<h1 id=\"被动模式\"><a href=\"#被动模式\" class=\"headerlink\" title=\"被动模式\"></a>被动模式</h1><p>PASV是Passive的缩写，中文成为被动模式，工作原理：FTP客户端连接到FTP服务器的21端口，发送用户名和密码登录，登录成功后要list列表或者读取数据时，发送PASV命令到FTP服务器， 服务器在本地随机开放一个端口（1024以上），然后把开放的端口告诉客户端， 客户端再连接到服务器开放的端口进行数据传输，原理如下图<br><img src=\"/2025/07/25/ftp/image-1.png\" alt=\"alt text\"></p>\n<p>从上面的运行原来看到，主动模式和被动模式的不同简单概述为： 主动模式传送数据时是“服务器”连接到“客户端”的端口；被动模式传送数据是“客户端”连接到“服务器”的端口。<br>主动模式需要客户端必须开放端口给服务器，很多客户端都是在防火墙内，开放端口给FTP服务器访问比较困难。<br>被动模式只需要服务器端开放端口给客户端连接就行了,所以推荐被动模式，主动模式可能会被客户端拦截</p>\n"},{"title":"iptables防止ddos(cc)","date":"2025-04-21T11:17:48.000Z","_content":"> 基本上发行版都是自带的，轻量级，不需要额外下载\nFail2Ban也可以但是需要额外下载\n\n# 如何配置使用\n```shell\niptables -I INPUT -p tcp --dport 80 -m state --state NEW -m recent --set\n\n参数    作用\n-I INPUT    将规则插入到 INPUT 链的最前面\n-p tcp --dport 80    匹配目标端口为 80 的 TCP 流量\n-m state --state NEW    仅匹配 新建连接（如 TCP 的 SYN 包）\n-m recent --set    将来源 IP 记录到 recent 模块的默认列表（/proc/net/xt_recent/DEFAULT）\n\niptables -I INPUT -p tcp --dport 80 -m state --state NEW -m recent --update --seconds 60 --hitcount 100 -j DROP\n\n参数    作用\n-m recent --update --seconds 60 --hitcount 100    检查 IP 在 60 秒内是否发起超过 100 次新连接\n-j DROP    若超限，直接丢弃数据包\n```\n\n## 效果图，到指定次数自动丢弃数据包，端口不通，到达指定时间自动恢复\n\n![alt text](image.png)\n![alt text](image-1.png)\n\n\n\n## 经过测试 --hitcount 大于20 会报错\n![alt text](image-2.png)\n\n### 解决办法 \n```shell\necho options xt_recent ip_pkt_list_tot=200 > /etc/modprobe.d/xt.conf\n\nmodprobe -r xt_recent && modprobe xt_recent 重新加载\n\n查看 lsmod |grep xt  ；cat /sys/module/xt_recent/parameters/ip_pkt_list_tot 对应 xt.conf\n```\n# 额外补充\n\n若其他规则也使用 recent 默认列表，可能导致误判，可以通过--name 指定名称分类\n\niptables -I INPUT -p tcp --dport 80 -m state --state NEW -m recent --set --name HTTP_CC\n\niptables -I INPUT -p tcp --dport 80 -m state --state NEW -m recent --update --seconds 60 --hitcount 200 --name HTTP_CC -j DROP\n\n则 /proc/net/xt_recent/HTTP_CC 叫 HTTP_CC\n\n","source":"_posts/iptables防止ddos-cc.md","raw":"---\ntitle: iptables防止ddos(cc)\ndate: 2025-04-21 19:17:48\ntags:\ncategories: linux\n---\n> 基本上发行版都是自带的，轻量级，不需要额外下载\nFail2Ban也可以但是需要额外下载\n\n# 如何配置使用\n```shell\niptables -I INPUT -p tcp --dport 80 -m state --state NEW -m recent --set\n\n参数    作用\n-I INPUT    将规则插入到 INPUT 链的最前面\n-p tcp --dport 80    匹配目标端口为 80 的 TCP 流量\n-m state --state NEW    仅匹配 新建连接（如 TCP 的 SYN 包）\n-m recent --set    将来源 IP 记录到 recent 模块的默认列表（/proc/net/xt_recent/DEFAULT）\n\niptables -I INPUT -p tcp --dport 80 -m state --state NEW -m recent --update --seconds 60 --hitcount 100 -j DROP\n\n参数    作用\n-m recent --update --seconds 60 --hitcount 100    检查 IP 在 60 秒内是否发起超过 100 次新连接\n-j DROP    若超限，直接丢弃数据包\n```\n\n## 效果图，到指定次数自动丢弃数据包，端口不通，到达指定时间自动恢复\n\n![alt text](image.png)\n![alt text](image-1.png)\n\n\n\n## 经过测试 --hitcount 大于20 会报错\n![alt text](image-2.png)\n\n### 解决办法 \n```shell\necho options xt_recent ip_pkt_list_tot=200 > /etc/modprobe.d/xt.conf\n\nmodprobe -r xt_recent && modprobe xt_recent 重新加载\n\n查看 lsmod |grep xt  ；cat /sys/module/xt_recent/parameters/ip_pkt_list_tot 对应 xt.conf\n```\n# 额外补充\n\n若其他规则也使用 recent 默认列表，可能导致误判，可以通过--name 指定名称分类\n\niptables -I INPUT -p tcp --dport 80 -m state --state NEW -m recent --set --name HTTP_CC\n\niptables -I INPUT -p tcp --dport 80 -m state --state NEW -m recent --update --seconds 60 --hitcount 200 --name HTTP_CC -j DROP\n\n则 /proc/net/xt_recent/HTTP_CC 叫 HTTP_CC\n\n","slug":"iptables防止ddos-cc","published":1,"updated":"2025-08-28T06:39:18.061Z","comments":1,"layout":"post","photos":[],"_id":"cmev1ggb5000ahllzb7cc5wpf","content":"<blockquote>\n<p>基本上发行版都是自带的，轻量级，不需要额外下载<br>Fail2Ban也可以但是需要额外下载</p>\n</blockquote>\n<h1 id=\"如何配置使用\"><a href=\"#如何配置使用\" class=\"headerlink\" title=\"如何配置使用\"></a>如何配置使用</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -I INPUT -p tcp --dport 80 -m state --state NEW -m recent --set</span><br><span class=\"line\"></span><br><span class=\"line\">参数    作用</span><br><span class=\"line\">-I INPUT    将规则插入到 INPUT 链的最前面</span><br><span class=\"line\">-p tcp --dport 80    匹配目标端口为 80 的 TCP 流量</span><br><span class=\"line\">-m state --state NEW    仅匹配 新建连接（如 TCP 的 SYN 包）</span><br><span class=\"line\">-m recent --set    将来源 IP 记录到 recent 模块的默认列表（/proc/net/xt_recent/DEFAULT）</span><br><span class=\"line\"></span><br><span class=\"line\">iptables -I INPUT -p tcp --dport 80 -m state --state NEW -m recent --update --seconds 60 --hitcount 100 -j DROP</span><br><span class=\"line\"></span><br><span class=\"line\">参数    作用</span><br><span class=\"line\">-m recent --update --seconds 60 --hitcount 100    检查 IP 在 60 秒内是否发起超过 100 次新连接</span><br><span class=\"line\">-j DROP    若超限，直接丢弃数据包</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"效果图，到指定次数自动丢弃数据包，端口不通，到达指定时间自动恢复\"><a href=\"#效果图，到指定次数自动丢弃数据包，端口不通，到达指定时间自动恢复\" class=\"headerlink\" title=\"效果图，到指定次数自动丢弃数据包，端口不通，到达指定时间自动恢复\"></a>效果图，到指定次数自动丢弃数据包，端口不通，到达指定时间自动恢复</h2><p><img src=\"/2025/04/21/iptables%E9%98%B2%E6%AD%A2ddos-cc/image.png\" alt=\"alt text\"><br><img src=\"/2025/04/21/iptables%E9%98%B2%E6%AD%A2ddos-cc/image-1.png\" alt=\"alt text\"></p>\n<h2 id=\"经过测试-–hitcount-大于20-会报错\"><a href=\"#经过测试-–hitcount-大于20-会报错\" class=\"headerlink\" title=\"经过测试 –hitcount 大于20 会报错\"></a>经过测试 –hitcount 大于20 会报错</h2><p><img src=\"/2025/04/21/iptables%E9%98%B2%E6%AD%A2ddos-cc/image-2.png\" alt=\"alt text\"></p>\n<h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo options xt_recent ip_pkt_list_tot=200 &gt; /etc/modprobe.d/xt.conf</span><br><span class=\"line\"></span><br><span class=\"line\">modprobe -r xt_recent &amp;&amp; modprobe xt_recent 重新加载</span><br><span class=\"line\"></span><br><span class=\"line\">查看 lsmod |grep xt  ；cat /sys/module/xt_recent/parameters/ip_pkt_list_tot 对应 xt.conf</span><br></pre></td></tr></table></figure>\n<h1 id=\"额外补充\"><a href=\"#额外补充\" class=\"headerlink\" title=\"额外补充\"></a>额外补充</h1><p>若其他规则也使用 recent 默认列表，可能导致误判，可以通过–name 指定名称分类</p>\n<p>iptables -I INPUT -p tcp –dport 80 -m state –state NEW -m recent –set –name HTTP_CC</p>\n<p>iptables -I INPUT -p tcp –dport 80 -m state –state NEW -m recent –update –seconds 60 –hitcount 200 –name HTTP_CC -j DROP</p>\n<p>则 &#x2F;proc&#x2F;net&#x2F;xt_recent&#x2F;HTTP_CC 叫 HTTP_CC</p>\n","excerpt":"","more":"<blockquote>\n<p>基本上发行版都是自带的，轻量级，不需要额外下载<br>Fail2Ban也可以但是需要额外下载</p>\n</blockquote>\n<h1 id=\"如何配置使用\"><a href=\"#如何配置使用\" class=\"headerlink\" title=\"如何配置使用\"></a>如何配置使用</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -I INPUT -p tcp --dport 80 -m state --state NEW -m recent --set</span><br><span class=\"line\"></span><br><span class=\"line\">参数    作用</span><br><span class=\"line\">-I INPUT    将规则插入到 INPUT 链的最前面</span><br><span class=\"line\">-p tcp --dport 80    匹配目标端口为 80 的 TCP 流量</span><br><span class=\"line\">-m state --state NEW    仅匹配 新建连接（如 TCP 的 SYN 包）</span><br><span class=\"line\">-m recent --set    将来源 IP 记录到 recent 模块的默认列表（/proc/net/xt_recent/DEFAULT）</span><br><span class=\"line\"></span><br><span class=\"line\">iptables -I INPUT -p tcp --dport 80 -m state --state NEW -m recent --update --seconds 60 --hitcount 100 -j DROP</span><br><span class=\"line\"></span><br><span class=\"line\">参数    作用</span><br><span class=\"line\">-m recent --update --seconds 60 --hitcount 100    检查 IP 在 60 秒内是否发起超过 100 次新连接</span><br><span class=\"line\">-j DROP    若超限，直接丢弃数据包</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"效果图，到指定次数自动丢弃数据包，端口不通，到达指定时间自动恢复\"><a href=\"#效果图，到指定次数自动丢弃数据包，端口不通，到达指定时间自动恢复\" class=\"headerlink\" title=\"效果图，到指定次数自动丢弃数据包，端口不通，到达指定时间自动恢复\"></a>效果图，到指定次数自动丢弃数据包，端口不通，到达指定时间自动恢复</h2><p><img src=\"/2025/04/21/iptables%E9%98%B2%E6%AD%A2ddos-cc/image.png\" alt=\"alt text\"><br><img src=\"/2025/04/21/iptables%E9%98%B2%E6%AD%A2ddos-cc/image-1.png\" alt=\"alt text\"></p>\n<h2 id=\"经过测试-–hitcount-大于20-会报错\"><a href=\"#经过测试-–hitcount-大于20-会报错\" class=\"headerlink\" title=\"经过测试 –hitcount 大于20 会报错\"></a>经过测试 –hitcount 大于20 会报错</h2><p><img src=\"/2025/04/21/iptables%E9%98%B2%E6%AD%A2ddos-cc/image-2.png\" alt=\"alt text\"></p>\n<h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo options xt_recent ip_pkt_list_tot=200 &gt; /etc/modprobe.d/xt.conf</span><br><span class=\"line\"></span><br><span class=\"line\">modprobe -r xt_recent &amp;&amp; modprobe xt_recent 重新加载</span><br><span class=\"line\"></span><br><span class=\"line\">查看 lsmod |grep xt  ；cat /sys/module/xt_recent/parameters/ip_pkt_list_tot 对应 xt.conf</span><br></pre></td></tr></table></figure>\n<h1 id=\"额外补充\"><a href=\"#额外补充\" class=\"headerlink\" title=\"额外补充\"></a>额外补充</h1><p>若其他规则也使用 recent 默认列表，可能导致误判，可以通过–name 指定名称分类</p>\n<p>iptables -I INPUT -p tcp –dport 80 -m state –state NEW -m recent –set –name HTTP_CC</p>\n<p>iptables -I INPUT -p tcp –dport 80 -m state –state NEW -m recent –update –seconds 60 –hitcount 200 –name HTTP_CC -j DROP</p>\n<p>则 &#x2F;proc&#x2F;net&#x2F;xt_recent&#x2F;HTTP_CC 叫 HTTP_CC</p>\n"},{"title":"kubeclt-neat","date":"2025-07-24T06:23:29.000Z","_content":"# kubeclt-neat使用\n* 如果部署的yaml丢失，可以使用kubeclt-neat精简后直接使用导入新的环境，默认的文件有多余的信息是不能直接使用的\n```shell\nyum -y install bash-completion\nsource /usr/share/bash-completion/bash_completion\nsource <(kubectl completion bash)\necho \"source <(kubectl completion bash)\" >> ~/.bashrc\nwget https://github.com/itaysk/kubectl-neat/releases/download/v2.0.3/kubectl-neat_linux_amd64.tar.gz\ntar -zxvf kubectl-neat_linux_amd64.tar.gz\nmv kubectl-neat /usr/local/bin/\nkubectl get deploy my-deployment -o yaml | kubectl neat > current-config.yaml\nkubectl apply -f current-config.yaml\ndiff current-config.yaml new-config.yaml\n```\n","source":"_posts/kubeclt-neat.md","raw":"---\ntitle: kubeclt-neat\ndate: 2025-07-24 14:23:29\ntags:\ncategories: k8s\n---\n# kubeclt-neat使用\n* 如果部署的yaml丢失，可以使用kubeclt-neat精简后直接使用导入新的环境，默认的文件有多余的信息是不能直接使用的\n```shell\nyum -y install bash-completion\nsource /usr/share/bash-completion/bash_completion\nsource <(kubectl completion bash)\necho \"source <(kubectl completion bash)\" >> ~/.bashrc\nwget https://github.com/itaysk/kubectl-neat/releases/download/v2.0.3/kubectl-neat_linux_amd64.tar.gz\ntar -zxvf kubectl-neat_linux_amd64.tar.gz\nmv kubectl-neat /usr/local/bin/\nkubectl get deploy my-deployment -o yaml | kubectl neat > current-config.yaml\nkubectl apply -f current-config.yaml\ndiff current-config.yaml new-config.yaml\n```\n","slug":"kubeclt-neat","published":1,"updated":"2025-08-28T06:39:18.076Z","comments":1,"layout":"post","photos":[],"_id":"cmev1ggb9000chllze97b02xj","content":"<h1 id=\"kubeclt-neat使用\"><a href=\"#kubeclt-neat使用\" class=\"headerlink\" title=\"kubeclt-neat使用\"></a>kubeclt-neat使用</h1><ul>\n<li>如果部署的yaml丢失，可以使用kubeclt-neat精简后直接使用导入新的环境，默认的文件有多余的信息是不能直接使用的<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install bash-completion</span><br><span class=\"line\">source /usr/share/bash-completion/bash_completion</span><br><span class=\"line\">source &lt;(kubectl completion bash)</span><br><span class=\"line\">echo &quot;source &lt;(kubectl completion bash)&quot; &gt;&gt; ~/.bashrc</span><br><span class=\"line\">wget https://github.com/itaysk/kubectl-neat/releases/download/v2.0.3/kubectl-neat_linux_amd64.tar.gz</span><br><span class=\"line\">tar -zxvf kubectl-neat_linux_amd64.tar.gz</span><br><span class=\"line\">mv kubectl-neat /usr/local/bin/</span><br><span class=\"line\">kubectl get deploy my-deployment -o yaml | kubectl neat &gt; current-config.yaml</span><br><span class=\"line\">kubectl apply -f current-config.yaml</span><br><span class=\"line\">diff current-config.yaml new-config.yaml</span><br></pre></td></tr></table></figure></li>\n</ul>\n","excerpt":"","more":"<h1 id=\"kubeclt-neat使用\"><a href=\"#kubeclt-neat使用\" class=\"headerlink\" title=\"kubeclt-neat使用\"></a>kubeclt-neat使用</h1><ul>\n<li>如果部署的yaml丢失，可以使用kubeclt-neat精简后直接使用导入新的环境，默认的文件有多余的信息是不能直接使用的<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install bash-completion</span><br><span class=\"line\">source /usr/share/bash-completion/bash_completion</span><br><span class=\"line\">source &lt;(kubectl completion bash)</span><br><span class=\"line\">echo &quot;source &lt;(kubectl completion bash)&quot; &gt;&gt; ~/.bashrc</span><br><span class=\"line\">wget https://github.com/itaysk/kubectl-neat/releases/download/v2.0.3/kubectl-neat_linux_amd64.tar.gz</span><br><span class=\"line\">tar -zxvf kubectl-neat_linux_amd64.tar.gz</span><br><span class=\"line\">mv kubectl-neat /usr/local/bin/</span><br><span class=\"line\">kubectl get deploy my-deployment -o yaml | kubectl neat &gt; current-config.yaml</span><br><span class=\"line\">kubectl apply -f current-config.yaml</span><br><span class=\"line\">diff current-config.yaml new-config.yaml</span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"miniconda3","date":"2025-04-21T10:40:55.000Z","_content":"> conda是一个包和环境管理工具，用于创建、管理和切换Python的虚拟环境\n\n# 安装\n```shell\nmkdir -p ~/miniconda3\nwget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda3/miniconda.sh\nbash ~/miniconda3/miniconda.sh -b -u -p ~/miniconda3\nrm ~/miniconda3/miniconda.sh\nsource ~/miniconda3/bin/activate\n```\n# 使用\n```shell\n1. conda --version #查看conda版本，验证是否安装\n2. conda update conda #更新至最新版本，也会更新其它相关包\n3. conda update --all #更新所有包\n4. conda update package_name #更新指定的包\n5. conda create -n env_name package_name #创建名为env_name的新环境，并在该环境下安装名为package_name 的包，可以指定新环境的版本号，例如：conda create -n python2 python=python2.7 numpy pandas，创建了python2环境，python版本为2.7，同时还安装了numpy pandas包\n6. source activate env_name #切换至env_name环境\n7. source deactivate #退出环境\n8. conda info -e #显示所有已经创建的环境\n9. conda create --name new_env_name --clone old_env_name #复制old_env_name为new_env_name\n10. conda remove --name env_name –all #删除环境\n11. conda list #查看所有已经安装的包\n12. conda install package_name #在当前环境中安装包\n13. conda install --name env_name package_name #在指定环境中安装包\n14. conda remove -- name env_name package #删除指定环境中的包\n15. conda remove package #删除当前环境中的包\n16. conda env remove -n env_name #采用第10条的方法删除环境失败时，可采用这种方法\n```\n\n\n\n两个环境，一个有request一个没有，隔离作用\n\n\n# 镜像源\n```shell\n# 查看镜像源\nconda config --show-sources\n# 添加镜像源\nconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/\nconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main\n# 从镜像源中安装包时显示来源\nconda config --set show_channel_urls yes\n# 删除镜像源\nconda config --remove channels https://XXX\n# 删除配置的镜像源，使用默认镜像源\nconda config --remove-key channels\n```\n\n# 打包运行环境\n```shell\npip install conda-pack\nconda pack -n my_env_name -o out_name.tar.gz\ntar -zxvf 2.7.tar.gz -C 2.7\nconda info -e\nsource activate my_env_name\n```\n\n","source":"_posts/miniconda3.md","raw":"---\ntitle: miniconda3\ndate: 2025-04-21 18:40:55\ntags:\ncategories: python\n---\n> conda是一个包和环境管理工具，用于创建、管理和切换Python的虚拟环境\n\n# 安装\n```shell\nmkdir -p ~/miniconda3\nwget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda3/miniconda.sh\nbash ~/miniconda3/miniconda.sh -b -u -p ~/miniconda3\nrm ~/miniconda3/miniconda.sh\nsource ~/miniconda3/bin/activate\n```\n# 使用\n```shell\n1. conda --version #查看conda版本，验证是否安装\n2. conda update conda #更新至最新版本，也会更新其它相关包\n3. conda update --all #更新所有包\n4. conda update package_name #更新指定的包\n5. conda create -n env_name package_name #创建名为env_name的新环境，并在该环境下安装名为package_name 的包，可以指定新环境的版本号，例如：conda create -n python2 python=python2.7 numpy pandas，创建了python2环境，python版本为2.7，同时还安装了numpy pandas包\n6. source activate env_name #切换至env_name环境\n7. source deactivate #退出环境\n8. conda info -e #显示所有已经创建的环境\n9. conda create --name new_env_name --clone old_env_name #复制old_env_name为new_env_name\n10. conda remove --name env_name –all #删除环境\n11. conda list #查看所有已经安装的包\n12. conda install package_name #在当前环境中安装包\n13. conda install --name env_name package_name #在指定环境中安装包\n14. conda remove -- name env_name package #删除指定环境中的包\n15. conda remove package #删除当前环境中的包\n16. conda env remove -n env_name #采用第10条的方法删除环境失败时，可采用这种方法\n```\n\n\n\n两个环境，一个有request一个没有，隔离作用\n\n\n# 镜像源\n```shell\n# 查看镜像源\nconda config --show-sources\n# 添加镜像源\nconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/\nconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main\n# 从镜像源中安装包时显示来源\nconda config --set show_channel_urls yes\n# 删除镜像源\nconda config --remove channels https://XXX\n# 删除配置的镜像源，使用默认镜像源\nconda config --remove-key channels\n```\n\n# 打包运行环境\n```shell\npip install conda-pack\nconda pack -n my_env_name -o out_name.tar.gz\ntar -zxvf 2.7.tar.gz -C 2.7\nconda info -e\nsource activate my_env_name\n```\n\n","slug":"miniconda3","published":1,"updated":"2025-08-28T06:39:18.076Z","comments":1,"layout":"post","photos":[],"_id":"cmev1ggbc000ehllz8sc39ay4","content":"<blockquote>\n<p>conda是一个包和环境管理工具，用于创建、管理和切换Python的虚拟环境</p>\n</blockquote>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p ~/miniconda3</span><br><span class=\"line\">wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda3/miniconda.sh</span><br><span class=\"line\">bash ~/miniconda3/miniconda.sh -b -u -p ~/miniconda3</span><br><span class=\"line\">rm ~/miniconda3/miniconda.sh</span><br><span class=\"line\">source ~/miniconda3/bin/activate</span><br></pre></td></tr></table></figure>\n<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. conda --version #查看conda版本，验证是否安装</span><br><span class=\"line\">2. conda update conda #更新至最新版本，也会更新其它相关包</span><br><span class=\"line\">3. conda update --all #更新所有包</span><br><span class=\"line\">4. conda update package_name #更新指定的包</span><br><span class=\"line\">5. conda create -n env_name package_name #创建名为env_name的新环境，并在该环境下安装名为package_name 的包，可以指定新环境的版本号，例如：conda create -n python2 python=python2.7 numpy pandas，创建了python2环境，python版本为2.7，同时还安装了numpy pandas包</span><br><span class=\"line\">6. source activate env_name #切换至env_name环境</span><br><span class=\"line\">7. source deactivate #退出环境</span><br><span class=\"line\">8. conda info -e #显示所有已经创建的环境</span><br><span class=\"line\">9. conda create --name new_env_name --clone old_env_name #复制old_env_name为new_env_name</span><br><span class=\"line\">10. conda remove --name env_name –all #删除环境</span><br><span class=\"line\">11. conda list #查看所有已经安装的包</span><br><span class=\"line\">12. conda install package_name #在当前环境中安装包</span><br><span class=\"line\">13. conda install --name env_name package_name #在指定环境中安装包</span><br><span class=\"line\">14. conda remove -- name env_name package #删除指定环境中的包</span><br><span class=\"line\">15. conda remove package #删除当前环境中的包</span><br><span class=\"line\">16. conda env remove -n env_name #采用第10条的方法删除环境失败时，可采用这种方法</span><br></pre></td></tr></table></figure>\n\n\n\n<p>两个环境，一个有request一个没有，隔离作用</p>\n<h1 id=\"镜像源\"><a href=\"#镜像源\" class=\"headerlink\" title=\"镜像源\"></a>镜像源</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看镜像源</span></span><br><span class=\"line\">conda config --show-sources</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">添加镜像源</span></span><br><span class=\"line\">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class=\"line\">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">从镜像源中安装包时显示来源</span></span><br><span class=\"line\">conda config --set show_channel_urls yes</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除镜像源</span></span><br><span class=\"line\">conda config --remove channels https://XXX</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除配置的镜像源，使用默认镜像源</span></span><br><span class=\"line\">conda config --remove-key channels</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"打包运行环境\"><a href=\"#打包运行环境\" class=\"headerlink\" title=\"打包运行环境\"></a>打包运行环境</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install conda-pack</span><br><span class=\"line\">conda pack -n my_env_name -o out_name.tar.gz</span><br><span class=\"line\">tar -zxvf 2.7.tar.gz -C 2.7</span><br><span class=\"line\">conda info -e</span><br><span class=\"line\">source activate my_env_name</span><br></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<blockquote>\n<p>conda是一个包和环境管理工具，用于创建、管理和切换Python的虚拟环境</p>\n</blockquote>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p ~/miniconda3</span><br><span class=\"line\">wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda3/miniconda.sh</span><br><span class=\"line\">bash ~/miniconda3/miniconda.sh -b -u -p ~/miniconda3</span><br><span class=\"line\">rm ~/miniconda3/miniconda.sh</span><br><span class=\"line\">source ~/miniconda3/bin/activate</span><br></pre></td></tr></table></figure>\n<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. conda --version #查看conda版本，验证是否安装</span><br><span class=\"line\">2. conda update conda #更新至最新版本，也会更新其它相关包</span><br><span class=\"line\">3. conda update --all #更新所有包</span><br><span class=\"line\">4. conda update package_name #更新指定的包</span><br><span class=\"line\">5. conda create -n env_name package_name #创建名为env_name的新环境，并在该环境下安装名为package_name 的包，可以指定新环境的版本号，例如：conda create -n python2 python=python2.7 numpy pandas，创建了python2环境，python版本为2.7，同时还安装了numpy pandas包</span><br><span class=\"line\">6. source activate env_name #切换至env_name环境</span><br><span class=\"line\">7. source deactivate #退出环境</span><br><span class=\"line\">8. conda info -e #显示所有已经创建的环境</span><br><span class=\"line\">9. conda create --name new_env_name --clone old_env_name #复制old_env_name为new_env_name</span><br><span class=\"line\">10. conda remove --name env_name –all #删除环境</span><br><span class=\"line\">11. conda list #查看所有已经安装的包</span><br><span class=\"line\">12. conda install package_name #在当前环境中安装包</span><br><span class=\"line\">13. conda install --name env_name package_name #在指定环境中安装包</span><br><span class=\"line\">14. conda remove -- name env_name package #删除指定环境中的包</span><br><span class=\"line\">15. conda remove package #删除当前环境中的包</span><br><span class=\"line\">16. conda env remove -n env_name #采用第10条的方法删除环境失败时，可采用这种方法</span><br></pre></td></tr></table></figure>\n\n\n\n<p>两个环境，一个有request一个没有，隔离作用</p>\n<h1 id=\"镜像源\"><a href=\"#镜像源\" class=\"headerlink\" title=\"镜像源\"></a>镜像源</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看镜像源</span></span><br><span class=\"line\">conda config --show-sources</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">添加镜像源</span></span><br><span class=\"line\">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class=\"line\">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">从镜像源中安装包时显示来源</span></span><br><span class=\"line\">conda config --set show_channel_urls yes</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除镜像源</span></span><br><span class=\"line\">conda config --remove channels https://XXX</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除配置的镜像源，使用默认镜像源</span></span><br><span class=\"line\">conda config --remove-key channels</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"打包运行环境\"><a href=\"#打包运行环境\" class=\"headerlink\" title=\"打包运行环境\"></a>打包运行环境</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install conda-pack</span><br><span class=\"line\">conda pack -n my_env_name -o out_name.tar.gz</span><br><span class=\"line\">tar -zxvf 2.7.tar.gz -C 2.7</span><br><span class=\"line\">conda info -e</span><br><span class=\"line\">source activate my_env_name</span><br></pre></td></tr></table></figure>\n\n"},{"title":"mq","date":"2025-08-22T07:28:18.000Z","_content":"# rabbitMQ\n* 生产者路由  vhost  >  exchange  >  queue\n每一个vhost本质上是一个mini版的RabbitMQ服务器，拥有自己的交换机、队列、绑定等，拥有自己的权限机制\n```yml\nversion: '3'\nservices:\n  rabbitmq:\n    image: registry.cn-hangzhou.aliyuncs.com/lky-deploy/mq:rabbit-3-management\n    container_name: rabbitmq\n    restart: always\n    ports:\n      - \"5672:5672\"\n      - \"15672:15672\"\n      - \"15692:15692\"  # Prometheus 监控指标端口（可选）\n    environment:\n      RABBITMQ_DEFAULT_USER: admin\n      RABBITMQ_DEFAULT_PASS: secret\n      RABBITMQ_DEFAULT_VHOST: /prod  # 指定默认虚拟主机\n      ABBITMQ_NODE_IP_ADDRESS: 0.0.0.0\n    volumes:\n      - rabbitmq_data:/var/lib/rabbitmq  # 持久化数据\n      - rabbitmq_logs:/var/log/rabbitmq  # 持久化日志\n    healthcheck:\n      test: [\"CMD\", \"rabbitmq-diagnostics\", \"status\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n\nvolumes:\n  rabbitmq_data:\n  rabbitmq_logs:\n```\n* 简单使用demo\n```python\n#生产者\nimport pika\n\n\ncredentials = pika.PlainCredentials('admin', 'secret')\nconnection = pika.BlockingConnection(\n    pika.ConnectionParameters(host='47.109.136.x', port=5672, virtual_host='/prod', credentials=credentials)\n)\nchannel = connection.channel()\n\nchannel.queue_declare(queue='test_queue')\nchannel.basic_publish(exchange='', routing_key='test_queue', body='Hello from Python!')\nconnection.close()\n\n#消费者\nimport pika\n\ndef callback(ch, method, properties, body):\n    print(f\"Received: {body.decode()}\")\n\ncredentials = pika.PlainCredentials('admin', 'secret')\nconnection = pika.BlockingConnection(\n    pika.ConnectionParameters(host='47.109.136.x', port=5672, virtual_host='/prod', credentials=credentials)\n)\nchannel = connection.channel()\n\nchannel.queue_declare(queue='test_queue')\nchannel.basic_consume(queue='test_queue', on_message_callback=callback, auto_ack=True)\nprint('Waiting for messages...')\nchannel.start_consuming()\n\n```\n* 关于回调函数\n```python\nclass Library:\n    def __init__(self):\n        self.callback = None\n\n    def register_callback(self, callback_func):\n        self.callback = callback_func  # 保存函数对象\n\n    def trigger_event(self):\n        if self.callback:\n            # 在事件发生时调用回调函数，并传入参数\n            self.callback(\"param1\", \"param2\")\n\n# 用户定义的函数\ndef my_callback(a, b):\n    print(f\"回调触发: {a}, {b}\")\n\n# 使用库\nlib = Library()\nlib.register_callback(my_callback)  # 传递函数对象\nlib.trigger_event()  # 输出: 回调触发: param1, param2\n```\n\n\n\n\n# kafka\n* 生产者路由  group  >   topic   >  tag,适合吞吐量很大的场景比如大数据\n```yml\nversion: '3'\nservices:\n  zookeeper:\n    image: registry.cn-hangzhou.aliyuncs.com/lky-deploy/mq:zk-3.8  # Zookeeper 镜像\n    container_name: zookeeper\n    ports:\n      - \"2181:2181\"\n    environment:\n      - ALLOW_ANONYMOUS_LOGIN=yes  # 允许匿名访问（测试用）\n    networks:\n      - kafka-net\n    volumes:\n      - zookeeper_data:/bitnami/zookeeper\n\n  kafka:\n    image: registry.cn-hangzhou.aliyuncs.com/lky-deploy/mq:kafka-3.4   # Kafka 镜像\n    container_name: kafka\n    ports:\n      - \"9092:9092\"\n    environment:\n      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181\n      - ALLOW_PLAINTEXT_LISTENER=yes  # 允许明文监听\n      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT\n      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092\n      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092  # 客户端访问地址\n    depends_on:\n      - zookeeper\n    networks:\n      - kafka-net\n    volumes:\n      - kafka_data:/bitnami/kafka\n\nnetworks:\n  kafka-net:\n    driver: bridge\n\nvolumes:\n  zookeeper_data:\n  kafka_data:\n```\n```shell\n# 创建主题 \"test-topic\"\nkafka-topics.sh --create \\\n  --bootstrap-server localhost:9092 \\\n  --replication-factor 1 \\\n  --partitions 1 \\\n  --topic test-topic\nkafka-topics.sh    --bootstrap-server localhost:9092   --list\n# 启动生产者，发送消息\nkafka-console-producer.sh \\\n  --bootstrap-server localhost:9092 \\\n  --topic test-topic\n\n# 启动消费者，接收消息\nkafka-console-consumer.sh \\\n  --bootstrap-server localhost:9092 \\\n  --topic test-topic \\\n  --from-beginning\n\n# 不同节点的配置差异（以 101 节点为例）\nbroker.id=1  # 102 节点改为 2，103 节点改为 3\nlisteners=PLAINTEXT://0.0.0.0:9092\nadvertised.listeners=PLAINTEXT://192.168.1.101:9092  # 修改为当前节点 IP\n\n# 所有节点相同配置\nzookeeper.connect=192.168.1.101:2181,192.168.1.102:2181,192.168.1.103:2181\nlog.dirs=/data/kafka/logs\nnum.partitions=3  # 默认分区数（建议 >= Broker 数量）\ndefault.replication.factor=3  # 默认副本数（建议 = Broker 数量）\noffsets.topic.replication.factor=3\ntransaction.state.log.replication.factor=3\ndelete.topic.enable=true\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# \n","source":"_posts/mq.md","raw":"---\ntitle: mq\ndate: 2025-08-22 15:28:18\ntags:\ncategories: 中间件\n---\n# rabbitMQ\n* 生产者路由  vhost  >  exchange  >  queue\n每一个vhost本质上是一个mini版的RabbitMQ服务器，拥有自己的交换机、队列、绑定等，拥有自己的权限机制\n```yml\nversion: '3'\nservices:\n  rabbitmq:\n    image: registry.cn-hangzhou.aliyuncs.com/lky-deploy/mq:rabbit-3-management\n    container_name: rabbitmq\n    restart: always\n    ports:\n      - \"5672:5672\"\n      - \"15672:15672\"\n      - \"15692:15692\"  # Prometheus 监控指标端口（可选）\n    environment:\n      RABBITMQ_DEFAULT_USER: admin\n      RABBITMQ_DEFAULT_PASS: secret\n      RABBITMQ_DEFAULT_VHOST: /prod  # 指定默认虚拟主机\n      ABBITMQ_NODE_IP_ADDRESS: 0.0.0.0\n    volumes:\n      - rabbitmq_data:/var/lib/rabbitmq  # 持久化数据\n      - rabbitmq_logs:/var/log/rabbitmq  # 持久化日志\n    healthcheck:\n      test: [\"CMD\", \"rabbitmq-diagnostics\", \"status\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n\nvolumes:\n  rabbitmq_data:\n  rabbitmq_logs:\n```\n* 简单使用demo\n```python\n#生产者\nimport pika\n\n\ncredentials = pika.PlainCredentials('admin', 'secret')\nconnection = pika.BlockingConnection(\n    pika.ConnectionParameters(host='47.109.136.x', port=5672, virtual_host='/prod', credentials=credentials)\n)\nchannel = connection.channel()\n\nchannel.queue_declare(queue='test_queue')\nchannel.basic_publish(exchange='', routing_key='test_queue', body='Hello from Python!')\nconnection.close()\n\n#消费者\nimport pika\n\ndef callback(ch, method, properties, body):\n    print(f\"Received: {body.decode()}\")\n\ncredentials = pika.PlainCredentials('admin', 'secret')\nconnection = pika.BlockingConnection(\n    pika.ConnectionParameters(host='47.109.136.x', port=5672, virtual_host='/prod', credentials=credentials)\n)\nchannel = connection.channel()\n\nchannel.queue_declare(queue='test_queue')\nchannel.basic_consume(queue='test_queue', on_message_callback=callback, auto_ack=True)\nprint('Waiting for messages...')\nchannel.start_consuming()\n\n```\n* 关于回调函数\n```python\nclass Library:\n    def __init__(self):\n        self.callback = None\n\n    def register_callback(self, callback_func):\n        self.callback = callback_func  # 保存函数对象\n\n    def trigger_event(self):\n        if self.callback:\n            # 在事件发生时调用回调函数，并传入参数\n            self.callback(\"param1\", \"param2\")\n\n# 用户定义的函数\ndef my_callback(a, b):\n    print(f\"回调触发: {a}, {b}\")\n\n# 使用库\nlib = Library()\nlib.register_callback(my_callback)  # 传递函数对象\nlib.trigger_event()  # 输出: 回调触发: param1, param2\n```\n\n\n\n\n# kafka\n* 生产者路由  group  >   topic   >  tag,适合吞吐量很大的场景比如大数据\n```yml\nversion: '3'\nservices:\n  zookeeper:\n    image: registry.cn-hangzhou.aliyuncs.com/lky-deploy/mq:zk-3.8  # Zookeeper 镜像\n    container_name: zookeeper\n    ports:\n      - \"2181:2181\"\n    environment:\n      - ALLOW_ANONYMOUS_LOGIN=yes  # 允许匿名访问（测试用）\n    networks:\n      - kafka-net\n    volumes:\n      - zookeeper_data:/bitnami/zookeeper\n\n  kafka:\n    image: registry.cn-hangzhou.aliyuncs.com/lky-deploy/mq:kafka-3.4   # Kafka 镜像\n    container_name: kafka\n    ports:\n      - \"9092:9092\"\n    environment:\n      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181\n      - ALLOW_PLAINTEXT_LISTENER=yes  # 允许明文监听\n      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT\n      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092\n      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092  # 客户端访问地址\n    depends_on:\n      - zookeeper\n    networks:\n      - kafka-net\n    volumes:\n      - kafka_data:/bitnami/kafka\n\nnetworks:\n  kafka-net:\n    driver: bridge\n\nvolumes:\n  zookeeper_data:\n  kafka_data:\n```\n```shell\n# 创建主题 \"test-topic\"\nkafka-topics.sh --create \\\n  --bootstrap-server localhost:9092 \\\n  --replication-factor 1 \\\n  --partitions 1 \\\n  --topic test-topic\nkafka-topics.sh    --bootstrap-server localhost:9092   --list\n# 启动生产者，发送消息\nkafka-console-producer.sh \\\n  --bootstrap-server localhost:9092 \\\n  --topic test-topic\n\n# 启动消费者，接收消息\nkafka-console-consumer.sh \\\n  --bootstrap-server localhost:9092 \\\n  --topic test-topic \\\n  --from-beginning\n\n# 不同节点的配置差异（以 101 节点为例）\nbroker.id=1  # 102 节点改为 2，103 节点改为 3\nlisteners=PLAINTEXT://0.0.0.0:9092\nadvertised.listeners=PLAINTEXT://192.168.1.101:9092  # 修改为当前节点 IP\n\n# 所有节点相同配置\nzookeeper.connect=192.168.1.101:2181,192.168.1.102:2181,192.168.1.103:2181\nlog.dirs=/data/kafka/logs\nnum.partitions=3  # 默认分区数（建议 >= Broker 数量）\ndefault.replication.factor=3  # 默认副本数（建议 = Broker 数量）\noffsets.topic.replication.factor=3\ntransaction.state.log.replication.factor=3\ndelete.topic.enable=true\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# \n","slug":"mq","published":1,"updated":"2025-08-28T06:39:18.077Z","comments":1,"layout":"post","photos":[],"_id":"cmev1ggbj000hhllz52i9cdri","content":"<h1 id=\"rabbitMQ\"><a href=\"#rabbitMQ\" class=\"headerlink\" title=\"rabbitMQ\"></a>rabbitMQ</h1><ul>\n<li>生产者路由  vhost  &gt;  exchange  &gt;  queue<br>每一个vhost本质上是一个mini版的RabbitMQ服务器，拥有自己的交换机、队列、绑定等，拥有自己的权限机制<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;3&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">rabbitmq:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">registry.cn-hangzhou.aliyuncs.com/lky-deploy/mq:rabbit-3-management</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">rabbitmq</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;5672:5672&quot;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;15672:15672&quot;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;15692:15692&quot;</span>  <span class=\"comment\"># Prometheus 监控指标端口（可选）</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">RABBITMQ_DEFAULT_USER:</span> <span class=\"string\">admin</span></span><br><span class=\"line\">      <span class=\"attr\">RABBITMQ_DEFAULT_PASS:</span> <span class=\"string\">secret</span></span><br><span class=\"line\">      <span class=\"attr\">RABBITMQ_DEFAULT_VHOST:</span> <span class=\"string\">/prod</span>  <span class=\"comment\"># 指定默认虚拟主机</span></span><br><span class=\"line\">      <span class=\"attr\">ABBITMQ_NODE_IP_ADDRESS:</span> <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">rabbitmq_data:/var/lib/rabbitmq</span>  <span class=\"comment\"># 持久化数据</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">rabbitmq_logs:/var/log/rabbitmq</span>  <span class=\"comment\"># 持久化日志</span></span><br><span class=\"line\">    <span class=\"attr\">healthcheck:</span></span><br><span class=\"line\">      <span class=\"attr\">test:</span> [<span class=\"string\">&quot;CMD&quot;</span>, <span class=\"string\">&quot;rabbitmq-diagnostics&quot;</span>, <span class=\"string\">&quot;status&quot;</span>]</span><br><span class=\"line\">      <span class=\"attr\">interval:</span> <span class=\"string\">30s</span></span><br><span class=\"line\">      <span class=\"attr\">timeout:</span> <span class=\"string\">10s</span></span><br><span class=\"line\">      <span class=\"attr\">retries:</span> <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">volumes:</span></span><br><span class=\"line\">  <span class=\"attr\">rabbitmq_data:</span></span><br><span class=\"line\">  <span class=\"attr\">rabbitmq_logs:</span></span><br></pre></td></tr></table></figure></li>\n<li>简单使用demo<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#生产者</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> pika</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">credentials = pika.PlainCredentials(<span class=\"string\">&#x27;admin&#x27;</span>, <span class=\"string\">&#x27;secret&#x27;</span>)</span><br><span class=\"line\">connection = pika.BlockingConnection(</span><br><span class=\"line\">    pika.ConnectionParameters(host=<span class=\"string\">&#x27;47.109.136.x&#x27;</span>, port=<span class=\"number\">5672</span>, virtual_host=<span class=\"string\">&#x27;/prod&#x27;</span>, credentials=credentials)</span><br><span class=\"line\">)</span><br><span class=\"line\">channel = connection.channel()</span><br><span class=\"line\"></span><br><span class=\"line\">channel.queue_declare(queue=<span class=\"string\">&#x27;test_queue&#x27;</span>)</span><br><span class=\"line\">channel.basic_publish(exchange=<span class=\"string\">&#x27;&#x27;</span>, routing_key=<span class=\"string\">&#x27;test_queue&#x27;</span>, body=<span class=\"string\">&#x27;Hello from Python!&#x27;</span>)</span><br><span class=\"line\">connection.close()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#消费者</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> pika</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">callback</span>(<span class=\"params\">ch, method, properties, body</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;Received: <span class=\"subst\">&#123;body.decode()&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">credentials = pika.PlainCredentials(<span class=\"string\">&#x27;admin&#x27;</span>, <span class=\"string\">&#x27;secret&#x27;</span>)</span><br><span class=\"line\">connection = pika.BlockingConnection(</span><br><span class=\"line\">    pika.ConnectionParameters(host=<span class=\"string\">&#x27;47.109.136.x&#x27;</span>, port=<span class=\"number\">5672</span>, virtual_host=<span class=\"string\">&#x27;/prod&#x27;</span>, credentials=credentials)</span><br><span class=\"line\">)</span><br><span class=\"line\">channel = connection.channel()</span><br><span class=\"line\"></span><br><span class=\"line\">channel.queue_declare(queue=<span class=\"string\">&#x27;test_queue&#x27;</span>)</span><br><span class=\"line\">channel.basic_consume(queue=<span class=\"string\">&#x27;test_queue&#x27;</span>, on_message_callback=callback, auto_ack=<span class=\"literal\">True</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Waiting for messages...&#x27;</span>)</span><br><span class=\"line\">channel.start_consuming()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li>关于回调函数<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Library</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.callback = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">register_callback</span>(<span class=\"params\">self, callback_func</span>):</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.callback = callback_func  <span class=\"comment\"># 保存函数对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">trigger_event</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"variable language_\">self</span>.callback:</span><br><span class=\"line\">            <span class=\"comment\"># 在事件发生时调用回调函数，并传入参数</span></span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.callback(<span class=\"string\">&quot;param1&quot;</span>, <span class=\"string\">&quot;param2&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 用户定义的函数</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">my_callback</span>(<span class=\"params\">a, b</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;回调触发: <span class=\"subst\">&#123;a&#125;</span>, <span class=\"subst\">&#123;b&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用库</span></span><br><span class=\"line\">lib = Library()</span><br><span class=\"line\">lib.register_callback(my_callback)  <span class=\"comment\"># 传递函数对象</span></span><br><span class=\"line\">lib.trigger_event()  <span class=\"comment\"># 输出: 回调触发: param1, param2</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"kafka\"><a href=\"#kafka\" class=\"headerlink\" title=\"kafka\"></a>kafka</h1><ul>\n<li>生产者路由  group  &gt;   topic   &gt;  tag,适合吞吐量很大的场景比如大数据<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;3&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">zookeeper:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">registry.cn-hangzhou.aliyuncs.com/lky-deploy/mq:zk-3.8</span>  <span class=\"comment\"># Zookeeper 镜像</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">zookeeper</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;2181:2181&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">ALLOW_ANONYMOUS_LOGIN=yes</span>  <span class=\"comment\"># 允许匿名访问（测试用）</span></span><br><span class=\"line\">    <span class=\"attr\">networks:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">kafka-net</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">zookeeper_data:/bitnami/zookeeper</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">kafka:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">registry.cn-hangzhou.aliyuncs.com/lky-deploy/mq:kafka-3.4</span>   <span class=\"comment\"># Kafka 镜像</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">kafka</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;9092:9092&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">ALLOW_PLAINTEXT_LISTENER=yes</span>  <span class=\"comment\"># 允许明文监听</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">KAFKA_CFG_LISTENERS=PLAINTEXT://:9092</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092</span>  <span class=\"comment\"># 客户端访问地址</span></span><br><span class=\"line\">    <span class=\"attr\">depends_on:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">zookeeper</span></span><br><span class=\"line\">    <span class=\"attr\">networks:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">kafka-net</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">kafka_data:/bitnami/kafka</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">networks:</span></span><br><span class=\"line\">  <span class=\"attr\">kafka-net:</span></span><br><span class=\"line\">    <span class=\"attr\">driver:</span> <span class=\"string\">bridge</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">volumes:</span></span><br><span class=\"line\">  <span class=\"attr\">zookeeper_data:</span></span><br><span class=\"line\">  <span class=\"attr\">kafka_data:</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建主题 <span class=\"string\">&quot;test-topic&quot;</span></span></span><br><span class=\"line\">kafka-topics.sh --create \\</span><br><span class=\"line\">  --bootstrap-server localhost:9092 \\</span><br><span class=\"line\">  --replication-factor 1 \\</span><br><span class=\"line\">  --partitions 1 \\</span><br><span class=\"line\">  --topic test-topic</span><br><span class=\"line\">kafka-topics.sh    --bootstrap-server localhost:9092   --list</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动生产者，发送消息</span></span><br><span class=\"line\">kafka-console-producer.sh \\</span><br><span class=\"line\">  --bootstrap-server localhost:9092 \\</span><br><span class=\"line\">  --topic test-topic</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动消费者，接收消息</span></span><br><span class=\"line\">kafka-console-consumer.sh \\</span><br><span class=\"line\">  --bootstrap-server localhost:9092 \\</span><br><span class=\"line\">  --topic test-topic \\</span><br><span class=\"line\">  --from-beginning</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">不同节点的配置差异（以 101 节点为例）</span></span><br><span class=\"line\">broker.id=1  # 102 节点改为 2，103 节点改为 3</span><br><span class=\"line\">listeners=PLAINTEXT://0.0.0.0:9092</span><br><span class=\"line\">advertised.listeners=PLAINTEXT://192.168.1.101:9092  # 修改为当前节点 IP</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">所有节点相同配置</span></span><br><span class=\"line\">zookeeper.connect=192.168.1.101:2181,192.168.1.102:2181,192.168.1.103:2181</span><br><span class=\"line\">log.dirs=/data/kafka/logs</span><br><span class=\"line\">num.partitions=3  # 默认分区数（建议 &gt;= Broker 数量）</span><br><span class=\"line\">default.replication.factor=3  # 默认副本数（建议 = Broker 数量）</span><br><span class=\"line\">offsets.topic.replication.factor=3</span><br><span class=\"line\">transaction.state.log.replication.factor=3</span><br><span class=\"line\">delete.topic.enable=true</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id><a href=\"#\" class=\"headerlink\" title></a></h1>","excerpt":"","more":"<h1 id=\"rabbitMQ\"><a href=\"#rabbitMQ\" class=\"headerlink\" title=\"rabbitMQ\"></a>rabbitMQ</h1><ul>\n<li>生产者路由  vhost  &gt;  exchange  &gt;  queue<br>每一个vhost本质上是一个mini版的RabbitMQ服务器，拥有自己的交换机、队列、绑定等，拥有自己的权限机制<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;3&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">rabbitmq:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">registry.cn-hangzhou.aliyuncs.com/lky-deploy/mq:rabbit-3-management</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">rabbitmq</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;5672:5672&quot;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;15672:15672&quot;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;15692:15692&quot;</span>  <span class=\"comment\"># Prometheus 监控指标端口（可选）</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">RABBITMQ_DEFAULT_USER:</span> <span class=\"string\">admin</span></span><br><span class=\"line\">      <span class=\"attr\">RABBITMQ_DEFAULT_PASS:</span> <span class=\"string\">secret</span></span><br><span class=\"line\">      <span class=\"attr\">RABBITMQ_DEFAULT_VHOST:</span> <span class=\"string\">/prod</span>  <span class=\"comment\"># 指定默认虚拟主机</span></span><br><span class=\"line\">      <span class=\"attr\">ABBITMQ_NODE_IP_ADDRESS:</span> <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">rabbitmq_data:/var/lib/rabbitmq</span>  <span class=\"comment\"># 持久化数据</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">rabbitmq_logs:/var/log/rabbitmq</span>  <span class=\"comment\"># 持久化日志</span></span><br><span class=\"line\">    <span class=\"attr\">healthcheck:</span></span><br><span class=\"line\">      <span class=\"attr\">test:</span> [<span class=\"string\">&quot;CMD&quot;</span>, <span class=\"string\">&quot;rabbitmq-diagnostics&quot;</span>, <span class=\"string\">&quot;status&quot;</span>]</span><br><span class=\"line\">      <span class=\"attr\">interval:</span> <span class=\"string\">30s</span></span><br><span class=\"line\">      <span class=\"attr\">timeout:</span> <span class=\"string\">10s</span></span><br><span class=\"line\">      <span class=\"attr\">retries:</span> <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">volumes:</span></span><br><span class=\"line\">  <span class=\"attr\">rabbitmq_data:</span></span><br><span class=\"line\">  <span class=\"attr\">rabbitmq_logs:</span></span><br></pre></td></tr></table></figure></li>\n<li>简单使用demo<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#生产者</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> pika</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">credentials = pika.PlainCredentials(<span class=\"string\">&#x27;admin&#x27;</span>, <span class=\"string\">&#x27;secret&#x27;</span>)</span><br><span class=\"line\">connection = pika.BlockingConnection(</span><br><span class=\"line\">    pika.ConnectionParameters(host=<span class=\"string\">&#x27;47.109.136.x&#x27;</span>, port=<span class=\"number\">5672</span>, virtual_host=<span class=\"string\">&#x27;/prod&#x27;</span>, credentials=credentials)</span><br><span class=\"line\">)</span><br><span class=\"line\">channel = connection.channel()</span><br><span class=\"line\"></span><br><span class=\"line\">channel.queue_declare(queue=<span class=\"string\">&#x27;test_queue&#x27;</span>)</span><br><span class=\"line\">channel.basic_publish(exchange=<span class=\"string\">&#x27;&#x27;</span>, routing_key=<span class=\"string\">&#x27;test_queue&#x27;</span>, body=<span class=\"string\">&#x27;Hello from Python!&#x27;</span>)</span><br><span class=\"line\">connection.close()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#消费者</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> pika</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">callback</span>(<span class=\"params\">ch, method, properties, body</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;Received: <span class=\"subst\">&#123;body.decode()&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">credentials = pika.PlainCredentials(<span class=\"string\">&#x27;admin&#x27;</span>, <span class=\"string\">&#x27;secret&#x27;</span>)</span><br><span class=\"line\">connection = pika.BlockingConnection(</span><br><span class=\"line\">    pika.ConnectionParameters(host=<span class=\"string\">&#x27;47.109.136.x&#x27;</span>, port=<span class=\"number\">5672</span>, virtual_host=<span class=\"string\">&#x27;/prod&#x27;</span>, credentials=credentials)</span><br><span class=\"line\">)</span><br><span class=\"line\">channel = connection.channel()</span><br><span class=\"line\"></span><br><span class=\"line\">channel.queue_declare(queue=<span class=\"string\">&#x27;test_queue&#x27;</span>)</span><br><span class=\"line\">channel.basic_consume(queue=<span class=\"string\">&#x27;test_queue&#x27;</span>, on_message_callback=callback, auto_ack=<span class=\"literal\">True</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Waiting for messages...&#x27;</span>)</span><br><span class=\"line\">channel.start_consuming()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li>关于回调函数<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Library</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.callback = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">register_callback</span>(<span class=\"params\">self, callback_func</span>):</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.callback = callback_func  <span class=\"comment\"># 保存函数对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">trigger_event</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"variable language_\">self</span>.callback:</span><br><span class=\"line\">            <span class=\"comment\"># 在事件发生时调用回调函数，并传入参数</span></span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.callback(<span class=\"string\">&quot;param1&quot;</span>, <span class=\"string\">&quot;param2&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 用户定义的函数</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">my_callback</span>(<span class=\"params\">a, b</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;回调触发: <span class=\"subst\">&#123;a&#125;</span>, <span class=\"subst\">&#123;b&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用库</span></span><br><span class=\"line\">lib = Library()</span><br><span class=\"line\">lib.register_callback(my_callback)  <span class=\"comment\"># 传递函数对象</span></span><br><span class=\"line\">lib.trigger_event()  <span class=\"comment\"># 输出: 回调触发: param1, param2</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"kafka\"><a href=\"#kafka\" class=\"headerlink\" title=\"kafka\"></a>kafka</h1><ul>\n<li>生产者路由  group  &gt;   topic   &gt;  tag,适合吞吐量很大的场景比如大数据<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;3&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">zookeeper:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">registry.cn-hangzhou.aliyuncs.com/lky-deploy/mq:zk-3.8</span>  <span class=\"comment\"># Zookeeper 镜像</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">zookeeper</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;2181:2181&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">ALLOW_ANONYMOUS_LOGIN=yes</span>  <span class=\"comment\"># 允许匿名访问（测试用）</span></span><br><span class=\"line\">    <span class=\"attr\">networks:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">kafka-net</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">zookeeper_data:/bitnami/zookeeper</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">kafka:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">registry.cn-hangzhou.aliyuncs.com/lky-deploy/mq:kafka-3.4</span>   <span class=\"comment\"># Kafka 镜像</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">kafka</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;9092:9092&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">ALLOW_PLAINTEXT_LISTENER=yes</span>  <span class=\"comment\"># 允许明文监听</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">KAFKA_CFG_LISTENERS=PLAINTEXT://:9092</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092</span>  <span class=\"comment\"># 客户端访问地址</span></span><br><span class=\"line\">    <span class=\"attr\">depends_on:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">zookeeper</span></span><br><span class=\"line\">    <span class=\"attr\">networks:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">kafka-net</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">kafka_data:/bitnami/kafka</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">networks:</span></span><br><span class=\"line\">  <span class=\"attr\">kafka-net:</span></span><br><span class=\"line\">    <span class=\"attr\">driver:</span> <span class=\"string\">bridge</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">volumes:</span></span><br><span class=\"line\">  <span class=\"attr\">zookeeper_data:</span></span><br><span class=\"line\">  <span class=\"attr\">kafka_data:</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建主题 <span class=\"string\">&quot;test-topic&quot;</span></span></span><br><span class=\"line\">kafka-topics.sh --create \\</span><br><span class=\"line\">  --bootstrap-server localhost:9092 \\</span><br><span class=\"line\">  --replication-factor 1 \\</span><br><span class=\"line\">  --partitions 1 \\</span><br><span class=\"line\">  --topic test-topic</span><br><span class=\"line\">kafka-topics.sh    --bootstrap-server localhost:9092   --list</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动生产者，发送消息</span></span><br><span class=\"line\">kafka-console-producer.sh \\</span><br><span class=\"line\">  --bootstrap-server localhost:9092 \\</span><br><span class=\"line\">  --topic test-topic</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动消费者，接收消息</span></span><br><span class=\"line\">kafka-console-consumer.sh \\</span><br><span class=\"line\">  --bootstrap-server localhost:9092 \\</span><br><span class=\"line\">  --topic test-topic \\</span><br><span class=\"line\">  --from-beginning</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">不同节点的配置差异（以 101 节点为例）</span></span><br><span class=\"line\">broker.id=1  # 102 节点改为 2，103 节点改为 3</span><br><span class=\"line\">listeners=PLAINTEXT://0.0.0.0:9092</span><br><span class=\"line\">advertised.listeners=PLAINTEXT://192.168.1.101:9092  # 修改为当前节点 IP</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">所有节点相同配置</span></span><br><span class=\"line\">zookeeper.connect=192.168.1.101:2181,192.168.1.102:2181,192.168.1.103:2181</span><br><span class=\"line\">log.dirs=/data/kafka/logs</span><br><span class=\"line\">num.partitions=3  # 默认分区数（建议 &gt;= Broker 数量）</span><br><span class=\"line\">default.replication.factor=3  # 默认副本数（建议 = Broker 数量）</span><br><span class=\"line\">offsets.topic.replication.factor=3</span><br><span class=\"line\">transaction.state.log.replication.factor=3</span><br><span class=\"line\">delete.topic.enable=true</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id><a href=\"#\" class=\"headerlink\" title></a></h1>"},{"title":"nginx_todo","date":"2025-07-21T06:19:19.000Z","_content":"# proxy_pass转发策略\n## 请求url和转发一致\n```\n后端服务实际处理路径为 /api/upload，与客户端请求路径一致。\nNginx配置：\n\n\nlocation /api/ {         # 匹配客户端请求中的 /api/ 前缀\n    proxy_pass http://backend;  # 不改变路径，直接转发 /api/xxx 到后端\n}\n\n转发效果：\n客户端请求 → /api/upload\nNginx转发 → http://backend/api/upload\n```\n\n## 后端服务需要基础路径（去掉/api/前缀）\n```\n后端路由示例：\n后端服务处理根路径 /upload，不需要 /api/ 前缀。\nNginx配置：\nnginx\n\n\nlocation /api/ {\n    # 通过 rewrite 移除 /api/ 前缀\n    rewrite ^/api/(.*) /$1 break;  \n    proxy_pass http://backend;  \n}\n或\n\nlocation /api/ {\n    # 直接在 proxy_pass 中追加路径\n    proxy_pass http://backend/;  # 注意结尾的斜杠\n}\n● 转发效果：\n客户端请求 → /api/upload\nNginx转发 → http://backend/upload\n```\n\n## 转发加url注意点\n```\ncurl http://127.0.0.1/api/client-test\nlocation /api/ {\n    proxy_pass http://backend/test/;  # 结尾必须加斜杠\n}\n127.0.0.1- - [21/Jul/2025:14:32:45 +0800] \"GET /test/client-test HTTP/1.0\" 404 178 \"-\" \"curl/7.58.0\" \"-\"Proxy: http://-\n127.0.0.1- - [21/Jul/2025:14:32:45 +0800] \"GET /api/client-test HTTP/1.1\" 404 178 \"-\" \"curl/7.58.0\" \"-\"Proxy: http://127.0.0.1\n客户端请求 /api/client-test → 后端路径 /test/client-test\n\n\n\ncurl http://127.0.0.1/api-test/client-test\nlocation /api-test/ {\n    proxy_pass http://backend/test;  # 无斜杠 → 路径合并\n}\n127.0.0.1- - [21/Jul/2025:14:32:28 +0800] \"GET /testclient-test HTTP/1.0\" 404 178 \"-\" \"curl/7.58.0\" \"-\"Proxy: http://-\n127.0.0.1- - [21/Jul/2025:14:32:28 +0800] \"GET /api-test/client-test HTTP/1.1\" 404 178 \"-\" \"curl/7.58.0\" \"-\"Proxy: http://127.0.0.1\n\n客户端请求: http://example.com/api-test/client-test\n实际转发路径: http://backend/testclient-test\n\n```\n\n# 日志记录\n## 常用内置变量\n```\n$http_ 变量可以自定义比如$http_lky 请求头里面有lky:value则$http_lky等于value\n$args ： #这个变量等于请求行中的参数，同$query_string\n$content_length ： # 请求头中的Content-length字段。\n$content_type ： # 请求头中的Content-Type字段。\n$document_root ： # 当前请求在root指令中指定的值。\n$host ： # 请求主机头字段，否则为服务器名称。\n$http_user_agent ：#  客户端agent信息\n$http_cookie ： # 客户端cookie信息\n$limit_rate ： # 这个变量可以限制连接速率。\n$status  # 请求状态\n$body_bytes_sent # 发送字节\n$request_method ： # 客户端请求的动作，通常为GET或POST。\n$remote_addr ： # 客户端的IP地址。\n$remote_port ： # 客户端的端口。\n$remote_user ： # 已经经过Auth Basic Module验证的用户名。\n$request_filename ： # 当前请求的文件路径，由root或alias指令与URI请求生成。\n$scheme ： # HTTP方法（如http，https）。\n$server_protocol ： # 请求使用的协议，通常是HTTP/1.0或HTTP/1.1。\n$server_addr ： # 服务器地址，在完成一次系统调用后可以确定这个值。\n$server_name ： # 服务器名称。\n$server_port ： # 请求到达服务器的端口号。\n$request_uri ： # 包含请求参数的原始URI，不包含主机名，如：”/foo/bar.php?arg=baz”。\n$uri ： # 不带请求参数的当前URI，$uri不包含主机名，如”/foo/bar.html”。\n$document_uri ： # 与$uri相同。\n\n```\n## 日志配置变量\n```\nlocation / {\n      proxy_pass [$Domain]; #必须\n      index index.html index.htm index.jsp index.shtml;\n      proxy_redirect off;\n      proxy_set_header Host $host;\n      proxy_set_header Lky $remote_addr;\n      proxy_set_header REMOTE-HOST $remote_addr;\n      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n      proxy_set_header X-My-Header \"My Value\";\n      #在日志中使用$http_x_my_header就可以获取到值，可以写死也可以用内置变量比如set自定义\n      经测试 proxy_set_header 第一个字母必须大写，只能用-不能用_\n      log_format 日志格式必须是$http开头-需要换成_而且必须全部小写\n    }\n\nlog_format custom '$remote_addr [$time_local] \"$request\" '\n                  'Lky:$http_lky' ;\naccess_log /var/log/nginx/access.log custom;\n\n#如果是  proxy_pass http://127.0.0.1:83 第一跳记录上游日志包含真实ip，第二条是客户端访问的不包含Lky，一个请求有两个日志输出\n#127.0.0.1 - - [23/May/2025:16:31:41 +0800] \"GET / HTTP/1.0\" 200 4833 \"-\" \"curl/7.60.0\" \"10.0.1.100\" 10.0.1.100Lky:\"10.0.1.100\"\n#这里的日志可以通过proxy_set_header自定义，比如获取客户端真实IP\n\n#10.0.1.100 - - [23/May/2025:16:31:41 +0800] \"GET / HTTP/1.1\" 200 4833 \"-\" \"curl/7.60.0\" \"-\" 10.0.1.100:83Lky:\"-\"\n#这个则是客户端直接请求的日志，因为$remote_addr为空\n\n#测试响应头\nadd_header Lky $remote_addr always;\nGET / HTTP/1.1\nHost: example.com\nUser-Agent: Mozilla/5.0\nLky: 192.168.1.100\n```\n\n","source":"_posts/nginx-todo.md","raw":"---\ntitle: nginx_todo\ndate: 2025-07-21 14:19:19\ntags: \ncategories: 中间件\n---\n# proxy_pass转发策略\n## 请求url和转发一致\n```\n后端服务实际处理路径为 /api/upload，与客户端请求路径一致。\nNginx配置：\n\n\nlocation /api/ {         # 匹配客户端请求中的 /api/ 前缀\n    proxy_pass http://backend;  # 不改变路径，直接转发 /api/xxx 到后端\n}\n\n转发效果：\n客户端请求 → /api/upload\nNginx转发 → http://backend/api/upload\n```\n\n## 后端服务需要基础路径（去掉/api/前缀）\n```\n后端路由示例：\n后端服务处理根路径 /upload，不需要 /api/ 前缀。\nNginx配置：\nnginx\n\n\nlocation /api/ {\n    # 通过 rewrite 移除 /api/ 前缀\n    rewrite ^/api/(.*) /$1 break;  \n    proxy_pass http://backend;  \n}\n或\n\nlocation /api/ {\n    # 直接在 proxy_pass 中追加路径\n    proxy_pass http://backend/;  # 注意结尾的斜杠\n}\n● 转发效果：\n客户端请求 → /api/upload\nNginx转发 → http://backend/upload\n```\n\n## 转发加url注意点\n```\ncurl http://127.0.0.1/api/client-test\nlocation /api/ {\n    proxy_pass http://backend/test/;  # 结尾必须加斜杠\n}\n127.0.0.1- - [21/Jul/2025:14:32:45 +0800] \"GET /test/client-test HTTP/1.0\" 404 178 \"-\" \"curl/7.58.0\" \"-\"Proxy: http://-\n127.0.0.1- - [21/Jul/2025:14:32:45 +0800] \"GET /api/client-test HTTP/1.1\" 404 178 \"-\" \"curl/7.58.0\" \"-\"Proxy: http://127.0.0.1\n客户端请求 /api/client-test → 后端路径 /test/client-test\n\n\n\ncurl http://127.0.0.1/api-test/client-test\nlocation /api-test/ {\n    proxy_pass http://backend/test;  # 无斜杠 → 路径合并\n}\n127.0.0.1- - [21/Jul/2025:14:32:28 +0800] \"GET /testclient-test HTTP/1.0\" 404 178 \"-\" \"curl/7.58.0\" \"-\"Proxy: http://-\n127.0.0.1- - [21/Jul/2025:14:32:28 +0800] \"GET /api-test/client-test HTTP/1.1\" 404 178 \"-\" \"curl/7.58.0\" \"-\"Proxy: http://127.0.0.1\n\n客户端请求: http://example.com/api-test/client-test\n实际转发路径: http://backend/testclient-test\n\n```\n\n# 日志记录\n## 常用内置变量\n```\n$http_ 变量可以自定义比如$http_lky 请求头里面有lky:value则$http_lky等于value\n$args ： #这个变量等于请求行中的参数，同$query_string\n$content_length ： # 请求头中的Content-length字段。\n$content_type ： # 请求头中的Content-Type字段。\n$document_root ： # 当前请求在root指令中指定的值。\n$host ： # 请求主机头字段，否则为服务器名称。\n$http_user_agent ：#  客户端agent信息\n$http_cookie ： # 客户端cookie信息\n$limit_rate ： # 这个变量可以限制连接速率。\n$status  # 请求状态\n$body_bytes_sent # 发送字节\n$request_method ： # 客户端请求的动作，通常为GET或POST。\n$remote_addr ： # 客户端的IP地址。\n$remote_port ： # 客户端的端口。\n$remote_user ： # 已经经过Auth Basic Module验证的用户名。\n$request_filename ： # 当前请求的文件路径，由root或alias指令与URI请求生成。\n$scheme ： # HTTP方法（如http，https）。\n$server_protocol ： # 请求使用的协议，通常是HTTP/1.0或HTTP/1.1。\n$server_addr ： # 服务器地址，在完成一次系统调用后可以确定这个值。\n$server_name ： # 服务器名称。\n$server_port ： # 请求到达服务器的端口号。\n$request_uri ： # 包含请求参数的原始URI，不包含主机名，如：”/foo/bar.php?arg=baz”。\n$uri ： # 不带请求参数的当前URI，$uri不包含主机名，如”/foo/bar.html”。\n$document_uri ： # 与$uri相同。\n\n```\n## 日志配置变量\n```\nlocation / {\n      proxy_pass [$Domain]; #必须\n      index index.html index.htm index.jsp index.shtml;\n      proxy_redirect off;\n      proxy_set_header Host $host;\n      proxy_set_header Lky $remote_addr;\n      proxy_set_header REMOTE-HOST $remote_addr;\n      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n      proxy_set_header X-My-Header \"My Value\";\n      #在日志中使用$http_x_my_header就可以获取到值，可以写死也可以用内置变量比如set自定义\n      经测试 proxy_set_header 第一个字母必须大写，只能用-不能用_\n      log_format 日志格式必须是$http开头-需要换成_而且必须全部小写\n    }\n\nlog_format custom '$remote_addr [$time_local] \"$request\" '\n                  'Lky:$http_lky' ;\naccess_log /var/log/nginx/access.log custom;\n\n#如果是  proxy_pass http://127.0.0.1:83 第一跳记录上游日志包含真实ip，第二条是客户端访问的不包含Lky，一个请求有两个日志输出\n#127.0.0.1 - - [23/May/2025:16:31:41 +0800] \"GET / HTTP/1.0\" 200 4833 \"-\" \"curl/7.60.0\" \"10.0.1.100\" 10.0.1.100Lky:\"10.0.1.100\"\n#这里的日志可以通过proxy_set_header自定义，比如获取客户端真实IP\n\n#10.0.1.100 - - [23/May/2025:16:31:41 +0800] \"GET / HTTP/1.1\" 200 4833 \"-\" \"curl/7.60.0\" \"-\" 10.0.1.100:83Lky:\"-\"\n#这个则是客户端直接请求的日志，因为$remote_addr为空\n\n#测试响应头\nadd_header Lky $remote_addr always;\nGET / HTTP/1.1\nHost: example.com\nUser-Agent: Mozilla/5.0\nLky: 192.168.1.100\n```\n\n","slug":"nginx-todo","published":1,"updated":"2025-08-28T06:39:18.077Z","comments":1,"layout":"post","photos":[],"_id":"cmev1ggbp000ihllz5543c2np","content":"<h1 id=\"proxy-pass转发策略\"><a href=\"#proxy-pass转发策略\" class=\"headerlink\" title=\"proxy_pass转发策略\"></a>proxy_pass转发策略</h1><h2 id=\"请求url和转发一致\"><a href=\"#请求url和转发一致\" class=\"headerlink\" title=\"请求url和转发一致\"></a>请求url和转发一致</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">后端服务实际处理路径为 /api/upload，与客户端请求路径一致。</span><br><span class=\"line\">Nginx配置：</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">location /api/ &#123;         # 匹配客户端请求中的 /api/ 前缀</span><br><span class=\"line\">    proxy_pass http://backend;  # 不改变路径，直接转发 /api/xxx 到后端</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">转发效果：</span><br><span class=\"line\">客户端请求 → /api/upload</span><br><span class=\"line\">Nginx转发 → http://backend/api/upload</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"后端服务需要基础路径（去掉-api-前缀）\"><a href=\"#后端服务需要基础路径（去掉-api-前缀）\" class=\"headerlink\" title=\"后端服务需要基础路径（去掉&#x2F;api&#x2F;前缀）\"></a>后端服务需要基础路径（去掉&#x2F;api&#x2F;前缀）</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">后端路由示例：</span><br><span class=\"line\">后端服务处理根路径 /upload，不需要 /api/ 前缀。</span><br><span class=\"line\">Nginx配置：</span><br><span class=\"line\">nginx</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">location /api/ &#123;</span><br><span class=\"line\">    # 通过 rewrite 移除 /api/ 前缀</span><br><span class=\"line\">    rewrite ^/api/(.*) /$1 break;  </span><br><span class=\"line\">    proxy_pass http://backend;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">或</span><br><span class=\"line\"></span><br><span class=\"line\">location /api/ &#123;</span><br><span class=\"line\">    # 直接在 proxy_pass 中追加路径</span><br><span class=\"line\">    proxy_pass http://backend/;  # 注意结尾的斜杠</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">● 转发效果：</span><br><span class=\"line\">客户端请求 → /api/upload</span><br><span class=\"line\">Nginx转发 → http://backend/upload</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"转发加url注意点\"><a href=\"#转发加url注意点\" class=\"headerlink\" title=\"转发加url注意点\"></a>转发加url注意点</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl http://127.0.0.1/api/client-test</span><br><span class=\"line\">location /api/ &#123;</span><br><span class=\"line\">    proxy_pass http://backend/test/;  # 结尾必须加斜杠</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">127.0.0.1- - [21/Jul/2025:14:32:45 +0800] &quot;GET /test/client-test HTTP/1.0&quot; 404 178 &quot;-&quot; &quot;curl/7.58.0&quot; &quot;-&quot;Proxy: http://-</span><br><span class=\"line\">127.0.0.1- - [21/Jul/2025:14:32:45 +0800] &quot;GET /api/client-test HTTP/1.1&quot; 404 178 &quot;-&quot; &quot;curl/7.58.0&quot; &quot;-&quot;Proxy: http://127.0.0.1</span><br><span class=\"line\">客户端请求 /api/client-test → 后端路径 /test/client-test</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">curl http://127.0.0.1/api-test/client-test</span><br><span class=\"line\">location /api-test/ &#123;</span><br><span class=\"line\">    proxy_pass http://backend/test;  # 无斜杠 → 路径合并</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">127.0.0.1- - [21/Jul/2025:14:32:28 +0800] &quot;GET /testclient-test HTTP/1.0&quot; 404 178 &quot;-&quot; &quot;curl/7.58.0&quot; &quot;-&quot;Proxy: http://-</span><br><span class=\"line\">127.0.0.1- - [21/Jul/2025:14:32:28 +0800] &quot;GET /api-test/client-test HTTP/1.1&quot; 404 178 &quot;-&quot; &quot;curl/7.58.0&quot; &quot;-&quot;Proxy: http://127.0.0.1</span><br><span class=\"line\"></span><br><span class=\"line\">客户端请求: http://example.com/api-test/client-test</span><br><span class=\"line\">实际转发路径: http://backend/testclient-test</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"日志记录\"><a href=\"#日志记录\" class=\"headerlink\" title=\"日志记录\"></a>日志记录</h1><h2 id=\"常用内置变量\"><a href=\"#常用内置变量\" class=\"headerlink\" title=\"常用内置变量\"></a>常用内置变量</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$http_ 变量可以自定义比如$http_lky 请求头里面有lky:value则$http_lky等于value</span><br><span class=\"line\">$args ： #这个变量等于请求行中的参数，同$query_string</span><br><span class=\"line\">$content_length ： # 请求头中的Content-length字段。</span><br><span class=\"line\">$content_type ： # 请求头中的Content-Type字段。</span><br><span class=\"line\">$document_root ： # 当前请求在root指令中指定的值。</span><br><span class=\"line\">$host ： # 请求主机头字段，否则为服务器名称。</span><br><span class=\"line\">$http_user_agent ：#  客户端agent信息</span><br><span class=\"line\">$http_cookie ： # 客户端cookie信息</span><br><span class=\"line\">$limit_rate ： # 这个变量可以限制连接速率。</span><br><span class=\"line\">$status  # 请求状态</span><br><span class=\"line\">$body_bytes_sent # 发送字节</span><br><span class=\"line\">$request_method ： # 客户端请求的动作，通常为GET或POST。</span><br><span class=\"line\">$remote_addr ： # 客户端的IP地址。</span><br><span class=\"line\">$remote_port ： # 客户端的端口。</span><br><span class=\"line\">$remote_user ： # 已经经过Auth Basic Module验证的用户名。</span><br><span class=\"line\">$request_filename ： # 当前请求的文件路径，由root或alias指令与URI请求生成。</span><br><span class=\"line\">$scheme ： # HTTP方法（如http，https）。</span><br><span class=\"line\">$server_protocol ： # 请求使用的协议，通常是HTTP/1.0或HTTP/1.1。</span><br><span class=\"line\">$server_addr ： # 服务器地址，在完成一次系统调用后可以确定这个值。</span><br><span class=\"line\">$server_name ： # 服务器名称。</span><br><span class=\"line\">$server_port ： # 请求到达服务器的端口号。</span><br><span class=\"line\">$request_uri ： # 包含请求参数的原始URI，不包含主机名，如：”/foo/bar.php?arg=baz”。</span><br><span class=\"line\">$uri ： # 不带请求参数的当前URI，$uri不包含主机名，如”/foo/bar.html”。</span><br><span class=\"line\">$document_uri ： # 与$uri相同。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"日志配置变量\"><a href=\"#日志配置变量\" class=\"headerlink\" title=\"日志配置变量\"></a>日志配置变量</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location / &#123;</span><br><span class=\"line\">      proxy_pass [$Domain]; #必须</span><br><span class=\"line\">      index index.html index.htm index.jsp index.shtml;</span><br><span class=\"line\">      proxy_redirect off;</span><br><span class=\"line\">      proxy_set_header Host $host;</span><br><span class=\"line\">      proxy_set_header Lky $remote_addr;</span><br><span class=\"line\">      proxy_set_header REMOTE-HOST $remote_addr;</span><br><span class=\"line\">      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">      proxy_set_header X-My-Header &quot;My Value&quot;;</span><br><span class=\"line\">      #在日志中使用$http_x_my_header就可以获取到值，可以写死也可以用内置变量比如set自定义</span><br><span class=\"line\">      经测试 proxy_set_header 第一个字母必须大写，只能用-不能用_</span><br><span class=\"line\">      log_format 日志格式必须是$http开头-需要换成_而且必须全部小写</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">log_format custom &#x27;$remote_addr [$time_local] &quot;$request&quot; &#x27;</span><br><span class=\"line\">                  &#x27;Lky:$http_lky&#x27; ;</span><br><span class=\"line\">access_log /var/log/nginx/access.log custom;</span><br><span class=\"line\"></span><br><span class=\"line\">#如果是  proxy_pass http://127.0.0.1:83 第一跳记录上游日志包含真实ip，第二条是客户端访问的不包含Lky，一个请求有两个日志输出</span><br><span class=\"line\">#127.0.0.1 - - [23/May/2025:16:31:41 +0800] &quot;GET / HTTP/1.0&quot; 200 4833 &quot;-&quot; &quot;curl/7.60.0&quot; &quot;10.0.1.100&quot; 10.0.1.100Lky:&quot;10.0.1.100&quot;</span><br><span class=\"line\">#这里的日志可以通过proxy_set_header自定义，比如获取客户端真实IP</span><br><span class=\"line\"></span><br><span class=\"line\">#10.0.1.100 - - [23/May/2025:16:31:41 +0800] &quot;GET / HTTP/1.1&quot; 200 4833 &quot;-&quot; &quot;curl/7.60.0&quot; &quot;-&quot; 10.0.1.100:83Lky:&quot;-&quot;</span><br><span class=\"line\">#这个则是客户端直接请求的日志，因为$remote_addr为空</span><br><span class=\"line\"></span><br><span class=\"line\">#测试响应头</span><br><span class=\"line\">add_header Lky $remote_addr always;</span><br><span class=\"line\">GET / HTTP/1.1</span><br><span class=\"line\">Host: example.com</span><br><span class=\"line\">User-Agent: Mozilla/5.0</span><br><span class=\"line\">Lky: 192.168.1.100</span><br></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<h1 id=\"proxy-pass转发策略\"><a href=\"#proxy-pass转发策略\" class=\"headerlink\" title=\"proxy_pass转发策略\"></a>proxy_pass转发策略</h1><h2 id=\"请求url和转发一致\"><a href=\"#请求url和转发一致\" class=\"headerlink\" title=\"请求url和转发一致\"></a>请求url和转发一致</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">后端服务实际处理路径为 /api/upload，与客户端请求路径一致。</span><br><span class=\"line\">Nginx配置：</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">location /api/ &#123;         # 匹配客户端请求中的 /api/ 前缀</span><br><span class=\"line\">    proxy_pass http://backend;  # 不改变路径，直接转发 /api/xxx 到后端</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">转发效果：</span><br><span class=\"line\">客户端请求 → /api/upload</span><br><span class=\"line\">Nginx转发 → http://backend/api/upload</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"后端服务需要基础路径（去掉-api-前缀）\"><a href=\"#后端服务需要基础路径（去掉-api-前缀）\" class=\"headerlink\" title=\"后端服务需要基础路径（去掉&#x2F;api&#x2F;前缀）\"></a>后端服务需要基础路径（去掉&#x2F;api&#x2F;前缀）</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">后端路由示例：</span><br><span class=\"line\">后端服务处理根路径 /upload，不需要 /api/ 前缀。</span><br><span class=\"line\">Nginx配置：</span><br><span class=\"line\">nginx</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">location /api/ &#123;</span><br><span class=\"line\">    # 通过 rewrite 移除 /api/ 前缀</span><br><span class=\"line\">    rewrite ^/api/(.*) /$1 break;  </span><br><span class=\"line\">    proxy_pass http://backend;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">或</span><br><span class=\"line\"></span><br><span class=\"line\">location /api/ &#123;</span><br><span class=\"line\">    # 直接在 proxy_pass 中追加路径</span><br><span class=\"line\">    proxy_pass http://backend/;  # 注意结尾的斜杠</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">● 转发效果：</span><br><span class=\"line\">客户端请求 → /api/upload</span><br><span class=\"line\">Nginx转发 → http://backend/upload</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"转发加url注意点\"><a href=\"#转发加url注意点\" class=\"headerlink\" title=\"转发加url注意点\"></a>转发加url注意点</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl http://127.0.0.1/api/client-test</span><br><span class=\"line\">location /api/ &#123;</span><br><span class=\"line\">    proxy_pass http://backend/test/;  # 结尾必须加斜杠</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">127.0.0.1- - [21/Jul/2025:14:32:45 +0800] &quot;GET /test/client-test HTTP/1.0&quot; 404 178 &quot;-&quot; &quot;curl/7.58.0&quot; &quot;-&quot;Proxy: http://-</span><br><span class=\"line\">127.0.0.1- - [21/Jul/2025:14:32:45 +0800] &quot;GET /api/client-test HTTP/1.1&quot; 404 178 &quot;-&quot; &quot;curl/7.58.0&quot; &quot;-&quot;Proxy: http://127.0.0.1</span><br><span class=\"line\">客户端请求 /api/client-test → 后端路径 /test/client-test</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">curl http://127.0.0.1/api-test/client-test</span><br><span class=\"line\">location /api-test/ &#123;</span><br><span class=\"line\">    proxy_pass http://backend/test;  # 无斜杠 → 路径合并</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">127.0.0.1- - [21/Jul/2025:14:32:28 +0800] &quot;GET /testclient-test HTTP/1.0&quot; 404 178 &quot;-&quot; &quot;curl/7.58.0&quot; &quot;-&quot;Proxy: http://-</span><br><span class=\"line\">127.0.0.1- - [21/Jul/2025:14:32:28 +0800] &quot;GET /api-test/client-test HTTP/1.1&quot; 404 178 &quot;-&quot; &quot;curl/7.58.0&quot; &quot;-&quot;Proxy: http://127.0.0.1</span><br><span class=\"line\"></span><br><span class=\"line\">客户端请求: http://example.com/api-test/client-test</span><br><span class=\"line\">实际转发路径: http://backend/testclient-test</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"日志记录\"><a href=\"#日志记录\" class=\"headerlink\" title=\"日志记录\"></a>日志记录</h1><h2 id=\"常用内置变量\"><a href=\"#常用内置变量\" class=\"headerlink\" title=\"常用内置变量\"></a>常用内置变量</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$http_ 变量可以自定义比如$http_lky 请求头里面有lky:value则$http_lky等于value</span><br><span class=\"line\">$args ： #这个变量等于请求行中的参数，同$query_string</span><br><span class=\"line\">$content_length ： # 请求头中的Content-length字段。</span><br><span class=\"line\">$content_type ： # 请求头中的Content-Type字段。</span><br><span class=\"line\">$document_root ： # 当前请求在root指令中指定的值。</span><br><span class=\"line\">$host ： # 请求主机头字段，否则为服务器名称。</span><br><span class=\"line\">$http_user_agent ：#  客户端agent信息</span><br><span class=\"line\">$http_cookie ： # 客户端cookie信息</span><br><span class=\"line\">$limit_rate ： # 这个变量可以限制连接速率。</span><br><span class=\"line\">$status  # 请求状态</span><br><span class=\"line\">$body_bytes_sent # 发送字节</span><br><span class=\"line\">$request_method ： # 客户端请求的动作，通常为GET或POST。</span><br><span class=\"line\">$remote_addr ： # 客户端的IP地址。</span><br><span class=\"line\">$remote_port ： # 客户端的端口。</span><br><span class=\"line\">$remote_user ： # 已经经过Auth Basic Module验证的用户名。</span><br><span class=\"line\">$request_filename ： # 当前请求的文件路径，由root或alias指令与URI请求生成。</span><br><span class=\"line\">$scheme ： # HTTP方法（如http，https）。</span><br><span class=\"line\">$server_protocol ： # 请求使用的协议，通常是HTTP/1.0或HTTP/1.1。</span><br><span class=\"line\">$server_addr ： # 服务器地址，在完成一次系统调用后可以确定这个值。</span><br><span class=\"line\">$server_name ： # 服务器名称。</span><br><span class=\"line\">$server_port ： # 请求到达服务器的端口号。</span><br><span class=\"line\">$request_uri ： # 包含请求参数的原始URI，不包含主机名，如：”/foo/bar.php?arg=baz”。</span><br><span class=\"line\">$uri ： # 不带请求参数的当前URI，$uri不包含主机名，如”/foo/bar.html”。</span><br><span class=\"line\">$document_uri ： # 与$uri相同。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"日志配置变量\"><a href=\"#日志配置变量\" class=\"headerlink\" title=\"日志配置变量\"></a>日志配置变量</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location / &#123;</span><br><span class=\"line\">      proxy_pass [$Domain]; #必须</span><br><span class=\"line\">      index index.html index.htm index.jsp index.shtml;</span><br><span class=\"line\">      proxy_redirect off;</span><br><span class=\"line\">      proxy_set_header Host $host;</span><br><span class=\"line\">      proxy_set_header Lky $remote_addr;</span><br><span class=\"line\">      proxy_set_header REMOTE-HOST $remote_addr;</span><br><span class=\"line\">      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">      proxy_set_header X-My-Header &quot;My Value&quot;;</span><br><span class=\"line\">      #在日志中使用$http_x_my_header就可以获取到值，可以写死也可以用内置变量比如set自定义</span><br><span class=\"line\">      经测试 proxy_set_header 第一个字母必须大写，只能用-不能用_</span><br><span class=\"line\">      log_format 日志格式必须是$http开头-需要换成_而且必须全部小写</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">log_format custom &#x27;$remote_addr [$time_local] &quot;$request&quot; &#x27;</span><br><span class=\"line\">                  &#x27;Lky:$http_lky&#x27; ;</span><br><span class=\"line\">access_log /var/log/nginx/access.log custom;</span><br><span class=\"line\"></span><br><span class=\"line\">#如果是  proxy_pass http://127.0.0.1:83 第一跳记录上游日志包含真实ip，第二条是客户端访问的不包含Lky，一个请求有两个日志输出</span><br><span class=\"line\">#127.0.0.1 - - [23/May/2025:16:31:41 +0800] &quot;GET / HTTP/1.0&quot; 200 4833 &quot;-&quot; &quot;curl/7.60.0&quot; &quot;10.0.1.100&quot; 10.0.1.100Lky:&quot;10.0.1.100&quot;</span><br><span class=\"line\">#这里的日志可以通过proxy_set_header自定义，比如获取客户端真实IP</span><br><span class=\"line\"></span><br><span class=\"line\">#10.0.1.100 - - [23/May/2025:16:31:41 +0800] &quot;GET / HTTP/1.1&quot; 200 4833 &quot;-&quot; &quot;curl/7.60.0&quot; &quot;-&quot; 10.0.1.100:83Lky:&quot;-&quot;</span><br><span class=\"line\">#这个则是客户端直接请求的日志，因为$remote_addr为空</span><br><span class=\"line\"></span><br><span class=\"line\">#测试响应头</span><br><span class=\"line\">add_header Lky $remote_addr always;</span><br><span class=\"line\">GET / HTTP/1.1</span><br><span class=\"line\">Host: example.com</span><br><span class=\"line\">User-Agent: Mozilla/5.0</span><br><span class=\"line\">Lky: 192.168.1.100</span><br></pre></td></tr></table></figure>\n\n"},{"title":"openvpn","date":"2025-04-21T13:11:04.000Z","_content":"# 安装\n```shell\ngit clone https://github.com/likaiyuan00/openvpn-install.git\ncd openvpn-install && bash openvpn-install.sh\n#systemctl start openvpn@client.service 启动的账号密码  auth-user-pass 控制客户端密码验证\necho \"test test@123\" >  /etc/openvpn/userfile.sh\n```\n\n# 配置文件字段解读\n## server端\n```config\n在#openvpn服务端的监听地址\nlocal 0.0.0.0\n#openvpn服务端的监听端口（默认1194）\nport 1115\n#使用的协议，tcp/udp\nproto tcp\n#使用三层路由ip隧道（tun），还是二层以太网隧道（tap），一般使用tun\ndev tun\n#ca证书、服务端证书、服务端秘钥和秘钥交换文件\nca /etc/openvpn/server/ca.crt\ncert /etc/openvpn/server/server.crt\nkey /etc/openvpn/server/server.key\ndh /etc/openvpn/server/dh.pem\n#vpn服务端为自己和客户端分配的ip地址池。\n#服务端自己获取网段的第一个地址（此处是10.8.0.1），后为客户端分配其他的可用地址。以后客户端就可以和10.8.0.1进行通信。\n注意：以下网段地址不要和已有网段冲突或重复\nserver 10.8.0.0  255.255.255.0\n#使用一个文件记录已分配虚拟ip的客户端和虚拟ip的对应关系。以后openvpn重启时，将可以按照此文件继续为对应的客户端分配此前相同的ip（自动续借ip）\nifconfig-pool-persist ipp.txt\n#使用tap模式的时候考虑此选项\nserver-bridge XXXXXX\n#vpn服务端向客户端推送vpn服务端内网网段的路由配置，以便让客户端能够找到服务端的内网。多条路由写多个push指令\npush \"route 10.0.10.0  255.255.255.0\"\npush \"route 192.168.10.0 255.255.255.0\"  #允许客户端访问的内网网段\n#让vpn客户端之间可以通信。默认情况客户端只能服务端进行通信\n#默认此项是注释的，客户端之间不能相互通信\nclient-to-client\n#允许多个客户端使用同一个vpn账号连接服务端\n#默认是注释的，不支持多个客户端登录一个账号\nduplicate-cn\n#每10秒ping一次，120秒后没收到ping就说明对方挂了\nkeepalive 10 120\n#加强认证方式，防攻击。如果配置文件中启用此项（默认是启用的），需要执行openvpn --genkey --secret ta.key，并把ta.key放到/etc/openvpn/server/目录，服务端第二个参数为0；同时客户端也要有此文件，且client.conf中此指令的第二个参数需要为1\ntls-auth /etc/openvpn/server/ta.key 0\n#选择一个密码。如果在服务器上使用了cipher选项，那么也必须在这里指定它。注意，v2.4客户端/服务端将在tls模式下自动协商AES-256-GCM\ncipher AES-256-CBC\n#openvpn 2.4版本的vpn才能设置此选项。表示服务端启用lz4的压缩功能 ，传输数据给客户端时会压缩数据包。\nPush后在客户端也配置启用lz4的压缩功能，向服务端发数据时也会压缩。如果是2.4版本以下的老版本，则使用用comp-lzo指令\ncompress lz4-v2\npush \"compress lz4-v2\"\n#启用lzo数据压缩格式，此指令用于低于2.4版本的老版本，且如果服务端配置了该指令，客户端也必须要配置\ncomp-lzo\n#并发客户端的连接数\nmax-clients 1000\n#通过ping得知超时时，当重启vpn后将使用同一个秘钥文件以及保持tun连接状态\npersist-key\npersist-tun\n#在文件中输出当前的连接信息，每分钟截断并重写一次该文件\nstatus openvpn-status.log\n#log指令表示每次启动vpn时覆盖式记录到指定日志文件中\n#log-append则表示每次启动vpn时追加式的记录到指定日志中\n#但两者只能选其一，或者不选时记录到rsyslog中\nlog  /var/log/openvpn.log\nlog-append  /var/log/openvpn.log\n#日志记录的详细级别\nverb 3\n#当服务器重新启动时，通知客户端，以便它可以自动重新连接。仅在UDP协议是可用\nexplicit-exit-notify 1\n#沉默的重复信息。最多20条相同消息类别的连续消息将输出到日志\nmute 20\n```\n## client\n```\n#标识这是个客户端\nclient\n#使用的协议，tcp/udp，服务端是什么客户端就是什么\nproto tcp\n#使用三层路由ip隧道（tun），还是二层以太网隧道（tap），服务端是什么客户端就是什么\ndev tun\n#服务端的地址和端口\nremote 10.0.0.190 1194\n#一直尝试解析OpenVPN服务器的主机名\nresolv-retry infinite\n#大多数客户机不需要绑定到特定的本地端口号\nnobind\n#初始化后的降级特权(仅非windows)\nuser nobody\ngroup nobody\n#尝试在重新启动时保留某些状态\npersist-key\npersist-tun\n#ca证书、客户端证书、客户端密钥\n#如果它们和client.conf或client.ovpn在同一个目录下则可以不写绝对路径，否则需要写绝对路径调用\nca ca.crt\ncert client.crt\nkey client.key\n#通过检查certicate是否具有正确的密钥使用设置来验证服务器证书。\nremote-cert-tls server\n#加强认证方式，防攻击。服务端有配置，则客户端必须有\ntls-auth ta.key 1\n#选择一个密码。如果在服务器上使用了cipher选项，那么您也必须在这里指定它。注意，v2.4客户端/服务器将在TLS模式下自动协商AES-256-GCM。\ncipher AES-256-CBC\n# 服务端用的什么，客户端就用的什么\n#表示客户端启用lz4的压缩功能，传输数据给客户端时会压缩数据包\ncomp-lzo\n# 日志级别\nverb 3\n#沉默的重复信息。最多20条相同消息类别的连续消息将输出到日志\nmute 20\n```\n\n# 如何直连openvpn服务端其他局域网服务器\n> 客户端（10.8.0.10） <br>\nping (服务端)172.16.1.7 正常 <br>\nping (服务端其他内网机器)172.16.1.8失败\n>>1. 第一种方法 配置路由\nroute add -net 10.8.0.0 netmask 255.255.255.0 gw 172.16.1.7<br>\n10.8.0.0  客户端IP<br>\n172.16.1.7 openvpn 服务端IP\n***\n>>2. 第二种方法使用snat转发 <br>\niptables -t nat -A POSTROUTING -d 10.8.0.0/24 -o eth0 -j MASQUERADE<br>\niptables -A FORWARD -s 10.8.0.0 -j ACCEPT\n\n\n# 额外\n服务端\nroute 192.168.0.0 255.255.0.0   指令作用是在服务端加一条路由，网关是客户端ip\n![alt text](image.png)\n\n服务端只能ping通客户端的tun0的ip，内网ip不行，即使加了路由也不行\n![alt text](image-1.png)\n\n客户端\npush \"route 192.168.10.0 255.255.255.0\"作用是在客户端多加一条路由。网关是服务端的tun0IP（也就是server 指令配置分配的地址池）\n![alt text](image-2.png)\n![alt text](image-3.png)\n\n","source":"_posts/openvpn.md","raw":"---\ntitle: openvpn\ndate: 2025-04-21 21:11:04\ntags:\ncategories: linux\n---\n# 安装\n```shell\ngit clone https://github.com/likaiyuan00/openvpn-install.git\ncd openvpn-install && bash openvpn-install.sh\n#systemctl start openvpn@client.service 启动的账号密码  auth-user-pass 控制客户端密码验证\necho \"test test@123\" >  /etc/openvpn/userfile.sh\n```\n\n# 配置文件字段解读\n## server端\n```config\n在#openvpn服务端的监听地址\nlocal 0.0.0.0\n#openvpn服务端的监听端口（默认1194）\nport 1115\n#使用的协议，tcp/udp\nproto tcp\n#使用三层路由ip隧道（tun），还是二层以太网隧道（tap），一般使用tun\ndev tun\n#ca证书、服务端证书、服务端秘钥和秘钥交换文件\nca /etc/openvpn/server/ca.crt\ncert /etc/openvpn/server/server.crt\nkey /etc/openvpn/server/server.key\ndh /etc/openvpn/server/dh.pem\n#vpn服务端为自己和客户端分配的ip地址池。\n#服务端自己获取网段的第一个地址（此处是10.8.0.1），后为客户端分配其他的可用地址。以后客户端就可以和10.8.0.1进行通信。\n注意：以下网段地址不要和已有网段冲突或重复\nserver 10.8.0.0  255.255.255.0\n#使用一个文件记录已分配虚拟ip的客户端和虚拟ip的对应关系。以后openvpn重启时，将可以按照此文件继续为对应的客户端分配此前相同的ip（自动续借ip）\nifconfig-pool-persist ipp.txt\n#使用tap模式的时候考虑此选项\nserver-bridge XXXXXX\n#vpn服务端向客户端推送vpn服务端内网网段的路由配置，以便让客户端能够找到服务端的内网。多条路由写多个push指令\npush \"route 10.0.10.0  255.255.255.0\"\npush \"route 192.168.10.0 255.255.255.0\"  #允许客户端访问的内网网段\n#让vpn客户端之间可以通信。默认情况客户端只能服务端进行通信\n#默认此项是注释的，客户端之间不能相互通信\nclient-to-client\n#允许多个客户端使用同一个vpn账号连接服务端\n#默认是注释的，不支持多个客户端登录一个账号\nduplicate-cn\n#每10秒ping一次，120秒后没收到ping就说明对方挂了\nkeepalive 10 120\n#加强认证方式，防攻击。如果配置文件中启用此项（默认是启用的），需要执行openvpn --genkey --secret ta.key，并把ta.key放到/etc/openvpn/server/目录，服务端第二个参数为0；同时客户端也要有此文件，且client.conf中此指令的第二个参数需要为1\ntls-auth /etc/openvpn/server/ta.key 0\n#选择一个密码。如果在服务器上使用了cipher选项，那么也必须在这里指定它。注意，v2.4客户端/服务端将在tls模式下自动协商AES-256-GCM\ncipher AES-256-CBC\n#openvpn 2.4版本的vpn才能设置此选项。表示服务端启用lz4的压缩功能 ，传输数据给客户端时会压缩数据包。\nPush后在客户端也配置启用lz4的压缩功能，向服务端发数据时也会压缩。如果是2.4版本以下的老版本，则使用用comp-lzo指令\ncompress lz4-v2\npush \"compress lz4-v2\"\n#启用lzo数据压缩格式，此指令用于低于2.4版本的老版本，且如果服务端配置了该指令，客户端也必须要配置\ncomp-lzo\n#并发客户端的连接数\nmax-clients 1000\n#通过ping得知超时时，当重启vpn后将使用同一个秘钥文件以及保持tun连接状态\npersist-key\npersist-tun\n#在文件中输出当前的连接信息，每分钟截断并重写一次该文件\nstatus openvpn-status.log\n#log指令表示每次启动vpn时覆盖式记录到指定日志文件中\n#log-append则表示每次启动vpn时追加式的记录到指定日志中\n#但两者只能选其一，或者不选时记录到rsyslog中\nlog  /var/log/openvpn.log\nlog-append  /var/log/openvpn.log\n#日志记录的详细级别\nverb 3\n#当服务器重新启动时，通知客户端，以便它可以自动重新连接。仅在UDP协议是可用\nexplicit-exit-notify 1\n#沉默的重复信息。最多20条相同消息类别的连续消息将输出到日志\nmute 20\n```\n## client\n```\n#标识这是个客户端\nclient\n#使用的协议，tcp/udp，服务端是什么客户端就是什么\nproto tcp\n#使用三层路由ip隧道（tun），还是二层以太网隧道（tap），服务端是什么客户端就是什么\ndev tun\n#服务端的地址和端口\nremote 10.0.0.190 1194\n#一直尝试解析OpenVPN服务器的主机名\nresolv-retry infinite\n#大多数客户机不需要绑定到特定的本地端口号\nnobind\n#初始化后的降级特权(仅非windows)\nuser nobody\ngroup nobody\n#尝试在重新启动时保留某些状态\npersist-key\npersist-tun\n#ca证书、客户端证书、客户端密钥\n#如果它们和client.conf或client.ovpn在同一个目录下则可以不写绝对路径，否则需要写绝对路径调用\nca ca.crt\ncert client.crt\nkey client.key\n#通过检查certicate是否具有正确的密钥使用设置来验证服务器证书。\nremote-cert-tls server\n#加强认证方式，防攻击。服务端有配置，则客户端必须有\ntls-auth ta.key 1\n#选择一个密码。如果在服务器上使用了cipher选项，那么您也必须在这里指定它。注意，v2.4客户端/服务器将在TLS模式下自动协商AES-256-GCM。\ncipher AES-256-CBC\n# 服务端用的什么，客户端就用的什么\n#表示客户端启用lz4的压缩功能，传输数据给客户端时会压缩数据包\ncomp-lzo\n# 日志级别\nverb 3\n#沉默的重复信息。最多20条相同消息类别的连续消息将输出到日志\nmute 20\n```\n\n# 如何直连openvpn服务端其他局域网服务器\n> 客户端（10.8.0.10） <br>\nping (服务端)172.16.1.7 正常 <br>\nping (服务端其他内网机器)172.16.1.8失败\n>>1. 第一种方法 配置路由\nroute add -net 10.8.0.0 netmask 255.255.255.0 gw 172.16.1.7<br>\n10.8.0.0  客户端IP<br>\n172.16.1.7 openvpn 服务端IP\n***\n>>2. 第二种方法使用snat转发 <br>\niptables -t nat -A POSTROUTING -d 10.8.0.0/24 -o eth0 -j MASQUERADE<br>\niptables -A FORWARD -s 10.8.0.0 -j ACCEPT\n\n\n# 额外\n服务端\nroute 192.168.0.0 255.255.0.0   指令作用是在服务端加一条路由，网关是客户端ip\n![alt text](image.png)\n\n服务端只能ping通客户端的tun0的ip，内网ip不行，即使加了路由也不行\n![alt text](image-1.png)\n\n客户端\npush \"route 192.168.10.0 255.255.255.0\"作用是在客户端多加一条路由。网关是服务端的tun0IP（也就是server 指令配置分配的地址池）\n![alt text](image-2.png)\n![alt text](image-3.png)\n\n","slug":"openvpn","published":1,"updated":"2025-08-28T06:39:18.077Z","comments":1,"layout":"post","photos":[],"_id":"cmev1ggbv000lhllz8y6q8uqb","content":"<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/likaiyuan00/openvpn-install.git</span><br><span class=\"line\">cd openvpn-install &amp;&amp; bash openvpn-install.sh</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">systemctl start openvpn@client.service 启动的账号密码  auth-user-pass 控制客户端密码验证</span></span><br><span class=\"line\">echo &quot;test test@123&quot; &gt;  /etc/openvpn/userfile.sh</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"配置文件字段解读\"><a href=\"#配置文件字段解读\" class=\"headerlink\" title=\"配置文件字段解读\"></a>配置文件字段解读</h1><h2 id=\"server端\"><a href=\"#server端\" class=\"headerlink\" title=\"server端\"></a>server端</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在#openvpn服务端的监听地址</span><br><span class=\"line\">local 0.0.0.0</span><br><span class=\"line\">#openvpn服务端的监听端口（默认1194）</span><br><span class=\"line\">port 1115</span><br><span class=\"line\">#使用的协议，tcp/udp</span><br><span class=\"line\">proto tcp</span><br><span class=\"line\">#使用三层路由ip隧道（tun），还是二层以太网隧道（tap），一般使用tun</span><br><span class=\"line\">dev tun</span><br><span class=\"line\">#ca证书、服务端证书、服务端秘钥和秘钥交换文件</span><br><span class=\"line\">ca /etc/openvpn/server/ca.crt</span><br><span class=\"line\">cert /etc/openvpn/server/server.crt</span><br><span class=\"line\">key /etc/openvpn/server/server.key</span><br><span class=\"line\">dh /etc/openvpn/server/dh.pem</span><br><span class=\"line\">#vpn服务端为自己和客户端分配的ip地址池。</span><br><span class=\"line\">#服务端自己获取网段的第一个地址（此处是10.8.0.1），后为客户端分配其他的可用地址。以后客户端就可以和10.8.0.1进行通信。</span><br><span class=\"line\">注意：以下网段地址不要和已有网段冲突或重复</span><br><span class=\"line\">server 10.8.0.0  255.255.255.0</span><br><span class=\"line\">#使用一个文件记录已分配虚拟ip的客户端和虚拟ip的对应关系。以后openvpn重启时，将可以按照此文件继续为对应的客户端分配此前相同的ip（自动续借ip）</span><br><span class=\"line\">ifconfig-pool-persist ipp.txt</span><br><span class=\"line\">#使用tap模式的时候考虑此选项</span><br><span class=\"line\">server-bridge XXXXXX</span><br><span class=\"line\">#vpn服务端向客户端推送vpn服务端内网网段的路由配置，以便让客户端能够找到服务端的内网。多条路由写多个push指令</span><br><span class=\"line\">push &quot;route 10.0.10.0  255.255.255.0&quot;</span><br><span class=\"line\">push &quot;route 192.168.10.0 255.255.255.0&quot;  #允许客户端访问的内网网段</span><br><span class=\"line\">#让vpn客户端之间可以通信。默认情况客户端只能服务端进行通信</span><br><span class=\"line\">#默认此项是注释的，客户端之间不能相互通信</span><br><span class=\"line\">client-to-client</span><br><span class=\"line\">#允许多个客户端使用同一个vpn账号连接服务端</span><br><span class=\"line\">#默认是注释的，不支持多个客户端登录一个账号</span><br><span class=\"line\">duplicate-cn</span><br><span class=\"line\">#每10秒ping一次，120秒后没收到ping就说明对方挂了</span><br><span class=\"line\">keepalive 10 120</span><br><span class=\"line\">#加强认证方式，防攻击。如果配置文件中启用此项（默认是启用的），需要执行openvpn --genkey --secret ta.key，并把ta.key放到/etc/openvpn/server/目录，服务端第二个参数为0；同时客户端也要有此文件，且client.conf中此指令的第二个参数需要为1</span><br><span class=\"line\">tls-auth /etc/openvpn/server/ta.key 0</span><br><span class=\"line\">#选择一个密码。如果在服务器上使用了cipher选项，那么也必须在这里指定它。注意，v2.4客户端/服务端将在tls模式下自动协商AES-256-GCM</span><br><span class=\"line\">cipher AES-256-CBC</span><br><span class=\"line\">#openvpn 2.4版本的vpn才能设置此选项。表示服务端启用lz4的压缩功能 ，传输数据给客户端时会压缩数据包。</span><br><span class=\"line\">Push后在客户端也配置启用lz4的压缩功能，向服务端发数据时也会压缩。如果是2.4版本以下的老版本，则使用用comp-lzo指令</span><br><span class=\"line\">compress lz4-v2</span><br><span class=\"line\">push &quot;compress lz4-v2&quot;</span><br><span class=\"line\">#启用lzo数据压缩格式，此指令用于低于2.4版本的老版本，且如果服务端配置了该指令，客户端也必须要配置</span><br><span class=\"line\">comp-lzo</span><br><span class=\"line\">#并发客户端的连接数</span><br><span class=\"line\">max-clients 1000</span><br><span class=\"line\">#通过ping得知超时时，当重启vpn后将使用同一个秘钥文件以及保持tun连接状态</span><br><span class=\"line\">persist-key</span><br><span class=\"line\">persist-tun</span><br><span class=\"line\">#在文件中输出当前的连接信息，每分钟截断并重写一次该文件</span><br><span class=\"line\">status openvpn-status.log</span><br><span class=\"line\">#log指令表示每次启动vpn时覆盖式记录到指定日志文件中</span><br><span class=\"line\">#log-append则表示每次启动vpn时追加式的记录到指定日志中</span><br><span class=\"line\">#但两者只能选其一，或者不选时记录到rsyslog中</span><br><span class=\"line\">log  /var/log/openvpn.log</span><br><span class=\"line\">log-append  /var/log/openvpn.log</span><br><span class=\"line\">#日志记录的详细级别</span><br><span class=\"line\">verb 3</span><br><span class=\"line\">#当服务器重新启动时，通知客户端，以便它可以自动重新连接。仅在UDP协议是可用</span><br><span class=\"line\">explicit-exit-notify 1</span><br><span class=\"line\">#沉默的重复信息。最多20条相同消息类别的连续消息将输出到日志</span><br><span class=\"line\">mute 20</span><br></pre></td></tr></table></figure>\n<h2 id=\"client\"><a href=\"#client\" class=\"headerlink\" title=\"client\"></a>client</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#标识这是个客户端</span><br><span class=\"line\">client</span><br><span class=\"line\">#使用的协议，tcp/udp，服务端是什么客户端就是什么</span><br><span class=\"line\">proto tcp</span><br><span class=\"line\">#使用三层路由ip隧道（tun），还是二层以太网隧道（tap），服务端是什么客户端就是什么</span><br><span class=\"line\">dev tun</span><br><span class=\"line\">#服务端的地址和端口</span><br><span class=\"line\">remote 10.0.0.190 1194</span><br><span class=\"line\">#一直尝试解析OpenVPN服务器的主机名</span><br><span class=\"line\">resolv-retry infinite</span><br><span class=\"line\">#大多数客户机不需要绑定到特定的本地端口号</span><br><span class=\"line\">nobind</span><br><span class=\"line\">#初始化后的降级特权(仅非windows)</span><br><span class=\"line\">user nobody</span><br><span class=\"line\">group nobody</span><br><span class=\"line\">#尝试在重新启动时保留某些状态</span><br><span class=\"line\">persist-key</span><br><span class=\"line\">persist-tun</span><br><span class=\"line\">#ca证书、客户端证书、客户端密钥</span><br><span class=\"line\">#如果它们和client.conf或client.ovpn在同一个目录下则可以不写绝对路径，否则需要写绝对路径调用</span><br><span class=\"line\">ca ca.crt</span><br><span class=\"line\">cert client.crt</span><br><span class=\"line\">key client.key</span><br><span class=\"line\">#通过检查certicate是否具有正确的密钥使用设置来验证服务器证书。</span><br><span class=\"line\">remote-cert-tls server</span><br><span class=\"line\">#加强认证方式，防攻击。服务端有配置，则客户端必须有</span><br><span class=\"line\">tls-auth ta.key 1</span><br><span class=\"line\">#选择一个密码。如果在服务器上使用了cipher选项，那么您也必须在这里指定它。注意，v2.4客户端/服务器将在TLS模式下自动协商AES-256-GCM。</span><br><span class=\"line\">cipher AES-256-CBC</span><br><span class=\"line\"># 服务端用的什么，客户端就用的什么</span><br><span class=\"line\">#表示客户端启用lz4的压缩功能，传输数据给客户端时会压缩数据包</span><br><span class=\"line\">comp-lzo</span><br><span class=\"line\"># 日志级别</span><br><span class=\"line\">verb 3</span><br><span class=\"line\">#沉默的重复信息。最多20条相同消息类别的连续消息将输出到日志</span><br><span class=\"line\">mute 20</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"如何直连openvpn服务端其他局域网服务器\"><a href=\"#如何直连openvpn服务端其他局域网服务器\" class=\"headerlink\" title=\"如何直连openvpn服务端其他局域网服务器\"></a>如何直连openvpn服务端其他局域网服务器</h1><blockquote>\n<p>客户端（10.8.0.10） <br><br>ping (服务端)172.16.1.7 正常 <br><br>ping (服务端其他内网机器)172.16.1.8失败</p>\n<blockquote>\n<ol>\n<li>第一种方法 配置路由<br>route add -net 10.8.0.0 netmask 255.255.255.0 gw 172.16.1.7<br><br>10.8.0.0  客户端IP<br><br>172.16.1.7 openvpn 服务端IP</li>\n</ol>\n</blockquote>\n</blockquote>\n<hr>\n<blockquote>\n<blockquote>\n<ol start=\"2\">\n<li>第二种方法使用snat转发 <br><br>iptables -t nat -A POSTROUTING -d 10.8.0.0&#x2F;24 -o eth0 -j MASQUERADE<br><br>iptables -A FORWARD -s 10.8.0.0 -j ACCEPT</li>\n</ol>\n</blockquote>\n</blockquote>\n<h1 id=\"额外\"><a href=\"#额外\" class=\"headerlink\" title=\"额外\"></a>额外</h1><p>服务端<br>route 192.168.0.0 255.255.0.0   指令作用是在服务端加一条路由，网关是客户端ip<br><img src=\"/2025/04/21/openvpn/image.png\" alt=\"alt text\"></p>\n<p>服务端只能ping通客户端的tun0的ip，内网ip不行，即使加了路由也不行<br><img src=\"/2025/04/21/openvpn/image-1.png\" alt=\"alt text\"></p>\n<p>客户端<br>push “route 192.168.10.0 255.255.255.0”作用是在客户端多加一条路由。网关是服务端的tun0IP（也就是server 指令配置分配的地址池）<br><img src=\"/2025/04/21/openvpn/image-2.png\" alt=\"alt text\"><br><img src=\"/2025/04/21/openvpn/image-3.png\" alt=\"alt text\"></p>\n","excerpt":"","more":"<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/likaiyuan00/openvpn-install.git</span><br><span class=\"line\">cd openvpn-install &amp;&amp; bash openvpn-install.sh</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">systemctl start openvpn@client.service 启动的账号密码  auth-user-pass 控制客户端密码验证</span></span><br><span class=\"line\">echo &quot;test test@123&quot; &gt;  /etc/openvpn/userfile.sh</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"配置文件字段解读\"><a href=\"#配置文件字段解读\" class=\"headerlink\" title=\"配置文件字段解读\"></a>配置文件字段解读</h1><h2 id=\"server端\"><a href=\"#server端\" class=\"headerlink\" title=\"server端\"></a>server端</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在#openvpn服务端的监听地址</span><br><span class=\"line\">local 0.0.0.0</span><br><span class=\"line\">#openvpn服务端的监听端口（默认1194）</span><br><span class=\"line\">port 1115</span><br><span class=\"line\">#使用的协议，tcp/udp</span><br><span class=\"line\">proto tcp</span><br><span class=\"line\">#使用三层路由ip隧道（tun），还是二层以太网隧道（tap），一般使用tun</span><br><span class=\"line\">dev tun</span><br><span class=\"line\">#ca证书、服务端证书、服务端秘钥和秘钥交换文件</span><br><span class=\"line\">ca /etc/openvpn/server/ca.crt</span><br><span class=\"line\">cert /etc/openvpn/server/server.crt</span><br><span class=\"line\">key /etc/openvpn/server/server.key</span><br><span class=\"line\">dh /etc/openvpn/server/dh.pem</span><br><span class=\"line\">#vpn服务端为自己和客户端分配的ip地址池。</span><br><span class=\"line\">#服务端自己获取网段的第一个地址（此处是10.8.0.1），后为客户端分配其他的可用地址。以后客户端就可以和10.8.0.1进行通信。</span><br><span class=\"line\">注意：以下网段地址不要和已有网段冲突或重复</span><br><span class=\"line\">server 10.8.0.0  255.255.255.0</span><br><span class=\"line\">#使用一个文件记录已分配虚拟ip的客户端和虚拟ip的对应关系。以后openvpn重启时，将可以按照此文件继续为对应的客户端分配此前相同的ip（自动续借ip）</span><br><span class=\"line\">ifconfig-pool-persist ipp.txt</span><br><span class=\"line\">#使用tap模式的时候考虑此选项</span><br><span class=\"line\">server-bridge XXXXXX</span><br><span class=\"line\">#vpn服务端向客户端推送vpn服务端内网网段的路由配置，以便让客户端能够找到服务端的内网。多条路由写多个push指令</span><br><span class=\"line\">push &quot;route 10.0.10.0  255.255.255.0&quot;</span><br><span class=\"line\">push &quot;route 192.168.10.0 255.255.255.0&quot;  #允许客户端访问的内网网段</span><br><span class=\"line\">#让vpn客户端之间可以通信。默认情况客户端只能服务端进行通信</span><br><span class=\"line\">#默认此项是注释的，客户端之间不能相互通信</span><br><span class=\"line\">client-to-client</span><br><span class=\"line\">#允许多个客户端使用同一个vpn账号连接服务端</span><br><span class=\"line\">#默认是注释的，不支持多个客户端登录一个账号</span><br><span class=\"line\">duplicate-cn</span><br><span class=\"line\">#每10秒ping一次，120秒后没收到ping就说明对方挂了</span><br><span class=\"line\">keepalive 10 120</span><br><span class=\"line\">#加强认证方式，防攻击。如果配置文件中启用此项（默认是启用的），需要执行openvpn --genkey --secret ta.key，并把ta.key放到/etc/openvpn/server/目录，服务端第二个参数为0；同时客户端也要有此文件，且client.conf中此指令的第二个参数需要为1</span><br><span class=\"line\">tls-auth /etc/openvpn/server/ta.key 0</span><br><span class=\"line\">#选择一个密码。如果在服务器上使用了cipher选项，那么也必须在这里指定它。注意，v2.4客户端/服务端将在tls模式下自动协商AES-256-GCM</span><br><span class=\"line\">cipher AES-256-CBC</span><br><span class=\"line\">#openvpn 2.4版本的vpn才能设置此选项。表示服务端启用lz4的压缩功能 ，传输数据给客户端时会压缩数据包。</span><br><span class=\"line\">Push后在客户端也配置启用lz4的压缩功能，向服务端发数据时也会压缩。如果是2.4版本以下的老版本，则使用用comp-lzo指令</span><br><span class=\"line\">compress lz4-v2</span><br><span class=\"line\">push &quot;compress lz4-v2&quot;</span><br><span class=\"line\">#启用lzo数据压缩格式，此指令用于低于2.4版本的老版本，且如果服务端配置了该指令，客户端也必须要配置</span><br><span class=\"line\">comp-lzo</span><br><span class=\"line\">#并发客户端的连接数</span><br><span class=\"line\">max-clients 1000</span><br><span class=\"line\">#通过ping得知超时时，当重启vpn后将使用同一个秘钥文件以及保持tun连接状态</span><br><span class=\"line\">persist-key</span><br><span class=\"line\">persist-tun</span><br><span class=\"line\">#在文件中输出当前的连接信息，每分钟截断并重写一次该文件</span><br><span class=\"line\">status openvpn-status.log</span><br><span class=\"line\">#log指令表示每次启动vpn时覆盖式记录到指定日志文件中</span><br><span class=\"line\">#log-append则表示每次启动vpn时追加式的记录到指定日志中</span><br><span class=\"line\">#但两者只能选其一，或者不选时记录到rsyslog中</span><br><span class=\"line\">log  /var/log/openvpn.log</span><br><span class=\"line\">log-append  /var/log/openvpn.log</span><br><span class=\"line\">#日志记录的详细级别</span><br><span class=\"line\">verb 3</span><br><span class=\"line\">#当服务器重新启动时，通知客户端，以便它可以自动重新连接。仅在UDP协议是可用</span><br><span class=\"line\">explicit-exit-notify 1</span><br><span class=\"line\">#沉默的重复信息。最多20条相同消息类别的连续消息将输出到日志</span><br><span class=\"line\">mute 20</span><br></pre></td></tr></table></figure>\n<h2 id=\"client\"><a href=\"#client\" class=\"headerlink\" title=\"client\"></a>client</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#标识这是个客户端</span><br><span class=\"line\">client</span><br><span class=\"line\">#使用的协议，tcp/udp，服务端是什么客户端就是什么</span><br><span class=\"line\">proto tcp</span><br><span class=\"line\">#使用三层路由ip隧道（tun），还是二层以太网隧道（tap），服务端是什么客户端就是什么</span><br><span class=\"line\">dev tun</span><br><span class=\"line\">#服务端的地址和端口</span><br><span class=\"line\">remote 10.0.0.190 1194</span><br><span class=\"line\">#一直尝试解析OpenVPN服务器的主机名</span><br><span class=\"line\">resolv-retry infinite</span><br><span class=\"line\">#大多数客户机不需要绑定到特定的本地端口号</span><br><span class=\"line\">nobind</span><br><span class=\"line\">#初始化后的降级特权(仅非windows)</span><br><span class=\"line\">user nobody</span><br><span class=\"line\">group nobody</span><br><span class=\"line\">#尝试在重新启动时保留某些状态</span><br><span class=\"line\">persist-key</span><br><span class=\"line\">persist-tun</span><br><span class=\"line\">#ca证书、客户端证书、客户端密钥</span><br><span class=\"line\">#如果它们和client.conf或client.ovpn在同一个目录下则可以不写绝对路径，否则需要写绝对路径调用</span><br><span class=\"line\">ca ca.crt</span><br><span class=\"line\">cert client.crt</span><br><span class=\"line\">key client.key</span><br><span class=\"line\">#通过检查certicate是否具有正确的密钥使用设置来验证服务器证书。</span><br><span class=\"line\">remote-cert-tls server</span><br><span class=\"line\">#加强认证方式，防攻击。服务端有配置，则客户端必须有</span><br><span class=\"line\">tls-auth ta.key 1</span><br><span class=\"line\">#选择一个密码。如果在服务器上使用了cipher选项，那么您也必须在这里指定它。注意，v2.4客户端/服务器将在TLS模式下自动协商AES-256-GCM。</span><br><span class=\"line\">cipher AES-256-CBC</span><br><span class=\"line\"># 服务端用的什么，客户端就用的什么</span><br><span class=\"line\">#表示客户端启用lz4的压缩功能，传输数据给客户端时会压缩数据包</span><br><span class=\"line\">comp-lzo</span><br><span class=\"line\"># 日志级别</span><br><span class=\"line\">verb 3</span><br><span class=\"line\">#沉默的重复信息。最多20条相同消息类别的连续消息将输出到日志</span><br><span class=\"line\">mute 20</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"如何直连openvpn服务端其他局域网服务器\"><a href=\"#如何直连openvpn服务端其他局域网服务器\" class=\"headerlink\" title=\"如何直连openvpn服务端其他局域网服务器\"></a>如何直连openvpn服务端其他局域网服务器</h1><blockquote>\n<p>客户端（10.8.0.10） <br><br>ping (服务端)172.16.1.7 正常 <br><br>ping (服务端其他内网机器)172.16.1.8失败</p>\n<blockquote>\n<ol>\n<li>第一种方法 配置路由<br>route add -net 10.8.0.0 netmask 255.255.255.0 gw 172.16.1.7<br><br>10.8.0.0  客户端IP<br><br>172.16.1.7 openvpn 服务端IP</li>\n</ol>\n</blockquote>\n</blockquote>\n<hr>\n<blockquote>\n<blockquote>\n<ol start=\"2\">\n<li>第二种方法使用snat转发 <br><br>iptables -t nat -A POSTROUTING -d 10.8.0.0&#x2F;24 -o eth0 -j MASQUERADE<br><br>iptables -A FORWARD -s 10.8.0.0 -j ACCEPT</li>\n</ol>\n</blockquote>\n</blockquote>\n<h1 id=\"额外\"><a href=\"#额外\" class=\"headerlink\" title=\"额外\"></a>额外</h1><p>服务端<br>route 192.168.0.0 255.255.0.0   指令作用是在服务端加一条路由，网关是客户端ip<br><img src=\"/2025/04/21/openvpn/image.png\" alt=\"alt text\"></p>\n<p>服务端只能ping通客户端的tun0的ip，内网ip不行，即使加了路由也不行<br><img src=\"/2025/04/21/openvpn/image-1.png\" alt=\"alt text\"></p>\n<p>客户端<br>push “route 192.168.10.0 255.255.255.0”作用是在客户端多加一条路由。网关是服务端的tun0IP（也就是server 指令配置分配的地址池）<br><img src=\"/2025/04/21/openvpn/image-2.png\" alt=\"alt text\"><br><img src=\"/2025/04/21/openvpn/image-3.png\" alt=\"alt text\"></p>\n"},{"title":"prometheus","date":"2025-04-18T01:56:59.000Z","_content":"https://github.com/likaiyuan00/k8s-prometheus.git\n\n# k8s-prometheus\n部署kubernetes_sd_configs\n配置文件只采集了\n> 1 prometheus*  prometheus-server<br> \n> 2 container*   kubelet 的10250端口  /metrics/cadvisor<br>\n> 3 node*    node_exporter<br>\n> 4 apiserver*  apiserver 6443 端口 /metrics<br>\n> 5 kube*  kube-state-metrics组件 8080端口 /metrics<br>\n> 6 coredns*  kubernetes-pods 自动发现 pod需要配置 prometheus.io/scrape: \"true\" 不然抓取不到 默认flase<br>\n> prometheus.io/path: \"/metrics\"   # 指标路径（默认 /metrics 可不写）<br>\n> 7 kubelet*  apiserver代理端点 /api/v1/nodes/\\<node-name\\>/proxy/metrics\n其他有需要的可以自行配置\n\n\n导入镜像，执行yml文件即可\n\n## prometheus效果图\n![alt text](image-2.png)\n\n\n## grafana效果图\n![alt text](image-3.png)\n![alt text](image-4.png)\n![alt text](image-5.png)\n\n\n\n\n## kubelet 组件\n kubelet 三个指标 /metrics/probes（探针） /metrics/cadvisor（pod） /metrics（node）\n\n对应apiserver的 /api/v1/nodes/${node-name}/proxy/${url};一般为了减少apiserver的负载不建议使用这种方式 **\n\n直接访问会报401没有权限\n![alt text](image-6.png)\n\n\n需要先获取token，上面文件执行完会有一个prometheus用户\n![alt text](image-7.png)\n\n\n\npod内token路径为 /var/run/secrets/kubernetes.io/serviceaccount/token\n\n通过token再去访问发现就正常了\n\n```\n/metrics\ncurl -k -sS  -H \"Authorization: Bearer $TOKEN\"  https://127.0.0.1:6443/api/v1/nodes/master/proxy/metrics\n\ncurl -k -sS  -H \"Authorization: Bearer $TOKEN\"  https://127.0.0.1:10250/metrics\n```\n![alt text](image-8.png)\n\n\n\n对应kubelet*开头\n![alt text](image-9.png)\n\n\n```\n/metrics/probes（探针）\ncurl -k -sS  -H \"Authorization: Bearer $TOKEN\"  https://127.0.0.1:6443/api/v1/nodes/master/proxy/metrics/probes\n\ncurl -k -sS  -H \"Authorization: Bearer $TOKEN\"  https://127.0.0.1:10250/metrics/probes\n```\n![alt text](image-10.png)\n\n```\n/metrics/cadvisor（pod）\ncurl -k -sS  -H \"Authorization: Bearer $TOKEN\"  https://127.0.0.1:6443/api/v1/nodes/master/proxy/metrics/cadvisor\n\ncurl -k -sS  -H \"Authorization: Bearer $TOKEN\"  https://127.0.0.1:10250/metrics/cadvisor\n```\n![alt text](image-11.png)\n\n\n\n\n对应container*开头，容器指标\n![alt text](image-12.png)\n\n\n## node_exporter  \n端口暴露到节点了就不需要token了\n![alt text](image-13.png)\n\n\nnode*开头，节点指标\n![alt text](image-14.png)\n\n\n\n## kube-state-metrics\n集群应用状态监控比较重要的一个需要单独安装\n使用containerPort: 8080 暴露到节点了不需要token\n![alt text](image-15.png)\n\n\n\n\nkube*开头\n![alt text](image-16.png)\n\n\n## apiserver \n主要是监控apiserver的qps,查询成功率失败率等信息\n![alt text](image-17.png)\n\n\napiserver*开头\n![alt text](image-18.png)\n\n\n## kubernetes-pods 自动发现\n如果元数据内设置true，该pod才可以被抓取，默认false\n![alt text](image-19.png)\n\n\n\n以coredns为例\n![alt text](image-20.png)\n![alt text](image-21.png)\n\n\n\n\n\n以coredns*开头\n![alt text](image-22.png)\n\n\n这个自动发现还可以配置自身业务的监控，只有保证开启抓取，和符合prometheus抓取规范就可以，如果开启了prometheus.io/scrape 但是pod并没有提供数据指标的能力就会直接报错，如图404\n![alt text](image-23.png)\n\n\n比如现在我想加一个grafana的数据，只需要添加对应元数据就可以了\n![alt text](image-24.png)\n\n\nprometheus就自动发现了pod的ip\n![alt text](image-1.png)\n\n\ngrafana*开头\n![alt text](image.png)\n\n\n\n","source":"_posts/prometheus.md","raw":"---\ntitle: prometheus\ndate: 2025-04-18 09:56:59\ntags: prometheus\ncategories: prometheus\n---\nhttps://github.com/likaiyuan00/k8s-prometheus.git\n\n# k8s-prometheus\n部署kubernetes_sd_configs\n配置文件只采集了\n> 1 prometheus*  prometheus-server<br> \n> 2 container*   kubelet 的10250端口  /metrics/cadvisor<br>\n> 3 node*    node_exporter<br>\n> 4 apiserver*  apiserver 6443 端口 /metrics<br>\n> 5 kube*  kube-state-metrics组件 8080端口 /metrics<br>\n> 6 coredns*  kubernetes-pods 自动发现 pod需要配置 prometheus.io/scrape: \"true\" 不然抓取不到 默认flase<br>\n> prometheus.io/path: \"/metrics\"   # 指标路径（默认 /metrics 可不写）<br>\n> 7 kubelet*  apiserver代理端点 /api/v1/nodes/\\<node-name\\>/proxy/metrics\n其他有需要的可以自行配置\n\n\n导入镜像，执行yml文件即可\n\n## prometheus效果图\n![alt text](image-2.png)\n\n\n## grafana效果图\n![alt text](image-3.png)\n![alt text](image-4.png)\n![alt text](image-5.png)\n\n\n\n\n## kubelet 组件\n kubelet 三个指标 /metrics/probes（探针） /metrics/cadvisor（pod） /metrics（node）\n\n对应apiserver的 /api/v1/nodes/${node-name}/proxy/${url};一般为了减少apiserver的负载不建议使用这种方式 **\n\n直接访问会报401没有权限\n![alt text](image-6.png)\n\n\n需要先获取token，上面文件执行完会有一个prometheus用户\n![alt text](image-7.png)\n\n\n\npod内token路径为 /var/run/secrets/kubernetes.io/serviceaccount/token\n\n通过token再去访问发现就正常了\n\n```\n/metrics\ncurl -k -sS  -H \"Authorization: Bearer $TOKEN\"  https://127.0.0.1:6443/api/v1/nodes/master/proxy/metrics\n\ncurl -k -sS  -H \"Authorization: Bearer $TOKEN\"  https://127.0.0.1:10250/metrics\n```\n![alt text](image-8.png)\n\n\n\n对应kubelet*开头\n![alt text](image-9.png)\n\n\n```\n/metrics/probes（探针）\ncurl -k -sS  -H \"Authorization: Bearer $TOKEN\"  https://127.0.0.1:6443/api/v1/nodes/master/proxy/metrics/probes\n\ncurl -k -sS  -H \"Authorization: Bearer $TOKEN\"  https://127.0.0.1:10250/metrics/probes\n```\n![alt text](image-10.png)\n\n```\n/metrics/cadvisor（pod）\ncurl -k -sS  -H \"Authorization: Bearer $TOKEN\"  https://127.0.0.1:6443/api/v1/nodes/master/proxy/metrics/cadvisor\n\ncurl -k -sS  -H \"Authorization: Bearer $TOKEN\"  https://127.0.0.1:10250/metrics/cadvisor\n```\n![alt text](image-11.png)\n\n\n\n\n对应container*开头，容器指标\n![alt text](image-12.png)\n\n\n## node_exporter  \n端口暴露到节点了就不需要token了\n![alt text](image-13.png)\n\n\nnode*开头，节点指标\n![alt text](image-14.png)\n\n\n\n## kube-state-metrics\n集群应用状态监控比较重要的一个需要单独安装\n使用containerPort: 8080 暴露到节点了不需要token\n![alt text](image-15.png)\n\n\n\n\nkube*开头\n![alt text](image-16.png)\n\n\n## apiserver \n主要是监控apiserver的qps,查询成功率失败率等信息\n![alt text](image-17.png)\n\n\napiserver*开头\n![alt text](image-18.png)\n\n\n## kubernetes-pods 自动发现\n如果元数据内设置true，该pod才可以被抓取，默认false\n![alt text](image-19.png)\n\n\n\n以coredns为例\n![alt text](image-20.png)\n![alt text](image-21.png)\n\n\n\n\n\n以coredns*开头\n![alt text](image-22.png)\n\n\n这个自动发现还可以配置自身业务的监控，只有保证开启抓取，和符合prometheus抓取规范就可以，如果开启了prometheus.io/scrape 但是pod并没有提供数据指标的能力就会直接报错，如图404\n![alt text](image-23.png)\n\n\n比如现在我想加一个grafana的数据，只需要添加对应元数据就可以了\n![alt text](image-24.png)\n\n\nprometheus就自动发现了pod的ip\n![alt text](image-1.png)\n\n\ngrafana*开头\n![alt text](image.png)\n\n\n\n","slug":"prometheus","published":1,"updated":"2025-08-28T06:39:18.095Z","comments":1,"layout":"post","photos":[],"_id":"cmev1ggc0000mhllzdwia1c7b","content":"<p><a href=\"https://github.com/likaiyuan00/k8s-prometheus.git\">https://github.com/likaiyuan00/k8s-prometheus.git</a></p>\n<h1 id=\"k8s-prometheus\"><a href=\"#k8s-prometheus\" class=\"headerlink\" title=\"k8s-prometheus\"></a>k8s-prometheus</h1><p>部署kubernetes_sd_configs<br>配置文件只采集了</p>\n<blockquote>\n<p>1 prometheus*  prometheus-server<br><br>2 container*   kubelet 的10250端口  &#x2F;metrics&#x2F;cadvisor<br><br>3 node*    node_exporter<br><br>4 apiserver*  apiserver 6443 端口 &#x2F;metrics<br><br>5 kube*  kube-state-metrics组件 8080端口 &#x2F;metrics<br><br>6 coredns*  kubernetes-pods 自动发现 pod需要配置 prometheus.io&#x2F;scrape: “true” 不然抓取不到 默认flase<br><br>prometheus.io&#x2F;path: “&#x2F;metrics”   # 指标路径（默认 &#x2F;metrics 可不写）<br><br>7 kubelet*  apiserver代理端点 &#x2F;api&#x2F;v1&#x2F;nodes&#x2F;&lt;node-name&gt;&#x2F;proxy&#x2F;metrics<br>其他有需要的可以自行配置</p>\n</blockquote>\n<p>导入镜像，执行yml文件即可</p>\n<h2 id=\"prometheus效果图\"><a href=\"#prometheus效果图\" class=\"headerlink\" title=\"prometheus效果图\"></a>prometheus效果图</h2><p><img src=\"/2025/04/18/prometheus/image-2.png\" alt=\"alt text\"></p>\n<h2 id=\"grafana效果图\"><a href=\"#grafana效果图\" class=\"headerlink\" title=\"grafana效果图\"></a>grafana效果图</h2><p><img src=\"/2025/04/18/prometheus/image-3.png\" alt=\"alt text\"><br><img src=\"/2025/04/18/prometheus/image-4.png\" alt=\"alt text\"><br><img src=\"/2025/04/18/prometheus/image-5.png\" alt=\"alt text\"></p>\n<h2 id=\"kubelet-组件\"><a href=\"#kubelet-组件\" class=\"headerlink\" title=\"kubelet 组件\"></a>kubelet 组件</h2><p> kubelet 三个指标 &#x2F;metrics&#x2F;probes（探针） &#x2F;metrics&#x2F;cadvisor（pod） &#x2F;metrics（node）</p>\n<p>对应apiserver的 &#x2F;api&#x2F;v1&#x2F;nodes&#x2F;${node-name}&#x2F;proxy&#x2F;${url};一般为了减少apiserver的负载不建议使用这种方式 **</p>\n<p>直接访问会报401没有权限<br><img src=\"/2025/04/18/prometheus/image-6.png\" alt=\"alt text\"></p>\n<p>需要先获取token，上面文件执行完会有一个prometheus用户<br><img src=\"/2025/04/18/prometheus/image-7.png\" alt=\"alt text\"></p>\n<p>pod内token路径为 &#x2F;var&#x2F;run&#x2F;secrets&#x2F;kubernetes.io&#x2F;serviceaccount&#x2F;token</p>\n<p>通过token再去访问发现就正常了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/metrics</span><br><span class=\"line\">curl -k -sS  -H &quot;Authorization: Bearer $TOKEN&quot;  https://127.0.0.1:6443/api/v1/nodes/master/proxy/metrics</span><br><span class=\"line\"></span><br><span class=\"line\">curl -k -sS  -H &quot;Authorization: Bearer $TOKEN&quot;  https://127.0.0.1:10250/metrics</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2025/04/18/prometheus/image-8.png\" alt=\"alt text\"></p>\n<p>对应kubelet*开头<br><img src=\"/2025/04/18/prometheus/image-9.png\" alt=\"alt text\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/metrics/probes（探针）</span><br><span class=\"line\">curl -k -sS  -H &quot;Authorization: Bearer $TOKEN&quot;  https://127.0.0.1:6443/api/v1/nodes/master/proxy/metrics/probes</span><br><span class=\"line\"></span><br><span class=\"line\">curl -k -sS  -H &quot;Authorization: Bearer $TOKEN&quot;  https://127.0.0.1:10250/metrics/probes</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2025/04/18/prometheus/image-10.png\" alt=\"alt text\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/metrics/cadvisor（pod）</span><br><span class=\"line\">curl -k -sS  -H &quot;Authorization: Bearer $TOKEN&quot;  https://127.0.0.1:6443/api/v1/nodes/master/proxy/metrics/cadvisor</span><br><span class=\"line\"></span><br><span class=\"line\">curl -k -sS  -H &quot;Authorization: Bearer $TOKEN&quot;  https://127.0.0.1:10250/metrics/cadvisor</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2025/04/18/prometheus/image-11.png\" alt=\"alt text\"></p>\n<p>对应container*开头，容器指标<br><img src=\"/2025/04/18/prometheus/image-12.png\" alt=\"alt text\"></p>\n<h2 id=\"node-exporter\"><a href=\"#node-exporter\" class=\"headerlink\" title=\"node_exporter\"></a>node_exporter</h2><p>端口暴露到节点了就不需要token了<br><img src=\"/2025/04/18/prometheus/image-13.png\" alt=\"alt text\"></p>\n<p>node*开头，节点指标<br><img src=\"/2025/04/18/prometheus/image-14.png\" alt=\"alt text\"></p>\n<h2 id=\"kube-state-metrics\"><a href=\"#kube-state-metrics\" class=\"headerlink\" title=\"kube-state-metrics\"></a>kube-state-metrics</h2><p>集群应用状态监控比较重要的一个需要单独安装<br>使用containerPort: 8080 暴露到节点了不需要token<br><img src=\"/2025/04/18/prometheus/image-15.png\" alt=\"alt text\"></p>\n<p>kube*开头<br><img src=\"/2025/04/18/prometheus/image-16.png\" alt=\"alt text\"></p>\n<h2 id=\"apiserver\"><a href=\"#apiserver\" class=\"headerlink\" title=\"apiserver\"></a>apiserver</h2><p>主要是监控apiserver的qps,查询成功率失败率等信息<br><img src=\"/2025/04/18/prometheus/image-17.png\" alt=\"alt text\"></p>\n<p>apiserver*开头<br><img src=\"/2025/04/18/prometheus/image-18.png\" alt=\"alt text\"></p>\n<h2 id=\"kubernetes-pods-自动发现\"><a href=\"#kubernetes-pods-自动发现\" class=\"headerlink\" title=\"kubernetes-pods 自动发现\"></a>kubernetes-pods 自动发现</h2><p>如果元数据内设置true，该pod才可以被抓取，默认false<br><img src=\"/2025/04/18/prometheus/image-19.png\" alt=\"alt text\"></p>\n<p>以coredns为例<br><img src=\"/2025/04/18/prometheus/image-20.png\" alt=\"alt text\"><br><img src=\"/2025/04/18/prometheus/image-21.png\" alt=\"alt text\"></p>\n<p>以coredns*开头<br><img src=\"/2025/04/18/prometheus/image-22.png\" alt=\"alt text\"></p>\n<p>这个自动发现还可以配置自身业务的监控，只有保证开启抓取，和符合prometheus抓取规范就可以，如果开启了prometheus.io&#x2F;scrape 但是pod并没有提供数据指标的能力就会直接报错，如图404<br><img src=\"/2025/04/18/prometheus/image-23.png\" alt=\"alt text\"></p>\n<p>比如现在我想加一个grafana的数据，只需要添加对应元数据就可以了<br><img src=\"/2025/04/18/prometheus/image-24.png\" alt=\"alt text\"></p>\n<p>prometheus就自动发现了pod的ip<br><img src=\"/2025/04/18/prometheus/image-1.png\" alt=\"alt text\"></p>\n<p>grafana*开头<br><img src=\"/2025/04/18/prometheus/image.png\" alt=\"alt text\"></p>\n","excerpt":"","more":"<p><a href=\"https://github.com/likaiyuan00/k8s-prometheus.git\">https://github.com/likaiyuan00/k8s-prometheus.git</a></p>\n<h1 id=\"k8s-prometheus\"><a href=\"#k8s-prometheus\" class=\"headerlink\" title=\"k8s-prometheus\"></a>k8s-prometheus</h1><p>部署kubernetes_sd_configs<br>配置文件只采集了</p>\n<blockquote>\n<p>1 prometheus*  prometheus-server<br><br>2 container*   kubelet 的10250端口  &#x2F;metrics&#x2F;cadvisor<br><br>3 node*    node_exporter<br><br>4 apiserver*  apiserver 6443 端口 &#x2F;metrics<br><br>5 kube*  kube-state-metrics组件 8080端口 &#x2F;metrics<br><br>6 coredns*  kubernetes-pods 自动发现 pod需要配置 prometheus.io&#x2F;scrape: “true” 不然抓取不到 默认flase<br><br>prometheus.io&#x2F;path: “&#x2F;metrics”   # 指标路径（默认 &#x2F;metrics 可不写）<br><br>7 kubelet*  apiserver代理端点 &#x2F;api&#x2F;v1&#x2F;nodes&#x2F;&lt;node-name&gt;&#x2F;proxy&#x2F;metrics<br>其他有需要的可以自行配置</p>\n</blockquote>\n<p>导入镜像，执行yml文件即可</p>\n<h2 id=\"prometheus效果图\"><a href=\"#prometheus效果图\" class=\"headerlink\" title=\"prometheus效果图\"></a>prometheus效果图</h2><p><img src=\"/2025/04/18/prometheus/image-2.png\" alt=\"alt text\"></p>\n<h2 id=\"grafana效果图\"><a href=\"#grafana效果图\" class=\"headerlink\" title=\"grafana效果图\"></a>grafana效果图</h2><p><img src=\"/2025/04/18/prometheus/image-3.png\" alt=\"alt text\"><br><img src=\"/2025/04/18/prometheus/image-4.png\" alt=\"alt text\"><br><img src=\"/2025/04/18/prometheus/image-5.png\" alt=\"alt text\"></p>\n<h2 id=\"kubelet-组件\"><a href=\"#kubelet-组件\" class=\"headerlink\" title=\"kubelet 组件\"></a>kubelet 组件</h2><p> kubelet 三个指标 &#x2F;metrics&#x2F;probes（探针） &#x2F;metrics&#x2F;cadvisor（pod） &#x2F;metrics（node）</p>\n<p>对应apiserver的 &#x2F;api&#x2F;v1&#x2F;nodes&#x2F;${node-name}&#x2F;proxy&#x2F;${url};一般为了减少apiserver的负载不建议使用这种方式 **</p>\n<p>直接访问会报401没有权限<br><img src=\"/2025/04/18/prometheus/image-6.png\" alt=\"alt text\"></p>\n<p>需要先获取token，上面文件执行完会有一个prometheus用户<br><img src=\"/2025/04/18/prometheus/image-7.png\" alt=\"alt text\"></p>\n<p>pod内token路径为 &#x2F;var&#x2F;run&#x2F;secrets&#x2F;kubernetes.io&#x2F;serviceaccount&#x2F;token</p>\n<p>通过token再去访问发现就正常了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/metrics</span><br><span class=\"line\">curl -k -sS  -H &quot;Authorization: Bearer $TOKEN&quot;  https://127.0.0.1:6443/api/v1/nodes/master/proxy/metrics</span><br><span class=\"line\"></span><br><span class=\"line\">curl -k -sS  -H &quot;Authorization: Bearer $TOKEN&quot;  https://127.0.0.1:10250/metrics</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2025/04/18/prometheus/image-8.png\" alt=\"alt text\"></p>\n<p>对应kubelet*开头<br><img src=\"/2025/04/18/prometheus/image-9.png\" alt=\"alt text\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/metrics/probes（探针）</span><br><span class=\"line\">curl -k -sS  -H &quot;Authorization: Bearer $TOKEN&quot;  https://127.0.0.1:6443/api/v1/nodes/master/proxy/metrics/probes</span><br><span class=\"line\"></span><br><span class=\"line\">curl -k -sS  -H &quot;Authorization: Bearer $TOKEN&quot;  https://127.0.0.1:10250/metrics/probes</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2025/04/18/prometheus/image-10.png\" alt=\"alt text\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/metrics/cadvisor（pod）</span><br><span class=\"line\">curl -k -sS  -H &quot;Authorization: Bearer $TOKEN&quot;  https://127.0.0.1:6443/api/v1/nodes/master/proxy/metrics/cadvisor</span><br><span class=\"line\"></span><br><span class=\"line\">curl -k -sS  -H &quot;Authorization: Bearer $TOKEN&quot;  https://127.0.0.1:10250/metrics/cadvisor</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2025/04/18/prometheus/image-11.png\" alt=\"alt text\"></p>\n<p>对应container*开头，容器指标<br><img src=\"/2025/04/18/prometheus/image-12.png\" alt=\"alt text\"></p>\n<h2 id=\"node-exporter\"><a href=\"#node-exporter\" class=\"headerlink\" title=\"node_exporter\"></a>node_exporter</h2><p>端口暴露到节点了就不需要token了<br><img src=\"/2025/04/18/prometheus/image-13.png\" alt=\"alt text\"></p>\n<p>node*开头，节点指标<br><img src=\"/2025/04/18/prometheus/image-14.png\" alt=\"alt text\"></p>\n<h2 id=\"kube-state-metrics\"><a href=\"#kube-state-metrics\" class=\"headerlink\" title=\"kube-state-metrics\"></a>kube-state-metrics</h2><p>集群应用状态监控比较重要的一个需要单独安装<br>使用containerPort: 8080 暴露到节点了不需要token<br><img src=\"/2025/04/18/prometheus/image-15.png\" alt=\"alt text\"></p>\n<p>kube*开头<br><img src=\"/2025/04/18/prometheus/image-16.png\" alt=\"alt text\"></p>\n<h2 id=\"apiserver\"><a href=\"#apiserver\" class=\"headerlink\" title=\"apiserver\"></a>apiserver</h2><p>主要是监控apiserver的qps,查询成功率失败率等信息<br><img src=\"/2025/04/18/prometheus/image-17.png\" alt=\"alt text\"></p>\n<p>apiserver*开头<br><img src=\"/2025/04/18/prometheus/image-18.png\" alt=\"alt text\"></p>\n<h2 id=\"kubernetes-pods-自动发现\"><a href=\"#kubernetes-pods-自动发现\" class=\"headerlink\" title=\"kubernetes-pods 自动发现\"></a>kubernetes-pods 自动发现</h2><p>如果元数据内设置true，该pod才可以被抓取，默认false<br><img src=\"/2025/04/18/prometheus/image-19.png\" alt=\"alt text\"></p>\n<p>以coredns为例<br><img src=\"/2025/04/18/prometheus/image-20.png\" alt=\"alt text\"><br><img src=\"/2025/04/18/prometheus/image-21.png\" alt=\"alt text\"></p>\n<p>以coredns*开头<br><img src=\"/2025/04/18/prometheus/image-22.png\" alt=\"alt text\"></p>\n<p>这个自动发现还可以配置自身业务的监控，只有保证开启抓取，和符合prometheus抓取规范就可以，如果开启了prometheus.io&#x2F;scrape 但是pod并没有提供数据指标的能力就会直接报错，如图404<br><img src=\"/2025/04/18/prometheus/image-23.png\" alt=\"alt text\"></p>\n<p>比如现在我想加一个grafana的数据，只需要添加对应元数据就可以了<br><img src=\"/2025/04/18/prometheus/image-24.png\" alt=\"alt text\"></p>\n<p>prometheus就自动发现了pod的ip<br><img src=\"/2025/04/18/prometheus/image-1.png\" alt=\"alt text\"></p>\n<p>grafana*开头<br><img src=\"/2025/04/18/prometheus/image.png\" alt=\"alt text\"></p>\n"},{"title":"prometheus进阶","date":"2025-08-22T07:25:19.000Z","_content":"# deploy\n```yml\n#!/bin/bash\n\n# 创建目录结构\nmkdir -p monitoring/prometheus\ncd monitoring\n\n# 生成docker-compose.yml,node和process必须使用host宿主机网络，不然很多指标只能采集到容器里面的信息不准确\ncat > docker-compose.yml << EOF\nversion: '3.8'\n\nnetworks:\n  monitoring:\n    driver: bridge\n\nservices:\n  prometheus:\n    image: registry.cn-hangzhou.aliyuncs.com/lky-deploy/prometheus:v2.40.7\n    container_name: prometheus\n    restart: unless-stopped\n    ports:\n      - \"9090:9090\"\n    volumes:\n      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml\n      - prom_data:/prometheus\n    networks:\n      - monitoring\n    command:\n      - '--config.file=/etc/prometheus/prometheus.yml'\n      - '--storage.tsdb.retention.time=30d'\n      - '--web.enable-lifecycle' #curl -X POST http://localhost:9090/-/reload\n\n  node-exporter:\n    image: registry.cn-hangzhou.aliyuncs.com/lky-deploy/nodeexporter:v1.9.1\n    container_name: node-exporter\n    restart: unless-stopped\n    command:\n      - '--path.rootfs=/host'\n      - '--web.listen-address=:9400'\n   # networks:  # 加入监控网络\n    #  - monitoring\n    network_mode: host  # 使用host网络\n    pid: host\n    volumes:\n      - /:/host:ro,rslave\n\n  blackbox-exporter:\n    image: registry.cn-hangzhou.aliyuncs.com/lky-deploy/nodeexporter:blackbox-exporterv0.27.0\n    container_name: blackbox-exporter\n    restart: unless-stopped\n    ports:\n      - \"9115:9115\"\n    networks:\n      - monitoring\n    volumes:\n      - ./blackbox.yml:/etc/blackbox_exporter/config.yml\n    command:\n      - '--config.file=/etc/blackbox_exporter/config.yml'\n\n  process-exporter:\n    image: registry.cn-hangzhou.aliyuncs.com/lky-deploy/nodeexporter:process-exporter-v0.8.7\n    container_name: process-exporter\n    restart: unless-stopped\n    network_mode: host  # 使用host网络\n   # networks:\n   #   - monitoring  # 使用统一网络\n    ports:\n      - \"9256:9256\"  # 添加端口映射\n    volumes:\n      - /proc:/host/proc:ro\n      - ./process-exporter.yml:/config.yml\n    command:\n      - '-config.path=/config.yml'\n      - '-procfs=/host/proc'\n\nvolumes:\n  prom_data:\nEOF\n\n# 生成Prometheus配置\ncat > prometheus/prometheus.yml <<EOF\nglobal:\n  scrape_interval: 15s\n  evaluation_interval: 15s\n\nscrape_configs:\n  - job_name: 'prometheus'\n    static_configs:\n      - targets: ['localhost:9090']\n\n  - job_name: 'node'\n    static_configs:\n      - targets: ['node-exporter:9400'] #host模式需要换成宿主机ip\n  - job_name: 'blackbox-http'\n    metrics_path: /probe\n    params:\n      module: [http_2xx]\n    static_configs:\n      - targets:\n        - https://qq.com\n        - https://google.com\n    relabel_configs:\n      - source_labels: [__address__]\n        target_label: __param_target\n      - source_labels: [__param_target]\n        target_label: instance\n      - target_label: __address__\n        replacement: blackbox-exporter:9115\n\n  - job_name: 'process-exporter'\n    static_configs:\n      - targets: ['process-exporter:9256'] #host模式需要换成宿主机ip\nEOF\n\n# 生成Blackbox配置\ncat > blackbox.yml <<EOF\nmodules:\n  http_2xx:\n    prober: http\n    timeout: 5s\n    http:\n      valid_http_versions: [\"HTTP/1.1\", \"HTTP/2\"]\n      valid_status_codes: [200]\n      method: GET\n      preferred_ip_protocol: \"ip4\"\nEOF\n\n# 生成Process Exporter配置\ncat > process-exporter.yml <<EOF\nprocess_names:\n  - name: \"{{.Comm}}\"\n    cmdline:\n    - '.+'  # 正则表达式（匹配任何非空内容）\n  #- name: \"{{.Matches}}\"\n #   cmdline:\n #     - 'nginx'  # 只监控 nginx 进程\n # - name: \"{{.Matches}}\"\n  #  cmdline:\n  #    - 'docker'  # 只监控 docker 进程\nEOF\n\n# 启动服务\ndocker compose up -d\n\necho -e \"\\n\\033[32m部署完成！以下是访问信息：\\033[0m\"\necho \"Prometheus:     http://localhost:9090\"\necho \"Node Exporter:  http://localhost:9100/metrics\"\necho \"Blackbox:       http://localhost:9115/metrics\"\necho \"Process-Exporter: http://localhost:9256/metrics\"\necho -e \"\\n请修改以下配置文件后重启服务：\"\necho \"- blackbox.yml 中的监控目标\"\necho \"- process-exporter.yml 中的进程过滤规则\"\n\n```\n\n\n# 如果节点较多prometheus对所有指标的采集会对负载和磁盘占用较多，可以通过relabel drop不需要的指标，减轻负担\n```yaml\n#relabel_configs\t抓取前，针对target\n#metric_relabel_configs 抓取后，针对指标名称\nscrape_configs:\n  - job_name: 'node-drop' \n    static_configs:\n      - targets: ['localhost:9100']\n    metric_relabel_configs:\n      - source_labels: [__name__]\n        regex: '^(node_cpu_seconds_total|node_memory_.*|node_disk_.*|node_network_.*)$'\n        action: keep\n  - job_name: 'node'\n    static_configs:\n      - targets: ['node1:9100', 'node2:9100','master:9100']\n    relabel_configs:\n      # 根据目标地址动态添加 environment 标签\n      - source_labels: [__address__]\n        regex: 'node1:9100'\n        replacement: 'prod'\n        target_label: environment\n      - source_labels: [__address__]\n        regex: 'node2:9100'\n        replacement: 'staging'\n        target_label: environment\n      # 只保留主机名包含 \"node\" 的目标\n      - source_labels: [__address__]\n        regex: 'node[0-9]+:9100'  # 正则匹配 node1, node2 等\n        action: keep\n      - source_labels: [__meta_kubernetes_pod_label_app]\n        regex: \"nginx|api-server\"  # 只抓取带有 app=nginx 或 app=api-server 标签的 Pod\n        action: keep\n\n\n# 仅启用 cpu 和 meminfo 收集器;不好用\nnode_exporter \\\n  --collector.cpu \\\n  --collector.meminfo \\\n  --no-collector.diskstats \\\n  --no-collector.netdev \\\n  --no-collector.filesystem \\\n  # 禁用其他所有收集器...\n```\n\n# file_sd\n可以基于文件动态更新 prometheus 的监控节点\n```json\n#文件类型/etc/prometheus/targets/nodes.json\n[\n  {\n    \"targets\": [\"192.168.1.10:9100\"],  # 监控目标地址（IP:Port）\n    \"labels\": {                        # 自定义标签（可选）\n      \"env\": \"prod\",\n      \"role\": \"web-server\"\n    }\n  },\n  {\n    \"targets\": [\"192.168.1.11:9100\",\"192.168.3.11:9100\"],\n    \"labels\": {\n      \"env\": \"staging\",\n      \"role\": \"db-server\"\n    }\n  }\n]\n#prometheus配置\nscrape_configs:\n  - job_name: \"node-exporter\"            # 任务名称\n    file_sd_configs:                     # 启用 file_sd\n      - files:\n          - \"/etc/prometheus/targets/*.json\"  # 目标文件路径（支持通配符）\n          - \"/etc/prometheus/targets/mysql-exporters/*.json\" # MySQL 监控\n        refresh_interval: 5m             # 重新加载间隔（默认 5m）\n\n```\n# node exporter textfile\n```shell\n#!/bin/bash\n\nDURATION=15         # 默认抓包时长（建议比 cron 间隔稍短）\nINTERFACE=\"eth0\"\nOUTPUT_FILE=\"/tmp/traffic.pcap\"\nMETRICS_FILE=\"/etc/node-exporter/textfile-collector/network_traffic.prom\"  # Node Exporter 收集目录\n\n# 安装依赖（如未安装）\nif ! command -v tcpdump &>/dev/null || ! command -v tshark &>/dev/null; then\n    echo \"安装依赖: tcpdump 和 tshark...\"\n    sudo apt-get update && sudo apt-get install -y tcpdump tshark\nfi\n\n# 捕获流量\nsudo timeout $DURATION tcpdump -i $INTERFACE -w $OUTPUT_FILE >/dev/null 2>&1\n\n# 生成 Prometheus 格式的指标\nsudo tshark -r $OUTPUT_FILE -T fields -e ip.src -e ip.dst -e frame.len 2>/dev/null \\\n  | awk '\n    BEGIN {\n        total_bytes = 0\n        delete bytes  # 清空数组\n    }\n    {\n        bytes[$1] += $3;  # 源IP统计\n        bytes[$2] += $3;  # 目的IP统计\n        total_bytes += $3\n    }\n    END {\n        # 输出总流量指标\n        print \"network_traffic_total_bytes \" total_bytes\n\n        # 输出每个IP的流量指标\n        for (ip in bytes) {\n            if (ip != \"\") {  # 过滤空值\n                printf \"network_traffic_bytes{ip=\\\"%s\\\"} %d\\n\", ip, bytes[ip]\n            }\n        }\n    }' > \"$METRICS_FILE.$$\"  # 先写入临时文件\n\n# 原子操作替换文件（避免读取半成品）\nsudo mv \"$METRICS_FILE.$$\" \"$METRICS_FILE\"\n\n# 清理\nsudo rm -f \"$OUTPUT_FILE\"\n\n\n./node_exporter  --web.listen-address=\":900\" --collector.textfile.directory=/etc/node-exporter/textfile-collector/\n```\n\n\n\n\n\n\n\n# blackbox_exporter\n```yml\n#blackbox.yml配置，prober类型可以自定义http,tcp,icmp,dns\nmodules:\n  http_2xx:\n    prober: http\n    timeout: 5s\n    http:\n      valid_http_versions: [\"HTTP/1.1\", \"HTTP/2\"]\n      valid_status_codes: [200]\n      method: GET\n      preferred_ip_protocol: \"ip4\"\n\n  ssh_banner_check:  # 自定义模块名\n    prober: tcp\n    timeout: 10s\n    tcp:\n      query_response:\n        - expect: \"^SSH-2.0-OpenSSH\"\n          send: \"SSH-2.0-blackbox-ssh-check\"\n      preferred_ip_protocol: \"ip4\"\n\n\n# prometheus集成\nscrape_configs:\n - job_name: 'blackbox-http'\n    metrics_path: /probe\n    params:\n      module: [http_2xx]\n    static_configs:\n      - targets:\n        - https://qq.com\n        - https://google.com\n    relabel_configs: &common_relabel\n      - source_labels: [__address__]\n        target_label: __param_target\n      - source_labels: [__param_target]\n        target_label: instance\n      - target_label: __address__\n        replacement: blackbox-exporter:9115\n\n  - job_name: 'blackbox-ssh'\n    metrics_path: /probe\n    params:\n      module: [ssh_banner_check]  # 对应TCP模块\n    static_configs:\n      - targets:\n        - '127.0.0.1:22'\n        - '10.0.1.122:22'\n    relabel_configs: *common_relabel\n\n#relabel_configs配置解析\nPrometheus 抓取任务生成\n│\n├─ 原始目标: example.com:80\n│  │\n│  ├─ relabel 规则1: 将地址赋值给 __param_target → ?target=example.com:80\n│  ├─ relabel 规则2: 用 __param_target 标记 instance → instance=\"example.com:80\"\n│  └─ relabel 规则3: 重写地址 → 实际请求发送到 Blackbox Exporter\n│     │\n│     └─ Blackbox Exporter 收到请求，解析参数后探测 example.com:80\n│\n└─ 原始目标: google.com:443\n   └─ 同理生成请求 http://192.168.100.100:9115/probe?target=google.com:443&module=http_2xx\n\n\n#告警ing\nprobe_success{job=\"blackbox-http\"} == 0\n#状态码\nprobe_http_status_code{job=\"blackbox-http\"} < 200 or probe_http_status_code{job=\"blackbox-http\"} >= 300\n#证书过期时间\nprobe_ssl_earliest_cert_expiry{job=\"blackbox-http\"} - time() < 86400 * 30  # 30天\n#tcp端口是否通\nprobe_success{job=\"blackbox-tcp\"} == 0\n#响应时长\nprobe_duration_seconds{job=\"blackbox-http\"} > 1\n#解析时长\nprobe_dns_lookup_time_seconds\n```\n\n\n\n\n\n# process-exporter\n```yml\n{{.Comm}} 包含原始可执行文件的基本名称，即 /proc/<pid>/stat 中的第 2 个字段，并截取前15个字符\n{{.ExeBase}} 包含可执行文件的基本名称  \n{{.ExeFull}} 包含可执行文件的完全限定路径  \n{{.Username}} 包含有效用户的用户名  \n{{.Matches}} map 包含应用 cmdline 正则表达式产生的所有匹配项\n{{.PID}} 包含进程的 PID。请注意，使用 PID 意味着该组将仅包含一个进程\n{{.StartTime}} 包含进程的开始时间。这与 PID 结合使用时非常有用，因为 PID 会随着时间的推移而被重用。\n{{.Cgroups}} 包含（如果支持）进程的 cgroups （/proc/self/cgroup）。这对于识别进程属于哪个容器特别有用\n\n#process-exporter.yml\n#常用的就comm和exefull,matches\nprocess_names:\n  #- name: \"{{.ExeFull}}\" \n  #  cmdline:\n  #  - '.+'  # 正则表达式（匹配任何非空内容）不常用太多了影响资源消耗\n  - name: \"{{.Comm}}\" #groupname=\"docker\"\n    cmdline:\n    - 'docker*' \n  - name: \"{{.Matches}}\" #groupname=\"map[:nginx]\"\n    cmdline:\n    - 'nginx*' \n  - name: \"{{.ExeFull}}\"  #groupname=\"/usr/sbin/mysqld\n    cmdline:\n    - 'mysql*'\n                \n\n\n\n\n#告警...\nnamedprocess_namegroup_num_procs{groupname!~\".*process-exporter.*\"} == 0\nnamedprocess_namegroup_states{state=\"Z\"} > 0\nnamedprocess_namegroup_num_procs{groupname=\"nginx\"} == 0\n#cpu百分比\n100 * rate(namedprocess_namegroup_cpu_seconds_total{groupname=\"java\"}[5m])\n100 * rate(namedprocess_namegroup_cpu_seconds_total{}[5m]) > 50\n\n#内存 mb\nnamedprocess_namegroup_memory_bytes{groupname=\"java\"} / 1024^2\n除于\n#节点内存 就是占用内存百分比\nnode_memory_MemTotal_bytes / 1024 / 1024 \n\n# 读速率 MB/S\nrate(namedprocess_namegroup_read_bytes_total{groupname=\"mysql\"}[5m]) / 1024^2\n\n# 写速率\nrate(namedprocess_namegroup_write_bytes_total{groupname=\"mysql\"}[5m]) / 1024^2\n\n\n```\n\n# prometheus联邦\n* 数量较多的情况下从多个下级 Prometheus 实例中提取特定指标，汇总到中心 Prometheus\n```yml\n\n                Central Prometheus\n                        ↑\n        从多个下级拉取聚合后的指标\n                        |\n        +---------------+---------------+\n        |               |               |\n   Region A       Region B       Region C\n   Prometheus    Prometheus    Prometheus\n\n\nscrape_configs:\n  - job_name: 'federate-regions'        # 任务名称\n    scrape_interval: 1m                # 建议比下级采集间隔长\n    honor_labels: true                 # 保留下级标签（避免覆盖）\n    metrics_path: '/federate'          # 联邦接口路径\n    params:\n      'match[]':\n        - '{job=\"api-server\"}'         # 拉取下级的指定 job 指标\n        - '{__name__=~\"job:.*\"}'\n        - 'up{instance=~\".+\"}'         # 拉取所有下级实例的 up 状态\n    static_configs:\n      - targets:\n          - 'prometheus-region-a:9090' # 下级 Prometheus 地址\n          - 'prometheus-region-b:9090'\n          - 'prometheus-region-c:9090'\n\nmatch[] 过滤条件\n精确匹配：'{job=\"mysql\"}' 拉取所有 job=mysql 的指标。\n正则匹配：'__name__=~\"http_request_.+\"' 拉取以 http_request_ 开头的指标。\n组合条件：'{env=\"prod\", app=~\"web|api\"}' 拉取 prod 环境下 web 或 api 应用的指标。\n```\n","source":"_posts/prometheus进阶.md","raw":"---\ntitle: prometheus进阶\ndate: 2025-08-22 15:25:19\ntags:\ncategories: prometheus\n---\n# deploy\n```yml\n#!/bin/bash\n\n# 创建目录结构\nmkdir -p monitoring/prometheus\ncd monitoring\n\n# 生成docker-compose.yml,node和process必须使用host宿主机网络，不然很多指标只能采集到容器里面的信息不准确\ncat > docker-compose.yml << EOF\nversion: '3.8'\n\nnetworks:\n  monitoring:\n    driver: bridge\n\nservices:\n  prometheus:\n    image: registry.cn-hangzhou.aliyuncs.com/lky-deploy/prometheus:v2.40.7\n    container_name: prometheus\n    restart: unless-stopped\n    ports:\n      - \"9090:9090\"\n    volumes:\n      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml\n      - prom_data:/prometheus\n    networks:\n      - monitoring\n    command:\n      - '--config.file=/etc/prometheus/prometheus.yml'\n      - '--storage.tsdb.retention.time=30d'\n      - '--web.enable-lifecycle' #curl -X POST http://localhost:9090/-/reload\n\n  node-exporter:\n    image: registry.cn-hangzhou.aliyuncs.com/lky-deploy/nodeexporter:v1.9.1\n    container_name: node-exporter\n    restart: unless-stopped\n    command:\n      - '--path.rootfs=/host'\n      - '--web.listen-address=:9400'\n   # networks:  # 加入监控网络\n    #  - monitoring\n    network_mode: host  # 使用host网络\n    pid: host\n    volumes:\n      - /:/host:ro,rslave\n\n  blackbox-exporter:\n    image: registry.cn-hangzhou.aliyuncs.com/lky-deploy/nodeexporter:blackbox-exporterv0.27.0\n    container_name: blackbox-exporter\n    restart: unless-stopped\n    ports:\n      - \"9115:9115\"\n    networks:\n      - monitoring\n    volumes:\n      - ./blackbox.yml:/etc/blackbox_exporter/config.yml\n    command:\n      - '--config.file=/etc/blackbox_exporter/config.yml'\n\n  process-exporter:\n    image: registry.cn-hangzhou.aliyuncs.com/lky-deploy/nodeexporter:process-exporter-v0.8.7\n    container_name: process-exporter\n    restart: unless-stopped\n    network_mode: host  # 使用host网络\n   # networks:\n   #   - monitoring  # 使用统一网络\n    ports:\n      - \"9256:9256\"  # 添加端口映射\n    volumes:\n      - /proc:/host/proc:ro\n      - ./process-exporter.yml:/config.yml\n    command:\n      - '-config.path=/config.yml'\n      - '-procfs=/host/proc'\n\nvolumes:\n  prom_data:\nEOF\n\n# 生成Prometheus配置\ncat > prometheus/prometheus.yml <<EOF\nglobal:\n  scrape_interval: 15s\n  evaluation_interval: 15s\n\nscrape_configs:\n  - job_name: 'prometheus'\n    static_configs:\n      - targets: ['localhost:9090']\n\n  - job_name: 'node'\n    static_configs:\n      - targets: ['node-exporter:9400'] #host模式需要换成宿主机ip\n  - job_name: 'blackbox-http'\n    metrics_path: /probe\n    params:\n      module: [http_2xx]\n    static_configs:\n      - targets:\n        - https://qq.com\n        - https://google.com\n    relabel_configs:\n      - source_labels: [__address__]\n        target_label: __param_target\n      - source_labels: [__param_target]\n        target_label: instance\n      - target_label: __address__\n        replacement: blackbox-exporter:9115\n\n  - job_name: 'process-exporter'\n    static_configs:\n      - targets: ['process-exporter:9256'] #host模式需要换成宿主机ip\nEOF\n\n# 生成Blackbox配置\ncat > blackbox.yml <<EOF\nmodules:\n  http_2xx:\n    prober: http\n    timeout: 5s\n    http:\n      valid_http_versions: [\"HTTP/1.1\", \"HTTP/2\"]\n      valid_status_codes: [200]\n      method: GET\n      preferred_ip_protocol: \"ip4\"\nEOF\n\n# 生成Process Exporter配置\ncat > process-exporter.yml <<EOF\nprocess_names:\n  - name: \"{{.Comm}}\"\n    cmdline:\n    - '.+'  # 正则表达式（匹配任何非空内容）\n  #- name: \"{{.Matches}}\"\n #   cmdline:\n #     - 'nginx'  # 只监控 nginx 进程\n # - name: \"{{.Matches}}\"\n  #  cmdline:\n  #    - 'docker'  # 只监控 docker 进程\nEOF\n\n# 启动服务\ndocker compose up -d\n\necho -e \"\\n\\033[32m部署完成！以下是访问信息：\\033[0m\"\necho \"Prometheus:     http://localhost:9090\"\necho \"Node Exporter:  http://localhost:9100/metrics\"\necho \"Blackbox:       http://localhost:9115/metrics\"\necho \"Process-Exporter: http://localhost:9256/metrics\"\necho -e \"\\n请修改以下配置文件后重启服务：\"\necho \"- blackbox.yml 中的监控目标\"\necho \"- process-exporter.yml 中的进程过滤规则\"\n\n```\n\n\n# 如果节点较多prometheus对所有指标的采集会对负载和磁盘占用较多，可以通过relabel drop不需要的指标，减轻负担\n```yaml\n#relabel_configs\t抓取前，针对target\n#metric_relabel_configs 抓取后，针对指标名称\nscrape_configs:\n  - job_name: 'node-drop' \n    static_configs:\n      - targets: ['localhost:9100']\n    metric_relabel_configs:\n      - source_labels: [__name__]\n        regex: '^(node_cpu_seconds_total|node_memory_.*|node_disk_.*|node_network_.*)$'\n        action: keep\n  - job_name: 'node'\n    static_configs:\n      - targets: ['node1:9100', 'node2:9100','master:9100']\n    relabel_configs:\n      # 根据目标地址动态添加 environment 标签\n      - source_labels: [__address__]\n        regex: 'node1:9100'\n        replacement: 'prod'\n        target_label: environment\n      - source_labels: [__address__]\n        regex: 'node2:9100'\n        replacement: 'staging'\n        target_label: environment\n      # 只保留主机名包含 \"node\" 的目标\n      - source_labels: [__address__]\n        regex: 'node[0-9]+:9100'  # 正则匹配 node1, node2 等\n        action: keep\n      - source_labels: [__meta_kubernetes_pod_label_app]\n        regex: \"nginx|api-server\"  # 只抓取带有 app=nginx 或 app=api-server 标签的 Pod\n        action: keep\n\n\n# 仅启用 cpu 和 meminfo 收集器;不好用\nnode_exporter \\\n  --collector.cpu \\\n  --collector.meminfo \\\n  --no-collector.diskstats \\\n  --no-collector.netdev \\\n  --no-collector.filesystem \\\n  # 禁用其他所有收集器...\n```\n\n# file_sd\n可以基于文件动态更新 prometheus 的监控节点\n```json\n#文件类型/etc/prometheus/targets/nodes.json\n[\n  {\n    \"targets\": [\"192.168.1.10:9100\"],  # 监控目标地址（IP:Port）\n    \"labels\": {                        # 自定义标签（可选）\n      \"env\": \"prod\",\n      \"role\": \"web-server\"\n    }\n  },\n  {\n    \"targets\": [\"192.168.1.11:9100\",\"192.168.3.11:9100\"],\n    \"labels\": {\n      \"env\": \"staging\",\n      \"role\": \"db-server\"\n    }\n  }\n]\n#prometheus配置\nscrape_configs:\n  - job_name: \"node-exporter\"            # 任务名称\n    file_sd_configs:                     # 启用 file_sd\n      - files:\n          - \"/etc/prometheus/targets/*.json\"  # 目标文件路径（支持通配符）\n          - \"/etc/prometheus/targets/mysql-exporters/*.json\" # MySQL 监控\n        refresh_interval: 5m             # 重新加载间隔（默认 5m）\n\n```\n# node exporter textfile\n```shell\n#!/bin/bash\n\nDURATION=15         # 默认抓包时长（建议比 cron 间隔稍短）\nINTERFACE=\"eth0\"\nOUTPUT_FILE=\"/tmp/traffic.pcap\"\nMETRICS_FILE=\"/etc/node-exporter/textfile-collector/network_traffic.prom\"  # Node Exporter 收集目录\n\n# 安装依赖（如未安装）\nif ! command -v tcpdump &>/dev/null || ! command -v tshark &>/dev/null; then\n    echo \"安装依赖: tcpdump 和 tshark...\"\n    sudo apt-get update && sudo apt-get install -y tcpdump tshark\nfi\n\n# 捕获流量\nsudo timeout $DURATION tcpdump -i $INTERFACE -w $OUTPUT_FILE >/dev/null 2>&1\n\n# 生成 Prometheus 格式的指标\nsudo tshark -r $OUTPUT_FILE -T fields -e ip.src -e ip.dst -e frame.len 2>/dev/null \\\n  | awk '\n    BEGIN {\n        total_bytes = 0\n        delete bytes  # 清空数组\n    }\n    {\n        bytes[$1] += $3;  # 源IP统计\n        bytes[$2] += $3;  # 目的IP统计\n        total_bytes += $3\n    }\n    END {\n        # 输出总流量指标\n        print \"network_traffic_total_bytes \" total_bytes\n\n        # 输出每个IP的流量指标\n        for (ip in bytes) {\n            if (ip != \"\") {  # 过滤空值\n                printf \"network_traffic_bytes{ip=\\\"%s\\\"} %d\\n\", ip, bytes[ip]\n            }\n        }\n    }' > \"$METRICS_FILE.$$\"  # 先写入临时文件\n\n# 原子操作替换文件（避免读取半成品）\nsudo mv \"$METRICS_FILE.$$\" \"$METRICS_FILE\"\n\n# 清理\nsudo rm -f \"$OUTPUT_FILE\"\n\n\n./node_exporter  --web.listen-address=\":900\" --collector.textfile.directory=/etc/node-exporter/textfile-collector/\n```\n\n\n\n\n\n\n\n# blackbox_exporter\n```yml\n#blackbox.yml配置，prober类型可以自定义http,tcp,icmp,dns\nmodules:\n  http_2xx:\n    prober: http\n    timeout: 5s\n    http:\n      valid_http_versions: [\"HTTP/1.1\", \"HTTP/2\"]\n      valid_status_codes: [200]\n      method: GET\n      preferred_ip_protocol: \"ip4\"\n\n  ssh_banner_check:  # 自定义模块名\n    prober: tcp\n    timeout: 10s\n    tcp:\n      query_response:\n        - expect: \"^SSH-2.0-OpenSSH\"\n          send: \"SSH-2.0-blackbox-ssh-check\"\n      preferred_ip_protocol: \"ip4\"\n\n\n# prometheus集成\nscrape_configs:\n - job_name: 'blackbox-http'\n    metrics_path: /probe\n    params:\n      module: [http_2xx]\n    static_configs:\n      - targets:\n        - https://qq.com\n        - https://google.com\n    relabel_configs: &common_relabel\n      - source_labels: [__address__]\n        target_label: __param_target\n      - source_labels: [__param_target]\n        target_label: instance\n      - target_label: __address__\n        replacement: blackbox-exporter:9115\n\n  - job_name: 'blackbox-ssh'\n    metrics_path: /probe\n    params:\n      module: [ssh_banner_check]  # 对应TCP模块\n    static_configs:\n      - targets:\n        - '127.0.0.1:22'\n        - '10.0.1.122:22'\n    relabel_configs: *common_relabel\n\n#relabel_configs配置解析\nPrometheus 抓取任务生成\n│\n├─ 原始目标: example.com:80\n│  │\n│  ├─ relabel 规则1: 将地址赋值给 __param_target → ?target=example.com:80\n│  ├─ relabel 规则2: 用 __param_target 标记 instance → instance=\"example.com:80\"\n│  └─ relabel 规则3: 重写地址 → 实际请求发送到 Blackbox Exporter\n│     │\n│     └─ Blackbox Exporter 收到请求，解析参数后探测 example.com:80\n│\n└─ 原始目标: google.com:443\n   └─ 同理生成请求 http://192.168.100.100:9115/probe?target=google.com:443&module=http_2xx\n\n\n#告警ing\nprobe_success{job=\"blackbox-http\"} == 0\n#状态码\nprobe_http_status_code{job=\"blackbox-http\"} < 200 or probe_http_status_code{job=\"blackbox-http\"} >= 300\n#证书过期时间\nprobe_ssl_earliest_cert_expiry{job=\"blackbox-http\"} - time() < 86400 * 30  # 30天\n#tcp端口是否通\nprobe_success{job=\"blackbox-tcp\"} == 0\n#响应时长\nprobe_duration_seconds{job=\"blackbox-http\"} > 1\n#解析时长\nprobe_dns_lookup_time_seconds\n```\n\n\n\n\n\n# process-exporter\n```yml\n{{.Comm}} 包含原始可执行文件的基本名称，即 /proc/<pid>/stat 中的第 2 个字段，并截取前15个字符\n{{.ExeBase}} 包含可执行文件的基本名称  \n{{.ExeFull}} 包含可执行文件的完全限定路径  \n{{.Username}} 包含有效用户的用户名  \n{{.Matches}} map 包含应用 cmdline 正则表达式产生的所有匹配项\n{{.PID}} 包含进程的 PID。请注意，使用 PID 意味着该组将仅包含一个进程\n{{.StartTime}} 包含进程的开始时间。这与 PID 结合使用时非常有用，因为 PID 会随着时间的推移而被重用。\n{{.Cgroups}} 包含（如果支持）进程的 cgroups （/proc/self/cgroup）。这对于识别进程属于哪个容器特别有用\n\n#process-exporter.yml\n#常用的就comm和exefull,matches\nprocess_names:\n  #- name: \"{{.ExeFull}}\" \n  #  cmdline:\n  #  - '.+'  # 正则表达式（匹配任何非空内容）不常用太多了影响资源消耗\n  - name: \"{{.Comm}}\" #groupname=\"docker\"\n    cmdline:\n    - 'docker*' \n  - name: \"{{.Matches}}\" #groupname=\"map[:nginx]\"\n    cmdline:\n    - 'nginx*' \n  - name: \"{{.ExeFull}}\"  #groupname=\"/usr/sbin/mysqld\n    cmdline:\n    - 'mysql*'\n                \n\n\n\n\n#告警...\nnamedprocess_namegroup_num_procs{groupname!~\".*process-exporter.*\"} == 0\nnamedprocess_namegroup_states{state=\"Z\"} > 0\nnamedprocess_namegroup_num_procs{groupname=\"nginx\"} == 0\n#cpu百分比\n100 * rate(namedprocess_namegroup_cpu_seconds_total{groupname=\"java\"}[5m])\n100 * rate(namedprocess_namegroup_cpu_seconds_total{}[5m]) > 50\n\n#内存 mb\nnamedprocess_namegroup_memory_bytes{groupname=\"java\"} / 1024^2\n除于\n#节点内存 就是占用内存百分比\nnode_memory_MemTotal_bytes / 1024 / 1024 \n\n# 读速率 MB/S\nrate(namedprocess_namegroup_read_bytes_total{groupname=\"mysql\"}[5m]) / 1024^2\n\n# 写速率\nrate(namedprocess_namegroup_write_bytes_total{groupname=\"mysql\"}[5m]) / 1024^2\n\n\n```\n\n# prometheus联邦\n* 数量较多的情况下从多个下级 Prometheus 实例中提取特定指标，汇总到中心 Prometheus\n```yml\n\n                Central Prometheus\n                        ↑\n        从多个下级拉取聚合后的指标\n                        |\n        +---------------+---------------+\n        |               |               |\n   Region A       Region B       Region C\n   Prometheus    Prometheus    Prometheus\n\n\nscrape_configs:\n  - job_name: 'federate-regions'        # 任务名称\n    scrape_interval: 1m                # 建议比下级采集间隔长\n    honor_labels: true                 # 保留下级标签（避免覆盖）\n    metrics_path: '/federate'          # 联邦接口路径\n    params:\n      'match[]':\n        - '{job=\"api-server\"}'         # 拉取下级的指定 job 指标\n        - '{__name__=~\"job:.*\"}'\n        - 'up{instance=~\".+\"}'         # 拉取所有下级实例的 up 状态\n    static_configs:\n      - targets:\n          - 'prometheus-region-a:9090' # 下级 Prometheus 地址\n          - 'prometheus-region-b:9090'\n          - 'prometheus-region-c:9090'\n\nmatch[] 过滤条件\n精确匹配：'{job=\"mysql\"}' 拉取所有 job=mysql 的指标。\n正则匹配：'__name__=~\"http_request_.+\"' 拉取以 http_request_ 开头的指标。\n组合条件：'{env=\"prod\", app=~\"web|api\"}' 拉取 prod 环境下 web 或 api 应用的指标。\n```\n","slug":"prometheus进阶","published":1,"updated":"2025-08-28T06:39:18.220Z","comments":1,"layout":"post","photos":[],"_id":"cmev1ggc4000phllz1q8x7eke","content":"<h1 id=\"deploy\"><a href=\"#deploy\" class=\"headerlink\" title=\"deploy\"></a>deploy</h1><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建目录结构</span></span><br><span class=\"line\"><span class=\"string\">mkdir</span> <span class=\"string\">-p</span> <span class=\"string\">monitoring/prometheus</span></span><br><span class=\"line\"><span class=\"string\">cd</span> <span class=\"string\">monitoring</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成docker-compose.yml,node和process必须使用host宿主机网络，不然很多指标只能采集到容器里面的信息不准确</span></span><br><span class=\"line\"><span class=\"string\">cat</span> <span class=\"string\">&gt;</span> <span class=\"string\">docker-compose.yml</span> <span class=\"string\">&lt;&lt;</span> <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;3.8&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">networks:</span></span><br><span class=\"line\">  <span class=\"attr\">monitoring:</span></span><br><span class=\"line\">    <span class=\"attr\">driver:</span> <span class=\"string\">bridge</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">prometheus:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">registry.cn-hangzhou.aliyuncs.com/lky-deploy/prometheus:v2.40.7</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">prometheus</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">unless-stopped</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;9090:9090&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">prom_data:/prometheus</span></span><br><span class=\"line\">    <span class=\"attr\">networks:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">monitoring</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&#x27;--config.file=/etc/prometheus/prometheus.yml&#x27;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&#x27;--storage.tsdb.retention.time=30d&#x27;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&#x27;--web.enable-lifecycle&#x27;</span> <span class=\"comment\">#curl -X POST http://localhost:9090/-/reload</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">node-exporter:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">registry.cn-hangzhou.aliyuncs.com/lky-deploy/nodeexporter:v1.9.1</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">node-exporter</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">unless-stopped</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&#x27;--path.rootfs=/host&#x27;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&#x27;--web.listen-address=:9400&#x27;</span></span><br><span class=\"line\">   <span class=\"comment\"># networks:  # 加入监控网络</span></span><br><span class=\"line\">    <span class=\"comment\">#  - monitoring</span></span><br><span class=\"line\">    <span class=\"attr\">network_mode:</span> <span class=\"string\">host</span>  <span class=\"comment\"># 使用host网络</span></span><br><span class=\"line\">    <span class=\"attr\">pid:</span> <span class=\"string\">host</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/:/host:ro,rslave</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">blackbox-exporter:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">registry.cn-hangzhou.aliyuncs.com/lky-deploy/nodeexporter:blackbox-exporterv0.27.0</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">blackbox-exporter</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">unless-stopped</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;9115:9115&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">networks:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">monitoring</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./blackbox.yml:/etc/blackbox_exporter/config.yml</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&#x27;--config.file=/etc/blackbox_exporter/config.yml&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">process-exporter:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">registry.cn-hangzhou.aliyuncs.com/lky-deploy/nodeexporter:process-exporter-v0.8.7</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">process-exporter</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">unless-stopped</span></span><br><span class=\"line\">    <span class=\"attr\">network_mode:</span> <span class=\"string\">host</span>  <span class=\"comment\"># 使用host网络</span></span><br><span class=\"line\">   <span class=\"comment\"># networks:</span></span><br><span class=\"line\">   <span class=\"comment\">#   - monitoring  # 使用统一网络</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;9256:9256&quot;</span>  <span class=\"comment\"># 添加端口映射</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/proc:/host/proc:ro</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./process-exporter.yml:/config.yml</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&#x27;-config.path=/config.yml&#x27;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&#x27;-procfs=/host/proc&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">volumes:</span></span><br><span class=\"line\">  <span class=\"attr\">prom_data:</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成Prometheus配置</span></span><br><span class=\"line\"><span class=\"string\">cat</span> <span class=\"string\">&gt;</span> <span class=\"string\">prometheus/prometheus.yml</span> <span class=\"string\">&lt;&lt;EOF</span></span><br><span class=\"line\"><span class=\"attr\">global:</span></span><br><span class=\"line\">  <span class=\"attr\">scrape_interval:</span> <span class=\"string\">15s</span></span><br><span class=\"line\">  <span class=\"attr\">evaluation_interval:</span> <span class=\"string\">15s</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">scrape_configs:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">&#x27;prometheus&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">static_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">targets:</span> [<span class=\"string\">&#x27;localhost:9090&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">&#x27;node&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">static_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">targets:</span> [<span class=\"string\">&#x27;node-exporter:9400&#x27;</span>] <span class=\"comment\">#host模式需要换成宿主机ip</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">&#x27;blackbox-http&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">metrics_path:</span> <span class=\"string\">/probe</span></span><br><span class=\"line\">    <span class=\"attr\">params:</span></span><br><span class=\"line\">      <span class=\"attr\">module:</span> [<span class=\"string\">http_2xx</span>]</span><br><span class=\"line\">    <span class=\"attr\">static_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">targets:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">https://qq.com</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">https://google.com</span></span><br><span class=\"line\">    <span class=\"attr\">relabel_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">source_labels:</span> [<span class=\"string\">__address__</span>]</span><br><span class=\"line\">        <span class=\"attr\">target_label:</span> <span class=\"string\">__param_target</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">source_labels:</span> [<span class=\"string\">__param_target</span>]</span><br><span class=\"line\">        <span class=\"attr\">target_label:</span> <span class=\"string\">instance</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">target_label:</span> <span class=\"string\">__address__</span></span><br><span class=\"line\">        <span class=\"attr\">replacement:</span> <span class=\"string\">blackbox-exporter:9115</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">&#x27;process-exporter&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">static_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">targets:</span> [<span class=\"string\">&#x27;process-exporter:9256&#x27;</span>] <span class=\"comment\">#host模式需要换成宿主机ip</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成Blackbox配置</span></span><br><span class=\"line\"><span class=\"string\">cat</span> <span class=\"string\">&gt;</span> <span class=\"string\">blackbox.yml</span> <span class=\"string\">&lt;&lt;EOF</span></span><br><span class=\"line\"><span class=\"attr\">modules:</span></span><br><span class=\"line\">  <span class=\"attr\">http_2xx:</span></span><br><span class=\"line\">    <span class=\"attr\">prober:</span> <span class=\"string\">http</span></span><br><span class=\"line\">    <span class=\"attr\">timeout:</span> <span class=\"string\">5s</span></span><br><span class=\"line\">    <span class=\"attr\">http:</span></span><br><span class=\"line\">      <span class=\"attr\">valid_http_versions:</span> [<span class=\"string\">&quot;HTTP/1.1&quot;</span>, <span class=\"string\">&quot;HTTP/2&quot;</span>]</span><br><span class=\"line\">      <span class=\"attr\">valid_status_codes:</span> [<span class=\"number\">200</span>]</span><br><span class=\"line\">      <span class=\"attr\">method:</span> <span class=\"string\">GET</span></span><br><span class=\"line\">      <span class=\"attr\">preferred_ip_protocol:</span> <span class=\"string\">&quot;ip4&quot;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成Process Exporter配置</span></span><br><span class=\"line\"><span class=\"string\">cat</span> <span class=\"string\">&gt;</span> <span class=\"string\">process-exporter.yml</span> <span class=\"string\">&lt;&lt;EOF</span></span><br><span class=\"line\"><span class=\"attr\">process_names:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123;.Comm&#125;&#125;</span>&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">cmdline:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;.+&#x27;</span>  <span class=\"comment\"># 正则表达式（匹配任何非空内容）</span></span><br><span class=\"line\">  <span class=\"comment\">#- name: &quot;&#123;&#123;.Matches&#125;&#125;&quot;</span></span><br><span class=\"line\"> <span class=\"comment\">#   cmdline:</span></span><br><span class=\"line\"> <span class=\"comment\">#     - &#x27;nginx&#x27;  # 只监控 nginx 进程</span></span><br><span class=\"line\"> <span class=\"comment\"># - name: &quot;&#123;&#123;.Matches&#125;&#125;&quot;</span></span><br><span class=\"line\">  <span class=\"comment\">#  cmdline:</span></span><br><span class=\"line\">  <span class=\"comment\">#    - &#x27;docker&#x27;  # 只监控 docker 进程</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动服务</span></span><br><span class=\"line\"><span class=\"string\">docker</span> <span class=\"string\">compose</span> <span class=\"string\">up</span> <span class=\"string\">-d</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">echo</span> <span class=\"string\">-e</span> <span class=\"string\">&quot;\\n\\033[32m部署完成！以下是访问信息：\\033[0m&quot;</span></span><br><span class=\"line\"><span class=\"string\">echo</span> <span class=\"string\">&quot;Prometheus:     http://localhost:9090&quot;</span></span><br><span class=\"line\"><span class=\"string\">echo</span> <span class=\"string\">&quot;Node Exporter:  http://localhost:9100/metrics&quot;</span></span><br><span class=\"line\"><span class=\"string\">echo</span> <span class=\"string\">&quot;Blackbox:       http://localhost:9115/metrics&quot;</span></span><br><span class=\"line\"><span class=\"string\">echo</span> <span class=\"string\">&quot;Process-Exporter: http://localhost:9256/metrics&quot;</span></span><br><span class=\"line\"><span class=\"string\">echo</span> <span class=\"string\">-e</span> <span class=\"string\">&quot;\\n请修改以下配置文件后重启服务：&quot;</span></span><br><span class=\"line\"><span class=\"string\">echo</span> <span class=\"string\">&quot;- blackbox.yml 中的监控目标&quot;</span></span><br><span class=\"line\"><span class=\"string\">echo</span> <span class=\"string\">&quot;- process-exporter.yml 中的进程过滤规则&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"如果节点较多prometheus对所有指标的采集会对负载和磁盘占用较多，可以通过relabel-drop不需要的指标，减轻负担\"><a href=\"#如果节点较多prometheus对所有指标的采集会对负载和磁盘占用较多，可以通过relabel-drop不需要的指标，减轻负担\" class=\"headerlink\" title=\"如果节点较多prometheus对所有指标的采集会对负载和磁盘占用较多，可以通过relabel drop不需要的指标，减轻负担\"></a>如果节点较多prometheus对所有指标的采集会对负载和磁盘占用较多，可以通过relabel drop不需要的指标，减轻负担</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#relabel_configs\t抓取前，针对target</span></span><br><span class=\"line\"><span class=\"comment\">#metric_relabel_configs 抓取后，针对指标名称</span></span><br><span class=\"line\"><span class=\"attr\">scrape_configs:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">&#x27;node-drop&#x27;</span> </span><br><span class=\"line\">    <span class=\"attr\">static_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">targets:</span> [<span class=\"string\">&#x27;localhost:9100&#x27;</span>]</span><br><span class=\"line\">    <span class=\"attr\">metric_relabel_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">source_labels:</span> [<span class=\"string\">__name__</span>]</span><br><span class=\"line\">        <span class=\"attr\">regex:</span> <span class=\"string\">&#x27;^(node_cpu_seconds_total|node_memory_.*|node_disk_.*|node_network_.*)$&#x27;</span></span><br><span class=\"line\">        <span class=\"attr\">action:</span> <span class=\"string\">keep</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">&#x27;node&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">static_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">targets:</span> [<span class=\"string\">&#x27;node1:9100&#x27;</span>, <span class=\"string\">&#x27;node2:9100&#x27;</span>,<span class=\"string\">&#x27;master:9100&#x27;</span>]</span><br><span class=\"line\">    <span class=\"attr\">relabel_configs:</span></span><br><span class=\"line\">      <span class=\"comment\"># 根据目标地址动态添加 environment 标签</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">source_labels:</span> [<span class=\"string\">__address__</span>]</span><br><span class=\"line\">        <span class=\"attr\">regex:</span> <span class=\"string\">&#x27;node1:9100&#x27;</span></span><br><span class=\"line\">        <span class=\"attr\">replacement:</span> <span class=\"string\">&#x27;prod&#x27;</span></span><br><span class=\"line\">        <span class=\"attr\">target_label:</span> <span class=\"string\">environment</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">source_labels:</span> [<span class=\"string\">__address__</span>]</span><br><span class=\"line\">        <span class=\"attr\">regex:</span> <span class=\"string\">&#x27;node2:9100&#x27;</span></span><br><span class=\"line\">        <span class=\"attr\">replacement:</span> <span class=\"string\">&#x27;staging&#x27;</span></span><br><span class=\"line\">        <span class=\"attr\">target_label:</span> <span class=\"string\">environment</span></span><br><span class=\"line\">      <span class=\"comment\"># 只保留主机名包含 &quot;node&quot; 的目标</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">source_labels:</span> [<span class=\"string\">__address__</span>]</span><br><span class=\"line\">        <span class=\"attr\">regex:</span> <span class=\"string\">&#x27;node[0-9]+:9100&#x27;</span>  <span class=\"comment\"># 正则匹配 node1, node2 等</span></span><br><span class=\"line\">        <span class=\"attr\">action:</span> <span class=\"string\">keep</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">source_labels:</span> [<span class=\"string\">__meta_kubernetes_pod_label_app</span>]</span><br><span class=\"line\">        <span class=\"attr\">regex:</span> <span class=\"string\">&quot;nginx|api-server&quot;</span>  <span class=\"comment\"># 只抓取带有 app=nginx 或 app=api-server 标签的 Pod</span></span><br><span class=\"line\">        <span class=\"attr\">action:</span> <span class=\"string\">keep</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 仅启用 cpu 和 meminfo 收集器;不好用</span></span><br><span class=\"line\"><span class=\"string\">node_exporter</span> <span class=\"string\">\\</span></span><br><span class=\"line\">  <span class=\"string\">--collector.cpu</span> <span class=\"string\">\\</span></span><br><span class=\"line\">  <span class=\"string\">--collector.meminfo</span> <span class=\"string\">\\</span></span><br><span class=\"line\">  <span class=\"string\">--no-collector.diskstats</span> <span class=\"string\">\\</span></span><br><span class=\"line\">  <span class=\"string\">--no-collector.netdev</span> <span class=\"string\">\\</span></span><br><span class=\"line\">  <span class=\"string\">--no-collector.filesystem</span> <span class=\"string\">\\</span></span><br><span class=\"line\">  <span class=\"comment\"># 禁用其他所有收集器...</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"file-sd\"><a href=\"#file-sd\" class=\"headerlink\" title=\"file_sd\"></a>file_sd</h1><p>可以基于文件动态更新 prometheus 的监控节点</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#文件类型/etc/prometheus/targets/nodes.json</span><br><span class=\"line\"><span class=\"punctuation\">[</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;targets&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;192.168.1.10:9100&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span>  # 监控目标地址（IP<span class=\"punctuation\">:</span>Port）</span><br><span class=\"line\">    <span class=\"attr\">&quot;labels&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span>                        # 自定义标签（可选）</span><br><span class=\"line\">      <span class=\"attr\">&quot;env&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;prod&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;role&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;web-server&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;targets&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;192.168.1.11:9100&quot;</span><span class=\"punctuation\">,</span><span class=\"string\">&quot;192.168.3.11:9100&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;labels&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;env&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;staging&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;role&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;db-server&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">]</span></span><br><span class=\"line\">#prometheus配置</span><br><span class=\"line\">scrape_configs<span class=\"punctuation\">:</span></span><br><span class=\"line\">  - job_name<span class=\"punctuation\">:</span> <span class=\"string\">&quot;node-exporter&quot;</span>            # 任务名称</span><br><span class=\"line\">    file_sd_configs<span class=\"punctuation\">:</span>                     # 启用 file_sd</span><br><span class=\"line\">      - files<span class=\"punctuation\">:</span></span><br><span class=\"line\">          - <span class=\"string\">&quot;/etc/prometheus/targets/*.json&quot;</span>  # 目标文件路径（支持通配符）</span><br><span class=\"line\">          - <span class=\"string\">&quot;/etc/prometheus/targets/mysql-exporters/*.json&quot;</span> # MySQL 监控</span><br><span class=\"line\">        refresh_interval<span class=\"punctuation\">:</span> <span class=\"number\">5</span>m             # 重新加载间隔（默认 <span class=\"number\">5</span>m）</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"node-exporter-textfile\"><a href=\"#node-exporter-textfile\" class=\"headerlink\" title=\"node exporter textfile\"></a>node exporter textfile</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">DURATION=15         # 默认抓包时长（建议比 cron 间隔稍短）</span><br><span class=\"line\">INTERFACE=&quot;eth0&quot;</span><br><span class=\"line\">OUTPUT_FILE=&quot;/tmp/traffic.pcap&quot;</span><br><span class=\"line\">METRICS_FILE=&quot;/etc/node-exporter/textfile-collector/network_traffic.prom&quot;  # Node Exporter 收集目录</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安装依赖（如未安装）</span></span><br><span class=\"line\">if ! command -v tcpdump &amp;&gt;/dev/null || ! command -v tshark &amp;&gt;/dev/null; then</span><br><span class=\"line\">    echo &quot;安装依赖: tcpdump 和 tshark...&quot;</span><br><span class=\"line\">    sudo apt-get update &amp;&amp; sudo apt-get install -y tcpdump tshark</span><br><span class=\"line\">fi</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">捕获流量</span></span><br><span class=\"line\">sudo timeout $DURATION tcpdump -i $INTERFACE -w $OUTPUT_FILE &gt;/dev/null 2&gt;&amp;1</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">生成 Prometheus 格式的指标</span></span><br><span class=\"line\">sudo tshark -r $OUTPUT_FILE -T fields -e ip.src -e ip.dst -e frame.len 2&gt;/dev/null \\</span><br><span class=\"line\">  | awk &#x27;</span><br><span class=\"line\">    BEGIN &#123;</span><br><span class=\"line\">        total_bytes = 0</span><br><span class=\"line\">        delete bytes  # 清空数组</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        bytes[$1] += $3;  # 源IP统计</span><br><span class=\"line\">        bytes[$2] += $3;  # 目的IP统计</span><br><span class=\"line\">        total_bytes += $3</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    END &#123;</span><br><span class=\"line\">        # 输出总流量指标</span><br><span class=\"line\">        print &quot;network_traffic_total_bytes &quot; total_bytes</span><br><span class=\"line\"></span><br><span class=\"line\">        # 输出每个IP的流量指标</span><br><span class=\"line\">        for (ip in bytes) &#123;</span><br><span class=\"line\">            if (ip != &quot;&quot;) &#123;  # 过滤空值</span><br><span class=\"line\">                printf &quot;network_traffic_bytes&#123;ip=\\&quot;%s\\&quot;&#125; %d\\n&quot;, ip, bytes[ip]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;&#x27; &gt; &quot;$METRICS_FILE.$$&quot;  # 先写入临时文件</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">原子操作替换文件（避免读取半成品）</span></span><br><span class=\"line\">sudo mv &quot;$METRICS_FILE.$$&quot; &quot;$METRICS_FILE&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">清理</span></span><br><span class=\"line\">sudo rm -f &quot;$OUTPUT_FILE&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">./node_exporter  --web.listen-address=&quot;:900&quot; --collector.textfile.directory=/etc/node-exporter/textfile-collector/</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h1 id=\"blackbox-exporter\"><a href=\"#blackbox-exporter\" class=\"headerlink\" title=\"blackbox_exporter\"></a>blackbox_exporter</h1><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#blackbox.yml配置，prober类型可以自定义http,tcp,icmp,dns</span></span><br><span class=\"line\"><span class=\"attr\">modules:</span></span><br><span class=\"line\">  <span class=\"attr\">http_2xx:</span></span><br><span class=\"line\">    <span class=\"attr\">prober:</span> <span class=\"string\">http</span></span><br><span class=\"line\">    <span class=\"attr\">timeout:</span> <span class=\"string\">5s</span></span><br><span class=\"line\">    <span class=\"attr\">http:</span></span><br><span class=\"line\">      <span class=\"attr\">valid_http_versions:</span> [<span class=\"string\">&quot;HTTP/1.1&quot;</span>, <span class=\"string\">&quot;HTTP/2&quot;</span>]</span><br><span class=\"line\">      <span class=\"attr\">valid_status_codes:</span> [<span class=\"number\">200</span>]</span><br><span class=\"line\">      <span class=\"attr\">method:</span> <span class=\"string\">GET</span></span><br><span class=\"line\">      <span class=\"attr\">preferred_ip_protocol:</span> <span class=\"string\">&quot;ip4&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">ssh_banner_check:</span>  <span class=\"comment\"># 自定义模块名</span></span><br><span class=\"line\">    <span class=\"attr\">prober:</span> <span class=\"string\">tcp</span></span><br><span class=\"line\">    <span class=\"attr\">timeout:</span> <span class=\"string\">10s</span></span><br><span class=\"line\">    <span class=\"attr\">tcp:</span></span><br><span class=\"line\">      <span class=\"attr\">query_response:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">expect:</span> <span class=\"string\">&quot;^SSH-2.0-OpenSSH&quot;</span></span><br><span class=\"line\">          <span class=\"attr\">send:</span> <span class=\"string\">&quot;SSH-2.0-blackbox-ssh-check&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">preferred_ip_protocol:</span> <span class=\"string\">&quot;ip4&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># prometheus集成</span></span><br><span class=\"line\"><span class=\"attr\">scrape_configs:</span></span><br><span class=\"line\"> <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">&#x27;blackbox-http&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">metrics_path:</span> <span class=\"string\">/probe</span></span><br><span class=\"line\">    <span class=\"attr\">params:</span></span><br><span class=\"line\">      <span class=\"attr\">module:</span> [<span class=\"string\">http_2xx</span>]</span><br><span class=\"line\">    <span class=\"attr\">static_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">targets:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">https://qq.com</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">https://google.com</span></span><br><span class=\"line\">    <span class=\"attr\">relabel_configs:</span> <span class=\"meta\">&amp;common_relabel</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">source_labels:</span> [<span class=\"string\">__address__</span>]</span><br><span class=\"line\">        <span class=\"attr\">target_label:</span> <span class=\"string\">__param_target</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">source_labels:</span> [<span class=\"string\">__param_target</span>]</span><br><span class=\"line\">        <span class=\"attr\">target_label:</span> <span class=\"string\">instance</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">target_label:</span> <span class=\"string\">__address__</span></span><br><span class=\"line\">        <span class=\"attr\">replacement:</span> <span class=\"string\">blackbox-exporter:9115</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">&#x27;blackbox-ssh&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">metrics_path:</span> <span class=\"string\">/probe</span></span><br><span class=\"line\">    <span class=\"attr\">params:</span></span><br><span class=\"line\">      <span class=\"attr\">module:</span> [<span class=\"string\">ssh_banner_check</span>]  <span class=\"comment\"># 对应TCP模块</span></span><br><span class=\"line\">    <span class=\"attr\">static_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">targets:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">&#x27;127.0.0.1:22&#x27;</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">&#x27;10.0.1.122:22&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">relabel_configs:</span> <span class=\"meta\">*common_relabel</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#relabel_configs配置解析</span></span><br><span class=\"line\"><span class=\"string\">Prometheus</span> <span class=\"string\">抓取任务生成</span></span><br><span class=\"line\"><span class=\"string\">│</span></span><br><span class=\"line\"><span class=\"string\">├─</span> <span class=\"string\">原始目标:</span> <span class=\"string\">example.com:80</span></span><br><span class=\"line\"><span class=\"string\">│</span>  <span class=\"string\">│</span></span><br><span class=\"line\"><span class=\"string\">│</span>  <span class=\"string\">├─</span> <span class=\"string\">relabel</span> <span class=\"string\">规则1:</span> <span class=\"string\">将地址赋值给</span> <span class=\"string\">__param_target</span> <span class=\"string\">→</span> <span class=\"string\">?target=example.com:80</span></span><br><span class=\"line\"><span class=\"string\">│</span>  <span class=\"string\">├─</span> <span class=\"string\">relabel</span> <span class=\"string\">规则2:</span> <span class=\"string\">用</span> <span class=\"string\">__param_target</span> <span class=\"string\">标记</span> <span class=\"string\">instance</span> <span class=\"string\">→</span> <span class=\"string\">instance=&quot;example.com:80&quot;</span></span><br><span class=\"line\"><span class=\"string\">│</span>  <span class=\"string\">└─</span> <span class=\"string\">relabel</span> <span class=\"string\">规则3:</span> <span class=\"string\">重写地址</span> <span class=\"string\">→</span> <span class=\"string\">实际请求发送到</span> <span class=\"string\">Blackbox</span> <span class=\"string\">Exporter</span></span><br><span class=\"line\"><span class=\"string\">│</span>     <span class=\"string\">│</span></span><br><span class=\"line\"><span class=\"string\">│</span>     <span class=\"string\">└─</span> <span class=\"string\">Blackbox</span> <span class=\"string\">Exporter</span> <span class=\"string\">收到请求，解析参数后探测</span> <span class=\"string\">example.com:80</span></span><br><span class=\"line\"><span class=\"string\">│</span></span><br><span class=\"line\"><span class=\"string\">└─</span> <span class=\"string\">原始目标:</span> <span class=\"string\">google.com:443</span></span><br><span class=\"line\">   <span class=\"string\">└─</span> <span class=\"string\">同理生成请求</span> <span class=\"string\">http://192.168.100.100:9115/probe?target=google.com:443&amp;module=http_2xx</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#告警ing</span></span><br><span class=\"line\"><span class=\"string\">probe_success&#123;job=&quot;blackbox-http&quot;&#125;</span> <span class=\"string\">==</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"comment\">#状态码</span></span><br><span class=\"line\"><span class=\"string\">probe_http_status_code&#123;job=&quot;blackbox-http&quot;&#125;</span> <span class=\"string\">&lt;</span> <span class=\"number\">200</span> <span class=\"string\">or</span> <span class=\"string\">probe_http_status_code&#123;job=&quot;blackbox-http&quot;&#125;</span> <span class=\"string\">&gt;=</span> <span class=\"number\">300</span></span><br><span class=\"line\"><span class=\"comment\">#证书过期时间</span></span><br><span class=\"line\"><span class=\"string\">probe_ssl_earliest_cert_expiry&#123;job=&quot;blackbox-http&quot;&#125;</span> <span class=\"bullet\">-</span> <span class=\"string\">time()</span> <span class=\"string\">&lt;</span> <span class=\"number\">86400</span> <span class=\"string\">*</span> <span class=\"number\">30</span>  <span class=\"comment\"># 30天</span></span><br><span class=\"line\"><span class=\"comment\">#tcp端口是否通</span></span><br><span class=\"line\"><span class=\"string\">probe_success&#123;job=&quot;blackbox-tcp&quot;&#125;</span> <span class=\"string\">==</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"comment\">#响应时长</span></span><br><span class=\"line\"><span class=\"string\">probe_duration_seconds&#123;job=&quot;blackbox-http&quot;&#125;</span> <span class=\"string\">&gt;</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"comment\">#解析时长</span></span><br><span class=\"line\"><span class=\"string\">probe_dns_lookup_time_seconds</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"process-exporter\"><a href=\"#process-exporter\" class=\"headerlink\" title=\"process-exporter\"></a>process-exporter</h1><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123;<span class=\"string\">.Comm</span>&#125;&#125; <span class=\"string\">包含原始可执行文件的基本名称，即</span> <span class=\"string\">/proc/&lt;pid&gt;/stat</span> <span class=\"string\">中的第</span> <span class=\"number\">2</span> <span class=\"string\">个字段，并截取前15个字符</span></span><br><span class=\"line\">&#123;&#123;<span class=\"string\">.ExeBase</span>&#125;&#125; <span class=\"string\">包含可执行文件的基本名称</span>  </span><br><span class=\"line\">&#123;&#123;<span class=\"string\">.ExeFull</span>&#125;&#125; <span class=\"string\">包含可执行文件的完全限定路径</span>  </span><br><span class=\"line\">&#123;&#123;<span class=\"string\">.Username</span>&#125;&#125; <span class=\"string\">包含有效用户的用户名</span>  </span><br><span class=\"line\">&#123;&#123;<span class=\"string\">.Matches</span>&#125;&#125; <span class=\"string\">map</span> <span class=\"string\">包含应用</span> <span class=\"string\">cmdline</span> <span class=\"string\">正则表达式产生的所有匹配项</span></span><br><span class=\"line\">&#123;&#123;<span class=\"string\">.PID</span>&#125;&#125; <span class=\"string\">包含进程的</span> <span class=\"string\">PID。请注意，使用</span> <span class=\"string\">PID</span> <span class=\"string\">意味着该组将仅包含一个进程</span></span><br><span class=\"line\">&#123;&#123;<span class=\"string\">.StartTime</span>&#125;&#125; <span class=\"string\">包含进程的开始时间。这与</span> <span class=\"string\">PID</span> <span class=\"string\">结合使用时非常有用，因为</span> <span class=\"string\">PID</span> <span class=\"string\">会随着时间的推移而被重用。</span></span><br><span class=\"line\">&#123;&#123;<span class=\"string\">.Cgroups</span>&#125;&#125; <span class=\"string\">包含（如果支持）进程的</span> <span class=\"string\">cgroups</span> <span class=\"string\">（/proc/self/cgroup）。这对于识别进程属于哪个容器特别有用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#process-exporter.yml</span></span><br><span class=\"line\"><span class=\"comment\">#常用的就comm和exefull,matches</span></span><br><span class=\"line\"><span class=\"attr\">process_names:</span></span><br><span class=\"line\">  <span class=\"comment\">#- name: &quot;&#123;&#123;.ExeFull&#125;&#125;&quot; </span></span><br><span class=\"line\">  <span class=\"comment\">#  cmdline:</span></span><br><span class=\"line\">  <span class=\"comment\">#  - &#x27;.+&#x27;  # 正则表达式（匹配任何非空内容）不常用太多了影响资源消耗</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123;.Comm&#125;&#125;</span>&quot;</span> <span class=\"comment\">#groupname=&quot;docker&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">cmdline:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;docker*&#x27;</span> </span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123;.Matches&#125;&#125;</span>&quot;</span> <span class=\"comment\">#groupname=&quot;map[:nginx]&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">cmdline:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;nginx*&#x27;</span> </span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123;.ExeFull&#125;&#125;</span>&quot;</span>  <span class=\"comment\">#groupname=&quot;/usr/sbin/mysqld</span></span><br><span class=\"line\">    <span class=\"attr\">cmdline:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;mysql*&#x27;</span></span><br><span class=\"line\">                </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#告警...</span></span><br><span class=\"line\"><span class=\"string\">namedprocess_namegroup_num_procs&#123;groupname!~&quot;.*process-exporter.*&quot;&#125;</span> <span class=\"string\">==</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"string\">namedprocess_namegroup_states&#123;state=&quot;Z&quot;&#125;</span> <span class=\"string\">&gt;</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"string\">namedprocess_namegroup_num_procs&#123;groupname=&quot;nginx&quot;&#125;</span> <span class=\"string\">==</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"comment\">#cpu百分比</span></span><br><span class=\"line\"><span class=\"number\">100</span> <span class=\"string\">*</span> <span class=\"string\">rate(namedprocess_namegroup_cpu_seconds_total&#123;groupname=&quot;java&quot;&#125;[5m])</span></span><br><span class=\"line\"><span class=\"number\">100</span> <span class=\"string\">*</span> <span class=\"string\">rate(namedprocess_namegroup_cpu_seconds_total&#123;&#125;[5m])</span> <span class=\"string\">&gt;</span> <span class=\"number\">50</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#内存 mb</span></span><br><span class=\"line\"><span class=\"string\">namedprocess_namegroup_memory_bytes&#123;groupname=&quot;java&quot;&#125;</span> <span class=\"string\">/</span> <span class=\"number\">1024</span><span class=\"string\">^2</span></span><br><span class=\"line\"><span class=\"string\">除于</span></span><br><span class=\"line\"><span class=\"comment\">#节点内存 就是占用内存百分比</span></span><br><span class=\"line\"><span class=\"string\">node_memory_MemTotal_bytes</span> <span class=\"string\">/</span> <span class=\"number\">1024</span> <span class=\"string\">/</span> <span class=\"number\">1024</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读速率 MB/S</span></span><br><span class=\"line\"><span class=\"string\">rate(namedprocess_namegroup_read_bytes_total&#123;groupname=&quot;mysql&quot;&#125;[5m])</span> <span class=\"string\">/</span> <span class=\"number\">1024</span><span class=\"string\">^2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 写速率</span></span><br><span class=\"line\"><span class=\"string\">rate(namedprocess_namegroup_write_bytes_total&#123;groupname=&quot;mysql&quot;&#125;[5m])</span> <span class=\"string\">/</span> <span class=\"number\">1024</span><span class=\"string\">^2</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"prometheus联邦\"><a href=\"#prometheus联邦\" class=\"headerlink\" title=\"prometheus联邦\"></a>prometheus联邦</h1><ul>\n<li>数量较多的情况下从多个下级 Prometheus 实例中提取特定指标，汇总到中心 Prometheus<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">                <span class=\"string\">Central</span> <span class=\"string\">Prometheus</span></span><br><span class=\"line\">                        <span class=\"string\">↑</span></span><br><span class=\"line\">        <span class=\"string\">从多个下级拉取聚合后的指标</span></span><br><span class=\"line\">                        <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">        +---------------+---------------+</span></span><br><span class=\"line\"><span class=\"string\">        |               |               |</span></span><br><span class=\"line\"><span class=\"string\"></span>   <span class=\"string\">Region</span> <span class=\"string\">A</span>       <span class=\"string\">Region</span> <span class=\"string\">B</span>       <span class=\"string\">Region</span> <span class=\"string\">C</span></span><br><span class=\"line\">   <span class=\"string\">Prometheus</span>    <span class=\"string\">Prometheus</span>    <span class=\"string\">Prometheus</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">scrape_configs:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">&#x27;federate-regions&#x27;</span>        <span class=\"comment\"># 任务名称</span></span><br><span class=\"line\">    <span class=\"attr\">scrape_interval:</span> <span class=\"string\">1m</span>                <span class=\"comment\"># 建议比下级采集间隔长</span></span><br><span class=\"line\">    <span class=\"attr\">honor_labels:</span> <span class=\"literal\">true</span>                 <span class=\"comment\"># 保留下级标签（避免覆盖）</span></span><br><span class=\"line\">    <span class=\"attr\">metrics_path:</span> <span class=\"string\">&#x27;/federate&#x27;</span>          <span class=\"comment\"># 联邦接口路径</span></span><br><span class=\"line\">    <span class=\"attr\">params:</span></span><br><span class=\"line\">      <span class=\"string\">&#x27;match[]&#x27;</span><span class=\"string\">:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">&#x27;&#123;job=&quot;api-server&quot;&#125;&#x27;</span>         <span class=\"comment\"># 拉取下级的指定 job 指标</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">&#x27;&#123;__name__=~&quot;job:.*&quot;&#125;&#x27;</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">&#x27;up&#123;instance=~&quot;.+&quot;&#125;&#x27;</span>         <span class=\"comment\"># 拉取所有下级实例的 up 状态</span></span><br><span class=\"line\">    <span class=\"attr\">static_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">targets:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">&#x27;prometheus-region-a:9090&#x27;</span> <span class=\"comment\"># 下级 Prometheus 地址</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">&#x27;prometheus-region-b:9090&#x27;</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">&#x27;prometheus-region-c:9090&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">match[]</span> <span class=\"string\">过滤条件</span></span><br><span class=\"line\"><span class=\"string\">精确匹配：&#x27;&#123;job=&quot;mysql&quot;&#125;&#x27;</span> <span class=\"string\">拉取所有</span> <span class=\"string\">job=mysql</span> <span class=\"string\">的指标。</span></span><br><span class=\"line\"><span class=\"string\">正则匹配：&#x27;__name__=~&quot;http_request_.+&quot;&#x27;</span> <span class=\"string\">拉取以</span> <span class=\"string\">http_request_</span> <span class=\"string\">开头的指标。</span></span><br><span class=\"line\"><span class=\"string\">组合条件：&#x27;&#123;env=&quot;prod&quot;,</span> <span class=\"string\">app=~&quot;web|api&quot;&#125;&#x27;</span> <span class=\"string\">拉取</span> <span class=\"string\">prod</span> <span class=\"string\">环境下</span> <span class=\"string\">web</span> <span class=\"string\">或</span> <span class=\"string\">api</span> <span class=\"string\">应用的指标。</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n","excerpt":"","more":"<h1 id=\"deploy\"><a href=\"#deploy\" class=\"headerlink\" title=\"deploy\"></a>deploy</h1><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建目录结构</span></span><br><span class=\"line\"><span class=\"string\">mkdir</span> <span class=\"string\">-p</span> <span class=\"string\">monitoring/prometheus</span></span><br><span class=\"line\"><span class=\"string\">cd</span> <span class=\"string\">monitoring</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成docker-compose.yml,node和process必须使用host宿主机网络，不然很多指标只能采集到容器里面的信息不准确</span></span><br><span class=\"line\"><span class=\"string\">cat</span> <span class=\"string\">&gt;</span> <span class=\"string\">docker-compose.yml</span> <span class=\"string\">&lt;&lt;</span> <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;3.8&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">networks:</span></span><br><span class=\"line\">  <span class=\"attr\">monitoring:</span></span><br><span class=\"line\">    <span class=\"attr\">driver:</span> <span class=\"string\">bridge</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">prometheus:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">registry.cn-hangzhou.aliyuncs.com/lky-deploy/prometheus:v2.40.7</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">prometheus</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">unless-stopped</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;9090:9090&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">prom_data:/prometheus</span></span><br><span class=\"line\">    <span class=\"attr\">networks:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">monitoring</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&#x27;--config.file=/etc/prometheus/prometheus.yml&#x27;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&#x27;--storage.tsdb.retention.time=30d&#x27;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&#x27;--web.enable-lifecycle&#x27;</span> <span class=\"comment\">#curl -X POST http://localhost:9090/-/reload</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">node-exporter:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">registry.cn-hangzhou.aliyuncs.com/lky-deploy/nodeexporter:v1.9.1</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">node-exporter</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">unless-stopped</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&#x27;--path.rootfs=/host&#x27;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&#x27;--web.listen-address=:9400&#x27;</span></span><br><span class=\"line\">   <span class=\"comment\"># networks:  # 加入监控网络</span></span><br><span class=\"line\">    <span class=\"comment\">#  - monitoring</span></span><br><span class=\"line\">    <span class=\"attr\">network_mode:</span> <span class=\"string\">host</span>  <span class=\"comment\"># 使用host网络</span></span><br><span class=\"line\">    <span class=\"attr\">pid:</span> <span class=\"string\">host</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/:/host:ro,rslave</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">blackbox-exporter:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">registry.cn-hangzhou.aliyuncs.com/lky-deploy/nodeexporter:blackbox-exporterv0.27.0</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">blackbox-exporter</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">unless-stopped</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;9115:9115&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">networks:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">monitoring</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./blackbox.yml:/etc/blackbox_exporter/config.yml</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&#x27;--config.file=/etc/blackbox_exporter/config.yml&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">process-exporter:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">registry.cn-hangzhou.aliyuncs.com/lky-deploy/nodeexporter:process-exporter-v0.8.7</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">process-exporter</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">unless-stopped</span></span><br><span class=\"line\">    <span class=\"attr\">network_mode:</span> <span class=\"string\">host</span>  <span class=\"comment\"># 使用host网络</span></span><br><span class=\"line\">   <span class=\"comment\"># networks:</span></span><br><span class=\"line\">   <span class=\"comment\">#   - monitoring  # 使用统一网络</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;9256:9256&quot;</span>  <span class=\"comment\"># 添加端口映射</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/proc:/host/proc:ro</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./process-exporter.yml:/config.yml</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&#x27;-config.path=/config.yml&#x27;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&#x27;-procfs=/host/proc&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">volumes:</span></span><br><span class=\"line\">  <span class=\"attr\">prom_data:</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成Prometheus配置</span></span><br><span class=\"line\"><span class=\"string\">cat</span> <span class=\"string\">&gt;</span> <span class=\"string\">prometheus/prometheus.yml</span> <span class=\"string\">&lt;&lt;EOF</span></span><br><span class=\"line\"><span class=\"attr\">global:</span></span><br><span class=\"line\">  <span class=\"attr\">scrape_interval:</span> <span class=\"string\">15s</span></span><br><span class=\"line\">  <span class=\"attr\">evaluation_interval:</span> <span class=\"string\">15s</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">scrape_configs:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">&#x27;prometheus&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">static_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">targets:</span> [<span class=\"string\">&#x27;localhost:9090&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">&#x27;node&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">static_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">targets:</span> [<span class=\"string\">&#x27;node-exporter:9400&#x27;</span>] <span class=\"comment\">#host模式需要换成宿主机ip</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">&#x27;blackbox-http&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">metrics_path:</span> <span class=\"string\">/probe</span></span><br><span class=\"line\">    <span class=\"attr\">params:</span></span><br><span class=\"line\">      <span class=\"attr\">module:</span> [<span class=\"string\">http_2xx</span>]</span><br><span class=\"line\">    <span class=\"attr\">static_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">targets:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">https://qq.com</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">https://google.com</span></span><br><span class=\"line\">    <span class=\"attr\">relabel_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">source_labels:</span> [<span class=\"string\">__address__</span>]</span><br><span class=\"line\">        <span class=\"attr\">target_label:</span> <span class=\"string\">__param_target</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">source_labels:</span> [<span class=\"string\">__param_target</span>]</span><br><span class=\"line\">        <span class=\"attr\">target_label:</span> <span class=\"string\">instance</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">target_label:</span> <span class=\"string\">__address__</span></span><br><span class=\"line\">        <span class=\"attr\">replacement:</span> <span class=\"string\">blackbox-exporter:9115</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">&#x27;process-exporter&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">static_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">targets:</span> [<span class=\"string\">&#x27;process-exporter:9256&#x27;</span>] <span class=\"comment\">#host模式需要换成宿主机ip</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成Blackbox配置</span></span><br><span class=\"line\"><span class=\"string\">cat</span> <span class=\"string\">&gt;</span> <span class=\"string\">blackbox.yml</span> <span class=\"string\">&lt;&lt;EOF</span></span><br><span class=\"line\"><span class=\"attr\">modules:</span></span><br><span class=\"line\">  <span class=\"attr\">http_2xx:</span></span><br><span class=\"line\">    <span class=\"attr\">prober:</span> <span class=\"string\">http</span></span><br><span class=\"line\">    <span class=\"attr\">timeout:</span> <span class=\"string\">5s</span></span><br><span class=\"line\">    <span class=\"attr\">http:</span></span><br><span class=\"line\">      <span class=\"attr\">valid_http_versions:</span> [<span class=\"string\">&quot;HTTP/1.1&quot;</span>, <span class=\"string\">&quot;HTTP/2&quot;</span>]</span><br><span class=\"line\">      <span class=\"attr\">valid_status_codes:</span> [<span class=\"number\">200</span>]</span><br><span class=\"line\">      <span class=\"attr\">method:</span> <span class=\"string\">GET</span></span><br><span class=\"line\">      <span class=\"attr\">preferred_ip_protocol:</span> <span class=\"string\">&quot;ip4&quot;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成Process Exporter配置</span></span><br><span class=\"line\"><span class=\"string\">cat</span> <span class=\"string\">&gt;</span> <span class=\"string\">process-exporter.yml</span> <span class=\"string\">&lt;&lt;EOF</span></span><br><span class=\"line\"><span class=\"attr\">process_names:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123;.Comm&#125;&#125;</span>&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">cmdline:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;.+&#x27;</span>  <span class=\"comment\"># 正则表达式（匹配任何非空内容）</span></span><br><span class=\"line\">  <span class=\"comment\">#- name: &quot;&#123;&#123;.Matches&#125;&#125;&quot;</span></span><br><span class=\"line\"> <span class=\"comment\">#   cmdline:</span></span><br><span class=\"line\"> <span class=\"comment\">#     - &#x27;nginx&#x27;  # 只监控 nginx 进程</span></span><br><span class=\"line\"> <span class=\"comment\"># - name: &quot;&#123;&#123;.Matches&#125;&#125;&quot;</span></span><br><span class=\"line\">  <span class=\"comment\">#  cmdline:</span></span><br><span class=\"line\">  <span class=\"comment\">#    - &#x27;docker&#x27;  # 只监控 docker 进程</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动服务</span></span><br><span class=\"line\"><span class=\"string\">docker</span> <span class=\"string\">compose</span> <span class=\"string\">up</span> <span class=\"string\">-d</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">echo</span> <span class=\"string\">-e</span> <span class=\"string\">&quot;\\n\\033[32m部署完成！以下是访问信息：\\033[0m&quot;</span></span><br><span class=\"line\"><span class=\"string\">echo</span> <span class=\"string\">&quot;Prometheus:     http://localhost:9090&quot;</span></span><br><span class=\"line\"><span class=\"string\">echo</span> <span class=\"string\">&quot;Node Exporter:  http://localhost:9100/metrics&quot;</span></span><br><span class=\"line\"><span class=\"string\">echo</span> <span class=\"string\">&quot;Blackbox:       http://localhost:9115/metrics&quot;</span></span><br><span class=\"line\"><span class=\"string\">echo</span> <span class=\"string\">&quot;Process-Exporter: http://localhost:9256/metrics&quot;</span></span><br><span class=\"line\"><span class=\"string\">echo</span> <span class=\"string\">-e</span> <span class=\"string\">&quot;\\n请修改以下配置文件后重启服务：&quot;</span></span><br><span class=\"line\"><span class=\"string\">echo</span> <span class=\"string\">&quot;- blackbox.yml 中的监控目标&quot;</span></span><br><span class=\"line\"><span class=\"string\">echo</span> <span class=\"string\">&quot;- process-exporter.yml 中的进程过滤规则&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"如果节点较多prometheus对所有指标的采集会对负载和磁盘占用较多，可以通过relabel-drop不需要的指标，减轻负担\"><a href=\"#如果节点较多prometheus对所有指标的采集会对负载和磁盘占用较多，可以通过relabel-drop不需要的指标，减轻负担\" class=\"headerlink\" title=\"如果节点较多prometheus对所有指标的采集会对负载和磁盘占用较多，可以通过relabel drop不需要的指标，减轻负担\"></a>如果节点较多prometheus对所有指标的采集会对负载和磁盘占用较多，可以通过relabel drop不需要的指标，减轻负担</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#relabel_configs\t抓取前，针对target</span></span><br><span class=\"line\"><span class=\"comment\">#metric_relabel_configs 抓取后，针对指标名称</span></span><br><span class=\"line\"><span class=\"attr\">scrape_configs:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">&#x27;node-drop&#x27;</span> </span><br><span class=\"line\">    <span class=\"attr\">static_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">targets:</span> [<span class=\"string\">&#x27;localhost:9100&#x27;</span>]</span><br><span class=\"line\">    <span class=\"attr\">metric_relabel_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">source_labels:</span> [<span class=\"string\">__name__</span>]</span><br><span class=\"line\">        <span class=\"attr\">regex:</span> <span class=\"string\">&#x27;^(node_cpu_seconds_total|node_memory_.*|node_disk_.*|node_network_.*)$&#x27;</span></span><br><span class=\"line\">        <span class=\"attr\">action:</span> <span class=\"string\">keep</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">&#x27;node&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">static_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">targets:</span> [<span class=\"string\">&#x27;node1:9100&#x27;</span>, <span class=\"string\">&#x27;node2:9100&#x27;</span>,<span class=\"string\">&#x27;master:9100&#x27;</span>]</span><br><span class=\"line\">    <span class=\"attr\">relabel_configs:</span></span><br><span class=\"line\">      <span class=\"comment\"># 根据目标地址动态添加 environment 标签</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">source_labels:</span> [<span class=\"string\">__address__</span>]</span><br><span class=\"line\">        <span class=\"attr\">regex:</span> <span class=\"string\">&#x27;node1:9100&#x27;</span></span><br><span class=\"line\">        <span class=\"attr\">replacement:</span> <span class=\"string\">&#x27;prod&#x27;</span></span><br><span class=\"line\">        <span class=\"attr\">target_label:</span> <span class=\"string\">environment</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">source_labels:</span> [<span class=\"string\">__address__</span>]</span><br><span class=\"line\">        <span class=\"attr\">regex:</span> <span class=\"string\">&#x27;node2:9100&#x27;</span></span><br><span class=\"line\">        <span class=\"attr\">replacement:</span> <span class=\"string\">&#x27;staging&#x27;</span></span><br><span class=\"line\">        <span class=\"attr\">target_label:</span> <span class=\"string\">environment</span></span><br><span class=\"line\">      <span class=\"comment\"># 只保留主机名包含 &quot;node&quot; 的目标</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">source_labels:</span> [<span class=\"string\">__address__</span>]</span><br><span class=\"line\">        <span class=\"attr\">regex:</span> <span class=\"string\">&#x27;node[0-9]+:9100&#x27;</span>  <span class=\"comment\"># 正则匹配 node1, node2 等</span></span><br><span class=\"line\">        <span class=\"attr\">action:</span> <span class=\"string\">keep</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">source_labels:</span> [<span class=\"string\">__meta_kubernetes_pod_label_app</span>]</span><br><span class=\"line\">        <span class=\"attr\">regex:</span> <span class=\"string\">&quot;nginx|api-server&quot;</span>  <span class=\"comment\"># 只抓取带有 app=nginx 或 app=api-server 标签的 Pod</span></span><br><span class=\"line\">        <span class=\"attr\">action:</span> <span class=\"string\">keep</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 仅启用 cpu 和 meminfo 收集器;不好用</span></span><br><span class=\"line\"><span class=\"string\">node_exporter</span> <span class=\"string\">\\</span></span><br><span class=\"line\">  <span class=\"string\">--collector.cpu</span> <span class=\"string\">\\</span></span><br><span class=\"line\">  <span class=\"string\">--collector.meminfo</span> <span class=\"string\">\\</span></span><br><span class=\"line\">  <span class=\"string\">--no-collector.diskstats</span> <span class=\"string\">\\</span></span><br><span class=\"line\">  <span class=\"string\">--no-collector.netdev</span> <span class=\"string\">\\</span></span><br><span class=\"line\">  <span class=\"string\">--no-collector.filesystem</span> <span class=\"string\">\\</span></span><br><span class=\"line\">  <span class=\"comment\"># 禁用其他所有收集器...</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"file-sd\"><a href=\"#file-sd\" class=\"headerlink\" title=\"file_sd\"></a>file_sd</h1><p>可以基于文件动态更新 prometheus 的监控节点</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#文件类型/etc/prometheus/targets/nodes.json</span><br><span class=\"line\"><span class=\"punctuation\">[</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;targets&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;192.168.1.10:9100&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span>  # 监控目标地址（IP<span class=\"punctuation\">:</span>Port）</span><br><span class=\"line\">    <span class=\"attr\">&quot;labels&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span>                        # 自定义标签（可选）</span><br><span class=\"line\">      <span class=\"attr\">&quot;env&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;prod&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;role&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;web-server&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;targets&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;192.168.1.11:9100&quot;</span><span class=\"punctuation\">,</span><span class=\"string\">&quot;192.168.3.11:9100&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;labels&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;env&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;staging&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;role&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;db-server&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">]</span></span><br><span class=\"line\">#prometheus配置</span><br><span class=\"line\">scrape_configs<span class=\"punctuation\">:</span></span><br><span class=\"line\">  - job_name<span class=\"punctuation\">:</span> <span class=\"string\">&quot;node-exporter&quot;</span>            # 任务名称</span><br><span class=\"line\">    file_sd_configs<span class=\"punctuation\">:</span>                     # 启用 file_sd</span><br><span class=\"line\">      - files<span class=\"punctuation\">:</span></span><br><span class=\"line\">          - <span class=\"string\">&quot;/etc/prometheus/targets/*.json&quot;</span>  # 目标文件路径（支持通配符）</span><br><span class=\"line\">          - <span class=\"string\">&quot;/etc/prometheus/targets/mysql-exporters/*.json&quot;</span> # MySQL 监控</span><br><span class=\"line\">        refresh_interval<span class=\"punctuation\">:</span> <span class=\"number\">5</span>m             # 重新加载间隔（默认 <span class=\"number\">5</span>m）</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"node-exporter-textfile\"><a href=\"#node-exporter-textfile\" class=\"headerlink\" title=\"node exporter textfile\"></a>node exporter textfile</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">DURATION=15         # 默认抓包时长（建议比 cron 间隔稍短）</span><br><span class=\"line\">INTERFACE=&quot;eth0&quot;</span><br><span class=\"line\">OUTPUT_FILE=&quot;/tmp/traffic.pcap&quot;</span><br><span class=\"line\">METRICS_FILE=&quot;/etc/node-exporter/textfile-collector/network_traffic.prom&quot;  # Node Exporter 收集目录</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安装依赖（如未安装）</span></span><br><span class=\"line\">if ! command -v tcpdump &amp;&gt;/dev/null || ! command -v tshark &amp;&gt;/dev/null; then</span><br><span class=\"line\">    echo &quot;安装依赖: tcpdump 和 tshark...&quot;</span><br><span class=\"line\">    sudo apt-get update &amp;&amp; sudo apt-get install -y tcpdump tshark</span><br><span class=\"line\">fi</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">捕获流量</span></span><br><span class=\"line\">sudo timeout $DURATION tcpdump -i $INTERFACE -w $OUTPUT_FILE &gt;/dev/null 2&gt;&amp;1</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">生成 Prometheus 格式的指标</span></span><br><span class=\"line\">sudo tshark -r $OUTPUT_FILE -T fields -e ip.src -e ip.dst -e frame.len 2&gt;/dev/null \\</span><br><span class=\"line\">  | awk &#x27;</span><br><span class=\"line\">    BEGIN &#123;</span><br><span class=\"line\">        total_bytes = 0</span><br><span class=\"line\">        delete bytes  # 清空数组</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        bytes[$1] += $3;  # 源IP统计</span><br><span class=\"line\">        bytes[$2] += $3;  # 目的IP统计</span><br><span class=\"line\">        total_bytes += $3</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    END &#123;</span><br><span class=\"line\">        # 输出总流量指标</span><br><span class=\"line\">        print &quot;network_traffic_total_bytes &quot; total_bytes</span><br><span class=\"line\"></span><br><span class=\"line\">        # 输出每个IP的流量指标</span><br><span class=\"line\">        for (ip in bytes) &#123;</span><br><span class=\"line\">            if (ip != &quot;&quot;) &#123;  # 过滤空值</span><br><span class=\"line\">                printf &quot;network_traffic_bytes&#123;ip=\\&quot;%s\\&quot;&#125; %d\\n&quot;, ip, bytes[ip]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;&#x27; &gt; &quot;$METRICS_FILE.$$&quot;  # 先写入临时文件</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">原子操作替换文件（避免读取半成品）</span></span><br><span class=\"line\">sudo mv &quot;$METRICS_FILE.$$&quot; &quot;$METRICS_FILE&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">清理</span></span><br><span class=\"line\">sudo rm -f &quot;$OUTPUT_FILE&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">./node_exporter  --web.listen-address=&quot;:900&quot; --collector.textfile.directory=/etc/node-exporter/textfile-collector/</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h1 id=\"blackbox-exporter\"><a href=\"#blackbox-exporter\" class=\"headerlink\" title=\"blackbox_exporter\"></a>blackbox_exporter</h1><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#blackbox.yml配置，prober类型可以自定义http,tcp,icmp,dns</span></span><br><span class=\"line\"><span class=\"attr\">modules:</span></span><br><span class=\"line\">  <span class=\"attr\">http_2xx:</span></span><br><span class=\"line\">    <span class=\"attr\">prober:</span> <span class=\"string\">http</span></span><br><span class=\"line\">    <span class=\"attr\">timeout:</span> <span class=\"string\">5s</span></span><br><span class=\"line\">    <span class=\"attr\">http:</span></span><br><span class=\"line\">      <span class=\"attr\">valid_http_versions:</span> [<span class=\"string\">&quot;HTTP/1.1&quot;</span>, <span class=\"string\">&quot;HTTP/2&quot;</span>]</span><br><span class=\"line\">      <span class=\"attr\">valid_status_codes:</span> [<span class=\"number\">200</span>]</span><br><span class=\"line\">      <span class=\"attr\">method:</span> <span class=\"string\">GET</span></span><br><span class=\"line\">      <span class=\"attr\">preferred_ip_protocol:</span> <span class=\"string\">&quot;ip4&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">ssh_banner_check:</span>  <span class=\"comment\"># 自定义模块名</span></span><br><span class=\"line\">    <span class=\"attr\">prober:</span> <span class=\"string\">tcp</span></span><br><span class=\"line\">    <span class=\"attr\">timeout:</span> <span class=\"string\">10s</span></span><br><span class=\"line\">    <span class=\"attr\">tcp:</span></span><br><span class=\"line\">      <span class=\"attr\">query_response:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">expect:</span> <span class=\"string\">&quot;^SSH-2.0-OpenSSH&quot;</span></span><br><span class=\"line\">          <span class=\"attr\">send:</span> <span class=\"string\">&quot;SSH-2.0-blackbox-ssh-check&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">preferred_ip_protocol:</span> <span class=\"string\">&quot;ip4&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># prometheus集成</span></span><br><span class=\"line\"><span class=\"attr\">scrape_configs:</span></span><br><span class=\"line\"> <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">&#x27;blackbox-http&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">metrics_path:</span> <span class=\"string\">/probe</span></span><br><span class=\"line\">    <span class=\"attr\">params:</span></span><br><span class=\"line\">      <span class=\"attr\">module:</span> [<span class=\"string\">http_2xx</span>]</span><br><span class=\"line\">    <span class=\"attr\">static_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">targets:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">https://qq.com</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">https://google.com</span></span><br><span class=\"line\">    <span class=\"attr\">relabel_configs:</span> <span class=\"meta\">&amp;common_relabel</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">source_labels:</span> [<span class=\"string\">__address__</span>]</span><br><span class=\"line\">        <span class=\"attr\">target_label:</span> <span class=\"string\">__param_target</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">source_labels:</span> [<span class=\"string\">__param_target</span>]</span><br><span class=\"line\">        <span class=\"attr\">target_label:</span> <span class=\"string\">instance</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">target_label:</span> <span class=\"string\">__address__</span></span><br><span class=\"line\">        <span class=\"attr\">replacement:</span> <span class=\"string\">blackbox-exporter:9115</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">&#x27;blackbox-ssh&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">metrics_path:</span> <span class=\"string\">/probe</span></span><br><span class=\"line\">    <span class=\"attr\">params:</span></span><br><span class=\"line\">      <span class=\"attr\">module:</span> [<span class=\"string\">ssh_banner_check</span>]  <span class=\"comment\"># 对应TCP模块</span></span><br><span class=\"line\">    <span class=\"attr\">static_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">targets:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">&#x27;127.0.0.1:22&#x27;</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">&#x27;10.0.1.122:22&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">relabel_configs:</span> <span class=\"meta\">*common_relabel</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#relabel_configs配置解析</span></span><br><span class=\"line\"><span class=\"string\">Prometheus</span> <span class=\"string\">抓取任务生成</span></span><br><span class=\"line\"><span class=\"string\">│</span></span><br><span class=\"line\"><span class=\"string\">├─</span> <span class=\"string\">原始目标:</span> <span class=\"string\">example.com:80</span></span><br><span class=\"line\"><span class=\"string\">│</span>  <span class=\"string\">│</span></span><br><span class=\"line\"><span class=\"string\">│</span>  <span class=\"string\">├─</span> <span class=\"string\">relabel</span> <span class=\"string\">规则1:</span> <span class=\"string\">将地址赋值给</span> <span class=\"string\">__param_target</span> <span class=\"string\">→</span> <span class=\"string\">?target=example.com:80</span></span><br><span class=\"line\"><span class=\"string\">│</span>  <span class=\"string\">├─</span> <span class=\"string\">relabel</span> <span class=\"string\">规则2:</span> <span class=\"string\">用</span> <span class=\"string\">__param_target</span> <span class=\"string\">标记</span> <span class=\"string\">instance</span> <span class=\"string\">→</span> <span class=\"string\">instance=&quot;example.com:80&quot;</span></span><br><span class=\"line\"><span class=\"string\">│</span>  <span class=\"string\">└─</span> <span class=\"string\">relabel</span> <span class=\"string\">规则3:</span> <span class=\"string\">重写地址</span> <span class=\"string\">→</span> <span class=\"string\">实际请求发送到</span> <span class=\"string\">Blackbox</span> <span class=\"string\">Exporter</span></span><br><span class=\"line\"><span class=\"string\">│</span>     <span class=\"string\">│</span></span><br><span class=\"line\"><span class=\"string\">│</span>     <span class=\"string\">└─</span> <span class=\"string\">Blackbox</span> <span class=\"string\">Exporter</span> <span class=\"string\">收到请求，解析参数后探测</span> <span class=\"string\">example.com:80</span></span><br><span class=\"line\"><span class=\"string\">│</span></span><br><span class=\"line\"><span class=\"string\">└─</span> <span class=\"string\">原始目标:</span> <span class=\"string\">google.com:443</span></span><br><span class=\"line\">   <span class=\"string\">└─</span> <span class=\"string\">同理生成请求</span> <span class=\"string\">http://192.168.100.100:9115/probe?target=google.com:443&amp;module=http_2xx</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#告警ing</span></span><br><span class=\"line\"><span class=\"string\">probe_success&#123;job=&quot;blackbox-http&quot;&#125;</span> <span class=\"string\">==</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"comment\">#状态码</span></span><br><span class=\"line\"><span class=\"string\">probe_http_status_code&#123;job=&quot;blackbox-http&quot;&#125;</span> <span class=\"string\">&lt;</span> <span class=\"number\">200</span> <span class=\"string\">or</span> <span class=\"string\">probe_http_status_code&#123;job=&quot;blackbox-http&quot;&#125;</span> <span class=\"string\">&gt;=</span> <span class=\"number\">300</span></span><br><span class=\"line\"><span class=\"comment\">#证书过期时间</span></span><br><span class=\"line\"><span class=\"string\">probe_ssl_earliest_cert_expiry&#123;job=&quot;blackbox-http&quot;&#125;</span> <span class=\"bullet\">-</span> <span class=\"string\">time()</span> <span class=\"string\">&lt;</span> <span class=\"number\">86400</span> <span class=\"string\">*</span> <span class=\"number\">30</span>  <span class=\"comment\"># 30天</span></span><br><span class=\"line\"><span class=\"comment\">#tcp端口是否通</span></span><br><span class=\"line\"><span class=\"string\">probe_success&#123;job=&quot;blackbox-tcp&quot;&#125;</span> <span class=\"string\">==</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"comment\">#响应时长</span></span><br><span class=\"line\"><span class=\"string\">probe_duration_seconds&#123;job=&quot;blackbox-http&quot;&#125;</span> <span class=\"string\">&gt;</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"comment\">#解析时长</span></span><br><span class=\"line\"><span class=\"string\">probe_dns_lookup_time_seconds</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"process-exporter\"><a href=\"#process-exporter\" class=\"headerlink\" title=\"process-exporter\"></a>process-exporter</h1><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123;<span class=\"string\">.Comm</span>&#125;&#125; <span class=\"string\">包含原始可执行文件的基本名称，即</span> <span class=\"string\">/proc/&lt;pid&gt;/stat</span> <span class=\"string\">中的第</span> <span class=\"number\">2</span> <span class=\"string\">个字段，并截取前15个字符</span></span><br><span class=\"line\">&#123;&#123;<span class=\"string\">.ExeBase</span>&#125;&#125; <span class=\"string\">包含可执行文件的基本名称</span>  </span><br><span class=\"line\">&#123;&#123;<span class=\"string\">.ExeFull</span>&#125;&#125; <span class=\"string\">包含可执行文件的完全限定路径</span>  </span><br><span class=\"line\">&#123;&#123;<span class=\"string\">.Username</span>&#125;&#125; <span class=\"string\">包含有效用户的用户名</span>  </span><br><span class=\"line\">&#123;&#123;<span class=\"string\">.Matches</span>&#125;&#125; <span class=\"string\">map</span> <span class=\"string\">包含应用</span> <span class=\"string\">cmdline</span> <span class=\"string\">正则表达式产生的所有匹配项</span></span><br><span class=\"line\">&#123;&#123;<span class=\"string\">.PID</span>&#125;&#125; <span class=\"string\">包含进程的</span> <span class=\"string\">PID。请注意，使用</span> <span class=\"string\">PID</span> <span class=\"string\">意味着该组将仅包含一个进程</span></span><br><span class=\"line\">&#123;&#123;<span class=\"string\">.StartTime</span>&#125;&#125; <span class=\"string\">包含进程的开始时间。这与</span> <span class=\"string\">PID</span> <span class=\"string\">结合使用时非常有用，因为</span> <span class=\"string\">PID</span> <span class=\"string\">会随着时间的推移而被重用。</span></span><br><span class=\"line\">&#123;&#123;<span class=\"string\">.Cgroups</span>&#125;&#125; <span class=\"string\">包含（如果支持）进程的</span> <span class=\"string\">cgroups</span> <span class=\"string\">（/proc/self/cgroup）。这对于识别进程属于哪个容器特别有用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#process-exporter.yml</span></span><br><span class=\"line\"><span class=\"comment\">#常用的就comm和exefull,matches</span></span><br><span class=\"line\"><span class=\"attr\">process_names:</span></span><br><span class=\"line\">  <span class=\"comment\">#- name: &quot;&#123;&#123;.ExeFull&#125;&#125;&quot; </span></span><br><span class=\"line\">  <span class=\"comment\">#  cmdline:</span></span><br><span class=\"line\">  <span class=\"comment\">#  - &#x27;.+&#x27;  # 正则表达式（匹配任何非空内容）不常用太多了影响资源消耗</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123;.Comm&#125;&#125;</span>&quot;</span> <span class=\"comment\">#groupname=&quot;docker&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">cmdline:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;docker*&#x27;</span> </span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123;.Matches&#125;&#125;</span>&quot;</span> <span class=\"comment\">#groupname=&quot;map[:nginx]&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">cmdline:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;nginx*&#x27;</span> </span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123;.ExeFull&#125;&#125;</span>&quot;</span>  <span class=\"comment\">#groupname=&quot;/usr/sbin/mysqld</span></span><br><span class=\"line\">    <span class=\"attr\">cmdline:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;mysql*&#x27;</span></span><br><span class=\"line\">                </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#告警...</span></span><br><span class=\"line\"><span class=\"string\">namedprocess_namegroup_num_procs&#123;groupname!~&quot;.*process-exporter.*&quot;&#125;</span> <span class=\"string\">==</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"string\">namedprocess_namegroup_states&#123;state=&quot;Z&quot;&#125;</span> <span class=\"string\">&gt;</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"string\">namedprocess_namegroup_num_procs&#123;groupname=&quot;nginx&quot;&#125;</span> <span class=\"string\">==</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"comment\">#cpu百分比</span></span><br><span class=\"line\"><span class=\"number\">100</span> <span class=\"string\">*</span> <span class=\"string\">rate(namedprocess_namegroup_cpu_seconds_total&#123;groupname=&quot;java&quot;&#125;[5m])</span></span><br><span class=\"line\"><span class=\"number\">100</span> <span class=\"string\">*</span> <span class=\"string\">rate(namedprocess_namegroup_cpu_seconds_total&#123;&#125;[5m])</span> <span class=\"string\">&gt;</span> <span class=\"number\">50</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#内存 mb</span></span><br><span class=\"line\"><span class=\"string\">namedprocess_namegroup_memory_bytes&#123;groupname=&quot;java&quot;&#125;</span> <span class=\"string\">/</span> <span class=\"number\">1024</span><span class=\"string\">^2</span></span><br><span class=\"line\"><span class=\"string\">除于</span></span><br><span class=\"line\"><span class=\"comment\">#节点内存 就是占用内存百分比</span></span><br><span class=\"line\"><span class=\"string\">node_memory_MemTotal_bytes</span> <span class=\"string\">/</span> <span class=\"number\">1024</span> <span class=\"string\">/</span> <span class=\"number\">1024</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读速率 MB/S</span></span><br><span class=\"line\"><span class=\"string\">rate(namedprocess_namegroup_read_bytes_total&#123;groupname=&quot;mysql&quot;&#125;[5m])</span> <span class=\"string\">/</span> <span class=\"number\">1024</span><span class=\"string\">^2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 写速率</span></span><br><span class=\"line\"><span class=\"string\">rate(namedprocess_namegroup_write_bytes_total&#123;groupname=&quot;mysql&quot;&#125;[5m])</span> <span class=\"string\">/</span> <span class=\"number\">1024</span><span class=\"string\">^2</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"prometheus联邦\"><a href=\"#prometheus联邦\" class=\"headerlink\" title=\"prometheus联邦\"></a>prometheus联邦</h1><ul>\n<li>数量较多的情况下从多个下级 Prometheus 实例中提取特定指标，汇总到中心 Prometheus<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">                <span class=\"string\">Central</span> <span class=\"string\">Prometheus</span></span><br><span class=\"line\">                        <span class=\"string\">↑</span></span><br><span class=\"line\">        <span class=\"string\">从多个下级拉取聚合后的指标</span></span><br><span class=\"line\">                        <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">        +---------------+---------------+</span></span><br><span class=\"line\"><span class=\"string\">        |               |               |</span></span><br><span class=\"line\"><span class=\"string\"></span>   <span class=\"string\">Region</span> <span class=\"string\">A</span>       <span class=\"string\">Region</span> <span class=\"string\">B</span>       <span class=\"string\">Region</span> <span class=\"string\">C</span></span><br><span class=\"line\">   <span class=\"string\">Prometheus</span>    <span class=\"string\">Prometheus</span>    <span class=\"string\">Prometheus</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">scrape_configs:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">&#x27;federate-regions&#x27;</span>        <span class=\"comment\"># 任务名称</span></span><br><span class=\"line\">    <span class=\"attr\">scrape_interval:</span> <span class=\"string\">1m</span>                <span class=\"comment\"># 建议比下级采集间隔长</span></span><br><span class=\"line\">    <span class=\"attr\">honor_labels:</span> <span class=\"literal\">true</span>                 <span class=\"comment\"># 保留下级标签（避免覆盖）</span></span><br><span class=\"line\">    <span class=\"attr\">metrics_path:</span> <span class=\"string\">&#x27;/federate&#x27;</span>          <span class=\"comment\"># 联邦接口路径</span></span><br><span class=\"line\">    <span class=\"attr\">params:</span></span><br><span class=\"line\">      <span class=\"string\">&#x27;match[]&#x27;</span><span class=\"string\">:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">&#x27;&#123;job=&quot;api-server&quot;&#125;&#x27;</span>         <span class=\"comment\"># 拉取下级的指定 job 指标</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">&#x27;&#123;__name__=~&quot;job:.*&quot;&#125;&#x27;</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">&#x27;up&#123;instance=~&quot;.+&quot;&#125;&#x27;</span>         <span class=\"comment\"># 拉取所有下级实例的 up 状态</span></span><br><span class=\"line\">    <span class=\"attr\">static_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">targets:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">&#x27;prometheus-region-a:9090&#x27;</span> <span class=\"comment\"># 下级 Prometheus 地址</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">&#x27;prometheus-region-b:9090&#x27;</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">&#x27;prometheus-region-c:9090&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">match[]</span> <span class=\"string\">过滤条件</span></span><br><span class=\"line\"><span class=\"string\">精确匹配：&#x27;&#123;job=&quot;mysql&quot;&#125;&#x27;</span> <span class=\"string\">拉取所有</span> <span class=\"string\">job=mysql</span> <span class=\"string\">的指标。</span></span><br><span class=\"line\"><span class=\"string\">正则匹配：&#x27;__name__=~&quot;http_request_.+&quot;&#x27;</span> <span class=\"string\">拉取以</span> <span class=\"string\">http_request_</span> <span class=\"string\">开头的指标。</span></span><br><span class=\"line\"><span class=\"string\">组合条件：&#x27;&#123;env=&quot;prod&quot;,</span> <span class=\"string\">app=~&quot;web|api&quot;&#125;&#x27;</span> <span class=\"string\">拉取</span> <span class=\"string\">prod</span> <span class=\"string\">环境下</span> <span class=\"string\">web</span> <span class=\"string\">或</span> <span class=\"string\">api</span> <span class=\"string\">应用的指标。</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"proxysql","date":"2025-08-19T09:15:15.000Z","_content":"* proxysql是一款代理数据库的开源软件，此外还有maxsacle<br>\nhttps://github.com/sysown/proxysql\n\n# 搭建读写分离\n```shell\nmkdir -p proxysql && cd proxysql\nmkdir -p mysql/{master,proxysql,slave}/conf\n\n\n#proxysql.cnf配置\ndatadir=\"/var/lib/proxysql\"\n\nmysql_servers =\n(\n    {\n        address = \"mysql-master\"\n        port = 3306\n        hostgroup = 10  # 写组\n        max_connections = 200\n    },\n    {\n        address = \"mysql-slave\"\n        port = 3306\n        hostgroup = 20  # 读组\n      #  weight = 110\n        max_connections = 1000\n    },\n    #  {\n  #      address = \"mysql-slave2\"   # 从库2\n  #      port = 3306\n  #      hostgroup_id = 20\n   #     weight = 100\n  #      max_connections = 500\n   # }\n)\n\n#CREATE USER 'appuser'@'%' IDENTIFIED BY 'AppUser123!';\n#GRANT ALL PRIVILEGES ON *.* TO 'appuser'@'%';\nmysql_users =\n(\n    {\n        username = \"appuser\" #后端mysql的用户\n        password = \"AppUser123!\"\n        default_hostgroup = 10\n    }\n)\n\nmysql_query_rules =\n(\n    {\n        rule_id = 100 #规则唯一标识符，数值越小优先级越高\n        active = 1  #规则是否启用：1 启用，0 禁用\n        match_pattern = \"^SELECT\" #匹配读请求\n        destination_hostgroup = 20 #匹配的 SQL 请求路由到的主机组\n        apply = 1 #是否在匹配后终止后续规则匹配：1 终止，0 继续\n    },\n    {\n        rule_id = 200\n        active = 1\n        match_pattern = \"^((?!SELECT).)*$\" \n        destination_hostgroup = 10\n        apply = 1\n    }\n)\n#docker exec -it proxysql-proxysql-1 mysql -uadmin -padmin -h127.0.0.1 -P6032\n#6032是管理端口，显示的是proxysql的元数据表，\n#可以通过环境变量修改默认密码admin\n#UPDATE global_variables SET variable_value='admin:new_password' WHERE variable_name='admin-admin_credentials';\n#SELECT * FROM global_variables  WHERE variable_name LIKE 'admin-admin_%';\n\n\n#mysql -uappuser -pAppUser123! -h127.0.0.1 -P6033 \n#6033是服务端口，直接可以路由到后端mysql\n\n#master配置\n[mysqld]\nserver_id = 1\nlog_bin = mysql-bin\nbinlog_format = ROW\n\n#slave配置\n[mysqld]\nserver_id = 2\nrelay_log = mysql-relay-bin\nread_only = 1\n\n#======================================================================================\ncat >> docker-compose.yaml << 'EOF'\nversion: '3.8'\n\nservices:\n  mysql-master:\n    image: registry.cn-hangzhou.aliyuncs.com/lky-deploy/mysql:8.0.43\n    networks:\n      - mysql-network\n    environment:\n      MYSQL_ROOT_PASSWORD: MasterRoot123!\n      MYSQL_REPLICATION_USER: repl\n      MYSQL_REPLICATION_PASSWORD: ReplPass123!\n    volumes:\n      - ./mysql/master/conf:/etc/mysql/conf.d\n      - ./mysql/master/data:/var/lib/mysql\n    command:\n      - --character-set-server=utf8mb4\n      - --collation-server=utf8mb4_unicode_ci\n\n  mysql-slave:\n    image: registry.cn-hangzhou.aliyuncs.com/lky-deploy/mysql:8.0.43\n    networks:\n      - mysql-network\n    environment:\n      MYSQL_ROOT_PASSWORD: SlaveRoot123!\n    volumes:\n      - ./mysql/slave/conf:/etc/mysql/conf.d\n      - ./mysql/slave/data:/var/lib/mysql\n    command:\n      - --character-set-server=utf8mb4\n      - --collation-server=utf8mb4_unicode_ci\n\n  proxysql:\n    image: registry.cn-hangzhou.aliyuncs.com/lky-deploy/mysql:proxysql\n    networks:\n      - mysql-network\n    ports:\n      - \"6033:6033\"\n      - \"6032:6032\"\n    volumes:\n      - ./mysql/proxysql/proxysql.cnf:/etc/proxysql.cnf\n    depends_on:\n      - mysql-master\n      - mysql-slave\n\nnetworks:\n  mysql-network:\n    driver: bridge\nEOF\n\n#===================================================================================\n#配置主从复制\n#8.4版本以上语法 SHOW BINARY LOG STATUS;\ndocker exec -it proxysql-mysql-master-1 mysql -uroot -p\"MasterRoot123!\" -e \\\n\"CREATE USER 'repl'@'%' IDENTIFIED WITH mysql_native_password BY 'ReplPass123!'; \\\nGRANT REPLICATION SLAVE ON *.* TO 'repl'@'%'; \\\nFLUSH PRIVILEGES; \\\nSHOW MASTER STATUS;\"\n\n#MASTER_LOG_POS可以通过 SHOW MASTER STATUS;在master节点执行查看\ndocker exec -it proxysql-mysql-slave-1 mysql -uroot -pSlaveRoot123! -e \\\n\"CHANGE MASTER TO \\\nMASTER_HOST='mysql-master', \\\nMASTER_USER='repl', \\\nMASTER_PASSWORD='ReplPass123!', \\\nMASTER_LOG_FILE='mysql-bin.000003', \\\nMASTER_LOG_POS=827; \\\nSTART SLAVE; \\\nSHOW SLAVE STATUS\\G\"\n\n\n#SHOW MASTER STATUS;\n#SHOW SLAVE STATUS;\n#SHOW BINARY LOGS;\n#SHOW BINLOG EVENTS;\n#show binlog events in 'mysql-bin.000002' from 219 limit 5;\n\n#reset master; #清空所有binlog\n#flush logs;  #刷新binlog，直接生成新的binlog文件\n\n#SHOW VARIABLES LIKE \"%expire_logs_days%\";    #binlog保存多久 \n#SHOW VARIABLES LIKE 'binlog_expire_logs_seconds'; 优先级比expire_logs_days高\n#SHOW VARIABLES LIKE \"%max_binlog%\";  #单个binlog到多大开始生成新的\n\n#================================================================================\n#创建proxysql的监控后端mysql用户，注意只需要在master节点执行，因为已经主从同步了，不然主从会报错停止\n-- 创建监控用户\nCREATE USER 'monitor'@'%' IDENTIFIED  BY 'MonitorPass123!';\n\n-- 授予必要权限（ProxySQL 健康检查需要）\nGRANT USAGE, REPLICATION CLIENT ON *.* TO 'monitor'@'%';\n\n-- grant all privileges on *.* to 'monitor'@'%' with grant option;\n\n-- 刷新权限\nFLUSH PRIVILEGES;\n\n#登录proxysql\ndocker exec -it proxysql-proxysql-1 mysql -uadmin -padmin -h127.0.0.1 -P6032\n#proxysql监控用户名和密码默认都是monitor，可以通过以下语句查看\nSELECT * FROM global_variables \nWHERE variable_name IN ('mysql-monitor_username', 'mysql-monitor_password');\n#修改密码\nUPDATE global_variables SET variable_value='MonitorPass123!'\nWHERE variable_name='mysql-monitor_password';\nload mysql variables to runtime;\nsave mysql variables to disk;\n\n#proxysql的相关元数据表\nSELECT hostgroup_id, hostname, status FROM main.mysql_servers;;\nhostgroup_id：服务器所属主机组（如读写分离的读组 20 和写组 10）。\nhostname：服务器地址（IP 或域名）。\nstatus：节点状态，如 ONLINE（正常）、OFFLINE_SOFT（软下线）、OFFLINE_HARD（硬下线）、SHUNNED（临时屏蔽）\n\n\nSELECT hostgroup, username, digest_text,count_star,sum_time FROM stats.stats_mysql_query_digest;\ndigest_text：归一化后的 SQL 模板（如 SELECT * FROM users WHERE id=?）。\ncount_star：该 SQL 模板的执行次数。\nsum_time：该 SQL 模板的总耗时（微秒）。\nhostgroup：请求路由到的主机组。\nusername：执行 SQL 的客户端用户。\n\n\nSELECT * FROM global_variables WHERE variable_name LIKE 'mysql-monitor%';\nmysql-monitor_username：监控用户（需在后端 MySQL 存在并授权）。\nmysql-monitor_ping_interval：Ping 检查间隔（毫秒）。\nmysql-monitor_read_only_interval：检查主库只读状态的频率。\n\nSELECT * FROM monitor.mysql_server_connect_log   ORDER BY time_start_us DESC           LIMIT 3;\nconnect_error：失败原因（如超时、权限拒绝）。\ntime_start_us：连接开始时间（微秒精度）。\n\n```\n\n  \n\n# 主从同步如果报错\n```shell\n#主从错误，在主库创建完用户从库就不用创建了，不然冲突主从就停止了\n#可以通过以下命令查询导致主从停止的语句，并且修改\nSELECT * FROM performance_schema.replication_applier_status_by_worker\\G\n\n\n#重新启动\nSTOP REPLICA;\nSTART REPLICA;\n\n```\n","source":"_posts/proxysql.md","raw":"---\ntitle: proxysql\ndate: 2025-08-19 17:15:15\ntags:\ncategories: 中间件\n---\n* proxysql是一款代理数据库的开源软件，此外还有maxsacle<br>\nhttps://github.com/sysown/proxysql\n\n# 搭建读写分离\n```shell\nmkdir -p proxysql && cd proxysql\nmkdir -p mysql/{master,proxysql,slave}/conf\n\n\n#proxysql.cnf配置\ndatadir=\"/var/lib/proxysql\"\n\nmysql_servers =\n(\n    {\n        address = \"mysql-master\"\n        port = 3306\n        hostgroup = 10  # 写组\n        max_connections = 200\n    },\n    {\n        address = \"mysql-slave\"\n        port = 3306\n        hostgroup = 20  # 读组\n      #  weight = 110\n        max_connections = 1000\n    },\n    #  {\n  #      address = \"mysql-slave2\"   # 从库2\n  #      port = 3306\n  #      hostgroup_id = 20\n   #     weight = 100\n  #      max_connections = 500\n   # }\n)\n\n#CREATE USER 'appuser'@'%' IDENTIFIED BY 'AppUser123!';\n#GRANT ALL PRIVILEGES ON *.* TO 'appuser'@'%';\nmysql_users =\n(\n    {\n        username = \"appuser\" #后端mysql的用户\n        password = \"AppUser123!\"\n        default_hostgroup = 10\n    }\n)\n\nmysql_query_rules =\n(\n    {\n        rule_id = 100 #规则唯一标识符，数值越小优先级越高\n        active = 1  #规则是否启用：1 启用，0 禁用\n        match_pattern = \"^SELECT\" #匹配读请求\n        destination_hostgroup = 20 #匹配的 SQL 请求路由到的主机组\n        apply = 1 #是否在匹配后终止后续规则匹配：1 终止，0 继续\n    },\n    {\n        rule_id = 200\n        active = 1\n        match_pattern = \"^((?!SELECT).)*$\" \n        destination_hostgroup = 10\n        apply = 1\n    }\n)\n#docker exec -it proxysql-proxysql-1 mysql -uadmin -padmin -h127.0.0.1 -P6032\n#6032是管理端口，显示的是proxysql的元数据表，\n#可以通过环境变量修改默认密码admin\n#UPDATE global_variables SET variable_value='admin:new_password' WHERE variable_name='admin-admin_credentials';\n#SELECT * FROM global_variables  WHERE variable_name LIKE 'admin-admin_%';\n\n\n#mysql -uappuser -pAppUser123! -h127.0.0.1 -P6033 \n#6033是服务端口，直接可以路由到后端mysql\n\n#master配置\n[mysqld]\nserver_id = 1\nlog_bin = mysql-bin\nbinlog_format = ROW\n\n#slave配置\n[mysqld]\nserver_id = 2\nrelay_log = mysql-relay-bin\nread_only = 1\n\n#======================================================================================\ncat >> docker-compose.yaml << 'EOF'\nversion: '3.8'\n\nservices:\n  mysql-master:\n    image: registry.cn-hangzhou.aliyuncs.com/lky-deploy/mysql:8.0.43\n    networks:\n      - mysql-network\n    environment:\n      MYSQL_ROOT_PASSWORD: MasterRoot123!\n      MYSQL_REPLICATION_USER: repl\n      MYSQL_REPLICATION_PASSWORD: ReplPass123!\n    volumes:\n      - ./mysql/master/conf:/etc/mysql/conf.d\n      - ./mysql/master/data:/var/lib/mysql\n    command:\n      - --character-set-server=utf8mb4\n      - --collation-server=utf8mb4_unicode_ci\n\n  mysql-slave:\n    image: registry.cn-hangzhou.aliyuncs.com/lky-deploy/mysql:8.0.43\n    networks:\n      - mysql-network\n    environment:\n      MYSQL_ROOT_PASSWORD: SlaveRoot123!\n    volumes:\n      - ./mysql/slave/conf:/etc/mysql/conf.d\n      - ./mysql/slave/data:/var/lib/mysql\n    command:\n      - --character-set-server=utf8mb4\n      - --collation-server=utf8mb4_unicode_ci\n\n  proxysql:\n    image: registry.cn-hangzhou.aliyuncs.com/lky-deploy/mysql:proxysql\n    networks:\n      - mysql-network\n    ports:\n      - \"6033:6033\"\n      - \"6032:6032\"\n    volumes:\n      - ./mysql/proxysql/proxysql.cnf:/etc/proxysql.cnf\n    depends_on:\n      - mysql-master\n      - mysql-slave\n\nnetworks:\n  mysql-network:\n    driver: bridge\nEOF\n\n#===================================================================================\n#配置主从复制\n#8.4版本以上语法 SHOW BINARY LOG STATUS;\ndocker exec -it proxysql-mysql-master-1 mysql -uroot -p\"MasterRoot123!\" -e \\\n\"CREATE USER 'repl'@'%' IDENTIFIED WITH mysql_native_password BY 'ReplPass123!'; \\\nGRANT REPLICATION SLAVE ON *.* TO 'repl'@'%'; \\\nFLUSH PRIVILEGES; \\\nSHOW MASTER STATUS;\"\n\n#MASTER_LOG_POS可以通过 SHOW MASTER STATUS;在master节点执行查看\ndocker exec -it proxysql-mysql-slave-1 mysql -uroot -pSlaveRoot123! -e \\\n\"CHANGE MASTER TO \\\nMASTER_HOST='mysql-master', \\\nMASTER_USER='repl', \\\nMASTER_PASSWORD='ReplPass123!', \\\nMASTER_LOG_FILE='mysql-bin.000003', \\\nMASTER_LOG_POS=827; \\\nSTART SLAVE; \\\nSHOW SLAVE STATUS\\G\"\n\n\n#SHOW MASTER STATUS;\n#SHOW SLAVE STATUS;\n#SHOW BINARY LOGS;\n#SHOW BINLOG EVENTS;\n#show binlog events in 'mysql-bin.000002' from 219 limit 5;\n\n#reset master; #清空所有binlog\n#flush logs;  #刷新binlog，直接生成新的binlog文件\n\n#SHOW VARIABLES LIKE \"%expire_logs_days%\";    #binlog保存多久 \n#SHOW VARIABLES LIKE 'binlog_expire_logs_seconds'; 优先级比expire_logs_days高\n#SHOW VARIABLES LIKE \"%max_binlog%\";  #单个binlog到多大开始生成新的\n\n#================================================================================\n#创建proxysql的监控后端mysql用户，注意只需要在master节点执行，因为已经主从同步了，不然主从会报错停止\n-- 创建监控用户\nCREATE USER 'monitor'@'%' IDENTIFIED  BY 'MonitorPass123!';\n\n-- 授予必要权限（ProxySQL 健康检查需要）\nGRANT USAGE, REPLICATION CLIENT ON *.* TO 'monitor'@'%';\n\n-- grant all privileges on *.* to 'monitor'@'%' with grant option;\n\n-- 刷新权限\nFLUSH PRIVILEGES;\n\n#登录proxysql\ndocker exec -it proxysql-proxysql-1 mysql -uadmin -padmin -h127.0.0.1 -P6032\n#proxysql监控用户名和密码默认都是monitor，可以通过以下语句查看\nSELECT * FROM global_variables \nWHERE variable_name IN ('mysql-monitor_username', 'mysql-monitor_password');\n#修改密码\nUPDATE global_variables SET variable_value='MonitorPass123!'\nWHERE variable_name='mysql-monitor_password';\nload mysql variables to runtime;\nsave mysql variables to disk;\n\n#proxysql的相关元数据表\nSELECT hostgroup_id, hostname, status FROM main.mysql_servers;;\nhostgroup_id：服务器所属主机组（如读写分离的读组 20 和写组 10）。\nhostname：服务器地址（IP 或域名）。\nstatus：节点状态，如 ONLINE（正常）、OFFLINE_SOFT（软下线）、OFFLINE_HARD（硬下线）、SHUNNED（临时屏蔽）\n\n\nSELECT hostgroup, username, digest_text,count_star,sum_time FROM stats.stats_mysql_query_digest;\ndigest_text：归一化后的 SQL 模板（如 SELECT * FROM users WHERE id=?）。\ncount_star：该 SQL 模板的执行次数。\nsum_time：该 SQL 模板的总耗时（微秒）。\nhostgroup：请求路由到的主机组。\nusername：执行 SQL 的客户端用户。\n\n\nSELECT * FROM global_variables WHERE variable_name LIKE 'mysql-monitor%';\nmysql-monitor_username：监控用户（需在后端 MySQL 存在并授权）。\nmysql-monitor_ping_interval：Ping 检查间隔（毫秒）。\nmysql-monitor_read_only_interval：检查主库只读状态的频率。\n\nSELECT * FROM monitor.mysql_server_connect_log   ORDER BY time_start_us DESC           LIMIT 3;\nconnect_error：失败原因（如超时、权限拒绝）。\ntime_start_us：连接开始时间（微秒精度）。\n\n```\n\n  \n\n# 主从同步如果报错\n```shell\n#主从错误，在主库创建完用户从库就不用创建了，不然冲突主从就停止了\n#可以通过以下命令查询导致主从停止的语句，并且修改\nSELECT * FROM performance_schema.replication_applier_status_by_worker\\G\n\n\n#重新启动\nSTOP REPLICA;\nSTART REPLICA;\n\n```\n","slug":"proxysql","published":1,"updated":"2025-08-28T06:39:18.221Z","comments":1,"layout":"post","photos":[],"_id":"cmev1ggc7000shllz0yyd7e7n","content":"<ul>\n<li>proxysql是一款代理数据库的开源软件，此外还有maxsacle<br><br><a href=\"https://github.com/sysown/proxysql\">https://github.com/sysown/proxysql</a></li>\n</ul>\n<h1 id=\"搭建读写分离\"><a href=\"#搭建读写分离\" class=\"headerlink\" title=\"搭建读写分离\"></a>搭建读写分离</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p proxysql &amp;&amp; cd proxysql</span><br><span class=\"line\">mkdir -p mysql/&#123;master,proxysql,slave&#125;/conf</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">proxysql.cnf配置</span></span><br><span class=\"line\">datadir=&quot;/var/lib/proxysql&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">mysql_servers =</span><br><span class=\"line\">(</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        address = &quot;mysql-master&quot;</span><br><span class=\"line\">        port = 3306</span><br><span class=\"line\">        hostgroup = 10  # 写组</span><br><span class=\"line\">        max_connections = 200</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        address = &quot;mysql-slave&quot;</span><br><span class=\"line\">        port = 3306</span><br><span class=\"line\">        hostgroup = 20  # 读组</span><br><span class=\"line\">      #  weight = 110</span><br><span class=\"line\">        max_connections = 1000</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    #  &#123;</span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\">     address = <span class=\"string\">&quot;mysql-slave2&quot;</span>   <span class=\"comment\"># 从库2</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\">     port = 3306</span></span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\">     hostgroup_id = 20</span></span><br><span class=\"line\"><span class=\"meta prompt_\">   # </span><span class=\"language-bash\">    weight = 100</span></span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\">     max_connections = 500</span></span><br><span class=\"line\"><span class=\"meta prompt_\">   # </span><span class=\"language-bash\">&#125;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">CREATE USER <span class=\"string\">&#x27;appuser&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span> IDENTIFIED BY <span class=\"string\">&#x27;AppUser123!&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">GRANT ALL PRIVILEGES ON *.* TO <span class=\"string\">&#x27;appuser&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span>;</span></span><br><span class=\"line\">mysql_users =</span><br><span class=\"line\">(</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        username = &quot;appuser&quot; #后端mysql的用户</span><br><span class=\"line\">        password = &quot;AppUser123!&quot;</span><br><span class=\"line\">        default_hostgroup = 10</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql_query_rules =</span><br><span class=\"line\">(</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        rule_id = 100 #规则唯一标识符，数值越小优先级越高</span><br><span class=\"line\">        active = 1  #规则是否启用：1 启用，0 禁用</span><br><span class=\"line\">        match_pattern = &quot;^SELECT&quot; #匹配读请求</span><br><span class=\"line\">        destination_hostgroup = 20 #匹配的 SQL 请求路由到的主机组</span><br><span class=\"line\">        apply = 1 #是否在匹配后终止后续规则匹配：1 终止，0 继续</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        rule_id = 200</span><br><span class=\"line\">        active = 1</span><br><span class=\"line\">        match_pattern = &quot;^((?!SELECT).)*$&quot; </span><br><span class=\"line\">        destination_hostgroup = 10</span><br><span class=\"line\">        apply = 1</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">docker <span class=\"built_in\">exec</span> -it proxysql-proxysql-1 mysql -uadmin -padmin -h127.0.0.1 -P6032</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">6032是管理端口，显示的是proxysql的元数据表，</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">可以通过环境变量修改默认密码admin</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">UPDATE global_variables SET variable_value=<span class=\"string\">&#x27;admin:new_password&#x27;</span> WHERE variable_name=<span class=\"string\">&#x27;admin-admin_credentials&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">SELECT * FROM global_variables  WHERE variable_name LIKE <span class=\"string\">&#x27;admin-admin_%&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">mysql -uappuser -pAppUser123! -h127.0.0.1 -P6033</span> </span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">6033是服务端口，直接可以路由到后端mysql</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">master配置</span></span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">server_id = 1</span><br><span class=\"line\">log_bin = mysql-bin</span><br><span class=\"line\">binlog_format = ROW</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">slave配置</span></span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">server_id = 2</span><br><span class=\"line\">relay_log = mysql-relay-bin</span><br><span class=\"line\">read_only = 1</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">======================================================================================</span></span><br><span class=\"line\">cat &gt;&gt; docker-compose.yaml &lt;&lt; &#x27;EOF&#x27;</span><br><span class=\"line\">version: &#x27;3.8&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">services:</span><br><span class=\"line\">  mysql-master:</span><br><span class=\"line\">    image: registry.cn-hangzhou.aliyuncs.com/lky-deploy/mysql:8.0.43</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - mysql-network</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      MYSQL_ROOT_PASSWORD: MasterRoot123!</span><br><span class=\"line\">      MYSQL_REPLICATION_USER: repl</span><br><span class=\"line\">      MYSQL_REPLICATION_PASSWORD: ReplPass123!</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - ./mysql/master/conf:/etc/mysql/conf.d</span><br><span class=\"line\">      - ./mysql/master/data:/var/lib/mysql</span><br><span class=\"line\">    command:</span><br><span class=\"line\">      - --character-set-server=utf8mb4</span><br><span class=\"line\">      - --collation-server=utf8mb4_unicode_ci</span><br><span class=\"line\"></span><br><span class=\"line\">  mysql-slave:</span><br><span class=\"line\">    image: registry.cn-hangzhou.aliyuncs.com/lky-deploy/mysql:8.0.43</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - mysql-network</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      MYSQL_ROOT_PASSWORD: SlaveRoot123!</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - ./mysql/slave/conf:/etc/mysql/conf.d</span><br><span class=\"line\">      - ./mysql/slave/data:/var/lib/mysql</span><br><span class=\"line\">    command:</span><br><span class=\"line\">      - --character-set-server=utf8mb4</span><br><span class=\"line\">      - --collation-server=utf8mb4_unicode_ci</span><br><span class=\"line\"></span><br><span class=\"line\">  proxysql:</span><br><span class=\"line\">    image: registry.cn-hangzhou.aliyuncs.com/lky-deploy/mysql:proxysql</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - mysql-network</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - &quot;6033:6033&quot;</span><br><span class=\"line\">      - &quot;6032:6032&quot;</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - ./mysql/proxysql/proxysql.cnf:/etc/proxysql.cnf</span><br><span class=\"line\">    depends_on:</span><br><span class=\"line\">      - mysql-master</span><br><span class=\"line\">      - mysql-slave</span><br><span class=\"line\"></span><br><span class=\"line\">networks:</span><br><span class=\"line\">  mysql-network:</span><br><span class=\"line\">    driver: bridge</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">===================================================================================</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">配置主从复制</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">8.4版本以上语法 SHOW BINARY LOG STATUS;</span></span><br><span class=\"line\">docker exec -it proxysql-mysql-master-1 mysql -uroot -p&quot;MasterRoot123!&quot; -e \\</span><br><span class=\"line\">&quot;CREATE USER &#x27;repl&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;ReplPass123!&#x27;; \\</span><br><span class=\"line\">GRANT REPLICATION SLAVE ON *.* TO &#x27;repl&#x27;@&#x27;%&#x27;; \\</span><br><span class=\"line\">FLUSH PRIVILEGES; \\</span><br><span class=\"line\">SHOW MASTER STATUS;&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">MASTER_LOG_POS可以通过 SHOW MASTER STATUS;在master节点执行查看</span></span><br><span class=\"line\">docker exec -it proxysql-mysql-slave-1 mysql -uroot -pSlaveRoot123! -e \\</span><br><span class=\"line\">&quot;CHANGE MASTER TO \\</span><br><span class=\"line\">MASTER_HOST=&#x27;mysql-master&#x27;, \\</span><br><span class=\"line\">MASTER_USER=&#x27;repl&#x27;, \\</span><br><span class=\"line\">MASTER_PASSWORD=&#x27;ReplPass123!&#x27;, \\</span><br><span class=\"line\">MASTER_LOG_FILE=&#x27;mysql-bin.000003&#x27;, \\</span><br><span class=\"line\">MASTER_LOG_POS=827; \\</span><br><span class=\"line\">START SLAVE; \\</span><br><span class=\"line\">SHOW SLAVE STATUS\\G&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">SHOW MASTER STATUS;</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">SHOW SLAVE STATUS;</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">SHOW BINARY LOGS;</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">SHOW BINLOG EVENTS;</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">show binlog events <span class=\"keyword\">in</span> <span class=\"string\">&#x27;mysql-bin.000002&#x27;</span> from 219 <span class=\"built_in\">limit</span> 5;</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">reset master; <span class=\"comment\">#清空所有binlog</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">flush logs;  <span class=\"comment\">#刷新binlog，直接生成新的binlog文件</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">SHOW VARIABLES LIKE <span class=\"string\">&quot;%expire_logs_days%&quot;</span>;    <span class=\"comment\">#binlog保存多久</span></span> </span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">SHOW VARIABLES LIKE <span class=\"string\">&#x27;binlog_expire_logs_seconds&#x27;</span>; 优先级比expire_logs_days高</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">SHOW VARIABLES LIKE <span class=\"string\">&quot;%max_binlog%&quot;</span>;  <span class=\"comment\">#单个binlog到多大开始生成新的</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">================================================================================</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">创建proxysql的监控后端mysql用户，注意只需要在master节点执行，因为已经主从同步了，不然主从会报错停止</span></span><br><span class=\"line\">-- 创建监控用户</span><br><span class=\"line\">CREATE USER &#x27;monitor&#x27;@&#x27;%&#x27; IDENTIFIED  BY &#x27;MonitorPass123!&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">-- 授予必要权限（ProxySQL 健康检查需要）</span><br><span class=\"line\">GRANT USAGE, REPLICATION CLIENT ON *.* TO &#x27;monitor&#x27;@&#x27;%&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">-- grant all privileges on *.* to &#x27;monitor&#x27;@&#x27;%&#x27; with grant option;</span><br><span class=\"line\"></span><br><span class=\"line\">-- 刷新权限</span><br><span class=\"line\">FLUSH PRIVILEGES;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">登录proxysql</span></span><br><span class=\"line\">docker exec -it proxysql-proxysql-1 mysql -uadmin -padmin -h127.0.0.1 -P6032</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">proxysql监控用户名和密码默认都是monitor，可以通过以下语句查看</span></span><br><span class=\"line\">SELECT * FROM global_variables </span><br><span class=\"line\">WHERE variable_name IN (&#x27;mysql-monitor_username&#x27;, &#x27;mysql-monitor_password&#x27;);</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">修改密码</span></span><br><span class=\"line\">UPDATE global_variables SET variable_value=&#x27;MonitorPass123!&#x27;</span><br><span class=\"line\">WHERE variable_name=&#x27;mysql-monitor_password&#x27;;</span><br><span class=\"line\">load mysql variables to runtime;</span><br><span class=\"line\">save mysql variables to disk;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">proxysql的相关元数据表</span></span><br><span class=\"line\">SELECT hostgroup_id, hostname, status FROM main.mysql_servers;;</span><br><span class=\"line\">hostgroup_id：服务器所属主机组（如读写分离的读组 20 和写组 10）。</span><br><span class=\"line\">hostname：服务器地址（IP 或域名）。</span><br><span class=\"line\">status：节点状态，如 ONLINE（正常）、OFFLINE_SOFT（软下线）、OFFLINE_HARD（硬下线）、SHUNNED（临时屏蔽）</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">SELECT hostgroup, username, digest_text,count_star,sum_time FROM stats.stats_mysql_query_digest;</span><br><span class=\"line\">digest_text：归一化后的 SQL 模板（如 SELECT * FROM users WHERE id=?）。</span><br><span class=\"line\">count_star：该 SQL 模板的执行次数。</span><br><span class=\"line\">sum_time：该 SQL 模板的总耗时（微秒）。</span><br><span class=\"line\">hostgroup：请求路由到的主机组。</span><br><span class=\"line\">username：执行 SQL 的客户端用户。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">SELECT * FROM global_variables WHERE variable_name LIKE &#x27;mysql-monitor%&#x27;;</span><br><span class=\"line\">mysql-monitor_username：监控用户（需在后端 MySQL 存在并授权）。</span><br><span class=\"line\">mysql-monitor_ping_interval：Ping 检查间隔（毫秒）。</span><br><span class=\"line\">mysql-monitor_read_only_interval：检查主库只读状态的频率。</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT * FROM monitor.mysql_server_connect_log   ORDER BY time_start_us DESC           LIMIT 3;</span><br><span class=\"line\">connect_error：失败原因（如超时、权限拒绝）。</span><br><span class=\"line\">time_start_us：连接开始时间（微秒精度）。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"主从同步如果报错\"><a href=\"#主从同步如果报错\" class=\"headerlink\" title=\"主从同步如果报错\"></a>主从同步如果报错</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">主从错误，在主库创建完用户从库就不用创建了，不然冲突主从就停止了</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">可以通过以下命令查询导致主从停止的语句，并且修改</span></span><br><span class=\"line\">SELECT * FROM performance_schema.replication_applier_status_by_worker\\G</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">重新启动</span></span><br><span class=\"line\">STOP REPLICA;</span><br><span class=\"line\">START REPLICA;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<ul>\n<li>proxysql是一款代理数据库的开源软件，此外还有maxsacle<br><br><a href=\"https://github.com/sysown/proxysql\">https://github.com/sysown/proxysql</a></li>\n</ul>\n<h1 id=\"搭建读写分离\"><a href=\"#搭建读写分离\" class=\"headerlink\" title=\"搭建读写分离\"></a>搭建读写分离</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p proxysql &amp;&amp; cd proxysql</span><br><span class=\"line\">mkdir -p mysql/&#123;master,proxysql,slave&#125;/conf</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">proxysql.cnf配置</span></span><br><span class=\"line\">datadir=&quot;/var/lib/proxysql&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">mysql_servers =</span><br><span class=\"line\">(</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        address = &quot;mysql-master&quot;</span><br><span class=\"line\">        port = 3306</span><br><span class=\"line\">        hostgroup = 10  # 写组</span><br><span class=\"line\">        max_connections = 200</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        address = &quot;mysql-slave&quot;</span><br><span class=\"line\">        port = 3306</span><br><span class=\"line\">        hostgroup = 20  # 读组</span><br><span class=\"line\">      #  weight = 110</span><br><span class=\"line\">        max_connections = 1000</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    #  &#123;</span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\">     address = <span class=\"string\">&quot;mysql-slave2&quot;</span>   <span class=\"comment\"># 从库2</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\">     port = 3306</span></span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\">     hostgroup_id = 20</span></span><br><span class=\"line\"><span class=\"meta prompt_\">   # </span><span class=\"language-bash\">    weight = 100</span></span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\">     max_connections = 500</span></span><br><span class=\"line\"><span class=\"meta prompt_\">   # </span><span class=\"language-bash\">&#125;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">CREATE USER <span class=\"string\">&#x27;appuser&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span> IDENTIFIED BY <span class=\"string\">&#x27;AppUser123!&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">GRANT ALL PRIVILEGES ON *.* TO <span class=\"string\">&#x27;appuser&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span>;</span></span><br><span class=\"line\">mysql_users =</span><br><span class=\"line\">(</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        username = &quot;appuser&quot; #后端mysql的用户</span><br><span class=\"line\">        password = &quot;AppUser123!&quot;</span><br><span class=\"line\">        default_hostgroup = 10</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql_query_rules =</span><br><span class=\"line\">(</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        rule_id = 100 #规则唯一标识符，数值越小优先级越高</span><br><span class=\"line\">        active = 1  #规则是否启用：1 启用，0 禁用</span><br><span class=\"line\">        match_pattern = &quot;^SELECT&quot; #匹配读请求</span><br><span class=\"line\">        destination_hostgroup = 20 #匹配的 SQL 请求路由到的主机组</span><br><span class=\"line\">        apply = 1 #是否在匹配后终止后续规则匹配：1 终止，0 继续</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        rule_id = 200</span><br><span class=\"line\">        active = 1</span><br><span class=\"line\">        match_pattern = &quot;^((?!SELECT).)*$&quot; </span><br><span class=\"line\">        destination_hostgroup = 10</span><br><span class=\"line\">        apply = 1</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">docker <span class=\"built_in\">exec</span> -it proxysql-proxysql-1 mysql -uadmin -padmin -h127.0.0.1 -P6032</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">6032是管理端口，显示的是proxysql的元数据表，</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">可以通过环境变量修改默认密码admin</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">UPDATE global_variables SET variable_value=<span class=\"string\">&#x27;admin:new_password&#x27;</span> WHERE variable_name=<span class=\"string\">&#x27;admin-admin_credentials&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">SELECT * FROM global_variables  WHERE variable_name LIKE <span class=\"string\">&#x27;admin-admin_%&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">mysql -uappuser -pAppUser123! -h127.0.0.1 -P6033</span> </span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">6033是服务端口，直接可以路由到后端mysql</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">master配置</span></span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">server_id = 1</span><br><span class=\"line\">log_bin = mysql-bin</span><br><span class=\"line\">binlog_format = ROW</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">slave配置</span></span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">server_id = 2</span><br><span class=\"line\">relay_log = mysql-relay-bin</span><br><span class=\"line\">read_only = 1</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">======================================================================================</span></span><br><span class=\"line\">cat &gt;&gt; docker-compose.yaml &lt;&lt; &#x27;EOF&#x27;</span><br><span class=\"line\">version: &#x27;3.8&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">services:</span><br><span class=\"line\">  mysql-master:</span><br><span class=\"line\">    image: registry.cn-hangzhou.aliyuncs.com/lky-deploy/mysql:8.0.43</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - mysql-network</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      MYSQL_ROOT_PASSWORD: MasterRoot123!</span><br><span class=\"line\">      MYSQL_REPLICATION_USER: repl</span><br><span class=\"line\">      MYSQL_REPLICATION_PASSWORD: ReplPass123!</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - ./mysql/master/conf:/etc/mysql/conf.d</span><br><span class=\"line\">      - ./mysql/master/data:/var/lib/mysql</span><br><span class=\"line\">    command:</span><br><span class=\"line\">      - --character-set-server=utf8mb4</span><br><span class=\"line\">      - --collation-server=utf8mb4_unicode_ci</span><br><span class=\"line\"></span><br><span class=\"line\">  mysql-slave:</span><br><span class=\"line\">    image: registry.cn-hangzhou.aliyuncs.com/lky-deploy/mysql:8.0.43</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - mysql-network</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      MYSQL_ROOT_PASSWORD: SlaveRoot123!</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - ./mysql/slave/conf:/etc/mysql/conf.d</span><br><span class=\"line\">      - ./mysql/slave/data:/var/lib/mysql</span><br><span class=\"line\">    command:</span><br><span class=\"line\">      - --character-set-server=utf8mb4</span><br><span class=\"line\">      - --collation-server=utf8mb4_unicode_ci</span><br><span class=\"line\"></span><br><span class=\"line\">  proxysql:</span><br><span class=\"line\">    image: registry.cn-hangzhou.aliyuncs.com/lky-deploy/mysql:proxysql</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - mysql-network</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - &quot;6033:6033&quot;</span><br><span class=\"line\">      - &quot;6032:6032&quot;</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - ./mysql/proxysql/proxysql.cnf:/etc/proxysql.cnf</span><br><span class=\"line\">    depends_on:</span><br><span class=\"line\">      - mysql-master</span><br><span class=\"line\">      - mysql-slave</span><br><span class=\"line\"></span><br><span class=\"line\">networks:</span><br><span class=\"line\">  mysql-network:</span><br><span class=\"line\">    driver: bridge</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">===================================================================================</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">配置主从复制</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">8.4版本以上语法 SHOW BINARY LOG STATUS;</span></span><br><span class=\"line\">docker exec -it proxysql-mysql-master-1 mysql -uroot -p&quot;MasterRoot123!&quot; -e \\</span><br><span class=\"line\">&quot;CREATE USER &#x27;repl&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;ReplPass123!&#x27;; \\</span><br><span class=\"line\">GRANT REPLICATION SLAVE ON *.* TO &#x27;repl&#x27;@&#x27;%&#x27;; \\</span><br><span class=\"line\">FLUSH PRIVILEGES; \\</span><br><span class=\"line\">SHOW MASTER STATUS;&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">MASTER_LOG_POS可以通过 SHOW MASTER STATUS;在master节点执行查看</span></span><br><span class=\"line\">docker exec -it proxysql-mysql-slave-1 mysql -uroot -pSlaveRoot123! -e \\</span><br><span class=\"line\">&quot;CHANGE MASTER TO \\</span><br><span class=\"line\">MASTER_HOST=&#x27;mysql-master&#x27;, \\</span><br><span class=\"line\">MASTER_USER=&#x27;repl&#x27;, \\</span><br><span class=\"line\">MASTER_PASSWORD=&#x27;ReplPass123!&#x27;, \\</span><br><span class=\"line\">MASTER_LOG_FILE=&#x27;mysql-bin.000003&#x27;, \\</span><br><span class=\"line\">MASTER_LOG_POS=827; \\</span><br><span class=\"line\">START SLAVE; \\</span><br><span class=\"line\">SHOW SLAVE STATUS\\G&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">SHOW MASTER STATUS;</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">SHOW SLAVE STATUS;</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">SHOW BINARY LOGS;</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">SHOW BINLOG EVENTS;</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">show binlog events <span class=\"keyword\">in</span> <span class=\"string\">&#x27;mysql-bin.000002&#x27;</span> from 219 <span class=\"built_in\">limit</span> 5;</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">reset master; <span class=\"comment\">#清空所有binlog</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">flush logs;  <span class=\"comment\">#刷新binlog，直接生成新的binlog文件</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">SHOW VARIABLES LIKE <span class=\"string\">&quot;%expire_logs_days%&quot;</span>;    <span class=\"comment\">#binlog保存多久</span></span> </span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">SHOW VARIABLES LIKE <span class=\"string\">&#x27;binlog_expire_logs_seconds&#x27;</span>; 优先级比expire_logs_days高</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">SHOW VARIABLES LIKE <span class=\"string\">&quot;%max_binlog%&quot;</span>;  <span class=\"comment\">#单个binlog到多大开始生成新的</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">================================================================================</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">创建proxysql的监控后端mysql用户，注意只需要在master节点执行，因为已经主从同步了，不然主从会报错停止</span></span><br><span class=\"line\">-- 创建监控用户</span><br><span class=\"line\">CREATE USER &#x27;monitor&#x27;@&#x27;%&#x27; IDENTIFIED  BY &#x27;MonitorPass123!&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">-- 授予必要权限（ProxySQL 健康检查需要）</span><br><span class=\"line\">GRANT USAGE, REPLICATION CLIENT ON *.* TO &#x27;monitor&#x27;@&#x27;%&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">-- grant all privileges on *.* to &#x27;monitor&#x27;@&#x27;%&#x27; with grant option;</span><br><span class=\"line\"></span><br><span class=\"line\">-- 刷新权限</span><br><span class=\"line\">FLUSH PRIVILEGES;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">登录proxysql</span></span><br><span class=\"line\">docker exec -it proxysql-proxysql-1 mysql -uadmin -padmin -h127.0.0.1 -P6032</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">proxysql监控用户名和密码默认都是monitor，可以通过以下语句查看</span></span><br><span class=\"line\">SELECT * FROM global_variables </span><br><span class=\"line\">WHERE variable_name IN (&#x27;mysql-monitor_username&#x27;, &#x27;mysql-monitor_password&#x27;);</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">修改密码</span></span><br><span class=\"line\">UPDATE global_variables SET variable_value=&#x27;MonitorPass123!&#x27;</span><br><span class=\"line\">WHERE variable_name=&#x27;mysql-monitor_password&#x27;;</span><br><span class=\"line\">load mysql variables to runtime;</span><br><span class=\"line\">save mysql variables to disk;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">proxysql的相关元数据表</span></span><br><span class=\"line\">SELECT hostgroup_id, hostname, status FROM main.mysql_servers;;</span><br><span class=\"line\">hostgroup_id：服务器所属主机组（如读写分离的读组 20 和写组 10）。</span><br><span class=\"line\">hostname：服务器地址（IP 或域名）。</span><br><span class=\"line\">status：节点状态，如 ONLINE（正常）、OFFLINE_SOFT（软下线）、OFFLINE_HARD（硬下线）、SHUNNED（临时屏蔽）</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">SELECT hostgroup, username, digest_text,count_star,sum_time FROM stats.stats_mysql_query_digest;</span><br><span class=\"line\">digest_text：归一化后的 SQL 模板（如 SELECT * FROM users WHERE id=?）。</span><br><span class=\"line\">count_star：该 SQL 模板的执行次数。</span><br><span class=\"line\">sum_time：该 SQL 模板的总耗时（微秒）。</span><br><span class=\"line\">hostgroup：请求路由到的主机组。</span><br><span class=\"line\">username：执行 SQL 的客户端用户。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">SELECT * FROM global_variables WHERE variable_name LIKE &#x27;mysql-monitor%&#x27;;</span><br><span class=\"line\">mysql-monitor_username：监控用户（需在后端 MySQL 存在并授权）。</span><br><span class=\"line\">mysql-monitor_ping_interval：Ping 检查间隔（毫秒）。</span><br><span class=\"line\">mysql-monitor_read_only_interval：检查主库只读状态的频率。</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT * FROM monitor.mysql_server_connect_log   ORDER BY time_start_us DESC           LIMIT 3;</span><br><span class=\"line\">connect_error：失败原因（如超时、权限拒绝）。</span><br><span class=\"line\">time_start_us：连接开始时间（微秒精度）。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"主从同步如果报错\"><a href=\"#主从同步如果报错\" class=\"headerlink\" title=\"主从同步如果报错\"></a>主从同步如果报错</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">主从错误，在主库创建完用户从库就不用创建了，不然冲突主从就停止了</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">可以通过以下命令查询导致主从停止的语句，并且修改</span></span><br><span class=\"line\">SELECT * FROM performance_schema.replication_applier_status_by_worker\\G</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">重新启动</span></span><br><span class=\"line\">STOP REPLICA;</span><br><span class=\"line\">START REPLICA;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"python ThreadPoolExecutor","date":"2025-08-26T09:08:36.000Z","_content":"# 并发执行方法对比（submit/as_completed/map）\n\n## 核心特性对比表\n\n| 特征                | `executor.map()`           | `submit`+顺序处理          | `as_completed`             |\n|---------------------|---------------------------|---------------------------|---------------------------|\n| **执行顺序**         | 并发执行                  | 并发执行                  | 并发执行                  |\n| **结果顺序**         | 保持输入顺序              | 保持提交顺序              | 按完成顺序                |\n| **异常处理**         | 遇到第一个异常立即抛出     | 可逐个处理异常            | 可单独处理每个任务异常     |\n| **代码复杂度**       | ★☆☆ 最简单               | ★★☆ 中等                 | ★★★ 最灵活               |\n| **内存消耗**         | 低（惰性迭代）            | 高（需存储所有future）    | 中（动态处理）            |\n| **进度反馈**         | 无法实时获取              | 需手动实现                | 自动实时反馈              |\n| **适用场景**         | 简单转换/批量处理         | 需要严格顺序的结果        | 需要及时处理完成的场景     |\n\n---\n\n## 方法详解\n\n### 1. `executor.map()`\n**典型用法**：\n```python\nfrom concurrent.futures import ThreadPoolExecutor\n\ndef process_data(x):\n    return x * 2\n\nwith ThreadPoolExecutor() as executor:\n    results = executor.map(process_data, [1, 2, 3])  # 保持输入顺序\n    for res in results:\n        print(res)  # 按1→2→3的顺序输出2,4,6\n\n\n#示例下载有顺序的小说\ndef download_chapter(index, url):\n    # 模拟下载（并行，执行顺序不确定）\n    return (index, f\"第 {index} 章内容\")\n\n\n# 通过bs4获取列表，输入是有序的章节列表\nchapters = [\n    (1, \"http://example.com/ch1\"),\n    (2, \"http://example.com/ch2\"),\n    (3, \"http://example.com/ch3\")\n]\n\nwith ThreadPoolExecutor(max_workers=3) as executor:\n    # 提交任务（按顺序）\n    results = executor.map(\n        lambda args: download_chapter(*args),\n        chapters\n    )\n\n    # 拆解元组参数为独立的参数\n    lambda args: download_chapter(*args)\n    # 等效于：\n    # def unpack_and_call(args):\n    #     return download_chapter(args[0], args[1])  # 解包元组\n\n\n    # 按输入顺序写入文件\n    with open(\"book.txt\", \"w\", encoding=\"utf-8\") as f:\n        for index, content in results:\n            f.write(f\"{content}\\n\")\n```\n\n**特点**：\n- 自动将可迭代参数映射到函数\n- 结果顺序与输入参数严格一致\n- 遇到第一个异常时会立即停止迭代\n\n**最佳场景**：\n- 数据并行转换（如批量图片压缩）\n- 需要保持输入输出顺序对应的任务\n\n---\n\n### 2. `submit` + 顺序处理\n**典型用法**：参数必须是可迭代对象，如 i for i in range(1, 4)；submit不需要因为是手动提交\n```python\ndef multiply(x, y):\n    return x * y\n\nwith ThreadPoolExecutor() as executor:\n    # 生成器作为可迭代对象\n    nums1 = (i for i in range(1, 4))\n    nums2 = (i for i in range(10, 13))\n    results = executor.map(multiply, nums1, nums2)\n    print(list(results))  # 输出 [10, 22, 36]\n\n# 提交单个任务，参数直接传递，可以不用是列表\nfuture = executor.submit(multiply, 2, 3)\nprint(future.result())  # 输出 8\n\n\n\n#示例代码，不同任务\n 定义三类不同参数的任务函数\ndef download(url, timeout):\n    \"\"\"模拟下载任务（参数：URL + 超时时间）\"\"\"\n    print(f\"开始下载: {url}, 超时设置: {timeout}秒\")\n    time.sleep(random.uniform(0.5, 2))\n    if random.random() < 0.2:\n        raise URLError(f\"无法访问 {url}\")\n    return f\"下载完成: {url}\"\n\n\ndef calculate(a, b, operator):\n    \"\"\"模拟计算任务（参数：两个数 + 运算符）\"\"\"\n    print(f\"计算: {a} {operator} {b}\")\n    time.sleep(0.5)\n    if operator == \"+\":\n        return a + b\n    elif operator == \"*\":\n        return a * b\n    else:\n        raise ValueError(f\"不支持的运算符: {operator}\")\n\n\ndef log_message(message, priority=\"INFO\"):\n    \"\"\"模拟日志任务（参数：消息 + 优先级）\"\"\"\n    print(f\"[{priority}] 记录日志: {message}\")\n    time.sleep(0.1)\n    return f\"日志已保存: {message}\"\n\n\nif __name__ == \"__main__\":\n    with ThreadPoolExecutor(max_workers=3) as executor:\n        futures = []\n\n        # 动态提交不同类型的任务\n        # 任务1：下载任务（参数：url, timeout）\n        futures.append(executor.submit(download, \"https://example.com\", timeout=3))\n\n        # 任务2：计算任务（参数：5, 3, \"+\"）\n        futures.append(executor.submit(calculate, 5, 3, \"+\"))\n\n        # 任务3：日志任务（参数：message=\"系统启动\", priority=\"HIGH\"）\n        futures.append(executor.submit(log_message, \"系统启动\", \"HIGH\"))\n\n        # 动态追加任务（根据条件）\n        if random.choice([True, False]):\n            # 任务4：随机添加一个计算任务（参数：8, 4, \"*\"）\n            futures.append(executor.submit(calculate, 8, 4, \"*\"))\n\n        # 处理结果（按完成顺序，独立捕获异常）\n        for future in futures:\n            try:\n                result = future.result()\n                print(f\"结果: {result}\")\n            except URLError as e:\n                print(f\"下载失败: {e.reason}\")\n            except ValueError as e:\n                print(f\"计算错误: {e}\")\n            except Exception as e:\n                print(f\"未知错误: {e}\")\n```\n\n**特点**：\n- 手动控制每个任务的提交\n- 结果处理顺序固定\n- 可以单独处理每个任务的异常\n\n**最佳场景**：\n- 需要跟踪任务来源的场景\n- 需要逐步处理结果的日志系统\n\n---\n\n### 3. `as_completed`\n**典型用法**：\n```python\nfrom concurrent.futures import as_completed\n\nfutures = [executor.submit(task, param) for param in params]\n\nfor future in as_completed(futures):\n    res = future.result()\n    print(f\"收到结果: {res}\")  # 按完成顺序输出\n```\n\n**特点**：\n- 实时获取已完成任务结果\n- 可以优先处理耗时短的任务\n- 需要额外维护future列表\n\n**最佳场景**：\n- 文件下载（小文件优先完成）\n- 实时仪表盘更新\n- 需要快速获取部分结果的场景\n\n---\n\n## 性能特征对比\n\n### 模拟耗时任务（3个任务分别需要3s/1s/2s）\n\n```python\nimport time\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\n\ndef task(sec):\n    time.sleep(sec)\n    return f\"{sec}秒任务\"\n\nparams = [3, 1, 2]\n```\n\n| 方法                | 输出顺序          | 总耗时 | 首个结果时间 |\n|--------------------|------------------|-------|------------|\n| `map`             | 3→1→2            | 3s    | 3s后        |\n| `submit`顺序处理   | 3→1→2            | 3s    | 3s后        |\n| `as_completed`     | 1→2→3            | 3s    | 1s后        |\n\n---\n\n\n## 总结对比\n\n| 维度               | map                         | submit+顺序               | as_completed             |\n|--------------------|----------------------------|--------------------------|--------------------------|\n| **代码简洁度**     | 最简洁（自动管理）          | 中等（需手动维护）        | 最复杂（需动态处理）      |\n| **结果顺序**       | 输入顺序                    | 提交顺序                  | 完成顺序                  |\n| **实时反馈**       | 无                         | 无                       | 有                        |\n| **异常容忍度**     | 低（遇到错误立即停止）      | 高（可单独处理）          | 高（可单独处理）          |\n| **内存效率**       | 高（惰性迭代）              | 低（全存储）              | 中（动态释放）            |\n\n","source":"_posts/python-ThreadPoolExecutor.md","raw":"---\ntitle: python ThreadPoolExecutor\ndate: 2025-08-26 17:08:36\ntags:\ncategories: python\n---\n# 并发执行方法对比（submit/as_completed/map）\n\n## 核心特性对比表\n\n| 特征                | `executor.map()`           | `submit`+顺序处理          | `as_completed`             |\n|---------------------|---------------------------|---------------------------|---------------------------|\n| **执行顺序**         | 并发执行                  | 并发执行                  | 并发执行                  |\n| **结果顺序**         | 保持输入顺序              | 保持提交顺序              | 按完成顺序                |\n| **异常处理**         | 遇到第一个异常立即抛出     | 可逐个处理异常            | 可单独处理每个任务异常     |\n| **代码复杂度**       | ★☆☆ 最简单               | ★★☆ 中等                 | ★★★ 最灵活               |\n| **内存消耗**         | 低（惰性迭代）            | 高（需存储所有future）    | 中（动态处理）            |\n| **进度反馈**         | 无法实时获取              | 需手动实现                | 自动实时反馈              |\n| **适用场景**         | 简单转换/批量处理         | 需要严格顺序的结果        | 需要及时处理完成的场景     |\n\n---\n\n## 方法详解\n\n### 1. `executor.map()`\n**典型用法**：\n```python\nfrom concurrent.futures import ThreadPoolExecutor\n\ndef process_data(x):\n    return x * 2\n\nwith ThreadPoolExecutor() as executor:\n    results = executor.map(process_data, [1, 2, 3])  # 保持输入顺序\n    for res in results:\n        print(res)  # 按1→2→3的顺序输出2,4,6\n\n\n#示例下载有顺序的小说\ndef download_chapter(index, url):\n    # 模拟下载（并行，执行顺序不确定）\n    return (index, f\"第 {index} 章内容\")\n\n\n# 通过bs4获取列表，输入是有序的章节列表\nchapters = [\n    (1, \"http://example.com/ch1\"),\n    (2, \"http://example.com/ch2\"),\n    (3, \"http://example.com/ch3\")\n]\n\nwith ThreadPoolExecutor(max_workers=3) as executor:\n    # 提交任务（按顺序）\n    results = executor.map(\n        lambda args: download_chapter(*args),\n        chapters\n    )\n\n    # 拆解元组参数为独立的参数\n    lambda args: download_chapter(*args)\n    # 等效于：\n    # def unpack_and_call(args):\n    #     return download_chapter(args[0], args[1])  # 解包元组\n\n\n    # 按输入顺序写入文件\n    with open(\"book.txt\", \"w\", encoding=\"utf-8\") as f:\n        for index, content in results:\n            f.write(f\"{content}\\n\")\n```\n\n**特点**：\n- 自动将可迭代参数映射到函数\n- 结果顺序与输入参数严格一致\n- 遇到第一个异常时会立即停止迭代\n\n**最佳场景**：\n- 数据并行转换（如批量图片压缩）\n- 需要保持输入输出顺序对应的任务\n\n---\n\n### 2. `submit` + 顺序处理\n**典型用法**：参数必须是可迭代对象，如 i for i in range(1, 4)；submit不需要因为是手动提交\n```python\ndef multiply(x, y):\n    return x * y\n\nwith ThreadPoolExecutor() as executor:\n    # 生成器作为可迭代对象\n    nums1 = (i for i in range(1, 4))\n    nums2 = (i for i in range(10, 13))\n    results = executor.map(multiply, nums1, nums2)\n    print(list(results))  # 输出 [10, 22, 36]\n\n# 提交单个任务，参数直接传递，可以不用是列表\nfuture = executor.submit(multiply, 2, 3)\nprint(future.result())  # 输出 8\n\n\n\n#示例代码，不同任务\n 定义三类不同参数的任务函数\ndef download(url, timeout):\n    \"\"\"模拟下载任务（参数：URL + 超时时间）\"\"\"\n    print(f\"开始下载: {url}, 超时设置: {timeout}秒\")\n    time.sleep(random.uniform(0.5, 2))\n    if random.random() < 0.2:\n        raise URLError(f\"无法访问 {url}\")\n    return f\"下载完成: {url}\"\n\n\ndef calculate(a, b, operator):\n    \"\"\"模拟计算任务（参数：两个数 + 运算符）\"\"\"\n    print(f\"计算: {a} {operator} {b}\")\n    time.sleep(0.5)\n    if operator == \"+\":\n        return a + b\n    elif operator == \"*\":\n        return a * b\n    else:\n        raise ValueError(f\"不支持的运算符: {operator}\")\n\n\ndef log_message(message, priority=\"INFO\"):\n    \"\"\"模拟日志任务（参数：消息 + 优先级）\"\"\"\n    print(f\"[{priority}] 记录日志: {message}\")\n    time.sleep(0.1)\n    return f\"日志已保存: {message}\"\n\n\nif __name__ == \"__main__\":\n    with ThreadPoolExecutor(max_workers=3) as executor:\n        futures = []\n\n        # 动态提交不同类型的任务\n        # 任务1：下载任务（参数：url, timeout）\n        futures.append(executor.submit(download, \"https://example.com\", timeout=3))\n\n        # 任务2：计算任务（参数：5, 3, \"+\"）\n        futures.append(executor.submit(calculate, 5, 3, \"+\"))\n\n        # 任务3：日志任务（参数：message=\"系统启动\", priority=\"HIGH\"）\n        futures.append(executor.submit(log_message, \"系统启动\", \"HIGH\"))\n\n        # 动态追加任务（根据条件）\n        if random.choice([True, False]):\n            # 任务4：随机添加一个计算任务（参数：8, 4, \"*\"）\n            futures.append(executor.submit(calculate, 8, 4, \"*\"))\n\n        # 处理结果（按完成顺序，独立捕获异常）\n        for future in futures:\n            try:\n                result = future.result()\n                print(f\"结果: {result}\")\n            except URLError as e:\n                print(f\"下载失败: {e.reason}\")\n            except ValueError as e:\n                print(f\"计算错误: {e}\")\n            except Exception as e:\n                print(f\"未知错误: {e}\")\n```\n\n**特点**：\n- 手动控制每个任务的提交\n- 结果处理顺序固定\n- 可以单独处理每个任务的异常\n\n**最佳场景**：\n- 需要跟踪任务来源的场景\n- 需要逐步处理结果的日志系统\n\n---\n\n### 3. `as_completed`\n**典型用法**：\n```python\nfrom concurrent.futures import as_completed\n\nfutures = [executor.submit(task, param) for param in params]\n\nfor future in as_completed(futures):\n    res = future.result()\n    print(f\"收到结果: {res}\")  # 按完成顺序输出\n```\n\n**特点**：\n- 实时获取已完成任务结果\n- 可以优先处理耗时短的任务\n- 需要额外维护future列表\n\n**最佳场景**：\n- 文件下载（小文件优先完成）\n- 实时仪表盘更新\n- 需要快速获取部分结果的场景\n\n---\n\n## 性能特征对比\n\n### 模拟耗时任务（3个任务分别需要3s/1s/2s）\n\n```python\nimport time\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\n\ndef task(sec):\n    time.sleep(sec)\n    return f\"{sec}秒任务\"\n\nparams = [3, 1, 2]\n```\n\n| 方法                | 输出顺序          | 总耗时 | 首个结果时间 |\n|--------------------|------------------|-------|------------|\n| `map`             | 3→1→2            | 3s    | 3s后        |\n| `submit`顺序处理   | 3→1→2            | 3s    | 3s后        |\n| `as_completed`     | 1→2→3            | 3s    | 1s后        |\n\n---\n\n\n## 总结对比\n\n| 维度               | map                         | submit+顺序               | as_completed             |\n|--------------------|----------------------------|--------------------------|--------------------------|\n| **代码简洁度**     | 最简洁（自动管理）          | 中等（需手动维护）        | 最复杂（需动态处理）      |\n| **结果顺序**       | 输入顺序                    | 提交顺序                  | 完成顺序                  |\n| **实时反馈**       | 无                         | 无                       | 有                        |\n| **异常容忍度**     | 低（遇到错误立即停止）      | 高（可单独处理）          | 高（可单独处理）          |\n| **内存效率**       | 高（惰性迭代）              | 低（全存储）              | 中（动态释放）            |\n\n","slug":"python-ThreadPoolExecutor","published":1,"updated":"2025-08-28T06:39:18.222Z","comments":1,"layout":"post","photos":[],"_id":"cmev1ggcb000vhllz3btm5m9m","content":"<h1 id=\"并发执行方法对比（submit-as-completed-map）\"><a href=\"#并发执行方法对比（submit-as-completed-map）\" class=\"headerlink\" title=\"并发执行方法对比（submit&#x2F;as_completed&#x2F;map）\"></a>并发执行方法对比（submit&#x2F;as_completed&#x2F;map）</h1><h2 id=\"核心特性对比表\"><a href=\"#核心特性对比表\" class=\"headerlink\" title=\"核心特性对比表\"></a>核心特性对比表</h2><table>\n<thead>\n<tr>\n<th>特征</th>\n<th><code>executor.map()</code></th>\n<th><code>submit</code>+顺序处理</th>\n<th><code>as_completed</code></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>执行顺序</strong></td>\n<td>并发执行</td>\n<td>并发执行</td>\n<td>并发执行</td>\n</tr>\n<tr>\n<td><strong>结果顺序</strong></td>\n<td>保持输入顺序</td>\n<td>保持提交顺序</td>\n<td>按完成顺序</td>\n</tr>\n<tr>\n<td><strong>异常处理</strong></td>\n<td>遇到第一个异常立即抛出</td>\n<td>可逐个处理异常</td>\n<td>可单独处理每个任务异常</td>\n</tr>\n<tr>\n<td><strong>代码复杂度</strong></td>\n<td>★☆☆ 最简单</td>\n<td>★★☆ 中等</td>\n<td>★★★ 最灵活</td>\n</tr>\n<tr>\n<td><strong>内存消耗</strong></td>\n<td>低（惰性迭代）</td>\n<td>高（需存储所有future）</td>\n<td>中（动态处理）</td>\n</tr>\n<tr>\n<td><strong>进度反馈</strong></td>\n<td>无法实时获取</td>\n<td>需手动实现</td>\n<td>自动实时反馈</td>\n</tr>\n<tr>\n<td><strong>适用场景</strong></td>\n<td>简单转换&#x2F;批量处理</td>\n<td>需要严格顺序的结果</td>\n<td>需要及时处理完成的场景</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"方法详解\"><a href=\"#方法详解\" class=\"headerlink\" title=\"方法详解\"></a>方法详解</h2><h3 id=\"1-executor-map\"><a href=\"#1-executor-map\" class=\"headerlink\" title=\"1. executor.map()\"></a>1. <code>executor.map()</code></h3><p><strong>典型用法</strong>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> concurrent.futures <span class=\"keyword\">import</span> ThreadPoolExecutor</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">process_data</span>(<span class=\"params\">x</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x * <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> ThreadPoolExecutor() <span class=\"keyword\">as</span> executor:</span><br><span class=\"line\">    results = executor.<span class=\"built_in\">map</span>(process_data, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])  <span class=\"comment\"># 保持输入顺序</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> res <span class=\"keyword\">in</span> results:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(res)  <span class=\"comment\"># 按1→2→3的顺序输出2,4,6</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例下载有顺序的小说</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">download_chapter</span>(<span class=\"params\">index, url</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 模拟下载（并行，执行顺序不确定）</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (index, <span class=\"string\">f&quot;第 <span class=\"subst\">&#123;index&#125;</span> 章内容&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 通过bs4获取列表，输入是有序的章节列表</span></span><br><span class=\"line\">chapters = [</span><br><span class=\"line\">    (<span class=\"number\">1</span>, <span class=\"string\">&quot;http://example.com/ch1&quot;</span>),</span><br><span class=\"line\">    (<span class=\"number\">2</span>, <span class=\"string\">&quot;http://example.com/ch2&quot;</span>),</span><br><span class=\"line\">    (<span class=\"number\">3</span>, <span class=\"string\">&quot;http://example.com/ch3&quot;</span>)</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> ThreadPoolExecutor(max_workers=<span class=\"number\">3</span>) <span class=\"keyword\">as</span> executor:</span><br><span class=\"line\">    <span class=\"comment\"># 提交任务（按顺序）</span></span><br><span class=\"line\">    results = executor.<span class=\"built_in\">map</span>(</span><br><span class=\"line\">        <span class=\"keyword\">lambda</span> args: download_chapter(*args),</span><br><span class=\"line\">        chapters</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 拆解元组参数为独立的参数</span></span><br><span class=\"line\">    <span class=\"keyword\">lambda</span> args: download_chapter(*args)</span><br><span class=\"line\">    <span class=\"comment\"># 等效于：</span></span><br><span class=\"line\">    <span class=\"comment\"># def unpack_and_call(args):</span></span><br><span class=\"line\">    <span class=\"comment\">#     return download_chapter(args[0], args[1])  # 解包元组</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 按输入顺序写入文件</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&quot;book.txt&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> index, content <span class=\"keyword\">in</span> results:</span><br><span class=\"line\">            f.write(<span class=\"string\">f&quot;<span class=\"subst\">&#123;content&#125;</span>\\n&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p><strong>特点</strong>：</p>\n<ul>\n<li>自动将可迭代参数映射到函数</li>\n<li>结果顺序与输入参数严格一致</li>\n<li>遇到第一个异常时会立即停止迭代</li>\n</ul>\n<p><strong>最佳场景</strong>：</p>\n<ul>\n<li>数据并行转换（如批量图片压缩）</li>\n<li>需要保持输入输出顺序对应的任务</li>\n</ul>\n<hr>\n<h3 id=\"2-submit-顺序处理\"><a href=\"#2-submit-顺序处理\" class=\"headerlink\" title=\"2. submit + 顺序处理\"></a>2. <code>submit</code> + 顺序处理</h3><p><strong>典型用法</strong>：参数必须是可迭代对象，如 i for i in range(1, 4)；submit不需要因为是手动提交</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">multiply</span>(<span class=\"params\">x, y</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x * y</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> ThreadPoolExecutor() <span class=\"keyword\">as</span> executor:</span><br><span class=\"line\">    <span class=\"comment\"># 生成器作为可迭代对象</span></span><br><span class=\"line\">    nums1 = (i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">4</span>))</span><br><span class=\"line\">    nums2 = (i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>, <span class=\"number\">13</span>))</span><br><span class=\"line\">    results = executor.<span class=\"built_in\">map</span>(multiply, nums1, nums2)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">list</span>(results))  <span class=\"comment\"># 输出 [10, 22, 36]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交单个任务，参数直接传递，可以不用是列表</span></span><br><span class=\"line\">future = executor.submit(multiply, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(future.result())  <span class=\"comment\"># 输出 8</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例代码，不同任务</span></span><br><span class=\"line\"> 定义三类不同参数的任务函数</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">download</span>(<span class=\"params\">url, timeout</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;模拟下载任务（参数：URL + 超时时间）&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;开始下载: <span class=\"subst\">&#123;url&#125;</span>, 超时设置: <span class=\"subst\">&#123;timeout&#125;</span>秒&quot;</span>)</span><br><span class=\"line\">    time.sleep(random.uniform(<span class=\"number\">0.5</span>, <span class=\"number\">2</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> random.random() &lt; <span class=\"number\">0.2</span>:</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> URLError(<span class=\"string\">f&quot;无法访问 <span class=\"subst\">&#123;url&#125;</span>&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">f&quot;下载完成: <span class=\"subst\">&#123;url&#125;</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">calculate</span>(<span class=\"params\">a, b, operator</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;模拟计算任务（参数：两个数 + 运算符）&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;计算: <span class=\"subst\">&#123;a&#125;</span> <span class=\"subst\">&#123;operator&#125;</span> <span class=\"subst\">&#123;b&#125;</span>&quot;</span>)</span><br><span class=\"line\">    time.sleep(<span class=\"number\">0.5</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> operator == <span class=\"string\">&quot;+&quot;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a + b</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> operator == <span class=\"string\">&quot;*&quot;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a * b</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">f&quot;不支持的运算符: <span class=\"subst\">&#123;operator&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">log_message</span>(<span class=\"params\">message, priority=<span class=\"string\">&quot;INFO&quot;</span></span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;模拟日志任务（参数：消息 + 优先级）&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;[<span class=\"subst\">&#123;priority&#125;</span>] 记录日志: <span class=\"subst\">&#123;message&#125;</span>&quot;</span>)</span><br><span class=\"line\">    time.sleep(<span class=\"number\">0.1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">f&quot;日志已保存: <span class=\"subst\">&#123;message&#125;</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    <span class=\"keyword\">with</span> ThreadPoolExecutor(max_workers=<span class=\"number\">3</span>) <span class=\"keyword\">as</span> executor:</span><br><span class=\"line\">        futures = []</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 动态提交不同类型的任务</span></span><br><span class=\"line\">        <span class=\"comment\"># 任务1：下载任务（参数：url, timeout）</span></span><br><span class=\"line\">        futures.append(executor.submit(download, <span class=\"string\">&quot;https://example.com&quot;</span>, timeout=<span class=\"number\">3</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 任务2：计算任务（参数：5, 3, &quot;+&quot;）</span></span><br><span class=\"line\">        futures.append(executor.submit(calculate, <span class=\"number\">5</span>, <span class=\"number\">3</span>, <span class=\"string\">&quot;+&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 任务3：日志任务（参数：message=&quot;系统启动&quot;, priority=&quot;HIGH&quot;）</span></span><br><span class=\"line\">        futures.append(executor.submit(log_message, <span class=\"string\">&quot;系统启动&quot;</span>, <span class=\"string\">&quot;HIGH&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 动态追加任务（根据条件）</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> random.choice([<span class=\"literal\">True</span>, <span class=\"literal\">False</span>]):</span><br><span class=\"line\">            <span class=\"comment\"># 任务4：随机添加一个计算任务（参数：8, 4, &quot;*&quot;）</span></span><br><span class=\"line\">            futures.append(executor.submit(calculate, <span class=\"number\">8</span>, <span class=\"number\">4</span>, <span class=\"string\">&quot;*&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 处理结果（按完成顺序，独立捕获异常）</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> future <span class=\"keyword\">in</span> futures:</span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                result = future.result()</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;结果: <span class=\"subst\">&#123;result&#125;</span>&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">except</span> URLError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;下载失败: <span class=\"subst\">&#123;e.reason&#125;</span>&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">except</span> ValueError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;计算错误: <span class=\"subst\">&#123;e&#125;</span>&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;未知错误: <span class=\"subst\">&#123;e&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p><strong>特点</strong>：</p>\n<ul>\n<li>手动控制每个任务的提交</li>\n<li>结果处理顺序固定</li>\n<li>可以单独处理每个任务的异常</li>\n</ul>\n<p><strong>最佳场景</strong>：</p>\n<ul>\n<li>需要跟踪任务来源的场景</li>\n<li>需要逐步处理结果的日志系统</li>\n</ul>\n<hr>\n<h3 id=\"3-as-completed\"><a href=\"#3-as-completed\" class=\"headerlink\" title=\"3. as_completed\"></a>3. <code>as_completed</code></h3><p><strong>典型用法</strong>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> concurrent.futures <span class=\"keyword\">import</span> as_completed</span><br><span class=\"line\"></span><br><span class=\"line\">futures = [executor.submit(task, param) <span class=\"keyword\">for</span> param <span class=\"keyword\">in</span> params]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> future <span class=\"keyword\">in</span> as_completed(futures):</span><br><span class=\"line\">    res = future.result()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;收到结果: <span class=\"subst\">&#123;res&#125;</span>&quot;</span>)  <span class=\"comment\"># 按完成顺序输出</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>特点</strong>：</p>\n<ul>\n<li>实时获取已完成任务结果</li>\n<li>可以优先处理耗时短的任务</li>\n<li>需要额外维护future列表</li>\n</ul>\n<p><strong>最佳场景</strong>：</p>\n<ul>\n<li>文件下载（小文件优先完成）</li>\n<li>实时仪表盘更新</li>\n<li>需要快速获取部分结果的场景</li>\n</ul>\n<hr>\n<h2 id=\"性能特征对比\"><a href=\"#性能特征对比\" class=\"headerlink\" title=\"性能特征对比\"></a>性能特征对比</h2><h3 id=\"模拟耗时任务（3个任务分别需要3s-1s-2s）\"><a href=\"#模拟耗时任务（3个任务分别需要3s-1s-2s）\" class=\"headerlink\" title=\"模拟耗时任务（3个任务分别需要3s&#x2F;1s&#x2F;2s）\"></a>模拟耗时任务（3个任务分别需要3s&#x2F;1s&#x2F;2s）</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">from</span> concurrent.futures <span class=\"keyword\">import</span> ThreadPoolExecutor, as_completed</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">task</span>(<span class=\"params\">sec</span>):</span><br><span class=\"line\">    time.sleep(sec)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">f&quot;<span class=\"subst\">&#123;sec&#125;</span>秒任务&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">params = [<span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>输出顺序</th>\n<th>总耗时</th>\n<th>首个结果时间</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>map</code></td>\n<td>3→1→2</td>\n<td>3s</td>\n<td>3s后</td>\n</tr>\n<tr>\n<td><code>submit</code>顺序处理</td>\n<td>3→1→2</td>\n<td>3s</td>\n<td>3s后</td>\n</tr>\n<tr>\n<td><code>as_completed</code></td>\n<td>1→2→3</td>\n<td>3s</td>\n<td>1s后</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"总结对比\"><a href=\"#总结对比\" class=\"headerlink\" title=\"总结对比\"></a>总结对比</h2><table>\n<thead>\n<tr>\n<th>维度</th>\n<th>map</th>\n<th>submit+顺序</th>\n<th>as_completed</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>代码简洁度</strong></td>\n<td>最简洁（自动管理）</td>\n<td>中等（需手动维护）</td>\n<td>最复杂（需动态处理）</td>\n</tr>\n<tr>\n<td><strong>结果顺序</strong></td>\n<td>输入顺序</td>\n<td>提交顺序</td>\n<td>完成顺序</td>\n</tr>\n<tr>\n<td><strong>实时反馈</strong></td>\n<td>无</td>\n<td>无</td>\n<td>有</td>\n</tr>\n<tr>\n<td><strong>异常容忍度</strong></td>\n<td>低（遇到错误立即停止）</td>\n<td>高（可单独处理）</td>\n<td>高（可单独处理）</td>\n</tr>\n<tr>\n<td><strong>内存效率</strong></td>\n<td>高（惰性迭代）</td>\n<td>低（全存储）</td>\n<td>中（动态释放）</td>\n</tr>\n</tbody></table>\n","excerpt":"","more":"<h1 id=\"并发执行方法对比（submit-as-completed-map）\"><a href=\"#并发执行方法对比（submit-as-completed-map）\" class=\"headerlink\" title=\"并发执行方法对比（submit&#x2F;as_completed&#x2F;map）\"></a>并发执行方法对比（submit&#x2F;as_completed&#x2F;map）</h1><h2 id=\"核心特性对比表\"><a href=\"#核心特性对比表\" class=\"headerlink\" title=\"核心特性对比表\"></a>核心特性对比表</h2><table>\n<thead>\n<tr>\n<th>特征</th>\n<th><code>executor.map()</code></th>\n<th><code>submit</code>+顺序处理</th>\n<th><code>as_completed</code></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>执行顺序</strong></td>\n<td>并发执行</td>\n<td>并发执行</td>\n<td>并发执行</td>\n</tr>\n<tr>\n<td><strong>结果顺序</strong></td>\n<td>保持输入顺序</td>\n<td>保持提交顺序</td>\n<td>按完成顺序</td>\n</tr>\n<tr>\n<td><strong>异常处理</strong></td>\n<td>遇到第一个异常立即抛出</td>\n<td>可逐个处理异常</td>\n<td>可单独处理每个任务异常</td>\n</tr>\n<tr>\n<td><strong>代码复杂度</strong></td>\n<td>★☆☆ 最简单</td>\n<td>★★☆ 中等</td>\n<td>★★★ 最灵活</td>\n</tr>\n<tr>\n<td><strong>内存消耗</strong></td>\n<td>低（惰性迭代）</td>\n<td>高（需存储所有future）</td>\n<td>中（动态处理）</td>\n</tr>\n<tr>\n<td><strong>进度反馈</strong></td>\n<td>无法实时获取</td>\n<td>需手动实现</td>\n<td>自动实时反馈</td>\n</tr>\n<tr>\n<td><strong>适用场景</strong></td>\n<td>简单转换&#x2F;批量处理</td>\n<td>需要严格顺序的结果</td>\n<td>需要及时处理完成的场景</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"方法详解\"><a href=\"#方法详解\" class=\"headerlink\" title=\"方法详解\"></a>方法详解</h2><h3 id=\"1-executor-map\"><a href=\"#1-executor-map\" class=\"headerlink\" title=\"1. executor.map()\"></a>1. <code>executor.map()</code></h3><p><strong>典型用法</strong>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> concurrent.futures <span class=\"keyword\">import</span> ThreadPoolExecutor</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">process_data</span>(<span class=\"params\">x</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x * <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> ThreadPoolExecutor() <span class=\"keyword\">as</span> executor:</span><br><span class=\"line\">    results = executor.<span class=\"built_in\">map</span>(process_data, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])  <span class=\"comment\"># 保持输入顺序</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> res <span class=\"keyword\">in</span> results:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(res)  <span class=\"comment\"># 按1→2→3的顺序输出2,4,6</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例下载有顺序的小说</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">download_chapter</span>(<span class=\"params\">index, url</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 模拟下载（并行，执行顺序不确定）</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (index, <span class=\"string\">f&quot;第 <span class=\"subst\">&#123;index&#125;</span> 章内容&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 通过bs4获取列表，输入是有序的章节列表</span></span><br><span class=\"line\">chapters = [</span><br><span class=\"line\">    (<span class=\"number\">1</span>, <span class=\"string\">&quot;http://example.com/ch1&quot;</span>),</span><br><span class=\"line\">    (<span class=\"number\">2</span>, <span class=\"string\">&quot;http://example.com/ch2&quot;</span>),</span><br><span class=\"line\">    (<span class=\"number\">3</span>, <span class=\"string\">&quot;http://example.com/ch3&quot;</span>)</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> ThreadPoolExecutor(max_workers=<span class=\"number\">3</span>) <span class=\"keyword\">as</span> executor:</span><br><span class=\"line\">    <span class=\"comment\"># 提交任务（按顺序）</span></span><br><span class=\"line\">    results = executor.<span class=\"built_in\">map</span>(</span><br><span class=\"line\">        <span class=\"keyword\">lambda</span> args: download_chapter(*args),</span><br><span class=\"line\">        chapters</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 拆解元组参数为独立的参数</span></span><br><span class=\"line\">    <span class=\"keyword\">lambda</span> args: download_chapter(*args)</span><br><span class=\"line\">    <span class=\"comment\"># 等效于：</span></span><br><span class=\"line\">    <span class=\"comment\"># def unpack_and_call(args):</span></span><br><span class=\"line\">    <span class=\"comment\">#     return download_chapter(args[0], args[1])  # 解包元组</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 按输入顺序写入文件</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&quot;book.txt&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> index, content <span class=\"keyword\">in</span> results:</span><br><span class=\"line\">            f.write(<span class=\"string\">f&quot;<span class=\"subst\">&#123;content&#125;</span>\\n&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p><strong>特点</strong>：</p>\n<ul>\n<li>自动将可迭代参数映射到函数</li>\n<li>结果顺序与输入参数严格一致</li>\n<li>遇到第一个异常时会立即停止迭代</li>\n</ul>\n<p><strong>最佳场景</strong>：</p>\n<ul>\n<li>数据并行转换（如批量图片压缩）</li>\n<li>需要保持输入输出顺序对应的任务</li>\n</ul>\n<hr>\n<h3 id=\"2-submit-顺序处理\"><a href=\"#2-submit-顺序处理\" class=\"headerlink\" title=\"2. submit + 顺序处理\"></a>2. <code>submit</code> + 顺序处理</h3><p><strong>典型用法</strong>：参数必须是可迭代对象，如 i for i in range(1, 4)；submit不需要因为是手动提交</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">multiply</span>(<span class=\"params\">x, y</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x * y</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> ThreadPoolExecutor() <span class=\"keyword\">as</span> executor:</span><br><span class=\"line\">    <span class=\"comment\"># 生成器作为可迭代对象</span></span><br><span class=\"line\">    nums1 = (i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">4</span>))</span><br><span class=\"line\">    nums2 = (i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>, <span class=\"number\">13</span>))</span><br><span class=\"line\">    results = executor.<span class=\"built_in\">map</span>(multiply, nums1, nums2)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">list</span>(results))  <span class=\"comment\"># 输出 [10, 22, 36]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交单个任务，参数直接传递，可以不用是列表</span></span><br><span class=\"line\">future = executor.submit(multiply, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(future.result())  <span class=\"comment\"># 输出 8</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例代码，不同任务</span></span><br><span class=\"line\"> 定义三类不同参数的任务函数</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">download</span>(<span class=\"params\">url, timeout</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;模拟下载任务（参数：URL + 超时时间）&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;开始下载: <span class=\"subst\">&#123;url&#125;</span>, 超时设置: <span class=\"subst\">&#123;timeout&#125;</span>秒&quot;</span>)</span><br><span class=\"line\">    time.sleep(random.uniform(<span class=\"number\">0.5</span>, <span class=\"number\">2</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> random.random() &lt; <span class=\"number\">0.2</span>:</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> URLError(<span class=\"string\">f&quot;无法访问 <span class=\"subst\">&#123;url&#125;</span>&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">f&quot;下载完成: <span class=\"subst\">&#123;url&#125;</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">calculate</span>(<span class=\"params\">a, b, operator</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;模拟计算任务（参数：两个数 + 运算符）&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;计算: <span class=\"subst\">&#123;a&#125;</span> <span class=\"subst\">&#123;operator&#125;</span> <span class=\"subst\">&#123;b&#125;</span>&quot;</span>)</span><br><span class=\"line\">    time.sleep(<span class=\"number\">0.5</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> operator == <span class=\"string\">&quot;+&quot;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a + b</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> operator == <span class=\"string\">&quot;*&quot;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a * b</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">f&quot;不支持的运算符: <span class=\"subst\">&#123;operator&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">log_message</span>(<span class=\"params\">message, priority=<span class=\"string\">&quot;INFO&quot;</span></span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;模拟日志任务（参数：消息 + 优先级）&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;[<span class=\"subst\">&#123;priority&#125;</span>] 记录日志: <span class=\"subst\">&#123;message&#125;</span>&quot;</span>)</span><br><span class=\"line\">    time.sleep(<span class=\"number\">0.1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">f&quot;日志已保存: <span class=\"subst\">&#123;message&#125;</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    <span class=\"keyword\">with</span> ThreadPoolExecutor(max_workers=<span class=\"number\">3</span>) <span class=\"keyword\">as</span> executor:</span><br><span class=\"line\">        futures = []</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 动态提交不同类型的任务</span></span><br><span class=\"line\">        <span class=\"comment\"># 任务1：下载任务（参数：url, timeout）</span></span><br><span class=\"line\">        futures.append(executor.submit(download, <span class=\"string\">&quot;https://example.com&quot;</span>, timeout=<span class=\"number\">3</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 任务2：计算任务（参数：5, 3, &quot;+&quot;）</span></span><br><span class=\"line\">        futures.append(executor.submit(calculate, <span class=\"number\">5</span>, <span class=\"number\">3</span>, <span class=\"string\">&quot;+&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 任务3：日志任务（参数：message=&quot;系统启动&quot;, priority=&quot;HIGH&quot;）</span></span><br><span class=\"line\">        futures.append(executor.submit(log_message, <span class=\"string\">&quot;系统启动&quot;</span>, <span class=\"string\">&quot;HIGH&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 动态追加任务（根据条件）</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> random.choice([<span class=\"literal\">True</span>, <span class=\"literal\">False</span>]):</span><br><span class=\"line\">            <span class=\"comment\"># 任务4：随机添加一个计算任务（参数：8, 4, &quot;*&quot;）</span></span><br><span class=\"line\">            futures.append(executor.submit(calculate, <span class=\"number\">8</span>, <span class=\"number\">4</span>, <span class=\"string\">&quot;*&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 处理结果（按完成顺序，独立捕获异常）</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> future <span class=\"keyword\">in</span> futures:</span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                result = future.result()</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;结果: <span class=\"subst\">&#123;result&#125;</span>&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">except</span> URLError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;下载失败: <span class=\"subst\">&#123;e.reason&#125;</span>&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">except</span> ValueError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;计算错误: <span class=\"subst\">&#123;e&#125;</span>&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;未知错误: <span class=\"subst\">&#123;e&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p><strong>特点</strong>：</p>\n<ul>\n<li>手动控制每个任务的提交</li>\n<li>结果处理顺序固定</li>\n<li>可以单独处理每个任务的异常</li>\n</ul>\n<p><strong>最佳场景</strong>：</p>\n<ul>\n<li>需要跟踪任务来源的场景</li>\n<li>需要逐步处理结果的日志系统</li>\n</ul>\n<hr>\n<h3 id=\"3-as-completed\"><a href=\"#3-as-completed\" class=\"headerlink\" title=\"3. as_completed\"></a>3. <code>as_completed</code></h3><p><strong>典型用法</strong>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> concurrent.futures <span class=\"keyword\">import</span> as_completed</span><br><span class=\"line\"></span><br><span class=\"line\">futures = [executor.submit(task, param) <span class=\"keyword\">for</span> param <span class=\"keyword\">in</span> params]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> future <span class=\"keyword\">in</span> as_completed(futures):</span><br><span class=\"line\">    res = future.result()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;收到结果: <span class=\"subst\">&#123;res&#125;</span>&quot;</span>)  <span class=\"comment\"># 按完成顺序输出</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>特点</strong>：</p>\n<ul>\n<li>实时获取已完成任务结果</li>\n<li>可以优先处理耗时短的任务</li>\n<li>需要额外维护future列表</li>\n</ul>\n<p><strong>最佳场景</strong>：</p>\n<ul>\n<li>文件下载（小文件优先完成）</li>\n<li>实时仪表盘更新</li>\n<li>需要快速获取部分结果的场景</li>\n</ul>\n<hr>\n<h2 id=\"性能特征对比\"><a href=\"#性能特征对比\" class=\"headerlink\" title=\"性能特征对比\"></a>性能特征对比</h2><h3 id=\"模拟耗时任务（3个任务分别需要3s-1s-2s）\"><a href=\"#模拟耗时任务（3个任务分别需要3s-1s-2s）\" class=\"headerlink\" title=\"模拟耗时任务（3个任务分别需要3s&#x2F;1s&#x2F;2s）\"></a>模拟耗时任务（3个任务分别需要3s&#x2F;1s&#x2F;2s）</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">from</span> concurrent.futures <span class=\"keyword\">import</span> ThreadPoolExecutor, as_completed</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">task</span>(<span class=\"params\">sec</span>):</span><br><span class=\"line\">    time.sleep(sec)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">f&quot;<span class=\"subst\">&#123;sec&#125;</span>秒任务&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">params = [<span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>输出顺序</th>\n<th>总耗时</th>\n<th>首个结果时间</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>map</code></td>\n<td>3→1→2</td>\n<td>3s</td>\n<td>3s后</td>\n</tr>\n<tr>\n<td><code>submit</code>顺序处理</td>\n<td>3→1→2</td>\n<td>3s</td>\n<td>3s后</td>\n</tr>\n<tr>\n<td><code>as_completed</code></td>\n<td>1→2→3</td>\n<td>3s</td>\n<td>1s后</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"总结对比\"><a href=\"#总结对比\" class=\"headerlink\" title=\"总结对比\"></a>总结对比</h2><table>\n<thead>\n<tr>\n<th>维度</th>\n<th>map</th>\n<th>submit+顺序</th>\n<th>as_completed</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>代码简洁度</strong></td>\n<td>最简洁（自动管理）</td>\n<td>中等（需手动维护）</td>\n<td>最复杂（需动态处理）</td>\n</tr>\n<tr>\n<td><strong>结果顺序</strong></td>\n<td>输入顺序</td>\n<td>提交顺序</td>\n<td>完成顺序</td>\n</tr>\n<tr>\n<td><strong>实时反馈</strong></td>\n<td>无</td>\n<td>无</td>\n<td>有</td>\n</tr>\n<tr>\n<td><strong>异常容忍度</strong></td>\n<td>低（遇到错误立即停止）</td>\n<td>高（可单独处理）</td>\n<td>高（可单独处理）</td>\n</tr>\n<tr>\n<td><strong>内存效率</strong></td>\n<td>高（惰性迭代）</td>\n<td>低（全存储）</td>\n<td>中（动态释放）</td>\n</tr>\n</tbody></table>\n"},{"title":"python as_completed","date":"2025-08-26T09:12:29.000Z","_content":"# `as_completed` 方法详解\n\n## 🎯 核心区别：处理顺序\n| 方法                   | 执行顺序       | 结果获取顺序     | 适用场景                     |\n|------------------------|----------------|------------------|----------------------------|\n| `submit` + 顺序处理    | 按提交顺序执行 | 按提交顺序获取   | 需要严格保持结果顺序的场景    |\n| `as_completed`         | 并行执行       | 按完成顺序获取   | 需要及时处理已完成任务的场景  |\n\n---\n\n## 📌 使用场景分析\n\n### 1. `submit` + 顺序处理\n**典型代码**：\n```python\nfrom concurrent.futures import ThreadPoolExecutor\n\nwith ThreadPoolExecutor() as executor:\n    futures = [executor.submit(task, param) for param in params_list]\n    for future in futures:  # 按提交顺序处理\n        print(future.result())\n```\n\n**特点**：\n- 必须等待前一个任务完成才能处理下一个\n- 严格保持任务提交顺序\n- 适合场景：\n  - 日志处理需要按时间顺序记录\n  - 结果需要顺序写入文件/数据库\n\n---\n\n### 2. `as_completed`\n**典型代码**：\n```python\nfrom concurrent.futures import as_completed\n\nwith ThreadPoolExecutor() as executor:\n    futures = [executor.submit(task, param) for param in params_list]\n    for future in as_completed(futures):  # 按完成顺序处理\n        print(future.result())\n```\n\n**特点**：\n- 优先处理最快完成的任务\n- 不保证结果顺序\n- 适合场景：\n  - 需要实时显示进度条\n  - 处理时间差异大的任务（如不同大小的文件下载）\n  - 快速获取部分可用结果（如爬虫先抓取先分析）\n\n---\n\n## 🧪 性能对比实验\n### 模拟耗时任务\n```python\nimport time\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\n\ndef task(n):\n    time.sleep(n)  # 模拟耗时操作\n    return f\"任务 {n}s 完成\"\n\nif __name__ == \"__main__\":\n    times = [3, 1, 2]  # 三个任务分别需要3秒、1秒、2秒\n    \n    with ThreadPoolExecutor() as executor:\n        futures = [executor.submit(task, t) for t in times]\n        \n        print(\"--- 使用 as_completed ---\")\n        start = time.time()\n        for f in as_completed(futures):\n            print(f\"{time.time()-start:.1f}s 收到: {f.result()}\")\n        \n        print(\"\\n--- 按提交顺序处理 ---\")\n        start = time.time()\n        for f in futures:\n            print(f\"{time.time()-start:.1f}s 收到: {f.result()}\")\n```\n\n### 实验结果\n```text\n--- 使用 as_completed ---\n1.0s 收到: 任务 1s 完成\n2.0s 收到: 任务 2s 完成\n3.0s 收到: 任务 3s 完成\n\n--- 按提交顺序处理 ---\n3.0s 收到: 任务 3s 完成\n3.0s 收到: 任务 1s 完成\n3.0s 收到: 任务 2s 完成\n```\n\n---\n\n## 💡 最佳实践建议\n\n### 1. 优先使用 `as_completed` 当：\n✅ 需要实时显示进度状态  \n✅ 任务执行时间差异较大（如同时处理图片缩略图和4K视频）  \n✅ 不需要保持结果顺序（如独立的数据抓取任务）\n\n### 2. 使用顺序处理当：\n⛔ 必须保持结果顺序（如时间序列数据分析）  \n⛔ 后续任务依赖前序结果（如分步骤数据处理流水线）  \n⛔ 需要严格控制资源使用（如顺序写入数据库）\n\n### 3. 混合使用技巧\n```python\n# 同时获取结果和原始任务索引\nfor future in as_completed(futures):\n    original_index = futures.index(future)  # 获取提交时的顺序索引\n    result = future.result()\n    print(f\"第 {original_index} 个提交的任务完成：{result}\")\n```\n\n---\n\n## 📚 扩展知识\n### `concurrent.futures` 模块对比\n| 方法             | 特点                         | 适用场景              |\n|------------------|-----------------------------|---------------------|\n| ThreadPoolExecutor | 使用线程池，适合IO密集型任务  | 网络请求/文件操作等   |\n| ProcessPoolExecutor | 使用进程池，适合CPU密集型任务 | 数学计算/图像处理等   |\n```python\n# 进程池用法（接口与线程池一致）\nfrom concurrent.futures import ProcessPoolExecutor\nwith ProcessPoolExecutor() as executor:\n    ...\n","source":"_posts/python-as-completed.md","raw":"---\ntitle: python as_completed\ndate: 2025-08-26 17:12:29\ntags:\ncategories: python\n---\n# `as_completed` 方法详解\n\n## 🎯 核心区别：处理顺序\n| 方法                   | 执行顺序       | 结果获取顺序     | 适用场景                     |\n|------------------------|----------------|------------------|----------------------------|\n| `submit` + 顺序处理    | 按提交顺序执行 | 按提交顺序获取   | 需要严格保持结果顺序的场景    |\n| `as_completed`         | 并行执行       | 按完成顺序获取   | 需要及时处理已完成任务的场景  |\n\n---\n\n## 📌 使用场景分析\n\n### 1. `submit` + 顺序处理\n**典型代码**：\n```python\nfrom concurrent.futures import ThreadPoolExecutor\n\nwith ThreadPoolExecutor() as executor:\n    futures = [executor.submit(task, param) for param in params_list]\n    for future in futures:  # 按提交顺序处理\n        print(future.result())\n```\n\n**特点**：\n- 必须等待前一个任务完成才能处理下一个\n- 严格保持任务提交顺序\n- 适合场景：\n  - 日志处理需要按时间顺序记录\n  - 结果需要顺序写入文件/数据库\n\n---\n\n### 2. `as_completed`\n**典型代码**：\n```python\nfrom concurrent.futures import as_completed\n\nwith ThreadPoolExecutor() as executor:\n    futures = [executor.submit(task, param) for param in params_list]\n    for future in as_completed(futures):  # 按完成顺序处理\n        print(future.result())\n```\n\n**特点**：\n- 优先处理最快完成的任务\n- 不保证结果顺序\n- 适合场景：\n  - 需要实时显示进度条\n  - 处理时间差异大的任务（如不同大小的文件下载）\n  - 快速获取部分可用结果（如爬虫先抓取先分析）\n\n---\n\n## 🧪 性能对比实验\n### 模拟耗时任务\n```python\nimport time\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\n\ndef task(n):\n    time.sleep(n)  # 模拟耗时操作\n    return f\"任务 {n}s 完成\"\n\nif __name__ == \"__main__\":\n    times = [3, 1, 2]  # 三个任务分别需要3秒、1秒、2秒\n    \n    with ThreadPoolExecutor() as executor:\n        futures = [executor.submit(task, t) for t in times]\n        \n        print(\"--- 使用 as_completed ---\")\n        start = time.time()\n        for f in as_completed(futures):\n            print(f\"{time.time()-start:.1f}s 收到: {f.result()}\")\n        \n        print(\"\\n--- 按提交顺序处理 ---\")\n        start = time.time()\n        for f in futures:\n            print(f\"{time.time()-start:.1f}s 收到: {f.result()}\")\n```\n\n### 实验结果\n```text\n--- 使用 as_completed ---\n1.0s 收到: 任务 1s 完成\n2.0s 收到: 任务 2s 完成\n3.0s 收到: 任务 3s 完成\n\n--- 按提交顺序处理 ---\n3.0s 收到: 任务 3s 完成\n3.0s 收到: 任务 1s 完成\n3.0s 收到: 任务 2s 完成\n```\n\n---\n\n## 💡 最佳实践建议\n\n### 1. 优先使用 `as_completed` 当：\n✅ 需要实时显示进度状态  \n✅ 任务执行时间差异较大（如同时处理图片缩略图和4K视频）  \n✅ 不需要保持结果顺序（如独立的数据抓取任务）\n\n### 2. 使用顺序处理当：\n⛔ 必须保持结果顺序（如时间序列数据分析）  \n⛔ 后续任务依赖前序结果（如分步骤数据处理流水线）  \n⛔ 需要严格控制资源使用（如顺序写入数据库）\n\n### 3. 混合使用技巧\n```python\n# 同时获取结果和原始任务索引\nfor future in as_completed(futures):\n    original_index = futures.index(future)  # 获取提交时的顺序索引\n    result = future.result()\n    print(f\"第 {original_index} 个提交的任务完成：{result}\")\n```\n\n---\n\n## 📚 扩展知识\n### `concurrent.futures` 模块对比\n| 方法             | 特点                         | 适用场景              |\n|------------------|-----------------------------|---------------------|\n| ThreadPoolExecutor | 使用线程池，适合IO密集型任务  | 网络请求/文件操作等   |\n| ProcessPoolExecutor | 使用进程池，适合CPU密集型任务 | 数学计算/图像处理等   |\n```python\n# 进程池用法（接口与线程池一致）\nfrom concurrent.futures import ProcessPoolExecutor\nwith ProcessPoolExecutor() as executor:\n    ...\n","slug":"python-as-completed","published":1,"updated":"2025-08-28T06:39:18.223Z","comments":1,"layout":"post","photos":[],"_id":"cmev1ggcd000xhllz5x1se2wg","content":"<h1 id=\"as-completed-方法详解\"><a href=\"#as-completed-方法详解\" class=\"headerlink\" title=\"as_completed 方法详解\"></a><code>as_completed</code> 方法详解</h1><h2 id=\"🎯-核心区别：处理顺序\"><a href=\"#🎯-核心区别：处理顺序\" class=\"headerlink\" title=\"🎯 核心区别：处理顺序\"></a>🎯 核心区别：处理顺序</h2><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>执行顺序</th>\n<th>结果获取顺序</th>\n<th>适用场景</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>submit</code> + 顺序处理</td>\n<td>按提交顺序执行</td>\n<td>按提交顺序获取</td>\n<td>需要严格保持结果顺序的场景</td>\n</tr>\n<tr>\n<td><code>as_completed</code></td>\n<td>并行执行</td>\n<td>按完成顺序获取</td>\n<td>需要及时处理已完成任务的场景</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"📌-使用场景分析\"><a href=\"#📌-使用场景分析\" class=\"headerlink\" title=\"📌 使用场景分析\"></a>📌 使用场景分析</h2><h3 id=\"1-submit-顺序处理\"><a href=\"#1-submit-顺序处理\" class=\"headerlink\" title=\"1. submit + 顺序处理\"></a>1. <code>submit</code> + 顺序处理</h3><p><strong>典型代码</strong>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> concurrent.futures <span class=\"keyword\">import</span> ThreadPoolExecutor</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> ThreadPoolExecutor() <span class=\"keyword\">as</span> executor:</span><br><span class=\"line\">    futures = [executor.submit(task, param) <span class=\"keyword\">for</span> param <span class=\"keyword\">in</span> params_list]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> future <span class=\"keyword\">in</span> futures:  <span class=\"comment\"># 按提交顺序处理</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(future.result())</span><br></pre></td></tr></table></figure>\n\n<p><strong>特点</strong>：</p>\n<ul>\n<li>必须等待前一个任务完成才能处理下一个</li>\n<li>严格保持任务提交顺序</li>\n<li>适合场景：<ul>\n<li>日志处理需要按时间顺序记录</li>\n<li>结果需要顺序写入文件&#x2F;数据库</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"2-as-completed\"><a href=\"#2-as-completed\" class=\"headerlink\" title=\"2. as_completed\"></a>2. <code>as_completed</code></h3><p><strong>典型代码</strong>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> concurrent.futures <span class=\"keyword\">import</span> as_completed</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> ThreadPoolExecutor() <span class=\"keyword\">as</span> executor:</span><br><span class=\"line\">    futures = [executor.submit(task, param) <span class=\"keyword\">for</span> param <span class=\"keyword\">in</span> params_list]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> future <span class=\"keyword\">in</span> as_completed(futures):  <span class=\"comment\"># 按完成顺序处理</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(future.result())</span><br></pre></td></tr></table></figure>\n\n<p><strong>特点</strong>：</p>\n<ul>\n<li>优先处理最快完成的任务</li>\n<li>不保证结果顺序</li>\n<li>适合场景：<ul>\n<li>需要实时显示进度条</li>\n<li>处理时间差异大的任务（如不同大小的文件下载）</li>\n<li>快速获取部分可用结果（如爬虫先抓取先分析）</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"🧪-性能对比实验\"><a href=\"#🧪-性能对比实验\" class=\"headerlink\" title=\"🧪 性能对比实验\"></a>🧪 性能对比实验</h2><h3 id=\"模拟耗时任务\"><a href=\"#模拟耗时任务\" class=\"headerlink\" title=\"模拟耗时任务\"></a>模拟耗时任务</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">from</span> concurrent.futures <span class=\"keyword\">import</span> ThreadPoolExecutor, as_completed</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">task</span>(<span class=\"params\">n</span>):</span><br><span class=\"line\">    time.sleep(n)  <span class=\"comment\"># 模拟耗时操作</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">f&quot;任务 <span class=\"subst\">&#123;n&#125;</span>s 完成&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    times = [<span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]  <span class=\"comment\"># 三个任务分别需要3秒、1秒、2秒</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">with</span> ThreadPoolExecutor() <span class=\"keyword\">as</span> executor:</span><br><span class=\"line\">        futures = [executor.submit(task, t) <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> times]</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;--- 使用 as_completed ---&quot;</span>)</span><br><span class=\"line\">        start = time.time()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> f <span class=\"keyword\">in</span> as_completed(futures):</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;<span class=\"subst\">&#123;time.time()-start:<span class=\"number\">.1</span>f&#125;</span>s 收到: <span class=\"subst\">&#123;f.result()&#125;</span>&quot;</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n--- 按提交顺序处理 ---&quot;</span>)</span><br><span class=\"line\">        start = time.time()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> f <span class=\"keyword\">in</span> futures:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;<span class=\"subst\">&#123;time.time()-start:<span class=\"number\">.1</span>f&#125;</span>s 收到: <span class=\"subst\">&#123;f.result()&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"实验结果\"><a href=\"#实验结果\" class=\"headerlink\" title=\"实验结果\"></a>实验结果</h3><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--- 使用 as_completed ---</span><br><span class=\"line\">1.0s 收到: 任务 1s 完成</span><br><span class=\"line\">2.0s 收到: 任务 2s 完成</span><br><span class=\"line\">3.0s 收到: 任务 3s 完成</span><br><span class=\"line\"></span><br><span class=\"line\">--- 按提交顺序处理 ---</span><br><span class=\"line\">3.0s 收到: 任务 3s 完成</span><br><span class=\"line\">3.0s 收到: 任务 1s 完成</span><br><span class=\"line\">3.0s 收到: 任务 2s 完成</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"💡-最佳实践建议\"><a href=\"#💡-最佳实践建议\" class=\"headerlink\" title=\"💡 最佳实践建议\"></a>💡 最佳实践建议</h2><h3 id=\"1-优先使用-as-completed-当：\"><a href=\"#1-优先使用-as-completed-当：\" class=\"headerlink\" title=\"1. 优先使用 as_completed 当：\"></a>1. 优先使用 <code>as_completed</code> 当：</h3><p>✅ 需要实时显示进度状态<br>✅ 任务执行时间差异较大（如同时处理图片缩略图和4K视频）<br>✅ 不需要保持结果顺序（如独立的数据抓取任务）</p>\n<h3 id=\"2-使用顺序处理当：\"><a href=\"#2-使用顺序处理当：\" class=\"headerlink\" title=\"2. 使用顺序处理当：\"></a>2. 使用顺序处理当：</h3><p>⛔ 必须保持结果顺序（如时间序列数据分析）<br>⛔ 后续任务依赖前序结果（如分步骤数据处理流水线）<br>⛔ 需要严格控制资源使用（如顺序写入数据库）</p>\n<h3 id=\"3-混合使用技巧\"><a href=\"#3-混合使用技巧\" class=\"headerlink\" title=\"3. 混合使用技巧\"></a>3. 混合使用技巧</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 同时获取结果和原始任务索引</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> future <span class=\"keyword\">in</span> as_completed(futures):</span><br><span class=\"line\">    original_index = futures.index(future)  <span class=\"comment\"># 获取提交时的顺序索引</span></span><br><span class=\"line\">    result = future.result()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;第 <span class=\"subst\">&#123;original_index&#125;</span> 个提交的任务完成：<span class=\"subst\">&#123;result&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"📚-扩展知识\"><a href=\"#📚-扩展知识\" class=\"headerlink\" title=\"📚 扩展知识\"></a>📚 扩展知识</h2><h3 id=\"concurrent-futures-模块对比\"><a href=\"#concurrent-futures-模块对比\" class=\"headerlink\" title=\"concurrent.futures 模块对比\"></a><code>concurrent.futures</code> 模块对比</h3><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>特点</th>\n<th>适用场景</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ThreadPoolExecutor</td>\n<td>使用线程池，适合IO密集型任务</td>\n<td>网络请求&#x2F;文件操作等</td>\n</tr>\n<tr>\n<td>ProcessPoolExecutor</td>\n<td>使用进程池，适合CPU密集型任务</td>\n<td>数学计算&#x2F;图像处理等</td>\n</tr>\n</tbody></table>\n<pre><code class=\"python\"># 进程池用法（接口与线程池一致）\nfrom concurrent.futures import ProcessPoolExecutor\nwith ProcessPoolExecutor() as executor:\n    ...\n</code></pre>\n","excerpt":"","more":"<h1 id=\"as-completed-方法详解\"><a href=\"#as-completed-方法详解\" class=\"headerlink\" title=\"as_completed 方法详解\"></a><code>as_completed</code> 方法详解</h1><h2 id=\"🎯-核心区别：处理顺序\"><a href=\"#🎯-核心区别：处理顺序\" class=\"headerlink\" title=\"🎯 核心区别：处理顺序\"></a>🎯 核心区别：处理顺序</h2><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>执行顺序</th>\n<th>结果获取顺序</th>\n<th>适用场景</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>submit</code> + 顺序处理</td>\n<td>按提交顺序执行</td>\n<td>按提交顺序获取</td>\n<td>需要严格保持结果顺序的场景</td>\n</tr>\n<tr>\n<td><code>as_completed</code></td>\n<td>并行执行</td>\n<td>按完成顺序获取</td>\n<td>需要及时处理已完成任务的场景</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"📌-使用场景分析\"><a href=\"#📌-使用场景分析\" class=\"headerlink\" title=\"📌 使用场景分析\"></a>📌 使用场景分析</h2><h3 id=\"1-submit-顺序处理\"><a href=\"#1-submit-顺序处理\" class=\"headerlink\" title=\"1. submit + 顺序处理\"></a>1. <code>submit</code> + 顺序处理</h3><p><strong>典型代码</strong>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> concurrent.futures <span class=\"keyword\">import</span> ThreadPoolExecutor</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> ThreadPoolExecutor() <span class=\"keyword\">as</span> executor:</span><br><span class=\"line\">    futures = [executor.submit(task, param) <span class=\"keyword\">for</span> param <span class=\"keyword\">in</span> params_list]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> future <span class=\"keyword\">in</span> futures:  <span class=\"comment\"># 按提交顺序处理</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(future.result())</span><br></pre></td></tr></table></figure>\n\n<p><strong>特点</strong>：</p>\n<ul>\n<li>必须等待前一个任务完成才能处理下一个</li>\n<li>严格保持任务提交顺序</li>\n<li>适合场景：<ul>\n<li>日志处理需要按时间顺序记录</li>\n<li>结果需要顺序写入文件&#x2F;数据库</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"2-as-completed\"><a href=\"#2-as-completed\" class=\"headerlink\" title=\"2. as_completed\"></a>2. <code>as_completed</code></h3><p><strong>典型代码</strong>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> concurrent.futures <span class=\"keyword\">import</span> as_completed</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> ThreadPoolExecutor() <span class=\"keyword\">as</span> executor:</span><br><span class=\"line\">    futures = [executor.submit(task, param) <span class=\"keyword\">for</span> param <span class=\"keyword\">in</span> params_list]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> future <span class=\"keyword\">in</span> as_completed(futures):  <span class=\"comment\"># 按完成顺序处理</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(future.result())</span><br></pre></td></tr></table></figure>\n\n<p><strong>特点</strong>：</p>\n<ul>\n<li>优先处理最快完成的任务</li>\n<li>不保证结果顺序</li>\n<li>适合场景：<ul>\n<li>需要实时显示进度条</li>\n<li>处理时间差异大的任务（如不同大小的文件下载）</li>\n<li>快速获取部分可用结果（如爬虫先抓取先分析）</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"🧪-性能对比实验\"><a href=\"#🧪-性能对比实验\" class=\"headerlink\" title=\"🧪 性能对比实验\"></a>🧪 性能对比实验</h2><h3 id=\"模拟耗时任务\"><a href=\"#模拟耗时任务\" class=\"headerlink\" title=\"模拟耗时任务\"></a>模拟耗时任务</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">from</span> concurrent.futures <span class=\"keyword\">import</span> ThreadPoolExecutor, as_completed</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">task</span>(<span class=\"params\">n</span>):</span><br><span class=\"line\">    time.sleep(n)  <span class=\"comment\"># 模拟耗时操作</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">f&quot;任务 <span class=\"subst\">&#123;n&#125;</span>s 完成&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    times = [<span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]  <span class=\"comment\"># 三个任务分别需要3秒、1秒、2秒</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">with</span> ThreadPoolExecutor() <span class=\"keyword\">as</span> executor:</span><br><span class=\"line\">        futures = [executor.submit(task, t) <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> times]</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;--- 使用 as_completed ---&quot;</span>)</span><br><span class=\"line\">        start = time.time()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> f <span class=\"keyword\">in</span> as_completed(futures):</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;<span class=\"subst\">&#123;time.time()-start:<span class=\"number\">.1</span>f&#125;</span>s 收到: <span class=\"subst\">&#123;f.result()&#125;</span>&quot;</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n--- 按提交顺序处理 ---&quot;</span>)</span><br><span class=\"line\">        start = time.time()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> f <span class=\"keyword\">in</span> futures:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;<span class=\"subst\">&#123;time.time()-start:<span class=\"number\">.1</span>f&#125;</span>s 收到: <span class=\"subst\">&#123;f.result()&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"实验结果\"><a href=\"#实验结果\" class=\"headerlink\" title=\"实验结果\"></a>实验结果</h3><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--- 使用 as_completed ---</span><br><span class=\"line\">1.0s 收到: 任务 1s 完成</span><br><span class=\"line\">2.0s 收到: 任务 2s 完成</span><br><span class=\"line\">3.0s 收到: 任务 3s 完成</span><br><span class=\"line\"></span><br><span class=\"line\">--- 按提交顺序处理 ---</span><br><span class=\"line\">3.0s 收到: 任务 3s 完成</span><br><span class=\"line\">3.0s 收到: 任务 1s 完成</span><br><span class=\"line\">3.0s 收到: 任务 2s 完成</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"💡-最佳实践建议\"><a href=\"#💡-最佳实践建议\" class=\"headerlink\" title=\"💡 最佳实践建议\"></a>💡 最佳实践建议</h2><h3 id=\"1-优先使用-as-completed-当：\"><a href=\"#1-优先使用-as-completed-当：\" class=\"headerlink\" title=\"1. 优先使用 as_completed 当：\"></a>1. 优先使用 <code>as_completed</code> 当：</h3><p>✅ 需要实时显示进度状态<br>✅ 任务执行时间差异较大（如同时处理图片缩略图和4K视频）<br>✅ 不需要保持结果顺序（如独立的数据抓取任务）</p>\n<h3 id=\"2-使用顺序处理当：\"><a href=\"#2-使用顺序处理当：\" class=\"headerlink\" title=\"2. 使用顺序处理当：\"></a>2. 使用顺序处理当：</h3><p>⛔ 必须保持结果顺序（如时间序列数据分析）<br>⛔ 后续任务依赖前序结果（如分步骤数据处理流水线）<br>⛔ 需要严格控制资源使用（如顺序写入数据库）</p>\n<h3 id=\"3-混合使用技巧\"><a href=\"#3-混合使用技巧\" class=\"headerlink\" title=\"3. 混合使用技巧\"></a>3. 混合使用技巧</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 同时获取结果和原始任务索引</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> future <span class=\"keyword\">in</span> as_completed(futures):</span><br><span class=\"line\">    original_index = futures.index(future)  <span class=\"comment\"># 获取提交时的顺序索引</span></span><br><span class=\"line\">    result = future.result()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;第 <span class=\"subst\">&#123;original_index&#125;</span> 个提交的任务完成：<span class=\"subst\">&#123;result&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"📚-扩展知识\"><a href=\"#📚-扩展知识\" class=\"headerlink\" title=\"📚 扩展知识\"></a>📚 扩展知识</h2><h3 id=\"concurrent-futures-模块对比\"><a href=\"#concurrent-futures-模块对比\" class=\"headerlink\" title=\"concurrent.futures 模块对比\"></a><code>concurrent.futures</code> 模块对比</h3><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>特点</th>\n<th>适用场景</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ThreadPoolExecutor</td>\n<td>使用线程池，适合IO密集型任务</td>\n<td>网络请求&#x2F;文件操作等</td>\n</tr>\n<tr>\n<td>ProcessPoolExecutor</td>\n<td>使用进程池，适合CPU密集型任务</td>\n<td>数学计算&#x2F;图像处理等</td>\n</tr>\n</tbody></table>\n<pre><code class=\"python\"># 进程池用法（接口与线程池一致）\nfrom concurrent.futures import ProcessPoolExecutor\nwith ProcessPoolExecutor() as executor:\n    ...\n</code></pre>\n"},{"title":"python threading","date":"2025-08-26T09:04:04.000Z","_content":"# threading.Thread\n* 适用场景：任务逻辑差异大；每个线程需要执行完全不同的逻辑\n* 三个比较重要的参数\n1. 锁：threading.Lock()  \n两种使用方法推荐with下方演示，第二种手动加锁lock.acquire()，然后释放lock.release()\n```python\n#未使用的情况下\ndef sing():\n    #with stats_lock:\n        for i in range(3):\n            print(\"正在唱歌...%d\"%i)\n            sleep(1)\n\ndef dance():\n    #with stats_lock:\n        for i in range(3):\n            print(\"正在跳舞...%d\"%i)\n            sleep(1)\n\nif __name__ == '__main__':\n    print('---开始---:%s'%ctime())\n\n    t1 = threading.Thread(target=sing)\n    t2 = threading.Thread(target=dance)\n\n    t1.start()\n    t2.start()\n\n#输出是混乱的就是因为没有给线程加锁\n---开始---:Tue Aug 26 10:19:56 2025\n正在唱歌...0\n正在跳舞...0\n正在唱歌...1正在跳舞...1\n\n正在跳舞...2\n正在唱歌...2\n======================================================================\n#加锁后\nimport threading\nfrom time import sleep,ctime\n\nstats_lock = threading.Lock()\ndef sing():\n    with stats_lock:\n        #stats_lock.acquire()\n        for i in range(3):\n            print(\"正在唱歌...%d\"%i)\n            sleep(1)\n        #stats_lock.release()\n\ndef dance():\n    with stats_lock:\n        for i in range(3):\n            print(\"正在跳舞...%d\"%i)\n            sleep(1)\n\nif __name__ == '__main__':\n    print('---开始---:%s'%ctime())\n\n    t1 = threading.Thread(target=sing)\n    t2 = threading.Thread(target=dance)\n\n    t1.start()\n    t2.start()\n#输出正常\n---开始---:Tue Aug 26 10:23:18 2025\n正在唱歌...0\n正在唱歌...1\n正在唱歌...2\n正在跳舞...0\n正在跳舞...1\n正在跳舞...2\n```\n\n\n\n2. 线程中的join等待阻塞函数\n* 当有线程在统计信息时，必须等待执行完成才可以\n```python\nimport threading\nfrom time import sleep,ctime\n\nstats_lock = threading.Lock()\n\n\ndef sing(num):\n    with stats_lock:\n        for i in range(num):\n            print(\"正在唱歌...%d\"%i)\n            sleep(1)\n\ndef dance(num):\n    with stats_lock:\n        for i in range(num):\n            print(\"正在跳舞...%d\"%i)\n            sleep(1)\n\nif __name__ == '__main__':\n    print('---开始---:%s'%ctime())\n\n    t1 = threading.Thread(target=sing,args=(3,),name=\"唱歌线程\")\n    t2 = threading.Thread(target=dance,args=(3,))\n\n    t1.start()\n    t2.start()\n\n    # t1.join()\n    # t2.join()\n    #sleep(5) # 屏蔽此行代码，试试看，程序是否会立马结束？\n    print('---结束---:%s'%ctime())\n\n#未使用join等待函数输出结果,主线程直接结束，不符合预期\n---开始---:Tue Aug 26 10:35:09 2025\n正在唱歌...0\n---结束---:Tue Aug 26 10:35:09 2025\n正在唱歌...1\n正在唱歌...2\n正在跳舞...0\n正在跳舞...1\n正在跳舞...2\n#使用join后\n---开始---:Tue Aug 26 10:36:35 2025\n正在唱歌...0\n正在唱歌...1\n正在唱歌...2\n正在跳舞...0\n正在跳舞...1\n正在跳舞...2\n---结束---:Tue Aug 26 10:36:41 2025\n=================================================================================\n#注意锁的颗粒度，如果锁循环则是线程二要等线程一执行完才会运行影响效率\nimport threading\nfrom time import sleep,ctime\n\nstats_lock = threading.Lock()\n\n\ndef sing(num):\n    #with stats_lock:\n        for i in range(num):\n            with stats_lock:\n                print(\"正在唱歌...%d\"%i)\n            sleep(1)\n\ndef dance(num):\n    #with stats_lock:\n        for i in range(num):\n            with stats_lock:\n                print(\"正在跳舞...%d\"%i)\n            sleep(1)\n\nif __name__ == '__main__':\n    print('---开始---:%s'%ctime())\n\n    t1 = threading.Thread(target=sing,args=(3,),name=\"唱歌线程\")\n    t2 = threading.Thread(target=dance,args=(3,))\n\n    t1.start()\n    t2.start()\n\n    t1.join()\n    t2.join()\n    #sleep(5) # 屏蔽此行代码，试试看，程序是否会立马结束？\n    print('---结束---:%s'%ctime())\n#输出结果，同步执行，只锁输出\n---开始---:Tue Aug 26 10:39:38 2025\n正在唱歌...0\n正在跳舞...0\n正在跳舞...1\n正在唱歌...1\n正在跳舞...2\n正在唱歌...2\n---结束---:Tue Aug 26 10:39:41 2025\n```\n\n3. 队列函数 queue.Queue 来实现线程间的通信和数据交换\n* 生产者（如网络请求接收）和消费者（如任务处理线程）速度不一致建议使用\n* 比如爬取m3u8视频片段，就需要使用队列按照先进先出的顺序下载避免多线程片段混乱无法组合\n\n|  作用   | 说明  |\n|  ----  | ----  |\n| 线程安全的数据传递  | 自动处理多线程并发操作，无需手动加锁/释放锁。 |\n| 任务解耦  | 生产任务的线程（如主线程）和消费任务的线程（工作线程）完全解耦。 |\n|   流量控制   |   通过队列大小限制（maxsize）防止内存爆炸。       |\n|   任务状态跟踪   |  支持 task_done() 和 join() 机制，方便等待所有任务完成。   |\n\n```python\n#未使用\ntasks = []  # 全局任务列表\nlock = threading.Lock()\n\n# 生产者线程\ndef producer():\n    global tasks\n    for i in range(100):\n        with lock:\n            tasks.append(i)\n\n# 消费者线程\ndef consumer():\n    while True:\n        with lock:\n            if not tasks:\n                break\n            item = tasks.pop(0)\n        process(item)\n\n#使用\nimport threading\nfrom queue import Queue\n\ntask_queue = Queue(maxsize=10)  # 队列容量限制\n\ndef producer():\n    for i in range(100):\n        task_queue.put(i)  # 自动阻塞队列满时\n\ndef consumer():\n    while True:\n        item = task_queue.get()  # 自动阻塞队列空时\n        process(item)\n        task_queue.task_done()\n\n# 启动线程\nproducer_thread = threading.Thread(target=producer)\nconsumer_thread = threading.Thread(target=consumer)\n\nproducer_thread.start()\nconsumer_thread.start()\n\ntask_queue.join()  # 等待所有任务完成\nproducer_thread.join()\nconsumer_thread.join()\n\n\n#顺序先入先出\nimport threading\nfrom queue import Queue\nimport time\nimport random\n\n# 共享队列和结果容器\ntask_queue = Queue()\nresults = {}\nlock = threading.Lock()  # 保证结果字典的线程安全\n\ndef worker():\n    \"\"\"工作线程：处理无序任务，保存结果到字典\"\"\"\n    while True:\n        # 获取任务（包含序号和参数）\n        index, url = task_queue.get()\n        print(f\"开始处理第 {index} 章: {url}\")\n        time.sleep(random.uniform(0.5, 2))  # 模拟耗时操作\n        content = f\"第 {index} 章内容\"\n        \n        # 保存结果（加锁保证线程安全）\n        with lock:\n            results[index] = content\n        \n        task_queue.task_done()\n\ndef download_ordered_chapters(chapters):\n    \"\"\"主线程：提交任务、启动工作线程、等待并排序结果\"\"\"\n    # 提交任务到队列\n    for index, url in chapters:\n        task_queue.put((index, url))\n    \n    # 启动工作线程（3个线程）\n    threads = []\n    for _ in range(3):\n        t = threading.Thread(target=worker, daemon=True)\n        t.start()\n        threads.append(t)\n    \n    # 等待所有任务完成\n    task_queue.join()\n     # 等待所有线程结束（非守护线程必须调用 join()）\n    # for t in threads:\n    #     t.join()  # 确保线程完全结束\n    \n    # 按序号排序结果\n    sorted_indices = sorted(results.keys())\n    ordered_results = [results[i] for i in sorted_indices]\n    \n    return ordered_results\n\n# 示例调用\nif __name__ == \"__main__\":\n    chapters = [\n        (1, \"http://example.com/ch1\"),\n        (2, \"http://example.com/ch2\"),\n        (3, \"http://example.com/ch3\")\n    ]\n    \n    ordered_contents = download_ordered_chapters(chapters)\n    for content in ordered_contents:\n        print(f\"保存: {content}\")\n\n```\n\n\n\n\n* 综合示例代码\n```python\nimport queue\nimport threading\nimport time\nimport requests\nfrom queue import Queue\n\n# 压测配置\nCONFIG = {\n    \"target_url\": \"http://localhost/\",  # 目标地址\n    \"thread_num\": 5000,  # 并发线程数\n    \"total_requests\": 100000,  # 总请求量 (设置为0表示无限持续)\n    \"timeout\": 5,  # 单请求超时时间（秒）\n    \"headers\": {  # 请求头（按需修改）\n        \"User-Agent\": \"Stress Test/1.0\"\n    }\n}\n\n# 全局统计\nstats = {\n    'total': 0,\n    'success': 0,\n    'fail': 0,\n    'total_time': 0.0,\n    'max_time': 0.0,\n    'min_time': float('inf')\n}\nstats_lock = threading.Lock()  # 线程安全锁\n\n# 请求任务队列\ntask_queue = Queue()\n\n\ndef worker():\n    \"\"\"工作线程函数\"\"\"\n    while True:\n        try:\n            # 从队列获取任务（阻塞模式）\n            task_id = task_queue.get(timeout=2)\n\n            start_time = time.time()\n            try:\n                # 发送请求（可修改为POST等其他方法）\n                response = requests.get(\n                    CONFIG[\"target_url\"],\n                    headers=CONFIG[\"headers\"],\n                    timeout=CONFIG[\"timeout\"]\n                )\n                elapsed = time.time() - start_time\n\n                # 更新统计（200~399状态码视为成功）\n                with stats_lock:\n                    stats['total'] += 1\n                    if 200 <= response.status_code < 400:\n                        stats['success'] += 1\n                    else:\n                        stats['fail'] += 1\n\n                    stats['total_time'] += elapsed\n                    stats['max_time'] = max(stats['max_time'], elapsed)\n                    stats['min_time'] = min(stats['min_time'], elapsed)\n\n            except Exception as e:\n                with stats_lock:\n                    stats['fail'] += 1\n                    stats['total'] += 1\n\n            # 标记任务完成\n            task_queue.task_done()\n\n        except queue.Empty:\n            break\n\n\ndef print_stats():\n    \"\"\"实时打印统计信息\"\"\"\n    start_time = time.time()\n    while True:\n        time.sleep(1)  # 每秒更新\n        with stats_lock:\n            if stats['total'] == 0:\n                continue\n\n            duration = time.time() - start_time\n            qps = stats['total'] / duration\n            avg_time = stats['total_time'] / stats['total']\n\n            print(f\"\\r[STAT] \"\n                  f\"Requests: {stats['total']} | \"\n                  f\"Success: {stats['success']} | \"\n                  f\"Fail: {stats['fail']} | \"\n                  f\"QPS: {qps:.1f} | \"\n                  f\"Avg: {avg_time:.3f}s | \"\n                  f\"Min/Max: {stats['min_time']:.3f}s/{stats['max_time']:.3f}s\",\n                  end='', flush=True)\n\n        # 检查是否完成所有任务\n        if CONFIG[\"total_requests\"] > 0 and stats['total'] >= CONFIG[\"total_requests\"]:\n            break\n\n\nif __name__ == \"__main__\":\n    # 初始化任务队列\n    if CONFIG[\"total_requests\"] > 0:\n        for i in range(CONFIG[\"total_requests\"]):\n            task_queue.put(i)\n    else:  # 持续模式填充队列\n        while True:\n            task_queue.put(1)\n\n    # 创建工作者线程\n    threads = []\n    for _ in range(CONFIG[\"thread_num\"]):\n        t = threading.Thread(target=worker)\n        t.daemon = True\n        t.start()\n        threads.append(t)\n\n    # 启动统计线程\n    stat_thread = threading.Thread(target=print_stats)\n    stat_thread.start()\n\n    # 等待任务完成\n    task_queue.join()\n    stat_thread.join()\n\n    print(\"\\n压力测试完成\")\n\n#使用了join等待压测结束统计信息\n#使用了queue.put填充队列为请求数量，线程为并发数量\n#使用了with stats_lock加锁避免线程冲突\n\n\n#推荐使用这种方式，因为是大量重复任务\n#使用ThreadPoolExecutor线程池优化，因为是大量重复任务，thread每次都要新创建线程消耗较大\nimport threading\nimport time\nimport requests\nfrom concurrent.futures import ThreadPoolExecutor\n\nCONFIG = {\n    \"target_url\": \"http://localhost/\",\n    \"thread_num\": 300,\n    \"total_requests\": 10000,\n    \"timeout\": 5,\n    \"headers\": {\n        \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\"\n    },\n    \"show_progress\": True\n}\n\nstats = {\n    'total': 0, 'success': 0, 'fail': 0,\n    'total_time': 0.0, 'max_time': 0.0, 'min_time': float('inf')\n}\nstats_lock = threading.Lock()\n\ndef worker(_):\n    start_time = time.time()\n    try:\n        response = requests.get(\n            CONFIG[\"target_url\"],\n            headers=CONFIG[\"headers\"],\n            timeout=CONFIG[\"timeout\"]\n        )\n        elapsed = time.time() - start_time\n        with stats_lock:\n            stats['total'] += 1\n            if 200 <= response.status_code < 400:\n                stats['success'] += 1\n            else:\n                stats['fail'] += 1\n            stats['total_time'] += elapsed\n            stats['max_time'] = max(stats['max_time'], elapsed)\n            stats['min_time'] = min(stats['min_time'], elapsed)\n    except Exception as e:\n        with stats_lock:\n            stats['fail'] += 1\n            stats['total'] += 1\n\ndef print_stats():\n    start_time = time.time()\n    while True:\n        time.sleep(1)\n        with stats_lock:\n            current_total = stats['total']\n            duration = time.time() - start_time\n            qps = current_total / duration if duration > 0 else 0\n            avg_time = stats['total_time'] / current_total if current_total > 0 else 0\n\n            progress_percent = (current_total / CONFIG[\"total_requests\"]) * 100 if CONFIG[\"total_requests\"] > 0 else 0\n            progress_bar = \"\"\n            if CONFIG[\"show_progress\"] and CONFIG[\"total_requests\"] > 0:\n                bar_length = 20\n                filled = int(bar_length * current_total // CONFIG[\"total_requests\"])\n                progress_bar = \"[\" + \"=\" * filled + \" \" * (bar_length - filled) + \"] \"\n\n            output = (\n                f\"\\r[STAT] \"\n                f\"进度: {progress_bar}{progress_percent:.1f}% | \"\n                f\"请求: {current_total}/{CONFIG['total_requests'] if CONFIG['total_requests'] > 0 else '∞'} | \"\n                f\"成功: {stats['success']} | \"\n                f\"失败: {stats['fail']} | \"\n                f\"QPS: {qps:.1f} | \"\n                f\"平均: {avg_time:.3f}s | \"\n                f\"最慢: {stats['max_time']:.3f}s\"\n            )\n            print(output, end='', flush=True)\n\n            if CONFIG[\"total_requests\"] > 0 and current_total >= CONFIG[\"total_requests\"]:\n                break\n\nif __name__ == \"__main__\":\n    stat_thread = threading.Thread(target=print_stats)\n    stat_thread.start()\n\n    with ThreadPoolExecutor(max_workers=CONFIG[\"thread_num\"]) as executor:\n        if CONFIG[\"total_requests\"] > 0:\n            executor.map(worker, range(CONFIG[\"total_requests\"]))\n        else:\n            while True:\n                executor.submit(worker, None)\n\n    stat_thread.join()\n    print(\"\\n压力测试完成\")\n\n\n```\n\n# 额外\n* ThreadPoolExecutor 适用场景：短期、批量、同质化任务\n\n* multiprocessing 适用场景：大量cpu密集型计算，多进程绕过GIL；io密集型建议使用异步编程\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/python-threading.md","raw":"---\ntitle: python threading\ndate: 2025-08-26 17:04:04\ntags:\ncategories: python\n---\n# threading.Thread\n* 适用场景：任务逻辑差异大；每个线程需要执行完全不同的逻辑\n* 三个比较重要的参数\n1. 锁：threading.Lock()  \n两种使用方法推荐with下方演示，第二种手动加锁lock.acquire()，然后释放lock.release()\n```python\n#未使用的情况下\ndef sing():\n    #with stats_lock:\n        for i in range(3):\n            print(\"正在唱歌...%d\"%i)\n            sleep(1)\n\ndef dance():\n    #with stats_lock:\n        for i in range(3):\n            print(\"正在跳舞...%d\"%i)\n            sleep(1)\n\nif __name__ == '__main__':\n    print('---开始---:%s'%ctime())\n\n    t1 = threading.Thread(target=sing)\n    t2 = threading.Thread(target=dance)\n\n    t1.start()\n    t2.start()\n\n#输出是混乱的就是因为没有给线程加锁\n---开始---:Tue Aug 26 10:19:56 2025\n正在唱歌...0\n正在跳舞...0\n正在唱歌...1正在跳舞...1\n\n正在跳舞...2\n正在唱歌...2\n======================================================================\n#加锁后\nimport threading\nfrom time import sleep,ctime\n\nstats_lock = threading.Lock()\ndef sing():\n    with stats_lock:\n        #stats_lock.acquire()\n        for i in range(3):\n            print(\"正在唱歌...%d\"%i)\n            sleep(1)\n        #stats_lock.release()\n\ndef dance():\n    with stats_lock:\n        for i in range(3):\n            print(\"正在跳舞...%d\"%i)\n            sleep(1)\n\nif __name__ == '__main__':\n    print('---开始---:%s'%ctime())\n\n    t1 = threading.Thread(target=sing)\n    t2 = threading.Thread(target=dance)\n\n    t1.start()\n    t2.start()\n#输出正常\n---开始---:Tue Aug 26 10:23:18 2025\n正在唱歌...0\n正在唱歌...1\n正在唱歌...2\n正在跳舞...0\n正在跳舞...1\n正在跳舞...2\n```\n\n\n\n2. 线程中的join等待阻塞函数\n* 当有线程在统计信息时，必须等待执行完成才可以\n```python\nimport threading\nfrom time import sleep,ctime\n\nstats_lock = threading.Lock()\n\n\ndef sing(num):\n    with stats_lock:\n        for i in range(num):\n            print(\"正在唱歌...%d\"%i)\n            sleep(1)\n\ndef dance(num):\n    with stats_lock:\n        for i in range(num):\n            print(\"正在跳舞...%d\"%i)\n            sleep(1)\n\nif __name__ == '__main__':\n    print('---开始---:%s'%ctime())\n\n    t1 = threading.Thread(target=sing,args=(3,),name=\"唱歌线程\")\n    t2 = threading.Thread(target=dance,args=(3,))\n\n    t1.start()\n    t2.start()\n\n    # t1.join()\n    # t2.join()\n    #sleep(5) # 屏蔽此行代码，试试看，程序是否会立马结束？\n    print('---结束---:%s'%ctime())\n\n#未使用join等待函数输出结果,主线程直接结束，不符合预期\n---开始---:Tue Aug 26 10:35:09 2025\n正在唱歌...0\n---结束---:Tue Aug 26 10:35:09 2025\n正在唱歌...1\n正在唱歌...2\n正在跳舞...0\n正在跳舞...1\n正在跳舞...2\n#使用join后\n---开始---:Tue Aug 26 10:36:35 2025\n正在唱歌...0\n正在唱歌...1\n正在唱歌...2\n正在跳舞...0\n正在跳舞...1\n正在跳舞...2\n---结束---:Tue Aug 26 10:36:41 2025\n=================================================================================\n#注意锁的颗粒度，如果锁循环则是线程二要等线程一执行完才会运行影响效率\nimport threading\nfrom time import sleep,ctime\n\nstats_lock = threading.Lock()\n\n\ndef sing(num):\n    #with stats_lock:\n        for i in range(num):\n            with stats_lock:\n                print(\"正在唱歌...%d\"%i)\n            sleep(1)\n\ndef dance(num):\n    #with stats_lock:\n        for i in range(num):\n            with stats_lock:\n                print(\"正在跳舞...%d\"%i)\n            sleep(1)\n\nif __name__ == '__main__':\n    print('---开始---:%s'%ctime())\n\n    t1 = threading.Thread(target=sing,args=(3,),name=\"唱歌线程\")\n    t2 = threading.Thread(target=dance,args=(3,))\n\n    t1.start()\n    t2.start()\n\n    t1.join()\n    t2.join()\n    #sleep(5) # 屏蔽此行代码，试试看，程序是否会立马结束？\n    print('---结束---:%s'%ctime())\n#输出结果，同步执行，只锁输出\n---开始---:Tue Aug 26 10:39:38 2025\n正在唱歌...0\n正在跳舞...0\n正在跳舞...1\n正在唱歌...1\n正在跳舞...2\n正在唱歌...2\n---结束---:Tue Aug 26 10:39:41 2025\n```\n\n3. 队列函数 queue.Queue 来实现线程间的通信和数据交换\n* 生产者（如网络请求接收）和消费者（如任务处理线程）速度不一致建议使用\n* 比如爬取m3u8视频片段，就需要使用队列按照先进先出的顺序下载避免多线程片段混乱无法组合\n\n|  作用   | 说明  |\n|  ----  | ----  |\n| 线程安全的数据传递  | 自动处理多线程并发操作，无需手动加锁/释放锁。 |\n| 任务解耦  | 生产任务的线程（如主线程）和消费任务的线程（工作线程）完全解耦。 |\n|   流量控制   |   通过队列大小限制（maxsize）防止内存爆炸。       |\n|   任务状态跟踪   |  支持 task_done() 和 join() 机制，方便等待所有任务完成。   |\n\n```python\n#未使用\ntasks = []  # 全局任务列表\nlock = threading.Lock()\n\n# 生产者线程\ndef producer():\n    global tasks\n    for i in range(100):\n        with lock:\n            tasks.append(i)\n\n# 消费者线程\ndef consumer():\n    while True:\n        with lock:\n            if not tasks:\n                break\n            item = tasks.pop(0)\n        process(item)\n\n#使用\nimport threading\nfrom queue import Queue\n\ntask_queue = Queue(maxsize=10)  # 队列容量限制\n\ndef producer():\n    for i in range(100):\n        task_queue.put(i)  # 自动阻塞队列满时\n\ndef consumer():\n    while True:\n        item = task_queue.get()  # 自动阻塞队列空时\n        process(item)\n        task_queue.task_done()\n\n# 启动线程\nproducer_thread = threading.Thread(target=producer)\nconsumer_thread = threading.Thread(target=consumer)\n\nproducer_thread.start()\nconsumer_thread.start()\n\ntask_queue.join()  # 等待所有任务完成\nproducer_thread.join()\nconsumer_thread.join()\n\n\n#顺序先入先出\nimport threading\nfrom queue import Queue\nimport time\nimport random\n\n# 共享队列和结果容器\ntask_queue = Queue()\nresults = {}\nlock = threading.Lock()  # 保证结果字典的线程安全\n\ndef worker():\n    \"\"\"工作线程：处理无序任务，保存结果到字典\"\"\"\n    while True:\n        # 获取任务（包含序号和参数）\n        index, url = task_queue.get()\n        print(f\"开始处理第 {index} 章: {url}\")\n        time.sleep(random.uniform(0.5, 2))  # 模拟耗时操作\n        content = f\"第 {index} 章内容\"\n        \n        # 保存结果（加锁保证线程安全）\n        with lock:\n            results[index] = content\n        \n        task_queue.task_done()\n\ndef download_ordered_chapters(chapters):\n    \"\"\"主线程：提交任务、启动工作线程、等待并排序结果\"\"\"\n    # 提交任务到队列\n    for index, url in chapters:\n        task_queue.put((index, url))\n    \n    # 启动工作线程（3个线程）\n    threads = []\n    for _ in range(3):\n        t = threading.Thread(target=worker, daemon=True)\n        t.start()\n        threads.append(t)\n    \n    # 等待所有任务完成\n    task_queue.join()\n     # 等待所有线程结束（非守护线程必须调用 join()）\n    # for t in threads:\n    #     t.join()  # 确保线程完全结束\n    \n    # 按序号排序结果\n    sorted_indices = sorted(results.keys())\n    ordered_results = [results[i] for i in sorted_indices]\n    \n    return ordered_results\n\n# 示例调用\nif __name__ == \"__main__\":\n    chapters = [\n        (1, \"http://example.com/ch1\"),\n        (2, \"http://example.com/ch2\"),\n        (3, \"http://example.com/ch3\")\n    ]\n    \n    ordered_contents = download_ordered_chapters(chapters)\n    for content in ordered_contents:\n        print(f\"保存: {content}\")\n\n```\n\n\n\n\n* 综合示例代码\n```python\nimport queue\nimport threading\nimport time\nimport requests\nfrom queue import Queue\n\n# 压测配置\nCONFIG = {\n    \"target_url\": \"http://localhost/\",  # 目标地址\n    \"thread_num\": 5000,  # 并发线程数\n    \"total_requests\": 100000,  # 总请求量 (设置为0表示无限持续)\n    \"timeout\": 5,  # 单请求超时时间（秒）\n    \"headers\": {  # 请求头（按需修改）\n        \"User-Agent\": \"Stress Test/1.0\"\n    }\n}\n\n# 全局统计\nstats = {\n    'total': 0,\n    'success': 0,\n    'fail': 0,\n    'total_time': 0.0,\n    'max_time': 0.0,\n    'min_time': float('inf')\n}\nstats_lock = threading.Lock()  # 线程安全锁\n\n# 请求任务队列\ntask_queue = Queue()\n\n\ndef worker():\n    \"\"\"工作线程函数\"\"\"\n    while True:\n        try:\n            # 从队列获取任务（阻塞模式）\n            task_id = task_queue.get(timeout=2)\n\n            start_time = time.time()\n            try:\n                # 发送请求（可修改为POST等其他方法）\n                response = requests.get(\n                    CONFIG[\"target_url\"],\n                    headers=CONFIG[\"headers\"],\n                    timeout=CONFIG[\"timeout\"]\n                )\n                elapsed = time.time() - start_time\n\n                # 更新统计（200~399状态码视为成功）\n                with stats_lock:\n                    stats['total'] += 1\n                    if 200 <= response.status_code < 400:\n                        stats['success'] += 1\n                    else:\n                        stats['fail'] += 1\n\n                    stats['total_time'] += elapsed\n                    stats['max_time'] = max(stats['max_time'], elapsed)\n                    stats['min_time'] = min(stats['min_time'], elapsed)\n\n            except Exception as e:\n                with stats_lock:\n                    stats['fail'] += 1\n                    stats['total'] += 1\n\n            # 标记任务完成\n            task_queue.task_done()\n\n        except queue.Empty:\n            break\n\n\ndef print_stats():\n    \"\"\"实时打印统计信息\"\"\"\n    start_time = time.time()\n    while True:\n        time.sleep(1)  # 每秒更新\n        with stats_lock:\n            if stats['total'] == 0:\n                continue\n\n            duration = time.time() - start_time\n            qps = stats['total'] / duration\n            avg_time = stats['total_time'] / stats['total']\n\n            print(f\"\\r[STAT] \"\n                  f\"Requests: {stats['total']} | \"\n                  f\"Success: {stats['success']} | \"\n                  f\"Fail: {stats['fail']} | \"\n                  f\"QPS: {qps:.1f} | \"\n                  f\"Avg: {avg_time:.3f}s | \"\n                  f\"Min/Max: {stats['min_time']:.3f}s/{stats['max_time']:.3f}s\",\n                  end='', flush=True)\n\n        # 检查是否完成所有任务\n        if CONFIG[\"total_requests\"] > 0 and stats['total'] >= CONFIG[\"total_requests\"]:\n            break\n\n\nif __name__ == \"__main__\":\n    # 初始化任务队列\n    if CONFIG[\"total_requests\"] > 0:\n        for i in range(CONFIG[\"total_requests\"]):\n            task_queue.put(i)\n    else:  # 持续模式填充队列\n        while True:\n            task_queue.put(1)\n\n    # 创建工作者线程\n    threads = []\n    for _ in range(CONFIG[\"thread_num\"]):\n        t = threading.Thread(target=worker)\n        t.daemon = True\n        t.start()\n        threads.append(t)\n\n    # 启动统计线程\n    stat_thread = threading.Thread(target=print_stats)\n    stat_thread.start()\n\n    # 等待任务完成\n    task_queue.join()\n    stat_thread.join()\n\n    print(\"\\n压力测试完成\")\n\n#使用了join等待压测结束统计信息\n#使用了queue.put填充队列为请求数量，线程为并发数量\n#使用了with stats_lock加锁避免线程冲突\n\n\n#推荐使用这种方式，因为是大量重复任务\n#使用ThreadPoolExecutor线程池优化，因为是大量重复任务，thread每次都要新创建线程消耗较大\nimport threading\nimport time\nimport requests\nfrom concurrent.futures import ThreadPoolExecutor\n\nCONFIG = {\n    \"target_url\": \"http://localhost/\",\n    \"thread_num\": 300,\n    \"total_requests\": 10000,\n    \"timeout\": 5,\n    \"headers\": {\n        \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\"\n    },\n    \"show_progress\": True\n}\n\nstats = {\n    'total': 0, 'success': 0, 'fail': 0,\n    'total_time': 0.0, 'max_time': 0.0, 'min_time': float('inf')\n}\nstats_lock = threading.Lock()\n\ndef worker(_):\n    start_time = time.time()\n    try:\n        response = requests.get(\n            CONFIG[\"target_url\"],\n            headers=CONFIG[\"headers\"],\n            timeout=CONFIG[\"timeout\"]\n        )\n        elapsed = time.time() - start_time\n        with stats_lock:\n            stats['total'] += 1\n            if 200 <= response.status_code < 400:\n                stats['success'] += 1\n            else:\n                stats['fail'] += 1\n            stats['total_time'] += elapsed\n            stats['max_time'] = max(stats['max_time'], elapsed)\n            stats['min_time'] = min(stats['min_time'], elapsed)\n    except Exception as e:\n        with stats_lock:\n            stats['fail'] += 1\n            stats['total'] += 1\n\ndef print_stats():\n    start_time = time.time()\n    while True:\n        time.sleep(1)\n        with stats_lock:\n            current_total = stats['total']\n            duration = time.time() - start_time\n            qps = current_total / duration if duration > 0 else 0\n            avg_time = stats['total_time'] / current_total if current_total > 0 else 0\n\n            progress_percent = (current_total / CONFIG[\"total_requests\"]) * 100 if CONFIG[\"total_requests\"] > 0 else 0\n            progress_bar = \"\"\n            if CONFIG[\"show_progress\"] and CONFIG[\"total_requests\"] > 0:\n                bar_length = 20\n                filled = int(bar_length * current_total // CONFIG[\"total_requests\"])\n                progress_bar = \"[\" + \"=\" * filled + \" \" * (bar_length - filled) + \"] \"\n\n            output = (\n                f\"\\r[STAT] \"\n                f\"进度: {progress_bar}{progress_percent:.1f}% | \"\n                f\"请求: {current_total}/{CONFIG['total_requests'] if CONFIG['total_requests'] > 0 else '∞'} | \"\n                f\"成功: {stats['success']} | \"\n                f\"失败: {stats['fail']} | \"\n                f\"QPS: {qps:.1f} | \"\n                f\"平均: {avg_time:.3f}s | \"\n                f\"最慢: {stats['max_time']:.3f}s\"\n            )\n            print(output, end='', flush=True)\n\n            if CONFIG[\"total_requests\"] > 0 and current_total >= CONFIG[\"total_requests\"]:\n                break\n\nif __name__ == \"__main__\":\n    stat_thread = threading.Thread(target=print_stats)\n    stat_thread.start()\n\n    with ThreadPoolExecutor(max_workers=CONFIG[\"thread_num\"]) as executor:\n        if CONFIG[\"total_requests\"] > 0:\n            executor.map(worker, range(CONFIG[\"total_requests\"]))\n        else:\n            while True:\n                executor.submit(worker, None)\n\n    stat_thread.join()\n    print(\"\\n压力测试完成\")\n\n\n```\n\n# 额外\n* ThreadPoolExecutor 适用场景：短期、批量、同质化任务\n\n* multiprocessing 适用场景：大量cpu密集型计算，多进程绕过GIL；io密集型建议使用异步编程\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"python-threading","published":1,"updated":"2025-08-28T06:39:18.224Z","comments":1,"layout":"post","photos":[],"_id":"cmev1ggch0011hllz3i8zfqvm","content":"<h1 id=\"threading-Thread\"><a href=\"#threading-Thread\" class=\"headerlink\" title=\"threading.Thread\"></a>threading.Thread</h1><ul>\n<li>适用场景：任务逻辑差异大；每个线程需要执行完全不同的逻辑</li>\n<li>三个比较重要的参数</li>\n</ul>\n<ol>\n<li><p>锁：threading.Lock()<br>两种使用方法推荐with下方演示，第二种手动加锁lock.acquire()，然后释放lock.release()</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#未使用的情况下</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">sing</span>():</span><br><span class=\"line\">    <span class=\"comment\">#with stats_lock:</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">3</span>):</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;正在唱歌...%d&quot;</span>%i)</span><br><span class=\"line\">            sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">dance</span>():</span><br><span class=\"line\">    <span class=\"comment\">#with stats_lock:</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">3</span>):</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;正在跳舞...%d&quot;</span>%i)</span><br><span class=\"line\">            sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;---开始---:%s&#x27;</span>%ctime())</span><br><span class=\"line\"></span><br><span class=\"line\">    t1 = threading.Thread(target=sing)</span><br><span class=\"line\">    t2 = threading.Thread(target=dance)</span><br><span class=\"line\"></span><br><span class=\"line\">    t1.start()</span><br><span class=\"line\">    t2.start()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出是混乱的就是因为没有给线程加锁</span></span><br><span class=\"line\">---开始---:Tue Aug <span class=\"number\">26</span> <span class=\"number\">10</span>:<span class=\"number\">19</span>:<span class=\"number\">56</span> <span class=\"number\">2025</span></span><br><span class=\"line\">正在唱歌..<span class=\"number\">.0</span></span><br><span class=\"line\">正在跳舞..<span class=\"number\">.0</span></span><br><span class=\"line\">正在唱歌..<span class=\"number\">.1</span>正在跳舞..<span class=\"number\">.1</span></span><br><span class=\"line\"></span><br><span class=\"line\">正在跳舞..<span class=\"number\">.2</span></span><br><span class=\"line\">正在唱歌..<span class=\"number\">.2</span></span><br><span class=\"line\">======================================================================</span><br><span class=\"line\"><span class=\"comment\">#加锁后</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> sleep,ctime</span><br><span class=\"line\"></span><br><span class=\"line\">stats_lock = threading.Lock()</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">sing</span>():</span><br><span class=\"line\">    <span class=\"keyword\">with</span> stats_lock:</span><br><span class=\"line\">        <span class=\"comment\">#stats_lock.acquire()</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">3</span>):</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;正在唱歌...%d&quot;</span>%i)</span><br><span class=\"line\">            sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"comment\">#stats_lock.release()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">dance</span>():</span><br><span class=\"line\">    <span class=\"keyword\">with</span> stats_lock:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">3</span>):</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;正在跳舞...%d&quot;</span>%i)</span><br><span class=\"line\">            sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;---开始---:%s&#x27;</span>%ctime())</span><br><span class=\"line\"></span><br><span class=\"line\">    t1 = threading.Thread(target=sing)</span><br><span class=\"line\">    t2 = threading.Thread(target=dance)</span><br><span class=\"line\"></span><br><span class=\"line\">    t1.start()</span><br><span class=\"line\">    t2.start()</span><br><span class=\"line\"><span class=\"comment\">#输出正常</span></span><br><span class=\"line\">---开始---:Tue Aug <span class=\"number\">26</span> <span class=\"number\">10</span>:<span class=\"number\">23</span>:<span class=\"number\">18</span> <span class=\"number\">2025</span></span><br><span class=\"line\">正在唱歌..<span class=\"number\">.0</span></span><br><span class=\"line\">正在唱歌..<span class=\"number\">.1</span></span><br><span class=\"line\">正在唱歌..<span class=\"number\">.2</span></span><br><span class=\"line\">正在跳舞..<span class=\"number\">.0</span></span><br><span class=\"line\">正在跳舞..<span class=\"number\">.1</span></span><br><span class=\"line\">正在跳舞..<span class=\"number\">.2</span></span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>线程中的join等待阻塞函数</p>\n</li>\n</ol>\n<ul>\n<li>当有线程在统计信息时，必须等待执行完成才可以<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> sleep,ctime</span><br><span class=\"line\"></span><br><span class=\"line\">stats_lock = threading.Lock()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">sing</span>(<span class=\"params\">num</span>):</span><br><span class=\"line\">    <span class=\"keyword\">with</span> stats_lock:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(num):</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;正在唱歌...%d&quot;</span>%i)</span><br><span class=\"line\">            sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">dance</span>(<span class=\"params\">num</span>):</span><br><span class=\"line\">    <span class=\"keyword\">with</span> stats_lock:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(num):</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;正在跳舞...%d&quot;</span>%i)</span><br><span class=\"line\">            sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;---开始---:%s&#x27;</span>%ctime())</span><br><span class=\"line\"></span><br><span class=\"line\">    t1 = threading.Thread(target=sing,args=(<span class=\"number\">3</span>,),name=<span class=\"string\">&quot;唱歌线程&quot;</span>)</span><br><span class=\"line\">    t2 = threading.Thread(target=dance,args=(<span class=\"number\">3</span>,))</span><br><span class=\"line\"></span><br><span class=\"line\">    t1.start()</span><br><span class=\"line\">    t2.start()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># t1.join()</span></span><br><span class=\"line\">    <span class=\"comment\"># t2.join()</span></span><br><span class=\"line\">    <span class=\"comment\">#sleep(5) # 屏蔽此行代码，试试看，程序是否会立马结束？</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;---结束---:%s&#x27;</span>%ctime())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#未使用join等待函数输出结果,主线程直接结束，不符合预期</span></span><br><span class=\"line\">---开始---:Tue Aug <span class=\"number\">26</span> <span class=\"number\">10</span>:<span class=\"number\">35</span>:09 <span class=\"number\">2025</span></span><br><span class=\"line\">正在唱歌..<span class=\"number\">.0</span></span><br><span class=\"line\">---结束---:Tue Aug <span class=\"number\">26</span> <span class=\"number\">10</span>:<span class=\"number\">35</span>:09 <span class=\"number\">2025</span></span><br><span class=\"line\">正在唱歌..<span class=\"number\">.1</span></span><br><span class=\"line\">正在唱歌..<span class=\"number\">.2</span></span><br><span class=\"line\">正在跳舞..<span class=\"number\">.0</span></span><br><span class=\"line\">正在跳舞..<span class=\"number\">.1</span></span><br><span class=\"line\">正在跳舞..<span class=\"number\">.2</span></span><br><span class=\"line\"><span class=\"comment\">#使用join后</span></span><br><span class=\"line\">---开始---:Tue Aug <span class=\"number\">26</span> <span class=\"number\">10</span>:<span class=\"number\">36</span>:<span class=\"number\">35</span> <span class=\"number\">2025</span></span><br><span class=\"line\">正在唱歌..<span class=\"number\">.0</span></span><br><span class=\"line\">正在唱歌..<span class=\"number\">.1</span></span><br><span class=\"line\">正在唱歌..<span class=\"number\">.2</span></span><br><span class=\"line\">正在跳舞..<span class=\"number\">.0</span></span><br><span class=\"line\">正在跳舞..<span class=\"number\">.1</span></span><br><span class=\"line\">正在跳舞..<span class=\"number\">.2</span></span><br><span class=\"line\">---结束---:Tue Aug <span class=\"number\">26</span> <span class=\"number\">10</span>:<span class=\"number\">36</span>:<span class=\"number\">41</span> <span class=\"number\">2025</span></span><br><span class=\"line\">=================================================================================</span><br><span class=\"line\"><span class=\"comment\">#注意锁的颗粒度，如果锁循环则是线程二要等线程一执行完才会运行影响效率</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> sleep,ctime</span><br><span class=\"line\"></span><br><span class=\"line\">stats_lock = threading.Lock()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">sing</span>(<span class=\"params\">num</span>):</span><br><span class=\"line\">    <span class=\"comment\">#with stats_lock:</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(num):</span><br><span class=\"line\">            <span class=\"keyword\">with</span> stats_lock:</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">&quot;正在唱歌...%d&quot;</span>%i)</span><br><span class=\"line\">            sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">dance</span>(<span class=\"params\">num</span>):</span><br><span class=\"line\">    <span class=\"comment\">#with stats_lock:</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(num):</span><br><span class=\"line\">            <span class=\"keyword\">with</span> stats_lock:</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">&quot;正在跳舞...%d&quot;</span>%i)</span><br><span class=\"line\">            sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;---开始---:%s&#x27;</span>%ctime())</span><br><span class=\"line\"></span><br><span class=\"line\">    t1 = threading.Thread(target=sing,args=(<span class=\"number\">3</span>,),name=<span class=\"string\">&quot;唱歌线程&quot;</span>)</span><br><span class=\"line\">    t2 = threading.Thread(target=dance,args=(<span class=\"number\">3</span>,))</span><br><span class=\"line\"></span><br><span class=\"line\">    t1.start()</span><br><span class=\"line\">    t2.start()</span><br><span class=\"line\"></span><br><span class=\"line\">    t1.join()</span><br><span class=\"line\">    t2.join()</span><br><span class=\"line\">    <span class=\"comment\">#sleep(5) # 屏蔽此行代码，试试看，程序是否会立马结束？</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;---结束---:%s&#x27;</span>%ctime())</span><br><span class=\"line\"><span class=\"comment\">#输出结果，同步执行，只锁输出</span></span><br><span class=\"line\">---开始---:Tue Aug <span class=\"number\">26</span> <span class=\"number\">10</span>:<span class=\"number\">39</span>:<span class=\"number\">38</span> <span class=\"number\">2025</span></span><br><span class=\"line\">正在唱歌..<span class=\"number\">.0</span></span><br><span class=\"line\">正在跳舞..<span class=\"number\">.0</span></span><br><span class=\"line\">正在跳舞..<span class=\"number\">.1</span></span><br><span class=\"line\">正在唱歌..<span class=\"number\">.1</span></span><br><span class=\"line\">正在跳舞..<span class=\"number\">.2</span></span><br><span class=\"line\">正在唱歌..<span class=\"number\">.2</span></span><br><span class=\"line\">---结束---:Tue Aug <span class=\"number\">26</span> <span class=\"number\">10</span>:<span class=\"number\">39</span>:<span class=\"number\">41</span> <span class=\"number\">2025</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<ol start=\"3\">\n<li>队列函数 queue.Queue 来实现线程间的通信和数据交换</li>\n</ol>\n<ul>\n<li>生产者（如网络请求接收）和消费者（如任务处理线程）速度不一致建议使用</li>\n<li>比如爬取m3u8视频片段，就需要使用队列按照先进先出的顺序下载避免多线程片段混乱无法组合</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>作用</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>线程安全的数据传递</td>\n<td>自动处理多线程并发操作，无需手动加锁&#x2F;释放锁。</td>\n</tr>\n<tr>\n<td>任务解耦</td>\n<td>生产任务的线程（如主线程）和消费任务的线程（工作线程）完全解耦。</td>\n</tr>\n<tr>\n<td>流量控制</td>\n<td>通过队列大小限制（maxsize）防止内存爆炸。</td>\n</tr>\n<tr>\n<td>任务状态跟踪</td>\n<td>支持 task_done() 和 join() 机制，方便等待所有任务完成。</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#未使用</span></span><br><span class=\"line\">tasks = []  <span class=\"comment\"># 全局任务列表</span></span><br><span class=\"line\">lock = threading.Lock()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生产者线程</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">producer</span>():</span><br><span class=\"line\">    <span class=\"keyword\">global</span> tasks</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">100</span>):</span><br><span class=\"line\">        <span class=\"keyword\">with</span> lock:</span><br><span class=\"line\">            tasks.append(i)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 消费者线程</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">consumer</span>():</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        <span class=\"keyword\">with</span> lock:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> tasks:</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            item = tasks.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">        process(item)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#使用</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">from</span> queue <span class=\"keyword\">import</span> Queue</span><br><span class=\"line\"></span><br><span class=\"line\">task_queue = Queue(maxsize=<span class=\"number\">10</span>)  <span class=\"comment\"># 队列容量限制</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">producer</span>():</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">100</span>):</span><br><span class=\"line\">        task_queue.put(i)  <span class=\"comment\"># 自动阻塞队列满时</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">consumer</span>():</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        item = task_queue.get()  <span class=\"comment\"># 自动阻塞队列空时</span></span><br><span class=\"line\">        process(item)</span><br><span class=\"line\">        task_queue.task_done()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动线程</span></span><br><span class=\"line\">producer_thread = threading.Thread(target=producer)</span><br><span class=\"line\">consumer_thread = threading.Thread(target=consumer)</span><br><span class=\"line\"></span><br><span class=\"line\">producer_thread.start()</span><br><span class=\"line\">consumer_thread.start()</span><br><span class=\"line\"></span><br><span class=\"line\">task_queue.join()  <span class=\"comment\"># 等待所有任务完成</span></span><br><span class=\"line\">producer_thread.join()</span><br><span class=\"line\">consumer_thread.join()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#顺序先入先出</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">from</span> queue <span class=\"keyword\">import</span> Queue</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 共享队列和结果容器</span></span><br><span class=\"line\">task_queue = Queue()</span><br><span class=\"line\">results = &#123;&#125;</span><br><span class=\"line\">lock = threading.Lock()  <span class=\"comment\"># 保证结果字典的线程安全</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">worker</span>():</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;工作线程：处理无序任务，保存结果到字典&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        <span class=\"comment\"># 获取任务（包含序号和参数）</span></span><br><span class=\"line\">        index, url = task_queue.get()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;开始处理第 <span class=\"subst\">&#123;index&#125;</span> 章: <span class=\"subst\">&#123;url&#125;</span>&quot;</span>)</span><br><span class=\"line\">        time.sleep(random.uniform(<span class=\"number\">0.5</span>, <span class=\"number\">2</span>))  <span class=\"comment\"># 模拟耗时操作</span></span><br><span class=\"line\">        content = <span class=\"string\">f&quot;第 <span class=\"subst\">&#123;index&#125;</span> 章内容&quot;</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># 保存结果（加锁保证线程安全）</span></span><br><span class=\"line\">        <span class=\"keyword\">with</span> lock:</span><br><span class=\"line\">            results[index] = content</span><br><span class=\"line\">        </span><br><span class=\"line\">        task_queue.task_done()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">download_ordered_chapters</span>(<span class=\"params\">chapters</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;主线程：提交任务、启动工作线程、等待并排序结果&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"comment\"># 提交任务到队列</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> index, url <span class=\"keyword\">in</span> chapters:</span><br><span class=\"line\">        task_queue.put((index, url))</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 启动工作线程（3个线程）</span></span><br><span class=\"line\">    threads = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">3</span>):</span><br><span class=\"line\">        t = threading.Thread(target=worker, daemon=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        t.start()</span><br><span class=\"line\">        threads.append(t)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 等待所有任务完成</span></span><br><span class=\"line\">    task_queue.join()</span><br><span class=\"line\">     <span class=\"comment\"># 等待所有线程结束（非守护线程必须调用 join()）</span></span><br><span class=\"line\">    <span class=\"comment\"># for t in threads:</span></span><br><span class=\"line\">    <span class=\"comment\">#     t.join()  # 确保线程完全结束</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 按序号排序结果</span></span><br><span class=\"line\">    sorted_indices = <span class=\"built_in\">sorted</span>(results.keys())</span><br><span class=\"line\">    ordered_results = [results[i] <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> sorted_indices]</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> ordered_results</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 示例调用</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    chapters = [</span><br><span class=\"line\">        (<span class=\"number\">1</span>, <span class=\"string\">&quot;http://example.com/ch1&quot;</span>),</span><br><span class=\"line\">        (<span class=\"number\">2</span>, <span class=\"string\">&quot;http://example.com/ch2&quot;</span>),</span><br><span class=\"line\">        (<span class=\"number\">3</span>, <span class=\"string\">&quot;http://example.com/ch3&quot;</span>)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">    </span><br><span class=\"line\">    ordered_contents = download_ordered_chapters(chapters)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> content <span class=\"keyword\">in</span> ordered_contents:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;保存: <span class=\"subst\">&#123;content&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n<ul>\n<li>综合示例代码<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> queue</span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">from</span> queue <span class=\"keyword\">import</span> Queue</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 压测配置</span></span><br><span class=\"line\">CONFIG = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;target_url&quot;</span>: <span class=\"string\">&quot;http://localhost/&quot;</span>,  <span class=\"comment\"># 目标地址</span></span><br><span class=\"line\">    <span class=\"string\">&quot;thread_num&quot;</span>: <span class=\"number\">5000</span>,  <span class=\"comment\"># 并发线程数</span></span><br><span class=\"line\">    <span class=\"string\">&quot;total_requests&quot;</span>: <span class=\"number\">100000</span>,  <span class=\"comment\"># 总请求量 (设置为0表示无限持续)</span></span><br><span class=\"line\">    <span class=\"string\">&quot;timeout&quot;</span>: <span class=\"number\">5</span>,  <span class=\"comment\"># 单请求超时时间（秒）</span></span><br><span class=\"line\">    <span class=\"string\">&quot;headers&quot;</span>: &#123;  <span class=\"comment\"># 请求头（按需修改）</span></span><br><span class=\"line\">        <span class=\"string\">&quot;User-Agent&quot;</span>: <span class=\"string\">&quot;Stress Test/1.0&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 全局统计</span></span><br><span class=\"line\">stats = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;total&#x27;</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;success&#x27;</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;fail&#x27;</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;total_time&#x27;</span>: <span class=\"number\">0.0</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;max_time&#x27;</span>: <span class=\"number\">0.0</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;min_time&#x27;</span>: <span class=\"built_in\">float</span>(<span class=\"string\">&#x27;inf&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">stats_lock = threading.Lock()  <span class=\"comment\"># 线程安全锁</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 请求任务队列</span></span><br><span class=\"line\">task_queue = Queue()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">worker</span>():</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;工作线程函数&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 从队列获取任务（阻塞模式）</span></span><br><span class=\"line\">            task_id = task_queue.get(timeout=<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">            start_time = time.time()</span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                <span class=\"comment\"># 发送请求（可修改为POST等其他方法）</span></span><br><span class=\"line\">                response = requests.get(</span><br><span class=\"line\">                    CONFIG[<span class=\"string\">&quot;target_url&quot;</span>],</span><br><span class=\"line\">                    headers=CONFIG[<span class=\"string\">&quot;headers&quot;</span>],</span><br><span class=\"line\">                    timeout=CONFIG[<span class=\"string\">&quot;timeout&quot;</span>]</span><br><span class=\"line\">                )</span><br><span class=\"line\">                elapsed = time.time() - start_time</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\"># 更新统计（200~399状态码视为成功）</span></span><br><span class=\"line\">                <span class=\"keyword\">with</span> stats_lock:</span><br><span class=\"line\">                    stats[<span class=\"string\">&#x27;total&#x27;</span>] += <span class=\"number\">1</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> <span class=\"number\">200</span> &lt;= response.status_code &lt; <span class=\"number\">400</span>:</span><br><span class=\"line\">                        stats[<span class=\"string\">&#x27;success&#x27;</span>] += <span class=\"number\">1</span></span><br><span class=\"line\">                    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                        stats[<span class=\"string\">&#x27;fail&#x27;</span>] += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">                    stats[<span class=\"string\">&#x27;total_time&#x27;</span>] += elapsed</span><br><span class=\"line\">                    stats[<span class=\"string\">&#x27;max_time&#x27;</span>] = <span class=\"built_in\">max</span>(stats[<span class=\"string\">&#x27;max_time&#x27;</span>], elapsed)</span><br><span class=\"line\">                    stats[<span class=\"string\">&#x27;min_time&#x27;</span>] = <span class=\"built_in\">min</span>(stats[<span class=\"string\">&#x27;min_time&#x27;</span>], elapsed)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">                <span class=\"keyword\">with</span> stats_lock:</span><br><span class=\"line\">                    stats[<span class=\"string\">&#x27;fail&#x27;</span>] += <span class=\"number\">1</span></span><br><span class=\"line\">                    stats[<span class=\"string\">&#x27;total&#x27;</span>] += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># 标记任务完成</span></span><br><span class=\"line\">            task_queue.task_done()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">except</span> queue.Empty:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">print_stats</span>():</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;实时打印统计信息&quot;&quot;&quot;</span></span><br><span class=\"line\">    start_time = time.time()</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        time.sleep(<span class=\"number\">1</span>)  <span class=\"comment\"># 每秒更新</span></span><br><span class=\"line\">        <span class=\"keyword\">with</span> stats_lock:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> stats[<span class=\"string\">&#x27;total&#x27;</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\"></span><br><span class=\"line\">            duration = time.time() - start_time</span><br><span class=\"line\">            qps = stats[<span class=\"string\">&#x27;total&#x27;</span>] / duration</span><br><span class=\"line\">            avg_time = stats[<span class=\"string\">&#x27;total_time&#x27;</span>] / stats[<span class=\"string\">&#x27;total&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;\\r[STAT] &quot;</span></span><br><span class=\"line\">                  <span class=\"string\">f&quot;Requests: <span class=\"subst\">&#123;stats[<span class=\"string\">&#x27;total&#x27;</span>]&#125;</span> | &quot;</span></span><br><span class=\"line\">                  <span class=\"string\">f&quot;Success: <span class=\"subst\">&#123;stats[<span class=\"string\">&#x27;success&#x27;</span>]&#125;</span> | &quot;</span></span><br><span class=\"line\">                  <span class=\"string\">f&quot;Fail: <span class=\"subst\">&#123;stats[<span class=\"string\">&#x27;fail&#x27;</span>]&#125;</span> | &quot;</span></span><br><span class=\"line\">                  <span class=\"string\">f&quot;QPS: <span class=\"subst\">&#123;qps:<span class=\"number\">.1</span>f&#125;</span> | &quot;</span></span><br><span class=\"line\">                  <span class=\"string\">f&quot;Avg: <span class=\"subst\">&#123;avg_time:<span class=\"number\">.3</span>f&#125;</span>s | &quot;</span></span><br><span class=\"line\">                  <span class=\"string\">f&quot;Min/Max: <span class=\"subst\">&#123;stats[<span class=\"string\">&#x27;min_time&#x27;</span>]:<span class=\"number\">.3</span>f&#125;</span>s/<span class=\"subst\">&#123;stats[<span class=\"string\">&#x27;max_time&#x27;</span>]:<span class=\"number\">.3</span>f&#125;</span>s&quot;</span>,</span><br><span class=\"line\">                  end=<span class=\"string\">&#x27;&#x27;</span>, flush=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 检查是否完成所有任务</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> CONFIG[<span class=\"string\">&quot;total_requests&quot;</span>] &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> stats[<span class=\"string\">&#x27;total&#x27;</span>] &gt;= CONFIG[<span class=\"string\">&quot;total_requests&quot;</span>]:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 初始化任务队列</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> CONFIG[<span class=\"string\">&quot;total_requests&quot;</span>] &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(CONFIG[<span class=\"string\">&quot;total_requests&quot;</span>]):</span><br><span class=\"line\">            task_queue.put(i)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:  <span class=\"comment\"># 持续模式填充队列</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            task_queue.put(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 创建工作者线程</span></span><br><span class=\"line\">    threads = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(CONFIG[<span class=\"string\">&quot;thread_num&quot;</span>]):</span><br><span class=\"line\">        t = threading.Thread(target=worker)</span><br><span class=\"line\">        t.daemon = <span class=\"literal\">True</span></span><br><span class=\"line\">        t.start()</span><br><span class=\"line\">        threads.append(t)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 启动统计线程</span></span><br><span class=\"line\">    stat_thread = threading.Thread(target=print_stats)</span><br><span class=\"line\">    stat_thread.start()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 等待任务完成</span></span><br><span class=\"line\">    task_queue.join()</span><br><span class=\"line\">    stat_thread.join()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n压力测试完成&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#使用了join等待压测结束统计信息</span></span><br><span class=\"line\"><span class=\"comment\">#使用了queue.put填充队列为请求数量，线程为并发数量</span></span><br><span class=\"line\"><span class=\"comment\">#使用了with stats_lock加锁避免线程冲突</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#推荐使用这种方式，因为是大量重复任务</span></span><br><span class=\"line\"><span class=\"comment\">#使用ThreadPoolExecutor线程池优化，因为是大量重复任务，thread每次都要新创建线程消耗较大</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">from</span> concurrent.futures <span class=\"keyword\">import</span> ThreadPoolExecutor</span><br><span class=\"line\"></span><br><span class=\"line\">CONFIG = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;target_url&quot;</span>: <span class=\"string\">&quot;http://localhost/&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;thread_num&quot;</span>: <span class=\"number\">300</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;total_requests&quot;</span>: <span class=\"number\">10000</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;timeout&quot;</span>: <span class=\"number\">5</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;headers&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;User-Agent&quot;</span>: <span class=\"string\">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36&quot;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">&quot;show_progress&quot;</span>: <span class=\"literal\">True</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">stats = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;total&#x27;</span>: <span class=\"number\">0</span>, <span class=\"string\">&#x27;success&#x27;</span>: <span class=\"number\">0</span>, <span class=\"string\">&#x27;fail&#x27;</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;total_time&#x27;</span>: <span class=\"number\">0.0</span>, <span class=\"string\">&#x27;max_time&#x27;</span>: <span class=\"number\">0.0</span>, <span class=\"string\">&#x27;min_time&#x27;</span>: <span class=\"built_in\">float</span>(<span class=\"string\">&#x27;inf&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">stats_lock = threading.Lock()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">worker</span>(<span class=\"params\">_</span>):</span><br><span class=\"line\">    start_time = time.time()</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        response = requests.get(</span><br><span class=\"line\">            CONFIG[<span class=\"string\">&quot;target_url&quot;</span>],</span><br><span class=\"line\">            headers=CONFIG[<span class=\"string\">&quot;headers&quot;</span>],</span><br><span class=\"line\">            timeout=CONFIG[<span class=\"string\">&quot;timeout&quot;</span>]</span><br><span class=\"line\">        )</span><br><span class=\"line\">        elapsed = time.time() - start_time</span><br><span class=\"line\">        <span class=\"keyword\">with</span> stats_lock:</span><br><span class=\"line\">            stats[<span class=\"string\">&#x27;total&#x27;</span>] += <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"number\">200</span> &lt;= response.status_code &lt; <span class=\"number\">400</span>:</span><br><span class=\"line\">                stats[<span class=\"string\">&#x27;success&#x27;</span>] += <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                stats[<span class=\"string\">&#x27;fail&#x27;</span>] += <span class=\"number\">1</span></span><br><span class=\"line\">            stats[<span class=\"string\">&#x27;total_time&#x27;</span>] += elapsed</span><br><span class=\"line\">            stats[<span class=\"string\">&#x27;max_time&#x27;</span>] = <span class=\"built_in\">max</span>(stats[<span class=\"string\">&#x27;max_time&#x27;</span>], elapsed)</span><br><span class=\"line\">            stats[<span class=\"string\">&#x27;min_time&#x27;</span>] = <span class=\"built_in\">min</span>(stats[<span class=\"string\">&#x27;min_time&#x27;</span>], elapsed)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        <span class=\"keyword\">with</span> stats_lock:</span><br><span class=\"line\">            stats[<span class=\"string\">&#x27;fail&#x27;</span>] += <span class=\"number\">1</span></span><br><span class=\"line\">            stats[<span class=\"string\">&#x27;total&#x27;</span>] += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">print_stats</span>():</span><br><span class=\"line\">    start_time = time.time()</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">with</span> stats_lock:</span><br><span class=\"line\">            current_total = stats[<span class=\"string\">&#x27;total&#x27;</span>]</span><br><span class=\"line\">            duration = time.time() - start_time</span><br><span class=\"line\">            qps = current_total / duration <span class=\"keyword\">if</span> duration &gt; <span class=\"number\">0</span> <span class=\"keyword\">else</span> <span class=\"number\">0</span></span><br><span class=\"line\">            avg_time = stats[<span class=\"string\">&#x27;total_time&#x27;</span>] / current_total <span class=\"keyword\">if</span> current_total &gt; <span class=\"number\">0</span> <span class=\"keyword\">else</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">            progress_percent = (current_total / CONFIG[<span class=\"string\">&quot;total_requests&quot;</span>]) * <span class=\"number\">100</span> <span class=\"keyword\">if</span> CONFIG[<span class=\"string\">&quot;total_requests&quot;</span>] &gt; <span class=\"number\">0</span> <span class=\"keyword\">else</span> <span class=\"number\">0</span></span><br><span class=\"line\">            progress_bar = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> CONFIG[<span class=\"string\">&quot;show_progress&quot;</span>] <span class=\"keyword\">and</span> CONFIG[<span class=\"string\">&quot;total_requests&quot;</span>] &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">                bar_length = <span class=\"number\">20</span></span><br><span class=\"line\">                filled = <span class=\"built_in\">int</span>(bar_length * current_total // CONFIG[<span class=\"string\">&quot;total_requests&quot;</span>])</span><br><span class=\"line\">                progress_bar = <span class=\"string\">&quot;[&quot;</span> + <span class=\"string\">&quot;=&quot;</span> * filled + <span class=\"string\">&quot; &quot;</span> * (bar_length - filled) + <span class=\"string\">&quot;] &quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            output = (</span><br><span class=\"line\">                <span class=\"string\">f&quot;\\r[STAT] &quot;</span></span><br><span class=\"line\">                <span class=\"string\">f&quot;进度: <span class=\"subst\">&#123;progress_bar&#125;</span><span class=\"subst\">&#123;progress_percent:<span class=\"number\">.1</span>f&#125;</span>% | &quot;</span></span><br><span class=\"line\">                <span class=\"string\">f&quot;请求: <span class=\"subst\">&#123;current_total&#125;</span>/<span class=\"subst\">&#123;CONFIG[<span class=\"string\">&#x27;total_requests&#x27;</span>] <span class=\"keyword\">if</span> CONFIG[<span class=\"string\">&#x27;total_requests&#x27;</span>] &gt; <span class=\"number\">0</span> <span class=\"keyword\">else</span> <span class=\"string\">&#x27;∞&#x27;</span>&#125;</span> | &quot;</span></span><br><span class=\"line\">                <span class=\"string\">f&quot;成功: <span class=\"subst\">&#123;stats[<span class=\"string\">&#x27;success&#x27;</span>]&#125;</span> | &quot;</span></span><br><span class=\"line\">                <span class=\"string\">f&quot;失败: <span class=\"subst\">&#123;stats[<span class=\"string\">&#x27;fail&#x27;</span>]&#125;</span> | &quot;</span></span><br><span class=\"line\">                <span class=\"string\">f&quot;QPS: <span class=\"subst\">&#123;qps:<span class=\"number\">.1</span>f&#125;</span> | &quot;</span></span><br><span class=\"line\">                <span class=\"string\">f&quot;平均: <span class=\"subst\">&#123;avg_time:<span class=\"number\">.3</span>f&#125;</span>s | &quot;</span></span><br><span class=\"line\">                <span class=\"string\">f&quot;最慢: <span class=\"subst\">&#123;stats[<span class=\"string\">&#x27;max_time&#x27;</span>]:<span class=\"number\">.3</span>f&#125;</span>s&quot;</span></span><br><span class=\"line\">            )</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(output, end=<span class=\"string\">&#x27;&#x27;</span>, flush=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> CONFIG[<span class=\"string\">&quot;total_requests&quot;</span>] &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> current_total &gt;= CONFIG[<span class=\"string\">&quot;total_requests&quot;</span>]:</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    stat_thread = threading.Thread(target=print_stats)</span><br><span class=\"line\">    stat_thread.start()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> ThreadPoolExecutor(max_workers=CONFIG[<span class=\"string\">&quot;thread_num&quot;</span>]) <span class=\"keyword\">as</span> executor:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> CONFIG[<span class=\"string\">&quot;total_requests&quot;</span>] &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">            executor.<span class=\"built_in\">map</span>(worker, <span class=\"built_in\">range</span>(CONFIG[<span class=\"string\">&quot;total_requests&quot;</span>]))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">                executor.submit(worker, <span class=\"literal\">None</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    stat_thread.join()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n压力测试完成&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"额外\"><a href=\"#额外\" class=\"headerlink\" title=\"额外\"></a>额外</h1><ul>\n<li><p>ThreadPoolExecutor 适用场景：短期、批量、同质化任务</p>\n</li>\n<li><p>multiprocessing 适用场景：大量cpu密集型计算，多进程绕过GIL；io密集型建议使用异步编程</p>\n</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"threading-Thread\"><a href=\"#threading-Thread\" class=\"headerlink\" title=\"threading.Thread\"></a>threading.Thread</h1><ul>\n<li>适用场景：任务逻辑差异大；每个线程需要执行完全不同的逻辑</li>\n<li>三个比较重要的参数</li>\n</ul>\n<ol>\n<li><p>锁：threading.Lock()<br>两种使用方法推荐with下方演示，第二种手动加锁lock.acquire()，然后释放lock.release()</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#未使用的情况下</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">sing</span>():</span><br><span class=\"line\">    <span class=\"comment\">#with stats_lock:</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">3</span>):</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;正在唱歌...%d&quot;</span>%i)</span><br><span class=\"line\">            sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">dance</span>():</span><br><span class=\"line\">    <span class=\"comment\">#with stats_lock:</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">3</span>):</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;正在跳舞...%d&quot;</span>%i)</span><br><span class=\"line\">            sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;---开始---:%s&#x27;</span>%ctime())</span><br><span class=\"line\"></span><br><span class=\"line\">    t1 = threading.Thread(target=sing)</span><br><span class=\"line\">    t2 = threading.Thread(target=dance)</span><br><span class=\"line\"></span><br><span class=\"line\">    t1.start()</span><br><span class=\"line\">    t2.start()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出是混乱的就是因为没有给线程加锁</span></span><br><span class=\"line\">---开始---:Tue Aug <span class=\"number\">26</span> <span class=\"number\">10</span>:<span class=\"number\">19</span>:<span class=\"number\">56</span> <span class=\"number\">2025</span></span><br><span class=\"line\">正在唱歌..<span class=\"number\">.0</span></span><br><span class=\"line\">正在跳舞..<span class=\"number\">.0</span></span><br><span class=\"line\">正在唱歌..<span class=\"number\">.1</span>正在跳舞..<span class=\"number\">.1</span></span><br><span class=\"line\"></span><br><span class=\"line\">正在跳舞..<span class=\"number\">.2</span></span><br><span class=\"line\">正在唱歌..<span class=\"number\">.2</span></span><br><span class=\"line\">======================================================================</span><br><span class=\"line\"><span class=\"comment\">#加锁后</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> sleep,ctime</span><br><span class=\"line\"></span><br><span class=\"line\">stats_lock = threading.Lock()</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">sing</span>():</span><br><span class=\"line\">    <span class=\"keyword\">with</span> stats_lock:</span><br><span class=\"line\">        <span class=\"comment\">#stats_lock.acquire()</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">3</span>):</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;正在唱歌...%d&quot;</span>%i)</span><br><span class=\"line\">            sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"comment\">#stats_lock.release()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">dance</span>():</span><br><span class=\"line\">    <span class=\"keyword\">with</span> stats_lock:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">3</span>):</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;正在跳舞...%d&quot;</span>%i)</span><br><span class=\"line\">            sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;---开始---:%s&#x27;</span>%ctime())</span><br><span class=\"line\"></span><br><span class=\"line\">    t1 = threading.Thread(target=sing)</span><br><span class=\"line\">    t2 = threading.Thread(target=dance)</span><br><span class=\"line\"></span><br><span class=\"line\">    t1.start()</span><br><span class=\"line\">    t2.start()</span><br><span class=\"line\"><span class=\"comment\">#输出正常</span></span><br><span class=\"line\">---开始---:Tue Aug <span class=\"number\">26</span> <span class=\"number\">10</span>:<span class=\"number\">23</span>:<span class=\"number\">18</span> <span class=\"number\">2025</span></span><br><span class=\"line\">正在唱歌..<span class=\"number\">.0</span></span><br><span class=\"line\">正在唱歌..<span class=\"number\">.1</span></span><br><span class=\"line\">正在唱歌..<span class=\"number\">.2</span></span><br><span class=\"line\">正在跳舞..<span class=\"number\">.0</span></span><br><span class=\"line\">正在跳舞..<span class=\"number\">.1</span></span><br><span class=\"line\">正在跳舞..<span class=\"number\">.2</span></span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>线程中的join等待阻塞函数</p>\n</li>\n</ol>\n<ul>\n<li>当有线程在统计信息时，必须等待执行完成才可以<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> sleep,ctime</span><br><span class=\"line\"></span><br><span class=\"line\">stats_lock = threading.Lock()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">sing</span>(<span class=\"params\">num</span>):</span><br><span class=\"line\">    <span class=\"keyword\">with</span> stats_lock:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(num):</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;正在唱歌...%d&quot;</span>%i)</span><br><span class=\"line\">            sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">dance</span>(<span class=\"params\">num</span>):</span><br><span class=\"line\">    <span class=\"keyword\">with</span> stats_lock:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(num):</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;正在跳舞...%d&quot;</span>%i)</span><br><span class=\"line\">            sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;---开始---:%s&#x27;</span>%ctime())</span><br><span class=\"line\"></span><br><span class=\"line\">    t1 = threading.Thread(target=sing,args=(<span class=\"number\">3</span>,),name=<span class=\"string\">&quot;唱歌线程&quot;</span>)</span><br><span class=\"line\">    t2 = threading.Thread(target=dance,args=(<span class=\"number\">3</span>,))</span><br><span class=\"line\"></span><br><span class=\"line\">    t1.start()</span><br><span class=\"line\">    t2.start()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># t1.join()</span></span><br><span class=\"line\">    <span class=\"comment\"># t2.join()</span></span><br><span class=\"line\">    <span class=\"comment\">#sleep(5) # 屏蔽此行代码，试试看，程序是否会立马结束？</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;---结束---:%s&#x27;</span>%ctime())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#未使用join等待函数输出结果,主线程直接结束，不符合预期</span></span><br><span class=\"line\">---开始---:Tue Aug <span class=\"number\">26</span> <span class=\"number\">10</span>:<span class=\"number\">35</span>:09 <span class=\"number\">2025</span></span><br><span class=\"line\">正在唱歌..<span class=\"number\">.0</span></span><br><span class=\"line\">---结束---:Tue Aug <span class=\"number\">26</span> <span class=\"number\">10</span>:<span class=\"number\">35</span>:09 <span class=\"number\">2025</span></span><br><span class=\"line\">正在唱歌..<span class=\"number\">.1</span></span><br><span class=\"line\">正在唱歌..<span class=\"number\">.2</span></span><br><span class=\"line\">正在跳舞..<span class=\"number\">.0</span></span><br><span class=\"line\">正在跳舞..<span class=\"number\">.1</span></span><br><span class=\"line\">正在跳舞..<span class=\"number\">.2</span></span><br><span class=\"line\"><span class=\"comment\">#使用join后</span></span><br><span class=\"line\">---开始---:Tue Aug <span class=\"number\">26</span> <span class=\"number\">10</span>:<span class=\"number\">36</span>:<span class=\"number\">35</span> <span class=\"number\">2025</span></span><br><span class=\"line\">正在唱歌..<span class=\"number\">.0</span></span><br><span class=\"line\">正在唱歌..<span class=\"number\">.1</span></span><br><span class=\"line\">正在唱歌..<span class=\"number\">.2</span></span><br><span class=\"line\">正在跳舞..<span class=\"number\">.0</span></span><br><span class=\"line\">正在跳舞..<span class=\"number\">.1</span></span><br><span class=\"line\">正在跳舞..<span class=\"number\">.2</span></span><br><span class=\"line\">---结束---:Tue Aug <span class=\"number\">26</span> <span class=\"number\">10</span>:<span class=\"number\">36</span>:<span class=\"number\">41</span> <span class=\"number\">2025</span></span><br><span class=\"line\">=================================================================================</span><br><span class=\"line\"><span class=\"comment\">#注意锁的颗粒度，如果锁循环则是线程二要等线程一执行完才会运行影响效率</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> sleep,ctime</span><br><span class=\"line\"></span><br><span class=\"line\">stats_lock = threading.Lock()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">sing</span>(<span class=\"params\">num</span>):</span><br><span class=\"line\">    <span class=\"comment\">#with stats_lock:</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(num):</span><br><span class=\"line\">            <span class=\"keyword\">with</span> stats_lock:</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">&quot;正在唱歌...%d&quot;</span>%i)</span><br><span class=\"line\">            sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">dance</span>(<span class=\"params\">num</span>):</span><br><span class=\"line\">    <span class=\"comment\">#with stats_lock:</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(num):</span><br><span class=\"line\">            <span class=\"keyword\">with</span> stats_lock:</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">&quot;正在跳舞...%d&quot;</span>%i)</span><br><span class=\"line\">            sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;---开始---:%s&#x27;</span>%ctime())</span><br><span class=\"line\"></span><br><span class=\"line\">    t1 = threading.Thread(target=sing,args=(<span class=\"number\">3</span>,),name=<span class=\"string\">&quot;唱歌线程&quot;</span>)</span><br><span class=\"line\">    t2 = threading.Thread(target=dance,args=(<span class=\"number\">3</span>,))</span><br><span class=\"line\"></span><br><span class=\"line\">    t1.start()</span><br><span class=\"line\">    t2.start()</span><br><span class=\"line\"></span><br><span class=\"line\">    t1.join()</span><br><span class=\"line\">    t2.join()</span><br><span class=\"line\">    <span class=\"comment\">#sleep(5) # 屏蔽此行代码，试试看，程序是否会立马结束？</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;---结束---:%s&#x27;</span>%ctime())</span><br><span class=\"line\"><span class=\"comment\">#输出结果，同步执行，只锁输出</span></span><br><span class=\"line\">---开始---:Tue Aug <span class=\"number\">26</span> <span class=\"number\">10</span>:<span class=\"number\">39</span>:<span class=\"number\">38</span> <span class=\"number\">2025</span></span><br><span class=\"line\">正在唱歌..<span class=\"number\">.0</span></span><br><span class=\"line\">正在跳舞..<span class=\"number\">.0</span></span><br><span class=\"line\">正在跳舞..<span class=\"number\">.1</span></span><br><span class=\"line\">正在唱歌..<span class=\"number\">.1</span></span><br><span class=\"line\">正在跳舞..<span class=\"number\">.2</span></span><br><span class=\"line\">正在唱歌..<span class=\"number\">.2</span></span><br><span class=\"line\">---结束---:Tue Aug <span class=\"number\">26</span> <span class=\"number\">10</span>:<span class=\"number\">39</span>:<span class=\"number\">41</span> <span class=\"number\">2025</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<ol start=\"3\">\n<li>队列函数 queue.Queue 来实现线程间的通信和数据交换</li>\n</ol>\n<ul>\n<li>生产者（如网络请求接收）和消费者（如任务处理线程）速度不一致建议使用</li>\n<li>比如爬取m3u8视频片段，就需要使用队列按照先进先出的顺序下载避免多线程片段混乱无法组合</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>作用</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>线程安全的数据传递</td>\n<td>自动处理多线程并发操作，无需手动加锁&#x2F;释放锁。</td>\n</tr>\n<tr>\n<td>任务解耦</td>\n<td>生产任务的线程（如主线程）和消费任务的线程（工作线程）完全解耦。</td>\n</tr>\n<tr>\n<td>流量控制</td>\n<td>通过队列大小限制（maxsize）防止内存爆炸。</td>\n</tr>\n<tr>\n<td>任务状态跟踪</td>\n<td>支持 task_done() 和 join() 机制，方便等待所有任务完成。</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#未使用</span></span><br><span class=\"line\">tasks = []  <span class=\"comment\"># 全局任务列表</span></span><br><span class=\"line\">lock = threading.Lock()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生产者线程</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">producer</span>():</span><br><span class=\"line\">    <span class=\"keyword\">global</span> tasks</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">100</span>):</span><br><span class=\"line\">        <span class=\"keyword\">with</span> lock:</span><br><span class=\"line\">            tasks.append(i)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 消费者线程</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">consumer</span>():</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        <span class=\"keyword\">with</span> lock:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> tasks:</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            item = tasks.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">        process(item)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#使用</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">from</span> queue <span class=\"keyword\">import</span> Queue</span><br><span class=\"line\"></span><br><span class=\"line\">task_queue = Queue(maxsize=<span class=\"number\">10</span>)  <span class=\"comment\"># 队列容量限制</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">producer</span>():</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">100</span>):</span><br><span class=\"line\">        task_queue.put(i)  <span class=\"comment\"># 自动阻塞队列满时</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">consumer</span>():</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        item = task_queue.get()  <span class=\"comment\"># 自动阻塞队列空时</span></span><br><span class=\"line\">        process(item)</span><br><span class=\"line\">        task_queue.task_done()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动线程</span></span><br><span class=\"line\">producer_thread = threading.Thread(target=producer)</span><br><span class=\"line\">consumer_thread = threading.Thread(target=consumer)</span><br><span class=\"line\"></span><br><span class=\"line\">producer_thread.start()</span><br><span class=\"line\">consumer_thread.start()</span><br><span class=\"line\"></span><br><span class=\"line\">task_queue.join()  <span class=\"comment\"># 等待所有任务完成</span></span><br><span class=\"line\">producer_thread.join()</span><br><span class=\"line\">consumer_thread.join()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#顺序先入先出</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">from</span> queue <span class=\"keyword\">import</span> Queue</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 共享队列和结果容器</span></span><br><span class=\"line\">task_queue = Queue()</span><br><span class=\"line\">results = &#123;&#125;</span><br><span class=\"line\">lock = threading.Lock()  <span class=\"comment\"># 保证结果字典的线程安全</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">worker</span>():</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;工作线程：处理无序任务，保存结果到字典&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        <span class=\"comment\"># 获取任务（包含序号和参数）</span></span><br><span class=\"line\">        index, url = task_queue.get()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;开始处理第 <span class=\"subst\">&#123;index&#125;</span> 章: <span class=\"subst\">&#123;url&#125;</span>&quot;</span>)</span><br><span class=\"line\">        time.sleep(random.uniform(<span class=\"number\">0.5</span>, <span class=\"number\">2</span>))  <span class=\"comment\"># 模拟耗时操作</span></span><br><span class=\"line\">        content = <span class=\"string\">f&quot;第 <span class=\"subst\">&#123;index&#125;</span> 章内容&quot;</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># 保存结果（加锁保证线程安全）</span></span><br><span class=\"line\">        <span class=\"keyword\">with</span> lock:</span><br><span class=\"line\">            results[index] = content</span><br><span class=\"line\">        </span><br><span class=\"line\">        task_queue.task_done()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">download_ordered_chapters</span>(<span class=\"params\">chapters</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;主线程：提交任务、启动工作线程、等待并排序结果&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"comment\"># 提交任务到队列</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> index, url <span class=\"keyword\">in</span> chapters:</span><br><span class=\"line\">        task_queue.put((index, url))</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 启动工作线程（3个线程）</span></span><br><span class=\"line\">    threads = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">3</span>):</span><br><span class=\"line\">        t = threading.Thread(target=worker, daemon=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        t.start()</span><br><span class=\"line\">        threads.append(t)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 等待所有任务完成</span></span><br><span class=\"line\">    task_queue.join()</span><br><span class=\"line\">     <span class=\"comment\"># 等待所有线程结束（非守护线程必须调用 join()）</span></span><br><span class=\"line\">    <span class=\"comment\"># for t in threads:</span></span><br><span class=\"line\">    <span class=\"comment\">#     t.join()  # 确保线程完全结束</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 按序号排序结果</span></span><br><span class=\"line\">    sorted_indices = <span class=\"built_in\">sorted</span>(results.keys())</span><br><span class=\"line\">    ordered_results = [results[i] <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> sorted_indices]</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> ordered_results</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 示例调用</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    chapters = [</span><br><span class=\"line\">        (<span class=\"number\">1</span>, <span class=\"string\">&quot;http://example.com/ch1&quot;</span>),</span><br><span class=\"line\">        (<span class=\"number\">2</span>, <span class=\"string\">&quot;http://example.com/ch2&quot;</span>),</span><br><span class=\"line\">        (<span class=\"number\">3</span>, <span class=\"string\">&quot;http://example.com/ch3&quot;</span>)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">    </span><br><span class=\"line\">    ordered_contents = download_ordered_chapters(chapters)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> content <span class=\"keyword\">in</span> ordered_contents:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;保存: <span class=\"subst\">&#123;content&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n<ul>\n<li>综合示例代码<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> queue</span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">from</span> queue <span class=\"keyword\">import</span> Queue</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 压测配置</span></span><br><span class=\"line\">CONFIG = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;target_url&quot;</span>: <span class=\"string\">&quot;http://localhost/&quot;</span>,  <span class=\"comment\"># 目标地址</span></span><br><span class=\"line\">    <span class=\"string\">&quot;thread_num&quot;</span>: <span class=\"number\">5000</span>,  <span class=\"comment\"># 并发线程数</span></span><br><span class=\"line\">    <span class=\"string\">&quot;total_requests&quot;</span>: <span class=\"number\">100000</span>,  <span class=\"comment\"># 总请求量 (设置为0表示无限持续)</span></span><br><span class=\"line\">    <span class=\"string\">&quot;timeout&quot;</span>: <span class=\"number\">5</span>,  <span class=\"comment\"># 单请求超时时间（秒）</span></span><br><span class=\"line\">    <span class=\"string\">&quot;headers&quot;</span>: &#123;  <span class=\"comment\"># 请求头（按需修改）</span></span><br><span class=\"line\">        <span class=\"string\">&quot;User-Agent&quot;</span>: <span class=\"string\">&quot;Stress Test/1.0&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 全局统计</span></span><br><span class=\"line\">stats = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;total&#x27;</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;success&#x27;</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;fail&#x27;</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;total_time&#x27;</span>: <span class=\"number\">0.0</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;max_time&#x27;</span>: <span class=\"number\">0.0</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;min_time&#x27;</span>: <span class=\"built_in\">float</span>(<span class=\"string\">&#x27;inf&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">stats_lock = threading.Lock()  <span class=\"comment\"># 线程安全锁</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 请求任务队列</span></span><br><span class=\"line\">task_queue = Queue()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">worker</span>():</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;工作线程函数&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 从队列获取任务（阻塞模式）</span></span><br><span class=\"line\">            task_id = task_queue.get(timeout=<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">            start_time = time.time()</span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                <span class=\"comment\"># 发送请求（可修改为POST等其他方法）</span></span><br><span class=\"line\">                response = requests.get(</span><br><span class=\"line\">                    CONFIG[<span class=\"string\">&quot;target_url&quot;</span>],</span><br><span class=\"line\">                    headers=CONFIG[<span class=\"string\">&quot;headers&quot;</span>],</span><br><span class=\"line\">                    timeout=CONFIG[<span class=\"string\">&quot;timeout&quot;</span>]</span><br><span class=\"line\">                )</span><br><span class=\"line\">                elapsed = time.time() - start_time</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\"># 更新统计（200~399状态码视为成功）</span></span><br><span class=\"line\">                <span class=\"keyword\">with</span> stats_lock:</span><br><span class=\"line\">                    stats[<span class=\"string\">&#x27;total&#x27;</span>] += <span class=\"number\">1</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> <span class=\"number\">200</span> &lt;= response.status_code &lt; <span class=\"number\">400</span>:</span><br><span class=\"line\">                        stats[<span class=\"string\">&#x27;success&#x27;</span>] += <span class=\"number\">1</span></span><br><span class=\"line\">                    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                        stats[<span class=\"string\">&#x27;fail&#x27;</span>] += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">                    stats[<span class=\"string\">&#x27;total_time&#x27;</span>] += elapsed</span><br><span class=\"line\">                    stats[<span class=\"string\">&#x27;max_time&#x27;</span>] = <span class=\"built_in\">max</span>(stats[<span class=\"string\">&#x27;max_time&#x27;</span>], elapsed)</span><br><span class=\"line\">                    stats[<span class=\"string\">&#x27;min_time&#x27;</span>] = <span class=\"built_in\">min</span>(stats[<span class=\"string\">&#x27;min_time&#x27;</span>], elapsed)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">                <span class=\"keyword\">with</span> stats_lock:</span><br><span class=\"line\">                    stats[<span class=\"string\">&#x27;fail&#x27;</span>] += <span class=\"number\">1</span></span><br><span class=\"line\">                    stats[<span class=\"string\">&#x27;total&#x27;</span>] += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># 标记任务完成</span></span><br><span class=\"line\">            task_queue.task_done()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">except</span> queue.Empty:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">print_stats</span>():</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;实时打印统计信息&quot;&quot;&quot;</span></span><br><span class=\"line\">    start_time = time.time()</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        time.sleep(<span class=\"number\">1</span>)  <span class=\"comment\"># 每秒更新</span></span><br><span class=\"line\">        <span class=\"keyword\">with</span> stats_lock:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> stats[<span class=\"string\">&#x27;total&#x27;</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\"></span><br><span class=\"line\">            duration = time.time() - start_time</span><br><span class=\"line\">            qps = stats[<span class=\"string\">&#x27;total&#x27;</span>] / duration</span><br><span class=\"line\">            avg_time = stats[<span class=\"string\">&#x27;total_time&#x27;</span>] / stats[<span class=\"string\">&#x27;total&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;\\r[STAT] &quot;</span></span><br><span class=\"line\">                  <span class=\"string\">f&quot;Requests: <span class=\"subst\">&#123;stats[<span class=\"string\">&#x27;total&#x27;</span>]&#125;</span> | &quot;</span></span><br><span class=\"line\">                  <span class=\"string\">f&quot;Success: <span class=\"subst\">&#123;stats[<span class=\"string\">&#x27;success&#x27;</span>]&#125;</span> | &quot;</span></span><br><span class=\"line\">                  <span class=\"string\">f&quot;Fail: <span class=\"subst\">&#123;stats[<span class=\"string\">&#x27;fail&#x27;</span>]&#125;</span> | &quot;</span></span><br><span class=\"line\">                  <span class=\"string\">f&quot;QPS: <span class=\"subst\">&#123;qps:<span class=\"number\">.1</span>f&#125;</span> | &quot;</span></span><br><span class=\"line\">                  <span class=\"string\">f&quot;Avg: <span class=\"subst\">&#123;avg_time:<span class=\"number\">.3</span>f&#125;</span>s | &quot;</span></span><br><span class=\"line\">                  <span class=\"string\">f&quot;Min/Max: <span class=\"subst\">&#123;stats[<span class=\"string\">&#x27;min_time&#x27;</span>]:<span class=\"number\">.3</span>f&#125;</span>s/<span class=\"subst\">&#123;stats[<span class=\"string\">&#x27;max_time&#x27;</span>]:<span class=\"number\">.3</span>f&#125;</span>s&quot;</span>,</span><br><span class=\"line\">                  end=<span class=\"string\">&#x27;&#x27;</span>, flush=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 检查是否完成所有任务</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> CONFIG[<span class=\"string\">&quot;total_requests&quot;</span>] &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> stats[<span class=\"string\">&#x27;total&#x27;</span>] &gt;= CONFIG[<span class=\"string\">&quot;total_requests&quot;</span>]:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 初始化任务队列</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> CONFIG[<span class=\"string\">&quot;total_requests&quot;</span>] &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(CONFIG[<span class=\"string\">&quot;total_requests&quot;</span>]):</span><br><span class=\"line\">            task_queue.put(i)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:  <span class=\"comment\"># 持续模式填充队列</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            task_queue.put(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 创建工作者线程</span></span><br><span class=\"line\">    threads = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(CONFIG[<span class=\"string\">&quot;thread_num&quot;</span>]):</span><br><span class=\"line\">        t = threading.Thread(target=worker)</span><br><span class=\"line\">        t.daemon = <span class=\"literal\">True</span></span><br><span class=\"line\">        t.start()</span><br><span class=\"line\">        threads.append(t)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 启动统计线程</span></span><br><span class=\"line\">    stat_thread = threading.Thread(target=print_stats)</span><br><span class=\"line\">    stat_thread.start()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 等待任务完成</span></span><br><span class=\"line\">    task_queue.join()</span><br><span class=\"line\">    stat_thread.join()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n压力测试完成&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#使用了join等待压测结束统计信息</span></span><br><span class=\"line\"><span class=\"comment\">#使用了queue.put填充队列为请求数量，线程为并发数量</span></span><br><span class=\"line\"><span class=\"comment\">#使用了with stats_lock加锁避免线程冲突</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#推荐使用这种方式，因为是大量重复任务</span></span><br><span class=\"line\"><span class=\"comment\">#使用ThreadPoolExecutor线程池优化，因为是大量重复任务，thread每次都要新创建线程消耗较大</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">from</span> concurrent.futures <span class=\"keyword\">import</span> ThreadPoolExecutor</span><br><span class=\"line\"></span><br><span class=\"line\">CONFIG = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;target_url&quot;</span>: <span class=\"string\">&quot;http://localhost/&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;thread_num&quot;</span>: <span class=\"number\">300</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;total_requests&quot;</span>: <span class=\"number\">10000</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;timeout&quot;</span>: <span class=\"number\">5</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;headers&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;User-Agent&quot;</span>: <span class=\"string\">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36&quot;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">&quot;show_progress&quot;</span>: <span class=\"literal\">True</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">stats = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;total&#x27;</span>: <span class=\"number\">0</span>, <span class=\"string\">&#x27;success&#x27;</span>: <span class=\"number\">0</span>, <span class=\"string\">&#x27;fail&#x27;</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;total_time&#x27;</span>: <span class=\"number\">0.0</span>, <span class=\"string\">&#x27;max_time&#x27;</span>: <span class=\"number\">0.0</span>, <span class=\"string\">&#x27;min_time&#x27;</span>: <span class=\"built_in\">float</span>(<span class=\"string\">&#x27;inf&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">stats_lock = threading.Lock()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">worker</span>(<span class=\"params\">_</span>):</span><br><span class=\"line\">    start_time = time.time()</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        response = requests.get(</span><br><span class=\"line\">            CONFIG[<span class=\"string\">&quot;target_url&quot;</span>],</span><br><span class=\"line\">            headers=CONFIG[<span class=\"string\">&quot;headers&quot;</span>],</span><br><span class=\"line\">            timeout=CONFIG[<span class=\"string\">&quot;timeout&quot;</span>]</span><br><span class=\"line\">        )</span><br><span class=\"line\">        elapsed = time.time() - start_time</span><br><span class=\"line\">        <span class=\"keyword\">with</span> stats_lock:</span><br><span class=\"line\">            stats[<span class=\"string\">&#x27;total&#x27;</span>] += <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"number\">200</span> &lt;= response.status_code &lt; <span class=\"number\">400</span>:</span><br><span class=\"line\">                stats[<span class=\"string\">&#x27;success&#x27;</span>] += <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                stats[<span class=\"string\">&#x27;fail&#x27;</span>] += <span class=\"number\">1</span></span><br><span class=\"line\">            stats[<span class=\"string\">&#x27;total_time&#x27;</span>] += elapsed</span><br><span class=\"line\">            stats[<span class=\"string\">&#x27;max_time&#x27;</span>] = <span class=\"built_in\">max</span>(stats[<span class=\"string\">&#x27;max_time&#x27;</span>], elapsed)</span><br><span class=\"line\">            stats[<span class=\"string\">&#x27;min_time&#x27;</span>] = <span class=\"built_in\">min</span>(stats[<span class=\"string\">&#x27;min_time&#x27;</span>], elapsed)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        <span class=\"keyword\">with</span> stats_lock:</span><br><span class=\"line\">            stats[<span class=\"string\">&#x27;fail&#x27;</span>] += <span class=\"number\">1</span></span><br><span class=\"line\">            stats[<span class=\"string\">&#x27;total&#x27;</span>] += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">print_stats</span>():</span><br><span class=\"line\">    start_time = time.time()</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">with</span> stats_lock:</span><br><span class=\"line\">            current_total = stats[<span class=\"string\">&#x27;total&#x27;</span>]</span><br><span class=\"line\">            duration = time.time() - start_time</span><br><span class=\"line\">            qps = current_total / duration <span class=\"keyword\">if</span> duration &gt; <span class=\"number\">0</span> <span class=\"keyword\">else</span> <span class=\"number\">0</span></span><br><span class=\"line\">            avg_time = stats[<span class=\"string\">&#x27;total_time&#x27;</span>] / current_total <span class=\"keyword\">if</span> current_total &gt; <span class=\"number\">0</span> <span class=\"keyword\">else</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">            progress_percent = (current_total / CONFIG[<span class=\"string\">&quot;total_requests&quot;</span>]) * <span class=\"number\">100</span> <span class=\"keyword\">if</span> CONFIG[<span class=\"string\">&quot;total_requests&quot;</span>] &gt; <span class=\"number\">0</span> <span class=\"keyword\">else</span> <span class=\"number\">0</span></span><br><span class=\"line\">            progress_bar = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> CONFIG[<span class=\"string\">&quot;show_progress&quot;</span>] <span class=\"keyword\">and</span> CONFIG[<span class=\"string\">&quot;total_requests&quot;</span>] &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">                bar_length = <span class=\"number\">20</span></span><br><span class=\"line\">                filled = <span class=\"built_in\">int</span>(bar_length * current_total // CONFIG[<span class=\"string\">&quot;total_requests&quot;</span>])</span><br><span class=\"line\">                progress_bar = <span class=\"string\">&quot;[&quot;</span> + <span class=\"string\">&quot;=&quot;</span> * filled + <span class=\"string\">&quot; &quot;</span> * (bar_length - filled) + <span class=\"string\">&quot;] &quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            output = (</span><br><span class=\"line\">                <span class=\"string\">f&quot;\\r[STAT] &quot;</span></span><br><span class=\"line\">                <span class=\"string\">f&quot;进度: <span class=\"subst\">&#123;progress_bar&#125;</span><span class=\"subst\">&#123;progress_percent:<span class=\"number\">.1</span>f&#125;</span>% | &quot;</span></span><br><span class=\"line\">                <span class=\"string\">f&quot;请求: <span class=\"subst\">&#123;current_total&#125;</span>/<span class=\"subst\">&#123;CONFIG[<span class=\"string\">&#x27;total_requests&#x27;</span>] <span class=\"keyword\">if</span> CONFIG[<span class=\"string\">&#x27;total_requests&#x27;</span>] &gt; <span class=\"number\">0</span> <span class=\"keyword\">else</span> <span class=\"string\">&#x27;∞&#x27;</span>&#125;</span> | &quot;</span></span><br><span class=\"line\">                <span class=\"string\">f&quot;成功: <span class=\"subst\">&#123;stats[<span class=\"string\">&#x27;success&#x27;</span>]&#125;</span> | &quot;</span></span><br><span class=\"line\">                <span class=\"string\">f&quot;失败: <span class=\"subst\">&#123;stats[<span class=\"string\">&#x27;fail&#x27;</span>]&#125;</span> | &quot;</span></span><br><span class=\"line\">                <span class=\"string\">f&quot;QPS: <span class=\"subst\">&#123;qps:<span class=\"number\">.1</span>f&#125;</span> | &quot;</span></span><br><span class=\"line\">                <span class=\"string\">f&quot;平均: <span class=\"subst\">&#123;avg_time:<span class=\"number\">.3</span>f&#125;</span>s | &quot;</span></span><br><span class=\"line\">                <span class=\"string\">f&quot;最慢: <span class=\"subst\">&#123;stats[<span class=\"string\">&#x27;max_time&#x27;</span>]:<span class=\"number\">.3</span>f&#125;</span>s&quot;</span></span><br><span class=\"line\">            )</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(output, end=<span class=\"string\">&#x27;&#x27;</span>, flush=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> CONFIG[<span class=\"string\">&quot;total_requests&quot;</span>] &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> current_total &gt;= CONFIG[<span class=\"string\">&quot;total_requests&quot;</span>]:</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    stat_thread = threading.Thread(target=print_stats)</span><br><span class=\"line\">    stat_thread.start()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> ThreadPoolExecutor(max_workers=CONFIG[<span class=\"string\">&quot;thread_num&quot;</span>]) <span class=\"keyword\">as</span> executor:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> CONFIG[<span class=\"string\">&quot;total_requests&quot;</span>] &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">            executor.<span class=\"built_in\">map</span>(worker, <span class=\"built_in\">range</span>(CONFIG[<span class=\"string\">&quot;total_requests&quot;</span>]))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">                executor.submit(worker, <span class=\"literal\">None</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    stat_thread.join()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n压力测试完成&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"额外\"><a href=\"#额外\" class=\"headerlink\" title=\"额外\"></a>额外</h1><ul>\n<li><p>ThreadPoolExecutor 适用场景：短期、批量、同质化任务</p>\n</li>\n<li><p>multiprocessing 适用场景：大量cpu密集型计算，多进程绕过GIL；io密集型建议使用异步编程</p>\n</li>\n</ul>\n"},{"title":"rsync","date":"2025-08-05T09:43:37.000Z","_content":"\n# 命令主要参数\n```shell\n-a, ––archive\t归档模式，表示以递归方式传输文件，并保持所有文件属性，等价于 -rlptgoD (注意不包括 -H)\n-r, ––recursive\t对子目录以递归模式处理\n-l, ––links\t保持符号链接文件\n-H, ––hard-links\t保持硬链接文件\n-p, ––perms\t保持文件权限\n-t, ––times\t保持文件时间信息\n-g, ––group\t保持文件属组信息\n-o, ––owner\t保持文件属主信息 (super-user only)\n-D\t保持设备文件和特殊文件 (super-user only)\n-z, ––compress\t在传输文件时进行压缩处理\n––exclude=PATTERN\t指定排除一个不需要传输的文件匹配模式\n––exclude-from=FILE\t从 FILE 中读取排除规则\n––include=PATTERN\t指定需要传输的文件匹配模式\n––include-from=FILE\t从 FILE 中读取包含规则\n––copy-unsafe-links\t拷贝指向SRC路径目录树以外的链接文件\n––safe-links\t忽略指向SRC路径目录树以外的链接文件（默认）\n––existing\t仅仅更新那些已经存在于接收端的文件，而不备份那些新创建的文件\n––ignore-existing\t忽略那些已经存在于接收端的文件，仅备份那些新创建的文件\n-b, ––backup\t当有变化时，对目标目录中的旧版文件进行备份\n––backup-dir=DIR\t与 -b 结合使用，将备份的文件存到 DIR 目录中\n––link-dest=DIR\t当文件未改变时基于 DIR 创建硬链接文件\n––delete\t删除那些接收端还有而发送端已经不存在的文件\n––delete-before\t接收者在传输之前进行删除操作 (默认)\n––delete-during\t接收者在传输过程中进行删除操作\n––delete-after\t接收者在传输之后进行删除操作\n––delete-excluded\t在接收方同时删除被排除的文件\n-e, ––rsh=COMMAND\t指定替代 rsh 的 shell 程序\n––ignore-errors\t即使出现 I/O 错误也进行删除\n––partial\t保留那些因故没有完全传输的文件，以是加快随后的再次传输\n––progress\t在传输时显示传输过程\n-P\t等价于 ––partial ––progress\n––delay-updates\t将正在更新的文件先保存到一个临时目录（默认为 “.~tmp~”），待传输完毕再更新目标文件\n-v, ––verbose\t详细输出模式\n-q, ––quiet\t精简输出模式\n-h, ––human-readable\t输出文件大小使用易读的单位（如，K，M等）\n-n, ––dry-run\t显示哪些文件将被传输\n––list-only\t仅仅列出文件而不进行复制\n––rsyncpath=PROGRAM\t指定远程服务器上的 rsync 命令所在路径\n––password-file=FILE\t从 FILE 中读取口令，以避免在终端上输入口令，通常在 cron 中连接 rsync 服务器时使用\n-4, ––ipv4\t使用 IPv4\n-6, ––ipv6\t使用 IPv6\n```\n\n# 命令行模式\n```shell\n#常用参数\nrsync -avzSP \\ #端点续传整合小文件\n  --contimeout=120 \\    # 连接超时 120 秒\n  --timeout=60 \\       # 数据传输超时 60 秒\n  --delay-updates \\    # 原子性替换文件\n  --log-file=rsync.log  #日志记录\n/cygdrive/c/     /cygdrive/d/ #windows必须加上/cygdrive前缀\n\n#可选参数 --delay-updates 需要目标磁盘空间较大，对正在进行io操作的先跳过后更新\n#--bwlimit=6000 限制带宽在6MB/s\n#--exclude='*.log' 过滤文件不传输支持正则\n#--delete  保证源和目标完全一致\n#--password-file=/etc/rsyncd_users.db backuper@127.0.0.1::wwwroot\n\n# /lib/systemd/system/rsync.service\n[Unit]\nDescription=fast remote file copy program daemon\nConditionPathExists=/etc/rsyncd.conf\n\n[Service]\nExecStart=/usr/bin/rsync --daemon --no-detach\n\n[Install]\nWantedBy=multi-user.target\n```\n\n\n# 后台server模式\n## linux配置\n```shell\ncat >> /etc/rsyncd.conf  << EOF\nuid = root\t\t\t\t\t     \ngid = root\t\t\t\t\t    \nuse chroot = yes\t\t\t\t\t\naddress = 0.0.0.0\t\t\t\nport 873\t\t\t\t\t\t    \nlog file = /var/log/rsyncd.log\t\t\npid file = /var/run/rsyncd.pid\t\t\nhosts allow = *\t\t\n[wwwroot]\t\t\t\t\t        \npath = /data/\t\t\t\t\ncomment = Document Root \nread only = yes\t\t\t\t\t    \ndont compress = *.gz *.bz2 *.tgz *.zip *.rar *.z  \nauth users = backuper srs\t\t\t\nsecrets file = /etc/rsyncd_users.db\t\t\t      \nEOF\necho 'backuper:backuperpasswd' |tee -a /etc/rsyncd_users.db\t\nchmod 600 /etc/rsyncd_users.db\n#客户端操作\t\n#echo 'backuperpasswd' |tee /etc/client.pass && chmod 600 /etc/client.pass\n#拉取\n#rsync -avzPS --password-file=/etc/client.pass backuper@127.0.0.1::wwwroot /tmp/rsync_daemon\n#发送；相当于把/tmp/rsync_daemon同步到/data/ read only 要设置成no\n#rsync -avzPS --password-file=/etc/client.pass /tmp/rsync_daemon backuper@127.0.0.1::wwwroot \n==================================================================\n#正常配置里面不能有注释\nuid = root\t\t\t\t\t     \ngid = root\t\t\t\t\t    \nuse chroot = yes\t\t\t\t\t#禁锢在源目录\naddress = 0.0.0.0\t\t\t#监听地址，监听本机地址\nport 873\t\t\t\t\t\t    #监听端口 tcp/udp 873，\nlog file = /var/log/rsyncd.log\t\t#日志文件位置\npid file = /var/run/rsyncd.pid\t\t#存放进程 ID 的文件位置\nhosts allow = *\t\t#允许同步的客户机网段\nmax connections = 5 #最大五个连接，默认没有限制\n[wwwroot]\t\t\t\t\t        #共享模块名称\npath = /data\t\t\t\t#源目录的实际路径（同步的目录）\ncomment = Document Root \nread only = yes\t\t\t\t\t    #是否为只读\ndont compress = *.gz *.bz2 *.tgz *.zip *.rar *.z  #同步时不再压缩的文件类型\nauth users = backuper srs\t\t\t#授权账户，多个账号以空格分隔\nsecrets file = /etc/rsyncd_users.db\t\t\t      #存放账户信息的数据文件\nEOF\n```\n## windows配置\n[cygwin下载地址](https://www.cygwin.com/setup-x86_64.exe)\n```shell\n#windows\nuid = Administrator    \ngid = Users  \nuse chroot = yes\naddress = 0.0.0.0\nport 873    \nlog file = /var/log/rsyncd.log\npid file = /var/run/rsyncd.pid\nhosts allow = *\n[wwwroot]        \npath = /cygdrive/c/data\ncomment = Document Root \nread only = yes    \ndont compress = *.gz *.bz2 *.tgz *.zip *.rar *.z  \nauth users = backuper srs\nsecrets file = /etc/rsyncd_users.db\n#在cygwin终端执行\n#echo 'backuperpasswd' |tee /etc/client.pass && chmod 600 /etc/client.pass      \n#rsync -avzPS --password-file=/etc/client.pass backuper@127.0.0.1::wwwroot /cygdrive/c/rsync_daemon\n```\n\n# 额外\n## 大量文件添加失败重试\n```shell\n#!/bin/bash\n\n# 配置参数\nPASSWORD='pass'\n#REMOTE_PATH=\"administrator@1.1.1.1:/cygdrive/c/data\"\nREMOTE_PATH=\"root@127.0.0.1:/data\"\nLOCAL_PATH=\"/tmp/rsync/\"\n#windows必选\n#RSYNC_PATH=\"C:\\\\cygwin64\\\\bin\\\\rsync.exe\"\nLOG_FILE=\"rsync.log\"\n\n# 最大重试次数\nMAX_RETRIES=10\n# 重试间隔（秒）\nRETRY_INTERVAL=60\n\n# 循环重试\nretry=0\nwhile [ $retry -lt $MAX_RETRIES ]; do\n  echo \"$(date) - 第 $((retry+1)) 次尝试同步...\" | tee -a \"$LOG_FILE\"\n  \n  # 执行同步命令\n  sshpass -p \"$PASSWORD\" rsync -avzSP \\\n    --log-file=\"$LOG_FILE\" \\\n  #  --rsync-path=\"$RSYNC_PATH\" \\\n    --timeout=30 \\\n    --contimeout=30 \\\n    \"$REMOTE_PATH\" \"$LOCAL_PATH\"\n  \n  # 检查退出状态码\n  if [ $? -eq 0 ]; then\n    echo \"$(date) - 同步成功！\" | tee -a \"$LOG_FILE\"\n    exit 0\n  else\n    echo \"$(date) - 同步失败，${RETRY_INTERVAL}秒后重试...\" | tee -a \"$LOG_FILE\"\n    sleep $RETRY_INTERVAL\n    ((retry++))\n  fi\ndone\n\necho \"$(date) - 达到最大重试次数，同步终止。\" | tee -a \"$LOG_FILE\"\nexit 1\n```\n**两种同步模式**<br>\n**1.服务端推送；需要每个客户端启动rsync --deamon添加配置文件不然需要使用ssh模式涉及密码不安全,监控服务端文件变化去同步客户端节点大部分情况用这种，弊端就是节点较多服务端同步起来负载会比较高**<br>\n**2.客户端推送；只需要在服务端配置rsync --deamon监控客户端文件变化去推送数据到服务端，由于多节点存在数据不一致这种情况建议不使用--delete不然一个节点操作删除，服务端也会被删除；或者使用客户端拉取这种情况只有通过定时任务实现就无法使用监控程序了**\n## rsync+inotify\n* 异地备份cdn节点少量同步；变动不频繁\n```shell\ninotify-tools 包含 inotifywatch  inotifywait两个命令\ninotifywatch -v -t 60 -r /var/log #统计次数\ninotifywait -mrq --format \"%T %w%f %e\" --timefmt \"%F-%T\" -e create,delete,move,modify,attrib /data/ |  \n  while read TIME FILE EVENT; do\n  echo \"时间: $TIME | 文件: $FILE | 事件: $EVENT \"\ndone\n%T\t时间戳（需配合 --timefmt 定义格式）\n%w\t监控目录的路径（绝对或相对路径）\n%f\t触发事件的文件名（不含路径）\n%e\t事件类型（多个事件用逗号分隔）\n\n-m 持续监听\n-r 使用递归形式监视目录\n-q 减少冗余信息，只打印出需要的信息\n-e 指定要监视的事件，多个时间使用逗号隔开\n–timefmt 时间格式\n–format 监听到的文件变化的信息\n\naccess\t文件被读取\nmodify\t文件内容被修改\nattrib\t文件元数据（如权限、时间戳）变更\ncreate\t文件/目录创建\ndelete\t文件/目录删除\nopen, close\t文件被打开或关闭\n\n\n#在client运行脚本，client目录发送变化会同步到rsync服务端\ncat > ./inotify_rsync.sh << 'EOF'  \n#!/bin/bash\n# Rsync配置\nRSYNC_CMD=\"rsync -avzS --partial --delay-updates --delete --password-file=/etc/client.pass /data/ backuper@10.0.1.122::wwwroot\"\nLOG_FILE=\"/var/log/inotify_rsync.log\"\n\n# 创建日志文件（如果不存在）\ntouch \"$LOG_FILE\"\n\n# 开始监控并处理事件\ninotifywait -mrq --format \"%T %w%f %e\" --timefmt \"%F-%T\" -e create,delete,move,modify,attrib /data/ |  \nwhile read TIME FILE EVENT; do\n    # 记录事件到日志\n    echo \"[事件] 时间: $TIME | 文件: $FILE | 操作: $EVENT\" >> \"$LOG_FILE\"\n    \n    # 执行rsync同步（添加错误重试机制）\n    if ! $RSYNC_CMD >> \"$LOG_FILE\" 2>&1; then\n        echo \"[错误] 同步失败！时间: $(date '+%F-%T')\" >> \"$LOG_FILE\"\n    else\n        echo \"[同步] 成功完成！时间: $(date '+%F-%T')\" >> \"$LOG_FILE\"\n    fi\ndone\nEOF\nchmod +x inotify_rsync.sh\ncat >  /etc/systemd/system/inotify_rsync.service << 'EOF'  \n[Unit]\nDescription=Auto Sync Service via inotify+rsync\n\n[Service]\nType=simple\nUser=root\nExecStart=/tmp/rsync_daemon/inotify_rsync.sh\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n```\n\n\n## rsync+lsyncd\n* 适合大量数据同步场景；变动频繁<br>\n[官方文档参数解读](https://lsyncd.github.io/lsyncd/manual/config/layer4/)\n```shell\n#ubuntu /etc/lsyncd/lsyncd.conf.lua\ncat > /etc/lsyncd.conf << 'EOF'\nsettings {\n  logfile = \"/var/log/lsyncd.log\",\n  statusFile = \"/var/log/lsyncd.status\",\n  insist = true,\n  statusInterval = 10\n}\n\nsync {\n  default.rsync,\n  source = \"/tmp/rsync_ly\",\n  target = \"backuper@10.0.1.122::wwwroot\",\n  -- excludeFrom = \"/etc/rsyncd.d/rsync_exclude.lst\",\n  delete = true,\n  delay = 20,\n  maxDelays = 1,\n  rsync = {\n    binary = \"/usr/bin/rsync\",\n    archive = true,\n    compress = true,\n    verbose = false,\n    password_file = \"/etc/client.pass\",\n    _extra    = {\n            \"--partial\",          \n            \"--timeout=300\"    \n  --          \"--bwlimit=5000\"      \n        },\n  }\n}\nEOF\n\n========================================================\n\n-- 全局配置：\nsettings {\n        logfile =\"/var/log/lsyncd/lsyncd.log\", -- 定义日志文件\n        statusFile =\"/var/log/lsyncd/lsyncd.status\",  -- 定义状态文件\n        pidfile = \"/var/log/lsyncd/lsyncd.pid\",-- 定义pid文件\n        inotifyMode = \"CloseWrite\",-- 指定inotify监控的事件，默认是CloseWrite，还可以是Modify或CloseWrite or Modify\n      \tmaxProcesses = 7,-- 同步进程的最大个数。假如同时有20个文件需要同步，而maxProcesses = 8，则最大能看到有8个rysnc进程\n        nodaemon =true,-- 表示不启用守护模式，默认；\n        maxDelays = 1, --  累计到多少所监控的事件激活一次同步，即使后面的delay延迟时间还未到\n        inist = ture --keep running at startup although one or more targets failed due to not being reachable.  一般不用配置\n       }\n\n-- sync部分配置：\nsync {\n      default.rsync,     -- rsync、rsyncssh、direct三种模式：\n    -- default.rsync ：本地目录间同步，使用rsync，也可以达到使用ssh形式的远程rsync效果，或daemon方式连接远程rsyncd进程；\n    -- default.direct ：本地目录间同步，使用cp、rm等命令完成差异文件备份；\n    -- default.rsyncssh ：同步到远程主机目录，rsync的ssh模式，需要使用key来认证；\n      source = \"/tmp/src\", -- source 同步的源目录，使用绝对路径\n      target = \"/tmp/dest\", -- target 定义目的地址.对应不同的模式有几种写法:\n    \t-- /tmp/dest ：本地目录同步，可用于direct和rsync模式；\n    \t-- 10.4.7.10:/tmp/dest ：同步到远程服务器目录，可用于rsync和rsyncssh模式，拼接的命令类似于/usr/bin/rsync -ltsd --delete --include-from=- --exclude=* SOURCE TARGET，剩下的就是rsync的内容了，比如指定username，免密码同步；\n   \t\t-- 10.4.7.10::module ：同步到远程服务器目录，用于rsync模式；\n      init = true,  -- init 这是一个优化选项，当init = false，只同步进程启动以后发生改动事件的文件，原有的目录即使有差异也不会同步。默认是true；\n      delay = 3, -- delay 累计事件，等待rsync同步延时时间，默认15秒（最大累计到1000个不可合并的事件）。也就是15s内监控目录下发生的改动，会累积到一次rsync同步，避免过于频繁的同步。（可合并的意思是，15s内两次修改了同一文件，最后只同步最新的文件）;\n      excludeFrom = \"/etc/rsyncd.d/rsync_exclude.lst\",  -- excludeFrom 排除选项，后面指定排除的列表文件，如excludeFrom = \"/etc/lsyncd.exclude\"，如果是简单的排除，可以使用exclude = LIST。这里的排除规则写法与原生rsync有点不同，更为简单：\n\t\t-- 监控路径里的任何部分匹配到一个文本，都会被排除，例如/bin/foo/bar可以匹配规则foo\n\t\t-- 如果规则以斜线/开头，则从头开始要匹配全部\n\t\t-- 如果规则以/结尾，则要匹配监控路径的末尾\n\t\t-- ?匹配任何字符，但不包括/\n\t\t-- *匹配0或多个字符，但不包括/\n\t\t-- **匹配0或多个字符，可以是/\n      delete\t=\t'running',  -- delete 为了保持target与souce完全同步，Lsyncd默认会delete = true来允许同步删除。它除了false，还有startup、running值：\n      -- delete\t=\ttrue       # 在目标上删除源中没有的内容。在启动时以及在正常操作期间删除的内容\n      -- delete\t=\tfalse      # 不会删除目标上的任何文件。不在启动时也不在正常操作上\n      -- delete\t=\t'startup'  # Lsyncd将在启动时删除目标上的文件，但不会在正常操作时删除\n      -- delete\t=\t'running'  # Lsyncd在启动时不会删除目标上的文件，但会删除正常操作期间删除的文件\n\n    \n-- rsync部分配置：    \n      -- delete和exclude本来都是rsync的选项，上面是配置在sync中的，这样做的原因是为了减少rsync的开销\n      rsync = {\n             bwlimit=200, -- bwlimit 限速，单位kb/s，与rsync相同（这么重要的选项在文档里竟然没有标出）；\n             binary = \"/usr/bin/rsync\", -- rsync可执行程序地址，默认/usr/bin/rsync\n             archive = true, -- 默认false，以递归方式传输文件，并保持所有文件属性\n             compress = true,-- 压缩传输默认为true。在带宽与cpu负载之间权衡，本地目录同步可以考虑把它设为false；\n             verbose = true,--同步详细模式输出\n        \t perms = true -- perms 保留文件权限,默认为true；\n      }\n}\n\n#-- excludeFrom = \"/etc/rsyncd.d/rsync_exclude.lst\", \n#*.log\n#/cache/\n#/temp/\n#.git/\n\n```\n","source":"_posts/rsync.md","raw":"---\ntitle: rsync\ndate: 2025-08-05 17:43:37\ntags:\ncategories: linux\n---\n\n# 命令主要参数\n```shell\n-a, ––archive\t归档模式，表示以递归方式传输文件，并保持所有文件属性，等价于 -rlptgoD (注意不包括 -H)\n-r, ––recursive\t对子目录以递归模式处理\n-l, ––links\t保持符号链接文件\n-H, ––hard-links\t保持硬链接文件\n-p, ––perms\t保持文件权限\n-t, ––times\t保持文件时间信息\n-g, ––group\t保持文件属组信息\n-o, ––owner\t保持文件属主信息 (super-user only)\n-D\t保持设备文件和特殊文件 (super-user only)\n-z, ––compress\t在传输文件时进行压缩处理\n––exclude=PATTERN\t指定排除一个不需要传输的文件匹配模式\n––exclude-from=FILE\t从 FILE 中读取排除规则\n––include=PATTERN\t指定需要传输的文件匹配模式\n––include-from=FILE\t从 FILE 中读取包含规则\n––copy-unsafe-links\t拷贝指向SRC路径目录树以外的链接文件\n––safe-links\t忽略指向SRC路径目录树以外的链接文件（默认）\n––existing\t仅仅更新那些已经存在于接收端的文件，而不备份那些新创建的文件\n––ignore-existing\t忽略那些已经存在于接收端的文件，仅备份那些新创建的文件\n-b, ––backup\t当有变化时，对目标目录中的旧版文件进行备份\n––backup-dir=DIR\t与 -b 结合使用，将备份的文件存到 DIR 目录中\n––link-dest=DIR\t当文件未改变时基于 DIR 创建硬链接文件\n––delete\t删除那些接收端还有而发送端已经不存在的文件\n––delete-before\t接收者在传输之前进行删除操作 (默认)\n––delete-during\t接收者在传输过程中进行删除操作\n––delete-after\t接收者在传输之后进行删除操作\n––delete-excluded\t在接收方同时删除被排除的文件\n-e, ––rsh=COMMAND\t指定替代 rsh 的 shell 程序\n––ignore-errors\t即使出现 I/O 错误也进行删除\n––partial\t保留那些因故没有完全传输的文件，以是加快随后的再次传输\n––progress\t在传输时显示传输过程\n-P\t等价于 ––partial ––progress\n––delay-updates\t将正在更新的文件先保存到一个临时目录（默认为 “.~tmp~”），待传输完毕再更新目标文件\n-v, ––verbose\t详细输出模式\n-q, ––quiet\t精简输出模式\n-h, ––human-readable\t输出文件大小使用易读的单位（如，K，M等）\n-n, ––dry-run\t显示哪些文件将被传输\n––list-only\t仅仅列出文件而不进行复制\n––rsyncpath=PROGRAM\t指定远程服务器上的 rsync 命令所在路径\n––password-file=FILE\t从 FILE 中读取口令，以避免在终端上输入口令，通常在 cron 中连接 rsync 服务器时使用\n-4, ––ipv4\t使用 IPv4\n-6, ––ipv6\t使用 IPv6\n```\n\n# 命令行模式\n```shell\n#常用参数\nrsync -avzSP \\ #端点续传整合小文件\n  --contimeout=120 \\    # 连接超时 120 秒\n  --timeout=60 \\       # 数据传输超时 60 秒\n  --delay-updates \\    # 原子性替换文件\n  --log-file=rsync.log  #日志记录\n/cygdrive/c/     /cygdrive/d/ #windows必须加上/cygdrive前缀\n\n#可选参数 --delay-updates 需要目标磁盘空间较大，对正在进行io操作的先跳过后更新\n#--bwlimit=6000 限制带宽在6MB/s\n#--exclude='*.log' 过滤文件不传输支持正则\n#--delete  保证源和目标完全一致\n#--password-file=/etc/rsyncd_users.db backuper@127.0.0.1::wwwroot\n\n# /lib/systemd/system/rsync.service\n[Unit]\nDescription=fast remote file copy program daemon\nConditionPathExists=/etc/rsyncd.conf\n\n[Service]\nExecStart=/usr/bin/rsync --daemon --no-detach\n\n[Install]\nWantedBy=multi-user.target\n```\n\n\n# 后台server模式\n## linux配置\n```shell\ncat >> /etc/rsyncd.conf  << EOF\nuid = root\t\t\t\t\t     \ngid = root\t\t\t\t\t    \nuse chroot = yes\t\t\t\t\t\naddress = 0.0.0.0\t\t\t\nport 873\t\t\t\t\t\t    \nlog file = /var/log/rsyncd.log\t\t\npid file = /var/run/rsyncd.pid\t\t\nhosts allow = *\t\t\n[wwwroot]\t\t\t\t\t        \npath = /data/\t\t\t\t\ncomment = Document Root \nread only = yes\t\t\t\t\t    \ndont compress = *.gz *.bz2 *.tgz *.zip *.rar *.z  \nauth users = backuper srs\t\t\t\nsecrets file = /etc/rsyncd_users.db\t\t\t      \nEOF\necho 'backuper:backuperpasswd' |tee -a /etc/rsyncd_users.db\t\nchmod 600 /etc/rsyncd_users.db\n#客户端操作\t\n#echo 'backuperpasswd' |tee /etc/client.pass && chmod 600 /etc/client.pass\n#拉取\n#rsync -avzPS --password-file=/etc/client.pass backuper@127.0.0.1::wwwroot /tmp/rsync_daemon\n#发送；相当于把/tmp/rsync_daemon同步到/data/ read only 要设置成no\n#rsync -avzPS --password-file=/etc/client.pass /tmp/rsync_daemon backuper@127.0.0.1::wwwroot \n==================================================================\n#正常配置里面不能有注释\nuid = root\t\t\t\t\t     \ngid = root\t\t\t\t\t    \nuse chroot = yes\t\t\t\t\t#禁锢在源目录\naddress = 0.0.0.0\t\t\t#监听地址，监听本机地址\nport 873\t\t\t\t\t\t    #监听端口 tcp/udp 873，\nlog file = /var/log/rsyncd.log\t\t#日志文件位置\npid file = /var/run/rsyncd.pid\t\t#存放进程 ID 的文件位置\nhosts allow = *\t\t#允许同步的客户机网段\nmax connections = 5 #最大五个连接，默认没有限制\n[wwwroot]\t\t\t\t\t        #共享模块名称\npath = /data\t\t\t\t#源目录的实际路径（同步的目录）\ncomment = Document Root \nread only = yes\t\t\t\t\t    #是否为只读\ndont compress = *.gz *.bz2 *.tgz *.zip *.rar *.z  #同步时不再压缩的文件类型\nauth users = backuper srs\t\t\t#授权账户，多个账号以空格分隔\nsecrets file = /etc/rsyncd_users.db\t\t\t      #存放账户信息的数据文件\nEOF\n```\n## windows配置\n[cygwin下载地址](https://www.cygwin.com/setup-x86_64.exe)\n```shell\n#windows\nuid = Administrator    \ngid = Users  \nuse chroot = yes\naddress = 0.0.0.0\nport 873    \nlog file = /var/log/rsyncd.log\npid file = /var/run/rsyncd.pid\nhosts allow = *\n[wwwroot]        \npath = /cygdrive/c/data\ncomment = Document Root \nread only = yes    \ndont compress = *.gz *.bz2 *.tgz *.zip *.rar *.z  \nauth users = backuper srs\nsecrets file = /etc/rsyncd_users.db\n#在cygwin终端执行\n#echo 'backuperpasswd' |tee /etc/client.pass && chmod 600 /etc/client.pass      \n#rsync -avzPS --password-file=/etc/client.pass backuper@127.0.0.1::wwwroot /cygdrive/c/rsync_daemon\n```\n\n# 额外\n## 大量文件添加失败重试\n```shell\n#!/bin/bash\n\n# 配置参数\nPASSWORD='pass'\n#REMOTE_PATH=\"administrator@1.1.1.1:/cygdrive/c/data\"\nREMOTE_PATH=\"root@127.0.0.1:/data\"\nLOCAL_PATH=\"/tmp/rsync/\"\n#windows必选\n#RSYNC_PATH=\"C:\\\\cygwin64\\\\bin\\\\rsync.exe\"\nLOG_FILE=\"rsync.log\"\n\n# 最大重试次数\nMAX_RETRIES=10\n# 重试间隔（秒）\nRETRY_INTERVAL=60\n\n# 循环重试\nretry=0\nwhile [ $retry -lt $MAX_RETRIES ]; do\n  echo \"$(date) - 第 $((retry+1)) 次尝试同步...\" | tee -a \"$LOG_FILE\"\n  \n  # 执行同步命令\n  sshpass -p \"$PASSWORD\" rsync -avzSP \\\n    --log-file=\"$LOG_FILE\" \\\n  #  --rsync-path=\"$RSYNC_PATH\" \\\n    --timeout=30 \\\n    --contimeout=30 \\\n    \"$REMOTE_PATH\" \"$LOCAL_PATH\"\n  \n  # 检查退出状态码\n  if [ $? -eq 0 ]; then\n    echo \"$(date) - 同步成功！\" | tee -a \"$LOG_FILE\"\n    exit 0\n  else\n    echo \"$(date) - 同步失败，${RETRY_INTERVAL}秒后重试...\" | tee -a \"$LOG_FILE\"\n    sleep $RETRY_INTERVAL\n    ((retry++))\n  fi\ndone\n\necho \"$(date) - 达到最大重试次数，同步终止。\" | tee -a \"$LOG_FILE\"\nexit 1\n```\n**两种同步模式**<br>\n**1.服务端推送；需要每个客户端启动rsync --deamon添加配置文件不然需要使用ssh模式涉及密码不安全,监控服务端文件变化去同步客户端节点大部分情况用这种，弊端就是节点较多服务端同步起来负载会比较高**<br>\n**2.客户端推送；只需要在服务端配置rsync --deamon监控客户端文件变化去推送数据到服务端，由于多节点存在数据不一致这种情况建议不使用--delete不然一个节点操作删除，服务端也会被删除；或者使用客户端拉取这种情况只有通过定时任务实现就无法使用监控程序了**\n## rsync+inotify\n* 异地备份cdn节点少量同步；变动不频繁\n```shell\ninotify-tools 包含 inotifywatch  inotifywait两个命令\ninotifywatch -v -t 60 -r /var/log #统计次数\ninotifywait -mrq --format \"%T %w%f %e\" --timefmt \"%F-%T\" -e create,delete,move,modify,attrib /data/ |  \n  while read TIME FILE EVENT; do\n  echo \"时间: $TIME | 文件: $FILE | 事件: $EVENT \"\ndone\n%T\t时间戳（需配合 --timefmt 定义格式）\n%w\t监控目录的路径（绝对或相对路径）\n%f\t触发事件的文件名（不含路径）\n%e\t事件类型（多个事件用逗号分隔）\n\n-m 持续监听\n-r 使用递归形式监视目录\n-q 减少冗余信息，只打印出需要的信息\n-e 指定要监视的事件，多个时间使用逗号隔开\n–timefmt 时间格式\n–format 监听到的文件变化的信息\n\naccess\t文件被读取\nmodify\t文件内容被修改\nattrib\t文件元数据（如权限、时间戳）变更\ncreate\t文件/目录创建\ndelete\t文件/目录删除\nopen, close\t文件被打开或关闭\n\n\n#在client运行脚本，client目录发送变化会同步到rsync服务端\ncat > ./inotify_rsync.sh << 'EOF'  \n#!/bin/bash\n# Rsync配置\nRSYNC_CMD=\"rsync -avzS --partial --delay-updates --delete --password-file=/etc/client.pass /data/ backuper@10.0.1.122::wwwroot\"\nLOG_FILE=\"/var/log/inotify_rsync.log\"\n\n# 创建日志文件（如果不存在）\ntouch \"$LOG_FILE\"\n\n# 开始监控并处理事件\ninotifywait -mrq --format \"%T %w%f %e\" --timefmt \"%F-%T\" -e create,delete,move,modify,attrib /data/ |  \nwhile read TIME FILE EVENT; do\n    # 记录事件到日志\n    echo \"[事件] 时间: $TIME | 文件: $FILE | 操作: $EVENT\" >> \"$LOG_FILE\"\n    \n    # 执行rsync同步（添加错误重试机制）\n    if ! $RSYNC_CMD >> \"$LOG_FILE\" 2>&1; then\n        echo \"[错误] 同步失败！时间: $(date '+%F-%T')\" >> \"$LOG_FILE\"\n    else\n        echo \"[同步] 成功完成！时间: $(date '+%F-%T')\" >> \"$LOG_FILE\"\n    fi\ndone\nEOF\nchmod +x inotify_rsync.sh\ncat >  /etc/systemd/system/inotify_rsync.service << 'EOF'  \n[Unit]\nDescription=Auto Sync Service via inotify+rsync\n\n[Service]\nType=simple\nUser=root\nExecStart=/tmp/rsync_daemon/inotify_rsync.sh\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n```\n\n\n## rsync+lsyncd\n* 适合大量数据同步场景；变动频繁<br>\n[官方文档参数解读](https://lsyncd.github.io/lsyncd/manual/config/layer4/)\n```shell\n#ubuntu /etc/lsyncd/lsyncd.conf.lua\ncat > /etc/lsyncd.conf << 'EOF'\nsettings {\n  logfile = \"/var/log/lsyncd.log\",\n  statusFile = \"/var/log/lsyncd.status\",\n  insist = true,\n  statusInterval = 10\n}\n\nsync {\n  default.rsync,\n  source = \"/tmp/rsync_ly\",\n  target = \"backuper@10.0.1.122::wwwroot\",\n  -- excludeFrom = \"/etc/rsyncd.d/rsync_exclude.lst\",\n  delete = true,\n  delay = 20,\n  maxDelays = 1,\n  rsync = {\n    binary = \"/usr/bin/rsync\",\n    archive = true,\n    compress = true,\n    verbose = false,\n    password_file = \"/etc/client.pass\",\n    _extra    = {\n            \"--partial\",          \n            \"--timeout=300\"    \n  --          \"--bwlimit=5000\"      \n        },\n  }\n}\nEOF\n\n========================================================\n\n-- 全局配置：\nsettings {\n        logfile =\"/var/log/lsyncd/lsyncd.log\", -- 定义日志文件\n        statusFile =\"/var/log/lsyncd/lsyncd.status\",  -- 定义状态文件\n        pidfile = \"/var/log/lsyncd/lsyncd.pid\",-- 定义pid文件\n        inotifyMode = \"CloseWrite\",-- 指定inotify监控的事件，默认是CloseWrite，还可以是Modify或CloseWrite or Modify\n      \tmaxProcesses = 7,-- 同步进程的最大个数。假如同时有20个文件需要同步，而maxProcesses = 8，则最大能看到有8个rysnc进程\n        nodaemon =true,-- 表示不启用守护模式，默认；\n        maxDelays = 1, --  累计到多少所监控的事件激活一次同步，即使后面的delay延迟时间还未到\n        inist = ture --keep running at startup although one or more targets failed due to not being reachable.  一般不用配置\n       }\n\n-- sync部分配置：\nsync {\n      default.rsync,     -- rsync、rsyncssh、direct三种模式：\n    -- default.rsync ：本地目录间同步，使用rsync，也可以达到使用ssh形式的远程rsync效果，或daemon方式连接远程rsyncd进程；\n    -- default.direct ：本地目录间同步，使用cp、rm等命令完成差异文件备份；\n    -- default.rsyncssh ：同步到远程主机目录，rsync的ssh模式，需要使用key来认证；\n      source = \"/tmp/src\", -- source 同步的源目录，使用绝对路径\n      target = \"/tmp/dest\", -- target 定义目的地址.对应不同的模式有几种写法:\n    \t-- /tmp/dest ：本地目录同步，可用于direct和rsync模式；\n    \t-- 10.4.7.10:/tmp/dest ：同步到远程服务器目录，可用于rsync和rsyncssh模式，拼接的命令类似于/usr/bin/rsync -ltsd --delete --include-from=- --exclude=* SOURCE TARGET，剩下的就是rsync的内容了，比如指定username，免密码同步；\n   \t\t-- 10.4.7.10::module ：同步到远程服务器目录，用于rsync模式；\n      init = true,  -- init 这是一个优化选项，当init = false，只同步进程启动以后发生改动事件的文件，原有的目录即使有差异也不会同步。默认是true；\n      delay = 3, -- delay 累计事件，等待rsync同步延时时间，默认15秒（最大累计到1000个不可合并的事件）。也就是15s内监控目录下发生的改动，会累积到一次rsync同步，避免过于频繁的同步。（可合并的意思是，15s内两次修改了同一文件，最后只同步最新的文件）;\n      excludeFrom = \"/etc/rsyncd.d/rsync_exclude.lst\",  -- excludeFrom 排除选项，后面指定排除的列表文件，如excludeFrom = \"/etc/lsyncd.exclude\"，如果是简单的排除，可以使用exclude = LIST。这里的排除规则写法与原生rsync有点不同，更为简单：\n\t\t-- 监控路径里的任何部分匹配到一个文本，都会被排除，例如/bin/foo/bar可以匹配规则foo\n\t\t-- 如果规则以斜线/开头，则从头开始要匹配全部\n\t\t-- 如果规则以/结尾，则要匹配监控路径的末尾\n\t\t-- ?匹配任何字符，但不包括/\n\t\t-- *匹配0或多个字符，但不包括/\n\t\t-- **匹配0或多个字符，可以是/\n      delete\t=\t'running',  -- delete 为了保持target与souce完全同步，Lsyncd默认会delete = true来允许同步删除。它除了false，还有startup、running值：\n      -- delete\t=\ttrue       # 在目标上删除源中没有的内容。在启动时以及在正常操作期间删除的内容\n      -- delete\t=\tfalse      # 不会删除目标上的任何文件。不在启动时也不在正常操作上\n      -- delete\t=\t'startup'  # Lsyncd将在启动时删除目标上的文件，但不会在正常操作时删除\n      -- delete\t=\t'running'  # Lsyncd在启动时不会删除目标上的文件，但会删除正常操作期间删除的文件\n\n    \n-- rsync部分配置：    \n      -- delete和exclude本来都是rsync的选项，上面是配置在sync中的，这样做的原因是为了减少rsync的开销\n      rsync = {\n             bwlimit=200, -- bwlimit 限速，单位kb/s，与rsync相同（这么重要的选项在文档里竟然没有标出）；\n             binary = \"/usr/bin/rsync\", -- rsync可执行程序地址，默认/usr/bin/rsync\n             archive = true, -- 默认false，以递归方式传输文件，并保持所有文件属性\n             compress = true,-- 压缩传输默认为true。在带宽与cpu负载之间权衡，本地目录同步可以考虑把它设为false；\n             verbose = true,--同步详细模式输出\n        \t perms = true -- perms 保留文件权限,默认为true；\n      }\n}\n\n#-- excludeFrom = \"/etc/rsyncd.d/rsync_exclude.lst\", \n#*.log\n#/cache/\n#/temp/\n#.git/\n\n```\n","slug":"rsync","published":1,"updated":"2025-08-28T06:39:18.224Z","comments":1,"layout":"post","photos":[],"_id":"cmev1ggcj0013hllz0bpb9x3q","content":"<h1 id=\"命令主要参数\"><a href=\"#命令主要参数\" class=\"headerlink\" title=\"命令主要参数\"></a>命令主要参数</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-a, ––archive\t归档模式，表示以递归方式传输文件，并保持所有文件属性，等价于 -rlptgoD (注意不包括 -H)</span><br><span class=\"line\">-r, ––recursive\t对子目录以递归模式处理</span><br><span class=\"line\">-l, ––links\t保持符号链接文件</span><br><span class=\"line\">-H, ––hard-links\t保持硬链接文件</span><br><span class=\"line\">-p, ––perms\t保持文件权限</span><br><span class=\"line\">-t, ––times\t保持文件时间信息</span><br><span class=\"line\">-g, ––group\t保持文件属组信息</span><br><span class=\"line\">-o, ––owner\t保持文件属主信息 (super-user only)</span><br><span class=\"line\">-D\t保持设备文件和特殊文件 (super-user only)</span><br><span class=\"line\">-z, ––compress\t在传输文件时进行压缩处理</span><br><span class=\"line\">––exclude=PATTERN\t指定排除一个不需要传输的文件匹配模式</span><br><span class=\"line\">––exclude-from=FILE\t从 FILE 中读取排除规则</span><br><span class=\"line\">––include=PATTERN\t指定需要传输的文件匹配模式</span><br><span class=\"line\">––include-from=FILE\t从 FILE 中读取包含规则</span><br><span class=\"line\">––copy-unsafe-links\t拷贝指向SRC路径目录树以外的链接文件</span><br><span class=\"line\">––safe-links\t忽略指向SRC路径目录树以外的链接文件（默认）</span><br><span class=\"line\">––existing\t仅仅更新那些已经存在于接收端的文件，而不备份那些新创建的文件</span><br><span class=\"line\">––ignore-existing\t忽略那些已经存在于接收端的文件，仅备份那些新创建的文件</span><br><span class=\"line\">-b, ––backup\t当有变化时，对目标目录中的旧版文件进行备份</span><br><span class=\"line\">––backup-dir=DIR\t与 -b 结合使用，将备份的文件存到 DIR 目录中</span><br><span class=\"line\">––link-dest=DIR\t当文件未改变时基于 DIR 创建硬链接文件</span><br><span class=\"line\">––delete\t删除那些接收端还有而发送端已经不存在的文件</span><br><span class=\"line\">––delete-before\t接收者在传输之前进行删除操作 (默认)</span><br><span class=\"line\">––delete-during\t接收者在传输过程中进行删除操作</span><br><span class=\"line\">––delete-after\t接收者在传输之后进行删除操作</span><br><span class=\"line\">––delete-excluded\t在接收方同时删除被排除的文件</span><br><span class=\"line\">-e, ––rsh=COMMAND\t指定替代 rsh 的 shell 程序</span><br><span class=\"line\">––ignore-errors\t即使出现 I/O 错误也进行删除</span><br><span class=\"line\">––partial\t保留那些因故没有完全传输的文件，以是加快随后的再次传输</span><br><span class=\"line\">––progress\t在传输时显示传输过程</span><br><span class=\"line\">-P\t等价于 ––partial ––progress</span><br><span class=\"line\">––delay-updates\t将正在更新的文件先保存到一个临时目录（默认为 “.~tmp~”），待传输完毕再更新目标文件</span><br><span class=\"line\">-v, ––verbose\t详细输出模式</span><br><span class=\"line\">-q, ––quiet\t精简输出模式</span><br><span class=\"line\">-h, ––human-readable\t输出文件大小使用易读的单位（如，K，M等）</span><br><span class=\"line\">-n, ––dry-run\t显示哪些文件将被传输</span><br><span class=\"line\">––list-only\t仅仅列出文件而不进行复制</span><br><span class=\"line\">––rsyncpath=PROGRAM\t指定远程服务器上的 rsync 命令所在路径</span><br><span class=\"line\">––password-file=FILE\t从 FILE 中读取口令，以避免在终端上输入口令，通常在 cron 中连接 rsync 服务器时使用</span><br><span class=\"line\">-4, ––ipv4\t使用 IPv4</span><br><span class=\"line\">-6, ––ipv6\t使用 IPv6</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"命令行模式\"><a href=\"#命令行模式\" class=\"headerlink\" title=\"命令行模式\"></a>命令行模式</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">常用参数</span></span><br><span class=\"line\">rsync -avzSP \\ #端点续传整合小文件</span><br><span class=\"line\">  --contimeout=120 \\    # 连接超时 120 秒</span><br><span class=\"line\">  --timeout=60 \\       # 数据传输超时 60 秒</span><br><span class=\"line\">  --delay-updates \\    # 原子性替换文件</span><br><span class=\"line\">  --log-file=rsync.log  #日志记录</span><br><span class=\"line\">/cygdrive/c/     /cygdrive/d/ #windows必须加上/cygdrive前缀</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">可选参数 --delay-updates 需要目标磁盘空间较大，对正在进行io操作的先跳过后更新</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">--bwlimit=6000 限制带宽在6MB/s</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">--exclude=<span class=\"string\">&#x27;*.log&#x27;</span> 过滤文件不传输支持正则</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">--delete  保证源和目标完全一致</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">--password-file=/etc/rsyncd_users.db backuper@127.0.0.1::wwwroot</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">/lib/systemd/system/rsync.service</span></span><br><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=fast remote file copy program daemon</span><br><span class=\"line\">ConditionPathExists=/etc/rsyncd.conf</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">ExecStart=/usr/bin/rsync --daemon --no-detach</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"后台server模式\"><a href=\"#后台server模式\" class=\"headerlink\" title=\"后台server模式\"></a>后台server模式</h1><h2 id=\"linux配置\"><a href=\"#linux配置\" class=\"headerlink\" title=\"linux配置\"></a>linux配置</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt;&gt; /etc/rsyncd.conf  &lt;&lt; EOF</span><br><span class=\"line\">uid = root\t\t\t\t\t     </span><br><span class=\"line\">gid = root\t\t\t\t\t    </span><br><span class=\"line\">use chroot = yes\t\t\t\t\t</span><br><span class=\"line\">address = 0.0.0.0\t\t\t</span><br><span class=\"line\">port 873\t\t\t\t\t\t    </span><br><span class=\"line\">log file = /var/log/rsyncd.log\t\t</span><br><span class=\"line\">pid file = /var/run/rsyncd.pid\t\t</span><br><span class=\"line\">hosts allow = *\t\t</span><br><span class=\"line\">[wwwroot]\t\t\t\t\t        </span><br><span class=\"line\">path = /data/\t\t\t\t</span><br><span class=\"line\">comment = Document Root </span><br><span class=\"line\">read only = yes\t\t\t\t\t    </span><br><span class=\"line\">dont compress = *.gz *.bz2 *.tgz *.zip *.rar *.z  </span><br><span class=\"line\">auth users = backuper srs\t\t\t</span><br><span class=\"line\">secrets file = /etc/rsyncd_users.db\t\t\t      </span><br><span class=\"line\">EOF</span><br><span class=\"line\">echo &#x27;backuper:backuperpasswd&#x27; |tee -a /etc/rsyncd_users.db\t</span><br><span class=\"line\">chmod 600 /etc/rsyncd_users.db</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">客户端操作</span>\t</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;backuperpasswd&#x27;</span> |<span class=\"built_in\">tee</span> /etc/client.pass &amp;&amp; <span class=\"built_in\">chmod</span> 600 /etc/client.pass</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">拉取</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">rsync -avzPS --password-file=/etc/client.pass backuper@127.0.0.1::wwwroot /tmp/rsync_daemon</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">发送；相当于把/tmp/rsync_daemon同步到/data/ <span class=\"built_in\">read</span> only 要设置成no</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">rsync -avzPS --password-file=/etc/client.pass /tmp/rsync_daemon backuper@127.0.0.1::wwwroot</span> </span><br><span class=\"line\">==================================================================</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">正常配置里面不能有注释</span></span><br><span class=\"line\">uid = root\t\t\t\t\t     </span><br><span class=\"line\">gid = root\t\t\t\t\t    </span><br><span class=\"line\">use chroot = yes\t\t\t\t\t#禁锢在源目录</span><br><span class=\"line\">address = 0.0.0.0\t\t\t#监听地址，监听本机地址</span><br><span class=\"line\">port 873\t\t\t\t\t\t    #监听端口 tcp/udp 873，</span><br><span class=\"line\">log file = /var/log/rsyncd.log\t\t#日志文件位置</span><br><span class=\"line\">pid file = /var/run/rsyncd.pid\t\t#存放进程 ID 的文件位置</span><br><span class=\"line\">hosts allow = *\t\t#允许同步的客户机网段</span><br><span class=\"line\">max connections = 5 #最大五个连接，默认没有限制</span><br><span class=\"line\">[wwwroot]\t\t\t\t\t        #共享模块名称</span><br><span class=\"line\">path = /data\t\t\t\t#源目录的实际路径（同步的目录）</span><br><span class=\"line\">comment = Document Root </span><br><span class=\"line\">read only = yes\t\t\t\t\t    #是否为只读</span><br><span class=\"line\">dont compress = *.gz *.bz2 *.tgz *.zip *.rar *.z  #同步时不再压缩的文件类型</span><br><span class=\"line\">auth users = backuper srs\t\t\t#授权账户，多个账号以空格分隔</span><br><span class=\"line\">secrets file = /etc/rsyncd_users.db\t\t\t      #存放账户信息的数据文件</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n<h2 id=\"windows配置\"><a href=\"#windows配置\" class=\"headerlink\" title=\"windows配置\"></a>windows配置</h2><p><a href=\"https://www.cygwin.com/setup-x86_64.exe\">cygwin下载地址</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">windows</span></span><br><span class=\"line\">uid = Administrator    </span><br><span class=\"line\">gid = Users  </span><br><span class=\"line\">use chroot = yes</span><br><span class=\"line\">address = 0.0.0.0</span><br><span class=\"line\">port 873    </span><br><span class=\"line\">log file = /var/log/rsyncd.log</span><br><span class=\"line\">pid file = /var/run/rsyncd.pid</span><br><span class=\"line\">hosts allow = *</span><br><span class=\"line\">[wwwroot]        </span><br><span class=\"line\">path = /cygdrive/c/data</span><br><span class=\"line\">comment = Document Root </span><br><span class=\"line\">read only = yes    </span><br><span class=\"line\">dont compress = *.gz *.bz2 *.tgz *.zip *.rar *.z  </span><br><span class=\"line\">auth users = backuper srs</span><br><span class=\"line\">secrets file = /etc/rsyncd_users.db</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">在cygwin终端执行</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;backuperpasswd&#x27;</span> |<span class=\"built_in\">tee</span> /etc/client.pass &amp;&amp; <span class=\"built_in\">chmod</span> 600 /etc/client.pass</span>      </span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">rsync -avzPS --password-file=/etc/client.pass backuper@127.0.0.1::wwwroot /cygdrive/c/rsync_daemon</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"额外\"><a href=\"#额外\" class=\"headerlink\" title=\"额外\"></a>额外</h1><h2 id=\"大量文件添加失败重试\"><a href=\"#大量文件添加失败重试\" class=\"headerlink\" title=\"大量文件添加失败重试\"></a>大量文件添加失败重试</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">配置参数</span></span><br><span class=\"line\">PASSWORD=&#x27;pass&#x27;</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">REMOTE_PATH=<span class=\"string\">&quot;administrator@1.1.1.1:/cygdrive/c/data&quot;</span></span></span><br><span class=\"line\">REMOTE_PATH=&quot;root@127.0.0.1:/data&quot;</span><br><span class=\"line\">LOCAL_PATH=&quot;/tmp/rsync/&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">windows必选</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">RSYNC_PATH=<span class=\"string\">&quot;C:\\\\cygwin64\\\\bin\\\\rsync.exe&quot;</span></span></span><br><span class=\"line\">LOG_FILE=&quot;rsync.log&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">最大重试次数</span></span><br><span class=\"line\">MAX_RETRIES=10</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">重试间隔（秒）</span></span><br><span class=\"line\">RETRY_INTERVAL=60</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">循环重试</span></span><br><span class=\"line\">retry=0</span><br><span class=\"line\">while [ $retry -lt $MAX_RETRIES ]; do</span><br><span class=\"line\">  echo &quot;$(date) - 第 $((retry+1)) 次尝试同步...&quot; | tee -a &quot;$LOG_FILE&quot;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\">执行同步命令</span></span><br><span class=\"line\">  sshpass -p &quot;$PASSWORD&quot; rsync -avzSP \\</span><br><span class=\"line\">    --log-file=&quot;$LOG_FILE&quot; \\</span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\"> --rsync-path=<span class=\"string\">&quot;<span class=\"variable\">$RSYNC_PATH</span>&quot;</span> \\</span></span><br><span class=\"line\"><span class=\"language-bash\">    --<span class=\"built_in\">timeout</span>=30 \\</span></span><br><span class=\"line\"><span class=\"language-bash\">    --contimeout=30 \\</span></span><br><span class=\"line\"><span class=\"language-bash\">    <span class=\"string\">&quot;<span class=\"variable\">$REMOTE_PATH</span>&quot;</span> <span class=\"string\">&quot;<span class=\"variable\">$LOCAL_PATH</span>&quot;</span></span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\">检查退出状态码</span></span><br><span class=\"line\">  if [ $? -eq 0 ]; then</span><br><span class=\"line\">    echo &quot;$(date) - 同步成功！&quot; | tee -a &quot;$LOG_FILE&quot;</span><br><span class=\"line\">    exit 0</span><br><span class=\"line\">  else</span><br><span class=\"line\">    echo &quot;$(date) - 同步失败，$&#123;RETRY_INTERVAL&#125;秒后重试...&quot; | tee -a &quot;$LOG_FILE&quot;</span><br><span class=\"line\">    sleep $RETRY_INTERVAL</span><br><span class=\"line\">    ((retry++))</span><br><span class=\"line\">  fi</span><br><span class=\"line\">done</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;$(date) - 达到最大重试次数，同步终止。&quot; | tee -a &quot;$LOG_FILE&quot;</span><br><span class=\"line\">exit 1</span><br></pre></td></tr></table></figure>\n<p><strong>两种同步模式</strong><br><br><strong>1.服务端推送；需要每个客户端启动rsync –deamon添加配置文件不然需要使用ssh模式涉及密码不安全,监控服务端文件变化去同步客户端节点大部分情况用这种，弊端就是节点较多服务端同步起来负载会比较高</strong><br><br><strong>2.客户端推送；只需要在服务端配置rsync –deamon监控客户端文件变化去推送数据到服务端，由于多节点存在数据不一致这种情况建议不使用–delete不然一个节点操作删除，服务端也会被删除；或者使用客户端拉取这种情况只有通过定时任务实现就无法使用监控程序了</strong></p>\n<h2 id=\"rsync-inotify\"><a href=\"#rsync-inotify\" class=\"headerlink\" title=\"rsync+inotify\"></a>rsync+inotify</h2><ul>\n<li>异地备份cdn节点少量同步；变动不频繁<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">inotify-tools 包含 inotifywatch  inotifywait两个命令</span><br><span class=\"line\">inotifywatch -v -t 60 -r /var/log #统计次数</span><br><span class=\"line\">inotifywait -mrq --format &quot;%T %w%f %e&quot; --timefmt &quot;%F-%T&quot; -e create,delete,move,modify,attrib /data/ |  </span><br><span class=\"line\">  while read TIME FILE EVENT; do</span><br><span class=\"line\">  echo &quot;时间: $TIME | 文件: $FILE | 事件: $EVENT &quot;</span><br><span class=\"line\">done</span><br><span class=\"line\"><span class=\"meta prompt_\">%</span><span class=\"language-bash\">T\t时间戳（需配合 --timefmt 定义格式）</span></span><br><span class=\"line\"><span class=\"meta prompt_\">%</span><span class=\"language-bash\">w\t监控目录的路径（绝对或相对路径）</span></span><br><span class=\"line\"><span class=\"meta prompt_\">%</span><span class=\"language-bash\">f\t触发事件的文件名（不含路径）</span></span><br><span class=\"line\"><span class=\"meta prompt_\">%</span><span class=\"language-bash\">e\t事件类型（多个事件用逗号分隔）</span></span><br><span class=\"line\"></span><br><span class=\"line\">-m 持续监听</span><br><span class=\"line\">-r 使用递归形式监视目录</span><br><span class=\"line\">-q 减少冗余信息，只打印出需要的信息</span><br><span class=\"line\">-e 指定要监视的事件，多个时间使用逗号隔开</span><br><span class=\"line\">–timefmt 时间格式</span><br><span class=\"line\">–format 监听到的文件变化的信息</span><br><span class=\"line\"></span><br><span class=\"line\">access\t文件被读取</span><br><span class=\"line\">modify\t文件内容被修改</span><br><span class=\"line\">attrib\t文件元数据（如权限、时间戳）变更</span><br><span class=\"line\">create\t文件/目录创建</span><br><span class=\"line\">delete\t文件/目录删除</span><br><span class=\"line\">open, close\t文件被打开或关闭</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">在client运行脚本，client目录发送变化会同步到rsync服务端</span></span><br><span class=\"line\">cat &gt; ./inotify_rsync.sh &lt;&lt; &#x27;EOF&#x27;  </span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Rsync配置</span></span><br><span class=\"line\">RSYNC_CMD=&quot;rsync -avzS --partial --delay-updates --delete --password-file=/etc/client.pass /data/ backuper@10.0.1.122::wwwroot&quot;</span><br><span class=\"line\">LOG_FILE=&quot;/var/log/inotify_rsync.log&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建日志文件（如果不存在）</span></span><br><span class=\"line\">touch &quot;$LOG_FILE&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">开始监控并处理事件</span></span><br><span class=\"line\">inotifywait -mrq --format &quot;%T %w%f %e&quot; --timefmt &quot;%F-%T&quot; -e create,delete,move,modify,attrib /data/ |  </span><br><span class=\"line\">while read TIME FILE EVENT; do</span><br><span class=\"line\">    # 记录事件到日志</span><br><span class=\"line\">    echo &quot;[事件] 时间: $TIME | 文件: $FILE | 操作: $EVENT&quot; &gt;&gt; &quot;$LOG_FILE&quot;</span><br><span class=\"line\">    </span><br><span class=\"line\">    # 执行rsync同步（添加错误重试机制）</span><br><span class=\"line\">    if ! $RSYNC_CMD &gt;&gt; &quot;$LOG_FILE&quot; 2&gt;&amp;1; then</span><br><span class=\"line\">        echo &quot;[错误] 同步失败！时间: $(date &#x27;+%F-%T&#x27;)&quot; &gt;&gt; &quot;$LOG_FILE&quot;</span><br><span class=\"line\">    else</span><br><span class=\"line\">        echo &quot;[同步] 成功完成！时间: $(date &#x27;+%F-%T&#x27;)&quot; &gt;&gt; &quot;$LOG_FILE&quot;</span><br><span class=\"line\">    fi</span><br><span class=\"line\">done</span><br><span class=\"line\">EOF</span><br><span class=\"line\">chmod +x inotify_rsync.sh</span><br><span class=\"line\">cat &gt;  /etc/systemd/system/inotify_rsync.service &lt;&lt; &#x27;EOF&#x27;  </span><br><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=Auto Sync Service via inotify+rsync</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=simple</span><br><span class=\"line\">User=root</span><br><span class=\"line\">ExecStart=/tmp/rsync_daemon/inotify_rsync.sh</span><br><span class=\"line\">Restart=always</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"rsync-lsyncd\"><a href=\"#rsync-lsyncd\" class=\"headerlink\" title=\"rsync+lsyncd\"></a>rsync+lsyncd</h2><ul>\n<li>适合大量数据同步场景；变动频繁<br><br><a href=\"https://lsyncd.github.io/lsyncd/manual/config/layer4/\">官方文档参数解读</a><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">ubuntu /etc/lsyncd/lsyncd.conf.lua</span></span><br><span class=\"line\">cat &gt; /etc/lsyncd.conf &lt;&lt; &#x27;EOF&#x27;</span><br><span class=\"line\">settings &#123;</span><br><span class=\"line\">  logfile = &quot;/var/log/lsyncd.log&quot;,</span><br><span class=\"line\">  statusFile = &quot;/var/log/lsyncd.status&quot;,</span><br><span class=\"line\">  insist = true,</span><br><span class=\"line\">  statusInterval = 10</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">sync &#123;</span><br><span class=\"line\">  default.rsync,</span><br><span class=\"line\">  source = &quot;/tmp/rsync_ly&quot;,</span><br><span class=\"line\">  target = &quot;backuper@10.0.1.122::wwwroot&quot;,</span><br><span class=\"line\">  -- excludeFrom = &quot;/etc/rsyncd.d/rsync_exclude.lst&quot;,</span><br><span class=\"line\">  delete = true,</span><br><span class=\"line\">  delay = 20,</span><br><span class=\"line\">  maxDelays = 1,</span><br><span class=\"line\">  rsync = &#123;</span><br><span class=\"line\">    binary = &quot;/usr/bin/rsync&quot;,</span><br><span class=\"line\">    archive = true,</span><br><span class=\"line\">    compress = true,</span><br><span class=\"line\">    verbose = false,</span><br><span class=\"line\">    password_file = &quot;/etc/client.pass&quot;,</span><br><span class=\"line\">    _extra    = &#123;</span><br><span class=\"line\">            &quot;--partial&quot;,          </span><br><span class=\"line\">            &quot;--timeout=300&quot;    </span><br><span class=\"line\">  --          &quot;--bwlimit=5000&quot;      </span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">========================================================</span><br><span class=\"line\"></span><br><span class=\"line\">-- 全局配置：</span><br><span class=\"line\">settings &#123;</span><br><span class=\"line\">        logfile =&quot;/var/log/lsyncd/lsyncd.log&quot;, -- 定义日志文件</span><br><span class=\"line\">        statusFile =&quot;/var/log/lsyncd/lsyncd.status&quot;,  -- 定义状态文件</span><br><span class=\"line\">        pidfile = &quot;/var/log/lsyncd/lsyncd.pid&quot;,-- 定义pid文件</span><br><span class=\"line\">        inotifyMode = &quot;CloseWrite&quot;,-- 指定inotify监控的事件，默认是CloseWrite，还可以是Modify或CloseWrite or Modify</span><br><span class=\"line\">      \tmaxProcesses = 7,-- 同步进程的最大个数。假如同时有20个文件需要同步，而maxProcesses = 8，则最大能看到有8个rysnc进程</span><br><span class=\"line\">        nodaemon =true,-- 表示不启用守护模式，默认；</span><br><span class=\"line\">        maxDelays = 1, --  累计到多少所监控的事件激活一次同步，即使后面的delay延迟时间还未到</span><br><span class=\"line\">        inist = ture --keep running at startup although one or more targets failed due to not being reachable.  一般不用配置</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">-- sync部分配置：</span><br><span class=\"line\">sync &#123;</span><br><span class=\"line\">      default.rsync,     -- rsync、rsyncssh、direct三种模式：</span><br><span class=\"line\">    -- default.rsync ：本地目录间同步，使用rsync，也可以达到使用ssh形式的远程rsync效果，或daemon方式连接远程rsyncd进程；</span><br><span class=\"line\">    -- default.direct ：本地目录间同步，使用cp、rm等命令完成差异文件备份；</span><br><span class=\"line\">    -- default.rsyncssh ：同步到远程主机目录，rsync的ssh模式，需要使用key来认证；</span><br><span class=\"line\">      source = &quot;/tmp/src&quot;, -- source 同步的源目录，使用绝对路径</span><br><span class=\"line\">      target = &quot;/tmp/dest&quot;, -- target 定义目的地址.对应不同的模式有几种写法:</span><br><span class=\"line\">    \t-- /tmp/dest ：本地目录同步，可用于direct和rsync模式；</span><br><span class=\"line\">    \t-- 10.4.7.10:/tmp/dest ：同步到远程服务器目录，可用于rsync和rsyncssh模式，拼接的命令类似于/usr/bin/rsync -ltsd --delete --include-from=- --exclude=* SOURCE TARGET，剩下的就是rsync的内容了，比如指定username，免密码同步；</span><br><span class=\"line\">   \t\t-- 10.4.7.10::module ：同步到远程服务器目录，用于rsync模式；</span><br><span class=\"line\">      init = true,  -- init 这是一个优化选项，当init = false，只同步进程启动以后发生改动事件的文件，原有的目录即使有差异也不会同步。默认是true；</span><br><span class=\"line\">      delay = 3, -- delay 累计事件，等待rsync同步延时时间，默认15秒（最大累计到1000个不可合并的事件）。也就是15s内监控目录下发生的改动，会累积到一次rsync同步，避免过于频繁的同步。（可合并的意思是，15s内两次修改了同一文件，最后只同步最新的文件）;</span><br><span class=\"line\">      excludeFrom = &quot;/etc/rsyncd.d/rsync_exclude.lst&quot;,  -- excludeFrom 排除选项，后面指定排除的列表文件，如excludeFrom = &quot;/etc/lsyncd.exclude&quot;，如果是简单的排除，可以使用exclude = LIST。这里的排除规则写法与原生rsync有点不同，更为简单：</span><br><span class=\"line\">\t\t-- 监控路径里的任何部分匹配到一个文本，都会被排除，例如/bin/foo/bar可以匹配规则foo</span><br><span class=\"line\">\t\t-- 如果规则以斜线/开头，则从头开始要匹配全部</span><br><span class=\"line\">\t\t-- 如果规则以/结尾，则要匹配监控路径的末尾</span><br><span class=\"line\">\t\t-- ?匹配任何字符，但不包括/</span><br><span class=\"line\">\t\t-- *匹配0或多个字符，但不包括/</span><br><span class=\"line\">\t\t-- **匹配0或多个字符，可以是/</span><br><span class=\"line\">      delete\t=\t&#x27;running&#x27;,  -- delete 为了保持target与souce完全同步，Lsyncd默认会delete = true来允许同步删除。它除了false，还有startup、running值：</span><br><span class=\"line\">      -- delete\t=\ttrue       # 在目标上删除源中没有的内容。在启动时以及在正常操作期间删除的内容</span><br><span class=\"line\">      -- delete\t=\tfalse      # 不会删除目标上的任何文件。不在启动时也不在正常操作上</span><br><span class=\"line\">      -- delete\t=\t&#x27;startup&#x27;  # Lsyncd将在启动时删除目标上的文件，但不会在正常操作时删除</span><br><span class=\"line\">      -- delete\t=\t&#x27;running&#x27;  # Lsyncd在启动时不会删除目标上的文件，但会删除正常操作期间删除的文件</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">-- rsync部分配置：    </span><br><span class=\"line\">      -- delete和exclude本来都是rsync的选项，上面是配置在sync中的，这样做的原因是为了减少rsync的开销</span><br><span class=\"line\">      rsync = &#123;</span><br><span class=\"line\">             bwlimit=200, -- bwlimit 限速，单位kb/s，与rsync相同（这么重要的选项在文档里竟然没有标出）；</span><br><span class=\"line\">             binary = &quot;/usr/bin/rsync&quot;, -- rsync可执行程序地址，默认/usr/bin/rsync</span><br><span class=\"line\">             archive = true, -- 默认false，以递归方式传输文件，并保持所有文件属性</span><br><span class=\"line\">             compress = true,-- 压缩传输默认为true。在带宽与cpu负载之间权衡，本地目录同步可以考虑把它设为false；</span><br><span class=\"line\">             verbose = true,--同步详细模式输出</span><br><span class=\"line\">        \t perms = true -- perms 保留文件权限,默认为true；</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">-- excludeFrom = <span class=\"string\">&quot;/etc/rsyncd.d/rsync_exclude.lst&quot;</span>,</span> </span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">*.<span class=\"built_in\">log</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">/cache/</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">/temp/</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">.git/</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n","excerpt":"","more":"<h1 id=\"命令主要参数\"><a href=\"#命令主要参数\" class=\"headerlink\" title=\"命令主要参数\"></a>命令主要参数</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-a, ––archive\t归档模式，表示以递归方式传输文件，并保持所有文件属性，等价于 -rlptgoD (注意不包括 -H)</span><br><span class=\"line\">-r, ––recursive\t对子目录以递归模式处理</span><br><span class=\"line\">-l, ––links\t保持符号链接文件</span><br><span class=\"line\">-H, ––hard-links\t保持硬链接文件</span><br><span class=\"line\">-p, ––perms\t保持文件权限</span><br><span class=\"line\">-t, ––times\t保持文件时间信息</span><br><span class=\"line\">-g, ––group\t保持文件属组信息</span><br><span class=\"line\">-o, ––owner\t保持文件属主信息 (super-user only)</span><br><span class=\"line\">-D\t保持设备文件和特殊文件 (super-user only)</span><br><span class=\"line\">-z, ––compress\t在传输文件时进行压缩处理</span><br><span class=\"line\">––exclude=PATTERN\t指定排除一个不需要传输的文件匹配模式</span><br><span class=\"line\">––exclude-from=FILE\t从 FILE 中读取排除规则</span><br><span class=\"line\">––include=PATTERN\t指定需要传输的文件匹配模式</span><br><span class=\"line\">––include-from=FILE\t从 FILE 中读取包含规则</span><br><span class=\"line\">––copy-unsafe-links\t拷贝指向SRC路径目录树以外的链接文件</span><br><span class=\"line\">––safe-links\t忽略指向SRC路径目录树以外的链接文件（默认）</span><br><span class=\"line\">––existing\t仅仅更新那些已经存在于接收端的文件，而不备份那些新创建的文件</span><br><span class=\"line\">––ignore-existing\t忽略那些已经存在于接收端的文件，仅备份那些新创建的文件</span><br><span class=\"line\">-b, ––backup\t当有变化时，对目标目录中的旧版文件进行备份</span><br><span class=\"line\">––backup-dir=DIR\t与 -b 结合使用，将备份的文件存到 DIR 目录中</span><br><span class=\"line\">––link-dest=DIR\t当文件未改变时基于 DIR 创建硬链接文件</span><br><span class=\"line\">––delete\t删除那些接收端还有而发送端已经不存在的文件</span><br><span class=\"line\">––delete-before\t接收者在传输之前进行删除操作 (默认)</span><br><span class=\"line\">––delete-during\t接收者在传输过程中进行删除操作</span><br><span class=\"line\">––delete-after\t接收者在传输之后进行删除操作</span><br><span class=\"line\">––delete-excluded\t在接收方同时删除被排除的文件</span><br><span class=\"line\">-e, ––rsh=COMMAND\t指定替代 rsh 的 shell 程序</span><br><span class=\"line\">––ignore-errors\t即使出现 I/O 错误也进行删除</span><br><span class=\"line\">––partial\t保留那些因故没有完全传输的文件，以是加快随后的再次传输</span><br><span class=\"line\">––progress\t在传输时显示传输过程</span><br><span class=\"line\">-P\t等价于 ––partial ––progress</span><br><span class=\"line\">––delay-updates\t将正在更新的文件先保存到一个临时目录（默认为 “.~tmp~”），待传输完毕再更新目标文件</span><br><span class=\"line\">-v, ––verbose\t详细输出模式</span><br><span class=\"line\">-q, ––quiet\t精简输出模式</span><br><span class=\"line\">-h, ––human-readable\t输出文件大小使用易读的单位（如，K，M等）</span><br><span class=\"line\">-n, ––dry-run\t显示哪些文件将被传输</span><br><span class=\"line\">––list-only\t仅仅列出文件而不进行复制</span><br><span class=\"line\">––rsyncpath=PROGRAM\t指定远程服务器上的 rsync 命令所在路径</span><br><span class=\"line\">––password-file=FILE\t从 FILE 中读取口令，以避免在终端上输入口令，通常在 cron 中连接 rsync 服务器时使用</span><br><span class=\"line\">-4, ––ipv4\t使用 IPv4</span><br><span class=\"line\">-6, ––ipv6\t使用 IPv6</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"命令行模式\"><a href=\"#命令行模式\" class=\"headerlink\" title=\"命令行模式\"></a>命令行模式</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">常用参数</span></span><br><span class=\"line\">rsync -avzSP \\ #端点续传整合小文件</span><br><span class=\"line\">  --contimeout=120 \\    # 连接超时 120 秒</span><br><span class=\"line\">  --timeout=60 \\       # 数据传输超时 60 秒</span><br><span class=\"line\">  --delay-updates \\    # 原子性替换文件</span><br><span class=\"line\">  --log-file=rsync.log  #日志记录</span><br><span class=\"line\">/cygdrive/c/     /cygdrive/d/ #windows必须加上/cygdrive前缀</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">可选参数 --delay-updates 需要目标磁盘空间较大，对正在进行io操作的先跳过后更新</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">--bwlimit=6000 限制带宽在6MB/s</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">--exclude=<span class=\"string\">&#x27;*.log&#x27;</span> 过滤文件不传输支持正则</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">--delete  保证源和目标完全一致</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">--password-file=/etc/rsyncd_users.db backuper@127.0.0.1::wwwroot</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">/lib/systemd/system/rsync.service</span></span><br><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=fast remote file copy program daemon</span><br><span class=\"line\">ConditionPathExists=/etc/rsyncd.conf</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">ExecStart=/usr/bin/rsync --daemon --no-detach</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"后台server模式\"><a href=\"#后台server模式\" class=\"headerlink\" title=\"后台server模式\"></a>后台server模式</h1><h2 id=\"linux配置\"><a href=\"#linux配置\" class=\"headerlink\" title=\"linux配置\"></a>linux配置</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt;&gt; /etc/rsyncd.conf  &lt;&lt; EOF</span><br><span class=\"line\">uid = root\t\t\t\t\t     </span><br><span class=\"line\">gid = root\t\t\t\t\t    </span><br><span class=\"line\">use chroot = yes\t\t\t\t\t</span><br><span class=\"line\">address = 0.0.0.0\t\t\t</span><br><span class=\"line\">port 873\t\t\t\t\t\t    </span><br><span class=\"line\">log file = /var/log/rsyncd.log\t\t</span><br><span class=\"line\">pid file = /var/run/rsyncd.pid\t\t</span><br><span class=\"line\">hosts allow = *\t\t</span><br><span class=\"line\">[wwwroot]\t\t\t\t\t        </span><br><span class=\"line\">path = /data/\t\t\t\t</span><br><span class=\"line\">comment = Document Root </span><br><span class=\"line\">read only = yes\t\t\t\t\t    </span><br><span class=\"line\">dont compress = *.gz *.bz2 *.tgz *.zip *.rar *.z  </span><br><span class=\"line\">auth users = backuper srs\t\t\t</span><br><span class=\"line\">secrets file = /etc/rsyncd_users.db\t\t\t      </span><br><span class=\"line\">EOF</span><br><span class=\"line\">echo &#x27;backuper:backuperpasswd&#x27; |tee -a /etc/rsyncd_users.db\t</span><br><span class=\"line\">chmod 600 /etc/rsyncd_users.db</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">客户端操作</span>\t</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;backuperpasswd&#x27;</span> |<span class=\"built_in\">tee</span> /etc/client.pass &amp;&amp; <span class=\"built_in\">chmod</span> 600 /etc/client.pass</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">拉取</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">rsync -avzPS --password-file=/etc/client.pass backuper@127.0.0.1::wwwroot /tmp/rsync_daemon</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">发送；相当于把/tmp/rsync_daemon同步到/data/ <span class=\"built_in\">read</span> only 要设置成no</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">rsync -avzPS --password-file=/etc/client.pass /tmp/rsync_daemon backuper@127.0.0.1::wwwroot</span> </span><br><span class=\"line\">==================================================================</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">正常配置里面不能有注释</span></span><br><span class=\"line\">uid = root\t\t\t\t\t     </span><br><span class=\"line\">gid = root\t\t\t\t\t    </span><br><span class=\"line\">use chroot = yes\t\t\t\t\t#禁锢在源目录</span><br><span class=\"line\">address = 0.0.0.0\t\t\t#监听地址，监听本机地址</span><br><span class=\"line\">port 873\t\t\t\t\t\t    #监听端口 tcp/udp 873，</span><br><span class=\"line\">log file = /var/log/rsyncd.log\t\t#日志文件位置</span><br><span class=\"line\">pid file = /var/run/rsyncd.pid\t\t#存放进程 ID 的文件位置</span><br><span class=\"line\">hosts allow = *\t\t#允许同步的客户机网段</span><br><span class=\"line\">max connections = 5 #最大五个连接，默认没有限制</span><br><span class=\"line\">[wwwroot]\t\t\t\t\t        #共享模块名称</span><br><span class=\"line\">path = /data\t\t\t\t#源目录的实际路径（同步的目录）</span><br><span class=\"line\">comment = Document Root </span><br><span class=\"line\">read only = yes\t\t\t\t\t    #是否为只读</span><br><span class=\"line\">dont compress = *.gz *.bz2 *.tgz *.zip *.rar *.z  #同步时不再压缩的文件类型</span><br><span class=\"line\">auth users = backuper srs\t\t\t#授权账户，多个账号以空格分隔</span><br><span class=\"line\">secrets file = /etc/rsyncd_users.db\t\t\t      #存放账户信息的数据文件</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n<h2 id=\"windows配置\"><a href=\"#windows配置\" class=\"headerlink\" title=\"windows配置\"></a>windows配置</h2><p><a href=\"https://www.cygwin.com/setup-x86_64.exe\">cygwin下载地址</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">windows</span></span><br><span class=\"line\">uid = Administrator    </span><br><span class=\"line\">gid = Users  </span><br><span class=\"line\">use chroot = yes</span><br><span class=\"line\">address = 0.0.0.0</span><br><span class=\"line\">port 873    </span><br><span class=\"line\">log file = /var/log/rsyncd.log</span><br><span class=\"line\">pid file = /var/run/rsyncd.pid</span><br><span class=\"line\">hosts allow = *</span><br><span class=\"line\">[wwwroot]        </span><br><span class=\"line\">path = /cygdrive/c/data</span><br><span class=\"line\">comment = Document Root </span><br><span class=\"line\">read only = yes    </span><br><span class=\"line\">dont compress = *.gz *.bz2 *.tgz *.zip *.rar *.z  </span><br><span class=\"line\">auth users = backuper srs</span><br><span class=\"line\">secrets file = /etc/rsyncd_users.db</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">在cygwin终端执行</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;backuperpasswd&#x27;</span> |<span class=\"built_in\">tee</span> /etc/client.pass &amp;&amp; <span class=\"built_in\">chmod</span> 600 /etc/client.pass</span>      </span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">rsync -avzPS --password-file=/etc/client.pass backuper@127.0.0.1::wwwroot /cygdrive/c/rsync_daemon</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"额外\"><a href=\"#额外\" class=\"headerlink\" title=\"额外\"></a>额外</h1><h2 id=\"大量文件添加失败重试\"><a href=\"#大量文件添加失败重试\" class=\"headerlink\" title=\"大量文件添加失败重试\"></a>大量文件添加失败重试</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">配置参数</span></span><br><span class=\"line\">PASSWORD=&#x27;pass&#x27;</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">REMOTE_PATH=<span class=\"string\">&quot;administrator@1.1.1.1:/cygdrive/c/data&quot;</span></span></span><br><span class=\"line\">REMOTE_PATH=&quot;root@127.0.0.1:/data&quot;</span><br><span class=\"line\">LOCAL_PATH=&quot;/tmp/rsync/&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">windows必选</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">RSYNC_PATH=<span class=\"string\">&quot;C:\\\\cygwin64\\\\bin\\\\rsync.exe&quot;</span></span></span><br><span class=\"line\">LOG_FILE=&quot;rsync.log&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">最大重试次数</span></span><br><span class=\"line\">MAX_RETRIES=10</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">重试间隔（秒）</span></span><br><span class=\"line\">RETRY_INTERVAL=60</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">循环重试</span></span><br><span class=\"line\">retry=0</span><br><span class=\"line\">while [ $retry -lt $MAX_RETRIES ]; do</span><br><span class=\"line\">  echo &quot;$(date) - 第 $((retry+1)) 次尝试同步...&quot; | tee -a &quot;$LOG_FILE&quot;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\">执行同步命令</span></span><br><span class=\"line\">  sshpass -p &quot;$PASSWORD&quot; rsync -avzSP \\</span><br><span class=\"line\">    --log-file=&quot;$LOG_FILE&quot; \\</span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\"> --rsync-path=<span class=\"string\">&quot;<span class=\"variable\">$RSYNC_PATH</span>&quot;</span> \\</span></span><br><span class=\"line\"><span class=\"language-bash\">    --<span class=\"built_in\">timeout</span>=30 \\</span></span><br><span class=\"line\"><span class=\"language-bash\">    --contimeout=30 \\</span></span><br><span class=\"line\"><span class=\"language-bash\">    <span class=\"string\">&quot;<span class=\"variable\">$REMOTE_PATH</span>&quot;</span> <span class=\"string\">&quot;<span class=\"variable\">$LOCAL_PATH</span>&quot;</span></span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"meta prompt_\">  # </span><span class=\"language-bash\">检查退出状态码</span></span><br><span class=\"line\">  if [ $? -eq 0 ]; then</span><br><span class=\"line\">    echo &quot;$(date) - 同步成功！&quot; | tee -a &quot;$LOG_FILE&quot;</span><br><span class=\"line\">    exit 0</span><br><span class=\"line\">  else</span><br><span class=\"line\">    echo &quot;$(date) - 同步失败，$&#123;RETRY_INTERVAL&#125;秒后重试...&quot; | tee -a &quot;$LOG_FILE&quot;</span><br><span class=\"line\">    sleep $RETRY_INTERVAL</span><br><span class=\"line\">    ((retry++))</span><br><span class=\"line\">  fi</span><br><span class=\"line\">done</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;$(date) - 达到最大重试次数，同步终止。&quot; | tee -a &quot;$LOG_FILE&quot;</span><br><span class=\"line\">exit 1</span><br></pre></td></tr></table></figure>\n<p><strong>两种同步模式</strong><br><br><strong>1.服务端推送；需要每个客户端启动rsync –deamon添加配置文件不然需要使用ssh模式涉及密码不安全,监控服务端文件变化去同步客户端节点大部分情况用这种，弊端就是节点较多服务端同步起来负载会比较高</strong><br><br><strong>2.客户端推送；只需要在服务端配置rsync –deamon监控客户端文件变化去推送数据到服务端，由于多节点存在数据不一致这种情况建议不使用–delete不然一个节点操作删除，服务端也会被删除；或者使用客户端拉取这种情况只有通过定时任务实现就无法使用监控程序了</strong></p>\n<h2 id=\"rsync-inotify\"><a href=\"#rsync-inotify\" class=\"headerlink\" title=\"rsync+inotify\"></a>rsync+inotify</h2><ul>\n<li>异地备份cdn节点少量同步；变动不频繁<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">inotify-tools 包含 inotifywatch  inotifywait两个命令</span><br><span class=\"line\">inotifywatch -v -t 60 -r /var/log #统计次数</span><br><span class=\"line\">inotifywait -mrq --format &quot;%T %w%f %e&quot; --timefmt &quot;%F-%T&quot; -e create,delete,move,modify,attrib /data/ |  </span><br><span class=\"line\">  while read TIME FILE EVENT; do</span><br><span class=\"line\">  echo &quot;时间: $TIME | 文件: $FILE | 事件: $EVENT &quot;</span><br><span class=\"line\">done</span><br><span class=\"line\"><span class=\"meta prompt_\">%</span><span class=\"language-bash\">T\t时间戳（需配合 --timefmt 定义格式）</span></span><br><span class=\"line\"><span class=\"meta prompt_\">%</span><span class=\"language-bash\">w\t监控目录的路径（绝对或相对路径）</span></span><br><span class=\"line\"><span class=\"meta prompt_\">%</span><span class=\"language-bash\">f\t触发事件的文件名（不含路径）</span></span><br><span class=\"line\"><span class=\"meta prompt_\">%</span><span class=\"language-bash\">e\t事件类型（多个事件用逗号分隔）</span></span><br><span class=\"line\"></span><br><span class=\"line\">-m 持续监听</span><br><span class=\"line\">-r 使用递归形式监视目录</span><br><span class=\"line\">-q 减少冗余信息，只打印出需要的信息</span><br><span class=\"line\">-e 指定要监视的事件，多个时间使用逗号隔开</span><br><span class=\"line\">–timefmt 时间格式</span><br><span class=\"line\">–format 监听到的文件变化的信息</span><br><span class=\"line\"></span><br><span class=\"line\">access\t文件被读取</span><br><span class=\"line\">modify\t文件内容被修改</span><br><span class=\"line\">attrib\t文件元数据（如权限、时间戳）变更</span><br><span class=\"line\">create\t文件/目录创建</span><br><span class=\"line\">delete\t文件/目录删除</span><br><span class=\"line\">open, close\t文件被打开或关闭</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">在client运行脚本，client目录发送变化会同步到rsync服务端</span></span><br><span class=\"line\">cat &gt; ./inotify_rsync.sh &lt;&lt; &#x27;EOF&#x27;  </span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Rsync配置</span></span><br><span class=\"line\">RSYNC_CMD=&quot;rsync -avzS --partial --delay-updates --delete --password-file=/etc/client.pass /data/ backuper@10.0.1.122::wwwroot&quot;</span><br><span class=\"line\">LOG_FILE=&quot;/var/log/inotify_rsync.log&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建日志文件（如果不存在）</span></span><br><span class=\"line\">touch &quot;$LOG_FILE&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">开始监控并处理事件</span></span><br><span class=\"line\">inotifywait -mrq --format &quot;%T %w%f %e&quot; --timefmt &quot;%F-%T&quot; -e create,delete,move,modify,attrib /data/ |  </span><br><span class=\"line\">while read TIME FILE EVENT; do</span><br><span class=\"line\">    # 记录事件到日志</span><br><span class=\"line\">    echo &quot;[事件] 时间: $TIME | 文件: $FILE | 操作: $EVENT&quot; &gt;&gt; &quot;$LOG_FILE&quot;</span><br><span class=\"line\">    </span><br><span class=\"line\">    # 执行rsync同步（添加错误重试机制）</span><br><span class=\"line\">    if ! $RSYNC_CMD &gt;&gt; &quot;$LOG_FILE&quot; 2&gt;&amp;1; then</span><br><span class=\"line\">        echo &quot;[错误] 同步失败！时间: $(date &#x27;+%F-%T&#x27;)&quot; &gt;&gt; &quot;$LOG_FILE&quot;</span><br><span class=\"line\">    else</span><br><span class=\"line\">        echo &quot;[同步] 成功完成！时间: $(date &#x27;+%F-%T&#x27;)&quot; &gt;&gt; &quot;$LOG_FILE&quot;</span><br><span class=\"line\">    fi</span><br><span class=\"line\">done</span><br><span class=\"line\">EOF</span><br><span class=\"line\">chmod +x inotify_rsync.sh</span><br><span class=\"line\">cat &gt;  /etc/systemd/system/inotify_rsync.service &lt;&lt; &#x27;EOF&#x27;  </span><br><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=Auto Sync Service via inotify+rsync</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=simple</span><br><span class=\"line\">User=root</span><br><span class=\"line\">ExecStart=/tmp/rsync_daemon/inotify_rsync.sh</span><br><span class=\"line\">Restart=always</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"rsync-lsyncd\"><a href=\"#rsync-lsyncd\" class=\"headerlink\" title=\"rsync+lsyncd\"></a>rsync+lsyncd</h2><ul>\n<li>适合大量数据同步场景；变动频繁<br><br><a href=\"https://lsyncd.github.io/lsyncd/manual/config/layer4/\">官方文档参数解读</a><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">ubuntu /etc/lsyncd/lsyncd.conf.lua</span></span><br><span class=\"line\">cat &gt; /etc/lsyncd.conf &lt;&lt; &#x27;EOF&#x27;</span><br><span class=\"line\">settings &#123;</span><br><span class=\"line\">  logfile = &quot;/var/log/lsyncd.log&quot;,</span><br><span class=\"line\">  statusFile = &quot;/var/log/lsyncd.status&quot;,</span><br><span class=\"line\">  insist = true,</span><br><span class=\"line\">  statusInterval = 10</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">sync &#123;</span><br><span class=\"line\">  default.rsync,</span><br><span class=\"line\">  source = &quot;/tmp/rsync_ly&quot;,</span><br><span class=\"line\">  target = &quot;backuper@10.0.1.122::wwwroot&quot;,</span><br><span class=\"line\">  -- excludeFrom = &quot;/etc/rsyncd.d/rsync_exclude.lst&quot;,</span><br><span class=\"line\">  delete = true,</span><br><span class=\"line\">  delay = 20,</span><br><span class=\"line\">  maxDelays = 1,</span><br><span class=\"line\">  rsync = &#123;</span><br><span class=\"line\">    binary = &quot;/usr/bin/rsync&quot;,</span><br><span class=\"line\">    archive = true,</span><br><span class=\"line\">    compress = true,</span><br><span class=\"line\">    verbose = false,</span><br><span class=\"line\">    password_file = &quot;/etc/client.pass&quot;,</span><br><span class=\"line\">    _extra    = &#123;</span><br><span class=\"line\">            &quot;--partial&quot;,          </span><br><span class=\"line\">            &quot;--timeout=300&quot;    </span><br><span class=\"line\">  --          &quot;--bwlimit=5000&quot;      </span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">========================================================</span><br><span class=\"line\"></span><br><span class=\"line\">-- 全局配置：</span><br><span class=\"line\">settings &#123;</span><br><span class=\"line\">        logfile =&quot;/var/log/lsyncd/lsyncd.log&quot;, -- 定义日志文件</span><br><span class=\"line\">        statusFile =&quot;/var/log/lsyncd/lsyncd.status&quot;,  -- 定义状态文件</span><br><span class=\"line\">        pidfile = &quot;/var/log/lsyncd/lsyncd.pid&quot;,-- 定义pid文件</span><br><span class=\"line\">        inotifyMode = &quot;CloseWrite&quot;,-- 指定inotify监控的事件，默认是CloseWrite，还可以是Modify或CloseWrite or Modify</span><br><span class=\"line\">      \tmaxProcesses = 7,-- 同步进程的最大个数。假如同时有20个文件需要同步，而maxProcesses = 8，则最大能看到有8个rysnc进程</span><br><span class=\"line\">        nodaemon =true,-- 表示不启用守护模式，默认；</span><br><span class=\"line\">        maxDelays = 1, --  累计到多少所监控的事件激活一次同步，即使后面的delay延迟时间还未到</span><br><span class=\"line\">        inist = ture --keep running at startup although one or more targets failed due to not being reachable.  一般不用配置</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">-- sync部分配置：</span><br><span class=\"line\">sync &#123;</span><br><span class=\"line\">      default.rsync,     -- rsync、rsyncssh、direct三种模式：</span><br><span class=\"line\">    -- default.rsync ：本地目录间同步，使用rsync，也可以达到使用ssh形式的远程rsync效果，或daemon方式连接远程rsyncd进程；</span><br><span class=\"line\">    -- default.direct ：本地目录间同步，使用cp、rm等命令完成差异文件备份；</span><br><span class=\"line\">    -- default.rsyncssh ：同步到远程主机目录，rsync的ssh模式，需要使用key来认证；</span><br><span class=\"line\">      source = &quot;/tmp/src&quot;, -- source 同步的源目录，使用绝对路径</span><br><span class=\"line\">      target = &quot;/tmp/dest&quot;, -- target 定义目的地址.对应不同的模式有几种写法:</span><br><span class=\"line\">    \t-- /tmp/dest ：本地目录同步，可用于direct和rsync模式；</span><br><span class=\"line\">    \t-- 10.4.7.10:/tmp/dest ：同步到远程服务器目录，可用于rsync和rsyncssh模式，拼接的命令类似于/usr/bin/rsync -ltsd --delete --include-from=- --exclude=* SOURCE TARGET，剩下的就是rsync的内容了，比如指定username，免密码同步；</span><br><span class=\"line\">   \t\t-- 10.4.7.10::module ：同步到远程服务器目录，用于rsync模式；</span><br><span class=\"line\">      init = true,  -- init 这是一个优化选项，当init = false，只同步进程启动以后发生改动事件的文件，原有的目录即使有差异也不会同步。默认是true；</span><br><span class=\"line\">      delay = 3, -- delay 累计事件，等待rsync同步延时时间，默认15秒（最大累计到1000个不可合并的事件）。也就是15s内监控目录下发生的改动，会累积到一次rsync同步，避免过于频繁的同步。（可合并的意思是，15s内两次修改了同一文件，最后只同步最新的文件）;</span><br><span class=\"line\">      excludeFrom = &quot;/etc/rsyncd.d/rsync_exclude.lst&quot;,  -- excludeFrom 排除选项，后面指定排除的列表文件，如excludeFrom = &quot;/etc/lsyncd.exclude&quot;，如果是简单的排除，可以使用exclude = LIST。这里的排除规则写法与原生rsync有点不同，更为简单：</span><br><span class=\"line\">\t\t-- 监控路径里的任何部分匹配到一个文本，都会被排除，例如/bin/foo/bar可以匹配规则foo</span><br><span class=\"line\">\t\t-- 如果规则以斜线/开头，则从头开始要匹配全部</span><br><span class=\"line\">\t\t-- 如果规则以/结尾，则要匹配监控路径的末尾</span><br><span class=\"line\">\t\t-- ?匹配任何字符，但不包括/</span><br><span class=\"line\">\t\t-- *匹配0或多个字符，但不包括/</span><br><span class=\"line\">\t\t-- **匹配0或多个字符，可以是/</span><br><span class=\"line\">      delete\t=\t&#x27;running&#x27;,  -- delete 为了保持target与souce完全同步，Lsyncd默认会delete = true来允许同步删除。它除了false，还有startup、running值：</span><br><span class=\"line\">      -- delete\t=\ttrue       # 在目标上删除源中没有的内容。在启动时以及在正常操作期间删除的内容</span><br><span class=\"line\">      -- delete\t=\tfalse      # 不会删除目标上的任何文件。不在启动时也不在正常操作上</span><br><span class=\"line\">      -- delete\t=\t&#x27;startup&#x27;  # Lsyncd将在启动时删除目标上的文件，但不会在正常操作时删除</span><br><span class=\"line\">      -- delete\t=\t&#x27;running&#x27;  # Lsyncd在启动时不会删除目标上的文件，但会删除正常操作期间删除的文件</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">-- rsync部分配置：    </span><br><span class=\"line\">      -- delete和exclude本来都是rsync的选项，上面是配置在sync中的，这样做的原因是为了减少rsync的开销</span><br><span class=\"line\">      rsync = &#123;</span><br><span class=\"line\">             bwlimit=200, -- bwlimit 限速，单位kb/s，与rsync相同（这么重要的选项在文档里竟然没有标出）；</span><br><span class=\"line\">             binary = &quot;/usr/bin/rsync&quot;, -- rsync可执行程序地址，默认/usr/bin/rsync</span><br><span class=\"line\">             archive = true, -- 默认false，以递归方式传输文件，并保持所有文件属性</span><br><span class=\"line\">             compress = true,-- 压缩传输默认为true。在带宽与cpu负载之间权衡，本地目录同步可以考虑把它设为false；</span><br><span class=\"line\">             verbose = true,--同步详细模式输出</span><br><span class=\"line\">        \t perms = true -- perms 保留文件权限,默认为true；</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">-- excludeFrom = <span class=\"string\">&quot;/etc/rsyncd.d/rsync_exclude.lst&quot;</span>,</span> </span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">*.<span class=\"built_in\">log</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">/cache/</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">/temp/</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">.git/</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"screen","date":"2025-04-27T03:20:26.000Z","_content":"# 多终端管理神器\n![alt text](image.png)\nctrl +a + d 退出终端\nexit 退出加销毁终端\n## 常用参数\n```config\n$> screen [-AmRvx -ls -wipe][-d <作业名称>][-h <行数>][-r <作业名称>][-s ][-S <作业名称>]\n \n-A 　将所有的视窗都调整为目前终端机的大小。\n-d   <作业名称> 　将指定的screen作业离线。\n-h   <行数> 　指定视窗的缓冲区行数。\n-m 　即使目前已在作业中的screen作业，仍强制建立新的screen作业。\n-r   <作业名称> 　恢复离线的screen作业。\n-R 　先试图恢复离线的作业。若找不到离线的作业，即建立新的screen作业。\n-s 　指定建立新视窗时，所要执行的shell。\n-S   <作业名称> 　指定screen作业的名称。\n-v 　显示版本信息。\n-x 　恢复之前离线的screen作业。\n-ls或--list 　显示目前所有的screen作业。\n-wipe 　检查目前所有的screen作业，并删除已经无法使用的screen作业。\nscreen -S yourname -> 新建一个叫yourname的session\nscreen -ls         -> 列出当前所有的session\nscreen -r yourname -> 回到yourname这个session\nscreen -d yourname -> 远程detach某个session\nscreen -d -r yourname -> 结束当前session并回到yourname这个session\n```\n## 常用快捷键\n```\nC-a ? -> 显示所有键绑定信息\nC-a c -> 创建一个新的运行shell的窗口并切换到该窗口\nC-a n -> Next，切换到下一个 window \nC-a p -> Previous，切换到前一个 window \nC-a 0..9 -> 切换到第 0..9 个 window\nCtrl+a [Space] -> 由视窗0循序切换到视窗9\nC-a C-a -> 在两个最近使用的 window 间切换 \nC-a x -> 锁住当前的 window，需用用户密码解锁\nC-a d -> detach，暂时离开当前session，将目前的 screen session (可能含有多个 windows) 丢到后台执行，并会回到还没进 screen 时的状态，此时在 screen session 里，每个 window 内运行的 process (无论是前台/后台)都在继续执行，即使 logout 也不影响。 \nC-a z -> 把当前session放到后台执行，用 shell 的 fg 命令则可回去。\nC-a w -> 显示所有窗口列表\nC-a t -> time，显示当前时间，和系统的 load \nC-a k -> kill window，强行关闭当前的 window\nC-a [ -> 进入 copy mode，在 copy mode 下可以回滚、搜索、复制就像用使用 vi 一样\n    C-b Backward，PageUp \n    C-f Forward，PageDown \n    H(大写) High，将光标移至左上角 \n    L Low，将光标移至左下角 \n    0 移到行首 \n    $ 行末 \n    w forward one word，以字为单位往前移 \n    b backward one word，以字为单位往后移 \n    Space 第一次按为标记区起点，第二次按为终点 \n    Esc 结束 copy mode \nC-a ] -> paste，把刚刚在 copy mode 选定的内容贴上\n```\n","source":"_posts/screen.md","raw":"---\ntitle: screen\ndate: 2025-04-27 11:20:26\ntags: \ncategories: linux\n---\n# 多终端管理神器\n![alt text](image.png)\nctrl +a + d 退出终端\nexit 退出加销毁终端\n## 常用参数\n```config\n$> screen [-AmRvx -ls -wipe][-d <作业名称>][-h <行数>][-r <作业名称>][-s ][-S <作业名称>]\n \n-A 　将所有的视窗都调整为目前终端机的大小。\n-d   <作业名称> 　将指定的screen作业离线。\n-h   <行数> 　指定视窗的缓冲区行数。\n-m 　即使目前已在作业中的screen作业，仍强制建立新的screen作业。\n-r   <作业名称> 　恢复离线的screen作业。\n-R 　先试图恢复离线的作业。若找不到离线的作业，即建立新的screen作业。\n-s 　指定建立新视窗时，所要执行的shell。\n-S   <作业名称> 　指定screen作业的名称。\n-v 　显示版本信息。\n-x 　恢复之前离线的screen作业。\n-ls或--list 　显示目前所有的screen作业。\n-wipe 　检查目前所有的screen作业，并删除已经无法使用的screen作业。\nscreen -S yourname -> 新建一个叫yourname的session\nscreen -ls         -> 列出当前所有的session\nscreen -r yourname -> 回到yourname这个session\nscreen -d yourname -> 远程detach某个session\nscreen -d -r yourname -> 结束当前session并回到yourname这个session\n```\n## 常用快捷键\n```\nC-a ? -> 显示所有键绑定信息\nC-a c -> 创建一个新的运行shell的窗口并切换到该窗口\nC-a n -> Next，切换到下一个 window \nC-a p -> Previous，切换到前一个 window \nC-a 0..9 -> 切换到第 0..9 个 window\nCtrl+a [Space] -> 由视窗0循序切换到视窗9\nC-a C-a -> 在两个最近使用的 window 间切换 \nC-a x -> 锁住当前的 window，需用用户密码解锁\nC-a d -> detach，暂时离开当前session，将目前的 screen session (可能含有多个 windows) 丢到后台执行，并会回到还没进 screen 时的状态，此时在 screen session 里，每个 window 内运行的 process (无论是前台/后台)都在继续执行，即使 logout 也不影响。 \nC-a z -> 把当前session放到后台执行，用 shell 的 fg 命令则可回去。\nC-a w -> 显示所有窗口列表\nC-a t -> time，显示当前时间，和系统的 load \nC-a k -> kill window，强行关闭当前的 window\nC-a [ -> 进入 copy mode，在 copy mode 下可以回滚、搜索、复制就像用使用 vi 一样\n    C-b Backward，PageUp \n    C-f Forward，PageDown \n    H(大写) High，将光标移至左上角 \n    L Low，将光标移至左下角 \n    0 移到行首 \n    $ 行末 \n    w forward one word，以字为单位往前移 \n    b backward one word，以字为单位往后移 \n    Space 第一次按为标记区起点，第二次按为终点 \n    Esc 结束 copy mode \nC-a ] -> paste，把刚刚在 copy mode 选定的内容贴上\n```\n","slug":"screen","published":1,"updated":"2025-08-28T06:39:18.224Z","comments":1,"layout":"post","photos":[],"_id":"cmev1ggcl0015hllz44jygmoz","content":"<h1 id=\"多终端管理神器\"><a href=\"#多终端管理神器\" class=\"headerlink\" title=\"多终端管理神器\"></a>多终端管理神器</h1><p><img src=\"/2025/04/27/screen/image.png\" alt=\"alt text\"><br>ctrl +a + d 退出终端<br>exit 退出加销毁终端</p>\n<h2 id=\"常用参数\"><a href=\"#常用参数\" class=\"headerlink\" title=\"常用参数\"></a>常用参数</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&gt; screen [-AmRvx -ls -wipe][-d &lt;作业名称&gt;][-h &lt;行数&gt;][-r &lt;作业名称&gt;][-s ][-S &lt;作业名称&gt;]</span><br><span class=\"line\"> </span><br><span class=\"line\">-A 　将所有的视窗都调整为目前终端机的大小。</span><br><span class=\"line\">-d   &lt;作业名称&gt; 　将指定的screen作业离线。</span><br><span class=\"line\">-h   &lt;行数&gt; 　指定视窗的缓冲区行数。</span><br><span class=\"line\">-m 　即使目前已在作业中的screen作业，仍强制建立新的screen作业。</span><br><span class=\"line\">-r   &lt;作业名称&gt; 　恢复离线的screen作业。</span><br><span class=\"line\">-R 　先试图恢复离线的作业。若找不到离线的作业，即建立新的screen作业。</span><br><span class=\"line\">-s 　指定建立新视窗时，所要执行的shell。</span><br><span class=\"line\">-S   &lt;作业名称&gt; 　指定screen作业的名称。</span><br><span class=\"line\">-v 　显示版本信息。</span><br><span class=\"line\">-x 　恢复之前离线的screen作业。</span><br><span class=\"line\">-ls或--list 　显示目前所有的screen作业。</span><br><span class=\"line\">-wipe 　检查目前所有的screen作业，并删除已经无法使用的screen作业。</span><br><span class=\"line\">screen -S yourname -&gt; 新建一个叫yourname的session</span><br><span class=\"line\">screen -ls         -&gt; 列出当前所有的session</span><br><span class=\"line\">screen -r yourname -&gt; 回到yourname这个session</span><br><span class=\"line\">screen -d yourname -&gt; 远程detach某个session</span><br><span class=\"line\">screen -d -r yourname -&gt; 结束当前session并回到yourname这个session</span><br></pre></td></tr></table></figure>\n<h2 id=\"常用快捷键\"><a href=\"#常用快捷键\" class=\"headerlink\" title=\"常用快捷键\"></a>常用快捷键</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C-a ? -&gt; 显示所有键绑定信息</span><br><span class=\"line\">C-a c -&gt; 创建一个新的运行shell的窗口并切换到该窗口</span><br><span class=\"line\">C-a n -&gt; Next，切换到下一个 window </span><br><span class=\"line\">C-a p -&gt; Previous，切换到前一个 window </span><br><span class=\"line\">C-a 0..9 -&gt; 切换到第 0..9 个 window</span><br><span class=\"line\">Ctrl+a [Space] -&gt; 由视窗0循序切换到视窗9</span><br><span class=\"line\">C-a C-a -&gt; 在两个最近使用的 window 间切换 </span><br><span class=\"line\">C-a x -&gt; 锁住当前的 window，需用用户密码解锁</span><br><span class=\"line\">C-a d -&gt; detach，暂时离开当前session，将目前的 screen session (可能含有多个 windows) 丢到后台执行，并会回到还没进 screen 时的状态，此时在 screen session 里，每个 window 内运行的 process (无论是前台/后台)都在继续执行，即使 logout 也不影响。 </span><br><span class=\"line\">C-a z -&gt; 把当前session放到后台执行，用 shell 的 fg 命令则可回去。</span><br><span class=\"line\">C-a w -&gt; 显示所有窗口列表</span><br><span class=\"line\">C-a t -&gt; time，显示当前时间，和系统的 load </span><br><span class=\"line\">C-a k -&gt; kill window，强行关闭当前的 window</span><br><span class=\"line\">C-a [ -&gt; 进入 copy mode，在 copy mode 下可以回滚、搜索、复制就像用使用 vi 一样</span><br><span class=\"line\">    C-b Backward，PageUp </span><br><span class=\"line\">    C-f Forward，PageDown </span><br><span class=\"line\">    H(大写) High，将光标移至左上角 </span><br><span class=\"line\">    L Low，将光标移至左下角 </span><br><span class=\"line\">    0 移到行首 </span><br><span class=\"line\">    $ 行末 </span><br><span class=\"line\">    w forward one word，以字为单位往前移 </span><br><span class=\"line\">    b backward one word，以字为单位往后移 </span><br><span class=\"line\">    Space 第一次按为标记区起点，第二次按为终点 </span><br><span class=\"line\">    Esc 结束 copy mode </span><br><span class=\"line\">C-a ] -&gt; paste，把刚刚在 copy mode 选定的内容贴上</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"多终端管理神器\"><a href=\"#多终端管理神器\" class=\"headerlink\" title=\"多终端管理神器\"></a>多终端管理神器</h1><p><img src=\"/2025/04/27/screen/image.png\" alt=\"alt text\"><br>ctrl +a + d 退出终端<br>exit 退出加销毁终端</p>\n<h2 id=\"常用参数\"><a href=\"#常用参数\" class=\"headerlink\" title=\"常用参数\"></a>常用参数</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&gt; screen [-AmRvx -ls -wipe][-d &lt;作业名称&gt;][-h &lt;行数&gt;][-r &lt;作业名称&gt;][-s ][-S &lt;作业名称&gt;]</span><br><span class=\"line\"> </span><br><span class=\"line\">-A 　将所有的视窗都调整为目前终端机的大小。</span><br><span class=\"line\">-d   &lt;作业名称&gt; 　将指定的screen作业离线。</span><br><span class=\"line\">-h   &lt;行数&gt; 　指定视窗的缓冲区行数。</span><br><span class=\"line\">-m 　即使目前已在作业中的screen作业，仍强制建立新的screen作业。</span><br><span class=\"line\">-r   &lt;作业名称&gt; 　恢复离线的screen作业。</span><br><span class=\"line\">-R 　先试图恢复离线的作业。若找不到离线的作业，即建立新的screen作业。</span><br><span class=\"line\">-s 　指定建立新视窗时，所要执行的shell。</span><br><span class=\"line\">-S   &lt;作业名称&gt; 　指定screen作业的名称。</span><br><span class=\"line\">-v 　显示版本信息。</span><br><span class=\"line\">-x 　恢复之前离线的screen作业。</span><br><span class=\"line\">-ls或--list 　显示目前所有的screen作业。</span><br><span class=\"line\">-wipe 　检查目前所有的screen作业，并删除已经无法使用的screen作业。</span><br><span class=\"line\">screen -S yourname -&gt; 新建一个叫yourname的session</span><br><span class=\"line\">screen -ls         -&gt; 列出当前所有的session</span><br><span class=\"line\">screen -r yourname -&gt; 回到yourname这个session</span><br><span class=\"line\">screen -d yourname -&gt; 远程detach某个session</span><br><span class=\"line\">screen -d -r yourname -&gt; 结束当前session并回到yourname这个session</span><br></pre></td></tr></table></figure>\n<h2 id=\"常用快捷键\"><a href=\"#常用快捷键\" class=\"headerlink\" title=\"常用快捷键\"></a>常用快捷键</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C-a ? -&gt; 显示所有键绑定信息</span><br><span class=\"line\">C-a c -&gt; 创建一个新的运行shell的窗口并切换到该窗口</span><br><span class=\"line\">C-a n -&gt; Next，切换到下一个 window </span><br><span class=\"line\">C-a p -&gt; Previous，切换到前一个 window </span><br><span class=\"line\">C-a 0..9 -&gt; 切换到第 0..9 个 window</span><br><span class=\"line\">Ctrl+a [Space] -&gt; 由视窗0循序切换到视窗9</span><br><span class=\"line\">C-a C-a -&gt; 在两个最近使用的 window 间切换 </span><br><span class=\"line\">C-a x -&gt; 锁住当前的 window，需用用户密码解锁</span><br><span class=\"line\">C-a d -&gt; detach，暂时离开当前session，将目前的 screen session (可能含有多个 windows) 丢到后台执行，并会回到还没进 screen 时的状态，此时在 screen session 里，每个 window 内运行的 process (无论是前台/后台)都在继续执行，即使 logout 也不影响。 </span><br><span class=\"line\">C-a z -&gt; 把当前session放到后台执行，用 shell 的 fg 命令则可回去。</span><br><span class=\"line\">C-a w -&gt; 显示所有窗口列表</span><br><span class=\"line\">C-a t -&gt; time，显示当前时间，和系统的 load </span><br><span class=\"line\">C-a k -&gt; kill window，强行关闭当前的 window</span><br><span class=\"line\">C-a [ -&gt; 进入 copy mode，在 copy mode 下可以回滚、搜索、复制就像用使用 vi 一样</span><br><span class=\"line\">    C-b Backward，PageUp </span><br><span class=\"line\">    C-f Forward，PageDown </span><br><span class=\"line\">    H(大写) High，将光标移至左上角 </span><br><span class=\"line\">    L Low，将光标移至左下角 </span><br><span class=\"line\">    0 移到行首 </span><br><span class=\"line\">    $ 行末 </span><br><span class=\"line\">    w forward one word，以字为单位往前移 </span><br><span class=\"line\">    b backward one word，以字为单位往后移 </span><br><span class=\"line\">    Space 第一次按为标记区起点，第二次按为终点 </span><br><span class=\"line\">    Esc 结束 copy mode </span><br><span class=\"line\">C-a ] -&gt; paste，把刚刚在 copy mode 选定的内容贴上</span><br></pre></td></tr></table></figure>\n"},{"title":"tcp","date":"2025-07-25T07:36:08.000Z","_content":"\n# 三握四挥\n![alt text](image.png)\n\n```\n （1）第一次握手：Client将标志位SYN置为1，随机产生一个值seq=J，并将该数据包发送给Server，Client进入SYN_SENT状态，等待Server确认。\n\n  （2）第二次握手：Server收到数据包后由标志位SYN=1知道Client请求建立连接，Server将标志位SYN和ACK都置为1，ack=J+1，随机产生一个值seq=K，并将该数据包发送给Client以确认连接请求，Server进入SYN_RCVD状态。\n\n  （3）第三次握手：Client收到确认后，检查ack是否为J+1，ACK是否为1，如果正确则将标志位ACK置为1，ack=K+1，并将该数据包发送给Server，Server检查ack是否为K+1，ACK是否为1，如果正确则连接建立成功，Client和Server进入ESTABLISHED状态，完成三次握手，随后Client与Server之间可以开始传输数据了\n\n客户端发起fin位为1的FIN报文，此时客户端进入FIN_WAIT_1状态\n服务端接受到FIN 报文后，发送ack应答报文，此时服务端进入close_wait状态\n客户端接受到ack应答报文后，进入FIN_WAIT_2状态\n服务端处理完数据后，向客户端发送FIN报文，此时服务端进入LAST_ACK状态\n客户端接受到FIN报文后，客户端发送应答ack报文，进入TIME_WAIT阶段\n服务端接受到ack报文后，断开连接，处于close状态\n客户端过一段时间后，也就是2MSL后，进入close状态\n```\n\n\n\n\n# Time Wait\n## 概念\n* 谁先关闭谁最后进入timewait状态，time_wait 状态下，TCP 连接占用的端口，无法被再次使用\n```\nclose 短连接\n每个HTTP请求都需要重新完成TCP三次握手建立连接，数据传输完成后四次挥手关闭连接\nkeep-alive 长连接\n在HTTP1.1协议中默认长连接，有个 Connection 头，Connection有两个值，close和keep-alive，这个头就相当于客户端告诉服务端，服务端你执行完成请求之后，是关闭连接还是保持连接，保持连接就意味着在保持连接期间，只能由客户端主动断开连接。还有一个keep-alive的头，设置的值就代表了服务端保持连接保持多久\n#ngx\nkeepalive 100;          # 保持的空闲连接数\nkeepalive_timeout 60s;   # 空闲超时时间\nkeepalive_requests 100;  # 单连接最大请求数\nlocation / {\n    proxy_pass http://backend_servers;\n    proxy_http_version 1.1;     # 关键：使用 HTTP/1.1\n    proxy_set_header Connection \"\";  # 清除 Connection 头（避免传递错误值）\n}\n# Linux 内核参数（默认值通常为 7200 秒）默认不启用\nsysctl -w net.ipv4.tcp_keepalive_time=1800  # 空闲 1800 秒后发送探针\nsysctl -w net.ipv4.tcp_keepalive_probes=3   # 发送 3 次无响应后关闭\nsysctl -w net.ipv4.tcp_keepalive_intvl=15   # 每次探针间隔 15 秒\n```\n## 相关参数\n```\nnetstat -ant | awk '/^tcp/ {++y[$NF]} END {for(w in y) print w, y[w]}'\nnet.ipv4.tcp_syncookies = 1 \nnet.ipv4.tcp_tw_reuse = 1 \nnet.ipv4.tcp_tw_recycle = 1\nnet.ipv4.tcp_fin_timeout = 30\n==============================================\nnet.ipv4.tcp_tw_reuse = 1\n表示开启重用。允许将一个处于TIME-WAIT状态的端口重新用于新的TCP连接，默认为0，表示关闭，其防止重复报文的原理也是时间戳\nnet.ipv4.tcp_tw_recycle = 1\n表示开启TCP连接中TIME-WAIT sockets的快速回收，意思就是系统会保存最近一次该socket连接上的传输报文（包括数据或者仅仅是ACK报文）的时间戳，当相同四元组socket过来的报文的时间戳小于缓存下来的时间戳则丢弃该数据包，并回收这个socket，默认为0，表示关闭。开启这个功能风险有点大，NAT环境可能导致DROP掉SYN包（回复RST），在NAT场景下不要使用。需要注意在Linux内核4.10版本以后该参数就已经被移除了。\nnet.ipv4.tcp_fin_timeout = 60\n这个时间不是修改2MSL的时长，主动关闭连接的一方接收到ACK之后会进入，FIN_WAIT-2状态，然后等待被动关闭一方发送FIN，这个时间是设置主动关闭的一方等待对方发送FIN的最长时长，默认是60秒。在这个状态下端口是不可能被重用的，文件描述符和内存也不会被释放，因为这个阶段被动关闭的一方有可能还有数据要发送，因为对端处于CLOSE_WAIT状态，也就是等待上层应用程序。关于这个的真实含义我希望大家清楚，而且不要调整的太小当然太大也不行，至少在3.10内核版本上这个参数不是调整的TIME_WAIT时长。\nnet.ipv4.ip_local_port_range = 32768 60999\n表示用于外连使用的随机高位端口范围，也就是作为客户端连接其他服务的时候系统从这个范围随机取出一个端口来作为源端口使用来去连接对端服务器，这个范围也就决定了最多主动能同时建立多少个外连。\nnet.ipv4.tcp_max_tw_buckets = 6000\n同时保持TIME_WAIT套接字的最大个数，超过这个数字那么该TIME_WAIT套接字将立刻被释放并在/var/log/message日志中打印警告信息（TCP: time wait bucket table overflow）。这个过多主要是消耗内存，单个TIME_WAIT占用内存非常小，但是多了就不好了，这个主要看内存以及你的服务器是否直接对外。\n使用net.ipv4.tcp_tw_reuse和net.ipv4.tcp_tw_recycle 的前提是开启时间戳net.ipv4.tcp_timestamps = 1不过这一项默认是开启的\n```\n\n# CLOSE_WAIT\n* 这种状态的含义其实是表示在等待关闭。怎么理解呢？当对方close一个SOCKET后发送FIN报文给自己，你系统毫无疑问地会回应一个ACK报文给对方，此时则进入到CLOSE_WAIT状态。接下来呢，实际上你真正需要考虑的事情是查看你是否还有数据发送给对方，如果没有的话，那么你也就可以close这个SOCKET，发送FIN报文给对方，也即关闭连接。所以你在CLOSE_WAIT状态下，需要完成的事情是等待你去关闭连接。CLOSE_WAIT一般是由于对端主动关闭，而我方没有正确处理的原因引起的，临时解决重启服务，永久解决就是修改程序逻辑\n```\n客户端（主动关闭方）          服务器（被动关闭方）\n       |                               |\n       |--- GET /bigfile.zip --------->| \n       |<--- 200 OK + 文件数据 ---------|\n       |                               |\n       |--- FIN (我要关闭) ------------>| → 客户端进入 FIN_WAIT_1\n       |<--- ACK ----------------------| → 服务端进入 CLOSE_WAIT\n       |                               |（此时服务端还在发送剩余文件数据）\n       |<--- 剩余数据包 ----------------|\n       |<--- FIN (我也关闭) ------------| → 服务端进入 LAST_ACK\n       |--- ACK ----------------------->| → 客户端进入 TIME_WAIT                \n#没有调用s.close()关闭socket，会造成大量CLOSE_WAIT\nimport socket\nimport time\n\n\ndef create_sockets(num_sockets):\n    sockets = []\n    for _ in range(num_sockets):\n        # 创建一个 TCP 套接字\n        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        print(f\"创建 socket {_ + 1}: {s.fileno()}，状态为 alloc\")\n        sockets.append(s)\n    return sockets\n\nif __name__ == \"__main__\":\n    num_sockets = 10\n    while True:\n        num_sockets  += 10\n        sockets = create_sockets(num_sockets)\n        print(f\"总共创建了 {num_sockets} 个 socket 对象。\")\n        time.sleep(10)\n\n#shell\ncat /proc/net/sockstat | grep sockets | awk '{print $3}'\nnetstat -n | awk '/^tcp/ {++state[$NF]} END {for(key in state) print key,\"\\t\",state[key]}'\nfor i in `ls /proc/ |grep '[0-9]'`\ndo\n    mycount=`ls /proc/$i/fd|wc -l`\n    echo \"$i $mycount\"\ndone\n```\n","source":"_posts/tcp.md","raw":"---\ntitle: tcp\ndate: 2025-07-25 15:36:08\ntags:\ncategories: linux\n---\n\n# 三握四挥\n![alt text](image.png)\n\n```\n （1）第一次握手：Client将标志位SYN置为1，随机产生一个值seq=J，并将该数据包发送给Server，Client进入SYN_SENT状态，等待Server确认。\n\n  （2）第二次握手：Server收到数据包后由标志位SYN=1知道Client请求建立连接，Server将标志位SYN和ACK都置为1，ack=J+1，随机产生一个值seq=K，并将该数据包发送给Client以确认连接请求，Server进入SYN_RCVD状态。\n\n  （3）第三次握手：Client收到确认后，检查ack是否为J+1，ACK是否为1，如果正确则将标志位ACK置为1，ack=K+1，并将该数据包发送给Server，Server检查ack是否为K+1，ACK是否为1，如果正确则连接建立成功，Client和Server进入ESTABLISHED状态，完成三次握手，随后Client与Server之间可以开始传输数据了\n\n客户端发起fin位为1的FIN报文，此时客户端进入FIN_WAIT_1状态\n服务端接受到FIN 报文后，发送ack应答报文，此时服务端进入close_wait状态\n客户端接受到ack应答报文后，进入FIN_WAIT_2状态\n服务端处理完数据后，向客户端发送FIN报文，此时服务端进入LAST_ACK状态\n客户端接受到FIN报文后，客户端发送应答ack报文，进入TIME_WAIT阶段\n服务端接受到ack报文后，断开连接，处于close状态\n客户端过一段时间后，也就是2MSL后，进入close状态\n```\n\n\n\n\n# Time Wait\n## 概念\n* 谁先关闭谁最后进入timewait状态，time_wait 状态下，TCP 连接占用的端口，无法被再次使用\n```\nclose 短连接\n每个HTTP请求都需要重新完成TCP三次握手建立连接，数据传输完成后四次挥手关闭连接\nkeep-alive 长连接\n在HTTP1.1协议中默认长连接，有个 Connection 头，Connection有两个值，close和keep-alive，这个头就相当于客户端告诉服务端，服务端你执行完成请求之后，是关闭连接还是保持连接，保持连接就意味着在保持连接期间，只能由客户端主动断开连接。还有一个keep-alive的头，设置的值就代表了服务端保持连接保持多久\n#ngx\nkeepalive 100;          # 保持的空闲连接数\nkeepalive_timeout 60s;   # 空闲超时时间\nkeepalive_requests 100;  # 单连接最大请求数\nlocation / {\n    proxy_pass http://backend_servers;\n    proxy_http_version 1.1;     # 关键：使用 HTTP/1.1\n    proxy_set_header Connection \"\";  # 清除 Connection 头（避免传递错误值）\n}\n# Linux 内核参数（默认值通常为 7200 秒）默认不启用\nsysctl -w net.ipv4.tcp_keepalive_time=1800  # 空闲 1800 秒后发送探针\nsysctl -w net.ipv4.tcp_keepalive_probes=3   # 发送 3 次无响应后关闭\nsysctl -w net.ipv4.tcp_keepalive_intvl=15   # 每次探针间隔 15 秒\n```\n## 相关参数\n```\nnetstat -ant | awk '/^tcp/ {++y[$NF]} END {for(w in y) print w, y[w]}'\nnet.ipv4.tcp_syncookies = 1 \nnet.ipv4.tcp_tw_reuse = 1 \nnet.ipv4.tcp_tw_recycle = 1\nnet.ipv4.tcp_fin_timeout = 30\n==============================================\nnet.ipv4.tcp_tw_reuse = 1\n表示开启重用。允许将一个处于TIME-WAIT状态的端口重新用于新的TCP连接，默认为0，表示关闭，其防止重复报文的原理也是时间戳\nnet.ipv4.tcp_tw_recycle = 1\n表示开启TCP连接中TIME-WAIT sockets的快速回收，意思就是系统会保存最近一次该socket连接上的传输报文（包括数据或者仅仅是ACK报文）的时间戳，当相同四元组socket过来的报文的时间戳小于缓存下来的时间戳则丢弃该数据包，并回收这个socket，默认为0，表示关闭。开启这个功能风险有点大，NAT环境可能导致DROP掉SYN包（回复RST），在NAT场景下不要使用。需要注意在Linux内核4.10版本以后该参数就已经被移除了。\nnet.ipv4.tcp_fin_timeout = 60\n这个时间不是修改2MSL的时长，主动关闭连接的一方接收到ACK之后会进入，FIN_WAIT-2状态，然后等待被动关闭一方发送FIN，这个时间是设置主动关闭的一方等待对方发送FIN的最长时长，默认是60秒。在这个状态下端口是不可能被重用的，文件描述符和内存也不会被释放，因为这个阶段被动关闭的一方有可能还有数据要发送，因为对端处于CLOSE_WAIT状态，也就是等待上层应用程序。关于这个的真实含义我希望大家清楚，而且不要调整的太小当然太大也不行，至少在3.10内核版本上这个参数不是调整的TIME_WAIT时长。\nnet.ipv4.ip_local_port_range = 32768 60999\n表示用于外连使用的随机高位端口范围，也就是作为客户端连接其他服务的时候系统从这个范围随机取出一个端口来作为源端口使用来去连接对端服务器，这个范围也就决定了最多主动能同时建立多少个外连。\nnet.ipv4.tcp_max_tw_buckets = 6000\n同时保持TIME_WAIT套接字的最大个数，超过这个数字那么该TIME_WAIT套接字将立刻被释放并在/var/log/message日志中打印警告信息（TCP: time wait bucket table overflow）。这个过多主要是消耗内存，单个TIME_WAIT占用内存非常小，但是多了就不好了，这个主要看内存以及你的服务器是否直接对外。\n使用net.ipv4.tcp_tw_reuse和net.ipv4.tcp_tw_recycle 的前提是开启时间戳net.ipv4.tcp_timestamps = 1不过这一项默认是开启的\n```\n\n# CLOSE_WAIT\n* 这种状态的含义其实是表示在等待关闭。怎么理解呢？当对方close一个SOCKET后发送FIN报文给自己，你系统毫无疑问地会回应一个ACK报文给对方，此时则进入到CLOSE_WAIT状态。接下来呢，实际上你真正需要考虑的事情是查看你是否还有数据发送给对方，如果没有的话，那么你也就可以close这个SOCKET，发送FIN报文给对方，也即关闭连接。所以你在CLOSE_WAIT状态下，需要完成的事情是等待你去关闭连接。CLOSE_WAIT一般是由于对端主动关闭，而我方没有正确处理的原因引起的，临时解决重启服务，永久解决就是修改程序逻辑\n```\n客户端（主动关闭方）          服务器（被动关闭方）\n       |                               |\n       |--- GET /bigfile.zip --------->| \n       |<--- 200 OK + 文件数据 ---------|\n       |                               |\n       |--- FIN (我要关闭) ------------>| → 客户端进入 FIN_WAIT_1\n       |<--- ACK ----------------------| → 服务端进入 CLOSE_WAIT\n       |                               |（此时服务端还在发送剩余文件数据）\n       |<--- 剩余数据包 ----------------|\n       |<--- FIN (我也关闭) ------------| → 服务端进入 LAST_ACK\n       |--- ACK ----------------------->| → 客户端进入 TIME_WAIT                \n#没有调用s.close()关闭socket，会造成大量CLOSE_WAIT\nimport socket\nimport time\n\n\ndef create_sockets(num_sockets):\n    sockets = []\n    for _ in range(num_sockets):\n        # 创建一个 TCP 套接字\n        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        print(f\"创建 socket {_ + 1}: {s.fileno()}，状态为 alloc\")\n        sockets.append(s)\n    return sockets\n\nif __name__ == \"__main__\":\n    num_sockets = 10\n    while True:\n        num_sockets  += 10\n        sockets = create_sockets(num_sockets)\n        print(f\"总共创建了 {num_sockets} 个 socket 对象。\")\n        time.sleep(10)\n\n#shell\ncat /proc/net/sockstat | grep sockets | awk '{print $3}'\nnetstat -n | awk '/^tcp/ {++state[$NF]} END {for(key in state) print key,\"\\t\",state[key]}'\nfor i in `ls /proc/ |grep '[0-9]'`\ndo\n    mycount=`ls /proc/$i/fd|wc -l`\n    echo \"$i $mycount\"\ndone\n```\n","slug":"tcp","published":1,"updated":"2025-08-28T06:39:18.226Z","comments":1,"layout":"post","photos":[],"_id":"cmev1ggco0018hllzajqwb9c8","content":"<h1 id=\"三握四挥\"><a href=\"#三握四挥\" class=\"headerlink\" title=\"三握四挥\"></a>三握四挥</h1><p><img src=\"/2025/07/25/tcp/image.png\" alt=\"alt text\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> （1）第一次握手：Client将标志位SYN置为1，随机产生一个值seq=J，并将该数据包发送给Server，Client进入SYN_SENT状态，等待Server确认。</span><br><span class=\"line\"></span><br><span class=\"line\">  （2）第二次握手：Server收到数据包后由标志位SYN=1知道Client请求建立连接，Server将标志位SYN和ACK都置为1，ack=J+1，随机产生一个值seq=K，并将该数据包发送给Client以确认连接请求，Server进入SYN_RCVD状态。</span><br><span class=\"line\"></span><br><span class=\"line\">  （3）第三次握手：Client收到确认后，检查ack是否为J+1，ACK是否为1，如果正确则将标志位ACK置为1，ack=K+1，并将该数据包发送给Server，Server检查ack是否为K+1，ACK是否为1，如果正确则连接建立成功，Client和Server进入ESTABLISHED状态，完成三次握手，随后Client与Server之间可以开始传输数据了</span><br><span class=\"line\"></span><br><span class=\"line\">客户端发起fin位为1的FIN报文，此时客户端进入FIN_WAIT_1状态</span><br><span class=\"line\">服务端接受到FIN 报文后，发送ack应答报文，此时服务端进入close_wait状态</span><br><span class=\"line\">客户端接受到ack应答报文后，进入FIN_WAIT_2状态</span><br><span class=\"line\">服务端处理完数据后，向客户端发送FIN报文，此时服务端进入LAST_ACK状态</span><br><span class=\"line\">客户端接受到FIN报文后，客户端发送应答ack报文，进入TIME_WAIT阶段</span><br><span class=\"line\">服务端接受到ack报文后，断开连接，处于close状态</span><br><span class=\"line\">客户端过一段时间后，也就是2MSL后，进入close状态</span><br></pre></td></tr></table></figure>\n\n\n\n\n<h1 id=\"Time-Wait\"><a href=\"#Time-Wait\" class=\"headerlink\" title=\"Time Wait\"></a>Time Wait</h1><h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><ul>\n<li>谁先关闭谁最后进入timewait状态，time_wait 状态下，TCP 连接占用的端口，无法被再次使用<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">close 短连接</span><br><span class=\"line\">每个HTTP请求都需要重新完成TCP三次握手建立连接，数据传输完成后四次挥手关闭连接</span><br><span class=\"line\">keep-alive 长连接</span><br><span class=\"line\">在HTTP1.1协议中默认长连接，有个 Connection 头，Connection有两个值，close和keep-alive，这个头就相当于客户端告诉服务端，服务端你执行完成请求之后，是关闭连接还是保持连接，保持连接就意味着在保持连接期间，只能由客户端主动断开连接。还有一个keep-alive的头，设置的值就代表了服务端保持连接保持多久</span><br><span class=\"line\">#ngx</span><br><span class=\"line\">keepalive 100;          # 保持的空闲连接数</span><br><span class=\"line\">keepalive_timeout 60s;   # 空闲超时时间</span><br><span class=\"line\">keepalive_requests 100;  # 单连接最大请求数</span><br><span class=\"line\">location / &#123;</span><br><span class=\"line\">    proxy_pass http://backend_servers;</span><br><span class=\"line\">    proxy_http_version 1.1;     # 关键：使用 HTTP/1.1</span><br><span class=\"line\">    proxy_set_header Connection &quot;&quot;;  # 清除 Connection 头（避免传递错误值）</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># Linux 内核参数（默认值通常为 7200 秒）默认不启用</span><br><span class=\"line\">sysctl -w net.ipv4.tcp_keepalive_time=1800  # 空闲 1800 秒后发送探针</span><br><span class=\"line\">sysctl -w net.ipv4.tcp_keepalive_probes=3   # 发送 3 次无响应后关闭</span><br><span class=\"line\">sysctl -w net.ipv4.tcp_keepalive_intvl=15   # 每次探针间隔 15 秒</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"相关参数\"><a href=\"#相关参数\" class=\"headerlink\" title=\"相关参数\"></a>相关参数</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -ant | awk &#x27;/^tcp/ &#123;++y[$NF]&#125; END &#123;for(w in y) print w, y[w]&#125;&#x27;</span><br><span class=\"line\">net.ipv4.tcp_syncookies = 1 </span><br><span class=\"line\">net.ipv4.tcp_tw_reuse = 1 </span><br><span class=\"line\">net.ipv4.tcp_tw_recycle = 1</span><br><span class=\"line\">net.ipv4.tcp_fin_timeout = 30</span><br><span class=\"line\">==============================================</span><br><span class=\"line\">net.ipv4.tcp_tw_reuse = 1</span><br><span class=\"line\">表示开启重用。允许将一个处于TIME-WAIT状态的端口重新用于新的TCP连接，默认为0，表示关闭，其防止重复报文的原理也是时间戳</span><br><span class=\"line\">net.ipv4.tcp_tw_recycle = 1</span><br><span class=\"line\">表示开启TCP连接中TIME-WAIT sockets的快速回收，意思就是系统会保存最近一次该socket连接上的传输报文（包括数据或者仅仅是ACK报文）的时间戳，当相同四元组socket过来的报文的时间戳小于缓存下来的时间戳则丢弃该数据包，并回收这个socket，默认为0，表示关闭。开启这个功能风险有点大，NAT环境可能导致DROP掉SYN包（回复RST），在NAT场景下不要使用。需要注意在Linux内核4.10版本以后该参数就已经被移除了。</span><br><span class=\"line\">net.ipv4.tcp_fin_timeout = 60</span><br><span class=\"line\">这个时间不是修改2MSL的时长，主动关闭连接的一方接收到ACK之后会进入，FIN_WAIT-2状态，然后等待被动关闭一方发送FIN，这个时间是设置主动关闭的一方等待对方发送FIN的最长时长，默认是60秒。在这个状态下端口是不可能被重用的，文件描述符和内存也不会被释放，因为这个阶段被动关闭的一方有可能还有数据要发送，因为对端处于CLOSE_WAIT状态，也就是等待上层应用程序。关于这个的真实含义我希望大家清楚，而且不要调整的太小当然太大也不行，至少在3.10内核版本上这个参数不是调整的TIME_WAIT时长。</span><br><span class=\"line\">net.ipv4.ip_local_port_range = 32768 60999</span><br><span class=\"line\">表示用于外连使用的随机高位端口范围，也就是作为客户端连接其他服务的时候系统从这个范围随机取出一个端口来作为源端口使用来去连接对端服务器，这个范围也就决定了最多主动能同时建立多少个外连。</span><br><span class=\"line\">net.ipv4.tcp_max_tw_buckets = 6000</span><br><span class=\"line\">同时保持TIME_WAIT套接字的最大个数，超过这个数字那么该TIME_WAIT套接字将立刻被释放并在/var/log/message日志中打印警告信息（TCP: time wait bucket table overflow）。这个过多主要是消耗内存，单个TIME_WAIT占用内存非常小，但是多了就不好了，这个主要看内存以及你的服务器是否直接对外。</span><br><span class=\"line\">使用net.ipv4.tcp_tw_reuse和net.ipv4.tcp_tw_recycle 的前提是开启时间戳net.ipv4.tcp_timestamps = 1不过这一项默认是开启的</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"CLOSE-WAIT\"><a href=\"#CLOSE-WAIT\" class=\"headerlink\" title=\"CLOSE_WAIT\"></a>CLOSE_WAIT</h1><ul>\n<li>这种状态的含义其实是表示在等待关闭。怎么理解呢？当对方close一个SOCKET后发送FIN报文给自己，你系统毫无疑问地会回应一个ACK报文给对方，此时则进入到CLOSE_WAIT状态。接下来呢，实际上你真正需要考虑的事情是查看你是否还有数据发送给对方，如果没有的话，那么你也就可以close这个SOCKET，发送FIN报文给对方，也即关闭连接。所以你在CLOSE_WAIT状态下，需要完成的事情是等待你去关闭连接。CLOSE_WAIT一般是由于对端主动关闭，而我方没有正确处理的原因引起的，临时解决重启服务，永久解决就是修改程序逻辑<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">客户端（主动关闭方）          服务器（被动关闭方）</span><br><span class=\"line\">       |                               |</span><br><span class=\"line\">       |--- GET /bigfile.zip ---------&gt;| </span><br><span class=\"line\">       |&lt;--- 200 OK + 文件数据 ---------|</span><br><span class=\"line\">       |                               |</span><br><span class=\"line\">       |--- FIN (我要关闭) ------------&gt;| → 客户端进入 FIN_WAIT_1</span><br><span class=\"line\">       |&lt;--- ACK ----------------------| → 服务端进入 CLOSE_WAIT</span><br><span class=\"line\">       |                               |（此时服务端还在发送剩余文件数据）</span><br><span class=\"line\">       |&lt;--- 剩余数据包 ----------------|</span><br><span class=\"line\">       |&lt;--- FIN (我也关闭) ------------| → 服务端进入 LAST_ACK</span><br><span class=\"line\">       |--- ACK -----------------------&gt;| → 客户端进入 TIME_WAIT                </span><br><span class=\"line\">#没有调用s.close()关闭socket，会造成大量CLOSE_WAIT</span><br><span class=\"line\">import socket</span><br><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def create_sockets(num_sockets):</span><br><span class=\"line\">    sockets = []</span><br><span class=\"line\">    for _ in range(num_sockets):</span><br><span class=\"line\">        # 创建一个 TCP 套接字</span><br><span class=\"line\">        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class=\"line\">        print(f&quot;创建 socket &#123;_ + 1&#125;: &#123;s.fileno()&#125;，状态为 alloc&quot;)</span><br><span class=\"line\">        sockets.append(s)</span><br><span class=\"line\">    return sockets</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &quot;__main__&quot;:</span><br><span class=\"line\">    num_sockets = 10</span><br><span class=\"line\">    while True:</span><br><span class=\"line\">        num_sockets  += 10</span><br><span class=\"line\">        sockets = create_sockets(num_sockets)</span><br><span class=\"line\">        print(f&quot;总共创建了 &#123;num_sockets&#125; 个 socket 对象。&quot;)</span><br><span class=\"line\">        time.sleep(10)</span><br><span class=\"line\"></span><br><span class=\"line\">#shell</span><br><span class=\"line\">cat /proc/net/sockstat | grep sockets | awk &#x27;&#123;print $3&#125;&#x27;</span><br><span class=\"line\">netstat -n | awk &#x27;/^tcp/ &#123;++state[$NF]&#125; END &#123;for(key in state) print key,&quot;\\t&quot;,state[key]&#125;&#x27;</span><br><span class=\"line\">for i in `ls /proc/ |grep &#x27;[0-9]&#x27;`</span><br><span class=\"line\">do</span><br><span class=\"line\">    mycount=`ls /proc/$i/fd|wc -l`</span><br><span class=\"line\">    echo &quot;$i $mycount&quot;</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure></li>\n</ul>\n","excerpt":"","more":"<h1 id=\"三握四挥\"><a href=\"#三握四挥\" class=\"headerlink\" title=\"三握四挥\"></a>三握四挥</h1><p><img src=\"/2025/07/25/tcp/image.png\" alt=\"alt text\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> （1）第一次握手：Client将标志位SYN置为1，随机产生一个值seq=J，并将该数据包发送给Server，Client进入SYN_SENT状态，等待Server确认。</span><br><span class=\"line\"></span><br><span class=\"line\">  （2）第二次握手：Server收到数据包后由标志位SYN=1知道Client请求建立连接，Server将标志位SYN和ACK都置为1，ack=J+1，随机产生一个值seq=K，并将该数据包发送给Client以确认连接请求，Server进入SYN_RCVD状态。</span><br><span class=\"line\"></span><br><span class=\"line\">  （3）第三次握手：Client收到确认后，检查ack是否为J+1，ACK是否为1，如果正确则将标志位ACK置为1，ack=K+1，并将该数据包发送给Server，Server检查ack是否为K+1，ACK是否为1，如果正确则连接建立成功，Client和Server进入ESTABLISHED状态，完成三次握手，随后Client与Server之间可以开始传输数据了</span><br><span class=\"line\"></span><br><span class=\"line\">客户端发起fin位为1的FIN报文，此时客户端进入FIN_WAIT_1状态</span><br><span class=\"line\">服务端接受到FIN 报文后，发送ack应答报文，此时服务端进入close_wait状态</span><br><span class=\"line\">客户端接受到ack应答报文后，进入FIN_WAIT_2状态</span><br><span class=\"line\">服务端处理完数据后，向客户端发送FIN报文，此时服务端进入LAST_ACK状态</span><br><span class=\"line\">客户端接受到FIN报文后，客户端发送应答ack报文，进入TIME_WAIT阶段</span><br><span class=\"line\">服务端接受到ack报文后，断开连接，处于close状态</span><br><span class=\"line\">客户端过一段时间后，也就是2MSL后，进入close状态</span><br></pre></td></tr></table></figure>\n\n\n\n\n<h1 id=\"Time-Wait\"><a href=\"#Time-Wait\" class=\"headerlink\" title=\"Time Wait\"></a>Time Wait</h1><h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><ul>\n<li>谁先关闭谁最后进入timewait状态，time_wait 状态下，TCP 连接占用的端口，无法被再次使用<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">close 短连接</span><br><span class=\"line\">每个HTTP请求都需要重新完成TCP三次握手建立连接，数据传输完成后四次挥手关闭连接</span><br><span class=\"line\">keep-alive 长连接</span><br><span class=\"line\">在HTTP1.1协议中默认长连接，有个 Connection 头，Connection有两个值，close和keep-alive，这个头就相当于客户端告诉服务端，服务端你执行完成请求之后，是关闭连接还是保持连接，保持连接就意味着在保持连接期间，只能由客户端主动断开连接。还有一个keep-alive的头，设置的值就代表了服务端保持连接保持多久</span><br><span class=\"line\">#ngx</span><br><span class=\"line\">keepalive 100;          # 保持的空闲连接数</span><br><span class=\"line\">keepalive_timeout 60s;   # 空闲超时时间</span><br><span class=\"line\">keepalive_requests 100;  # 单连接最大请求数</span><br><span class=\"line\">location / &#123;</span><br><span class=\"line\">    proxy_pass http://backend_servers;</span><br><span class=\"line\">    proxy_http_version 1.1;     # 关键：使用 HTTP/1.1</span><br><span class=\"line\">    proxy_set_header Connection &quot;&quot;;  # 清除 Connection 头（避免传递错误值）</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># Linux 内核参数（默认值通常为 7200 秒）默认不启用</span><br><span class=\"line\">sysctl -w net.ipv4.tcp_keepalive_time=1800  # 空闲 1800 秒后发送探针</span><br><span class=\"line\">sysctl -w net.ipv4.tcp_keepalive_probes=3   # 发送 3 次无响应后关闭</span><br><span class=\"line\">sysctl -w net.ipv4.tcp_keepalive_intvl=15   # 每次探针间隔 15 秒</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"相关参数\"><a href=\"#相关参数\" class=\"headerlink\" title=\"相关参数\"></a>相关参数</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -ant | awk &#x27;/^tcp/ &#123;++y[$NF]&#125; END &#123;for(w in y) print w, y[w]&#125;&#x27;</span><br><span class=\"line\">net.ipv4.tcp_syncookies = 1 </span><br><span class=\"line\">net.ipv4.tcp_tw_reuse = 1 </span><br><span class=\"line\">net.ipv4.tcp_tw_recycle = 1</span><br><span class=\"line\">net.ipv4.tcp_fin_timeout = 30</span><br><span class=\"line\">==============================================</span><br><span class=\"line\">net.ipv4.tcp_tw_reuse = 1</span><br><span class=\"line\">表示开启重用。允许将一个处于TIME-WAIT状态的端口重新用于新的TCP连接，默认为0，表示关闭，其防止重复报文的原理也是时间戳</span><br><span class=\"line\">net.ipv4.tcp_tw_recycle = 1</span><br><span class=\"line\">表示开启TCP连接中TIME-WAIT sockets的快速回收，意思就是系统会保存最近一次该socket连接上的传输报文（包括数据或者仅仅是ACK报文）的时间戳，当相同四元组socket过来的报文的时间戳小于缓存下来的时间戳则丢弃该数据包，并回收这个socket，默认为0，表示关闭。开启这个功能风险有点大，NAT环境可能导致DROP掉SYN包（回复RST），在NAT场景下不要使用。需要注意在Linux内核4.10版本以后该参数就已经被移除了。</span><br><span class=\"line\">net.ipv4.tcp_fin_timeout = 60</span><br><span class=\"line\">这个时间不是修改2MSL的时长，主动关闭连接的一方接收到ACK之后会进入，FIN_WAIT-2状态，然后等待被动关闭一方发送FIN，这个时间是设置主动关闭的一方等待对方发送FIN的最长时长，默认是60秒。在这个状态下端口是不可能被重用的，文件描述符和内存也不会被释放，因为这个阶段被动关闭的一方有可能还有数据要发送，因为对端处于CLOSE_WAIT状态，也就是等待上层应用程序。关于这个的真实含义我希望大家清楚，而且不要调整的太小当然太大也不行，至少在3.10内核版本上这个参数不是调整的TIME_WAIT时长。</span><br><span class=\"line\">net.ipv4.ip_local_port_range = 32768 60999</span><br><span class=\"line\">表示用于外连使用的随机高位端口范围，也就是作为客户端连接其他服务的时候系统从这个范围随机取出一个端口来作为源端口使用来去连接对端服务器，这个范围也就决定了最多主动能同时建立多少个外连。</span><br><span class=\"line\">net.ipv4.tcp_max_tw_buckets = 6000</span><br><span class=\"line\">同时保持TIME_WAIT套接字的最大个数，超过这个数字那么该TIME_WAIT套接字将立刻被释放并在/var/log/message日志中打印警告信息（TCP: time wait bucket table overflow）。这个过多主要是消耗内存，单个TIME_WAIT占用内存非常小，但是多了就不好了，这个主要看内存以及你的服务器是否直接对外。</span><br><span class=\"line\">使用net.ipv4.tcp_tw_reuse和net.ipv4.tcp_tw_recycle 的前提是开启时间戳net.ipv4.tcp_timestamps = 1不过这一项默认是开启的</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"CLOSE-WAIT\"><a href=\"#CLOSE-WAIT\" class=\"headerlink\" title=\"CLOSE_WAIT\"></a>CLOSE_WAIT</h1><ul>\n<li>这种状态的含义其实是表示在等待关闭。怎么理解呢？当对方close一个SOCKET后发送FIN报文给自己，你系统毫无疑问地会回应一个ACK报文给对方，此时则进入到CLOSE_WAIT状态。接下来呢，实际上你真正需要考虑的事情是查看你是否还有数据发送给对方，如果没有的话，那么你也就可以close这个SOCKET，发送FIN报文给对方，也即关闭连接。所以你在CLOSE_WAIT状态下，需要完成的事情是等待你去关闭连接。CLOSE_WAIT一般是由于对端主动关闭，而我方没有正确处理的原因引起的，临时解决重启服务，永久解决就是修改程序逻辑<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">客户端（主动关闭方）          服务器（被动关闭方）</span><br><span class=\"line\">       |                               |</span><br><span class=\"line\">       |--- GET /bigfile.zip ---------&gt;| </span><br><span class=\"line\">       |&lt;--- 200 OK + 文件数据 ---------|</span><br><span class=\"line\">       |                               |</span><br><span class=\"line\">       |--- FIN (我要关闭) ------------&gt;| → 客户端进入 FIN_WAIT_1</span><br><span class=\"line\">       |&lt;--- ACK ----------------------| → 服务端进入 CLOSE_WAIT</span><br><span class=\"line\">       |                               |（此时服务端还在发送剩余文件数据）</span><br><span class=\"line\">       |&lt;--- 剩余数据包 ----------------|</span><br><span class=\"line\">       |&lt;--- FIN (我也关闭) ------------| → 服务端进入 LAST_ACK</span><br><span class=\"line\">       |--- ACK -----------------------&gt;| → 客户端进入 TIME_WAIT                </span><br><span class=\"line\">#没有调用s.close()关闭socket，会造成大量CLOSE_WAIT</span><br><span class=\"line\">import socket</span><br><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def create_sockets(num_sockets):</span><br><span class=\"line\">    sockets = []</span><br><span class=\"line\">    for _ in range(num_sockets):</span><br><span class=\"line\">        # 创建一个 TCP 套接字</span><br><span class=\"line\">        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class=\"line\">        print(f&quot;创建 socket &#123;_ + 1&#125;: &#123;s.fileno()&#125;，状态为 alloc&quot;)</span><br><span class=\"line\">        sockets.append(s)</span><br><span class=\"line\">    return sockets</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &quot;__main__&quot;:</span><br><span class=\"line\">    num_sockets = 10</span><br><span class=\"line\">    while True:</span><br><span class=\"line\">        num_sockets  += 10</span><br><span class=\"line\">        sockets = create_sockets(num_sockets)</span><br><span class=\"line\">        print(f&quot;总共创建了 &#123;num_sockets&#125; 个 socket 对象。&quot;)</span><br><span class=\"line\">        time.sleep(10)</span><br><span class=\"line\"></span><br><span class=\"line\">#shell</span><br><span class=\"line\">cat /proc/net/sockstat | grep sockets | awk &#x27;&#123;print $3&#125;&#x27;</span><br><span class=\"line\">netstat -n | awk &#x27;/^tcp/ &#123;++state[$NF]&#125; END &#123;for(key in state) print key,&quot;\\t&quot;,state[key]&#125;&#x27;</span><br><span class=\"line\">for i in `ls /proc/ |grep &#x27;[0-9]&#x27;`</span><br><span class=\"line\">do</span><br><span class=\"line\">    mycount=`ls /proc/$i/fd|wc -l`</span><br><span class=\"line\">    echo &quot;$i $mycount&quot;</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"websocket","date":"2025-05-28T07:43:49.000Z","_content":"# 异步\n因为websocket会使用到异步操作先了解一下异步\n```python\nimport asyncio\nimport time\n\n\nasync def task(name, duration):\n    print(f\"[{time.strftime('%H:%M:%S')}] 任务 {name} 开始\")\n    await asyncio.sleep(duration)  # 模拟并发等待\n    print(f\"[{time.strftime('%H:%M:%S')}] 任务 {name} 完成\")\n\n\ndef task_(name, duration):\n    print(f\"[{time.strftime('%H:%M:%S')}] 任务 {name} 开始\")\n    time.sleep(duration)  # 模拟耗时操作\n    print(f\"[{time.strftime('%H:%M:%S')}] 任务 {name} 完成\")\n\n\nasync def main():\n    start_time = time.time()\n    print(f\"[{time.strftime('%H:%M:%S')}] 异步任务开始\")\n\n    await asyncio.gather(\n        task(\"A\", 2),\n        task(\"B\", 3),\n        task(\"C\", 1)\n    )\n\n    end_time = time.time()\n    print(f\"[{time.strftime('%H:%M:%S')}] 异步任务总耗时: {end_time - start_time:.2f} 秒\")\n\n\ndef main_():\n    start_time = time.time()\n    print(f\"[{time.strftime('%H:%M:%S')}] 同步任务开始\")\n\n    task_(\"A\", 2)\n    task_(\"B\", 3)\n    task_(\"C\", 1)\n\n    end_time = time.time()\n    print(f\"[{time.strftime('%H:%M:%S')}] 同步任务总耗时: {end_time - start_time:.2f} 秒\")\n\n\nif __name__ == \"__main__\":\n    print(\"======================异步==========================\")\n    asyncio.run(main())\n    print(\"======================同步==========================\")\n    main_()\n\n\n#结果可以看出异步不需要等待会直接执行下一步操作，任务完成可以使用await来回调处理完成结果\n======================异步==========================\n[14:45:43] 异步任务开始\n[14:45:43] 任务 A 开始\n[14:45:43] 任务 B 开始\n[14:45:43] 任务 C 开始\n[14:45:44] 任务 C 完成\n[14:45:45] 任务 A 完成\n[14:45:46] 任务 B 完成\n[14:45:46] 异步任务总耗时: 3.00 秒\n======================同步==========================\n[14:45:46] 同步任务开始\n[14:45:46] 任务 A 开始\n[14:45:48] 任务 A 完成\n[14:45:48] 任务 B 开始\n[14:45:51] 任务 B 完成\n[14:45:51] 任务 C 开始\n[14:45:52] 任务 C 完成\n[14:45:52] 同步任务总耗时: 6.00 秒\n```\n# websocket\n\n## 服务端\n```python\nimport asyncio\nimport websockets\n#https://websockets.readthedocs.io/en/stable/\n# 处理客户端连接\nasync def handle_client(websocket):\n    async for message in websocket:\n        print(f\"收到客户端消息: {message}\")\n        reply = f\"机器人回复：你说的是 '{message}' 对吗？\"\n        await websocket.send(reply)\n\n\n# async def main_logic(websocket, path):\n#    # await check_permit(websocket)\n#\n#     await handle_client(websocket)\n\n# 启动服务器\nasync def main():\n    async with websockets.serve(handle_client, \"localhost\", 8765):\n        print(\"WebSocket 服务器已启动，端口 8765\")\n        await asyncio.Future()  # 永久运行\n\nasyncio.run(main())\n```\n\n\n\n## 客户端\n```python\nimport asyncio\nimport websockets\n\nasync def client():\n    async with websockets.connect(\"ws://localhost:8765\") as websocket:\n        while True:\n            message = input(\"请输入消息（输入 q 退出）: \")\n            if message == 'q':\n                break\n            await websocket.send(message)\n            response = await websocket.recv()\n            print(f\"收到回复: {response}\")\n\nasyncio.run(client())\n#效果，相当于打开了一个通道双方都可以发消息\nWebSocket 服务器已启动，端口 8765\n请输入消息（输入 q 退出）: hello websockets\n收到回复: 机器人回复：你说的是 'hello websockets' 对吗？\n请输入消息（输入 q 退出）: \n```\n# 额外\n## fastapi框架使用websocket\n```python\nfrom fastapi import FastAPI, WebSocket, WebSocketDisconnect\nfrom fastapi.responses import HTMLResponse\nfrom fastapi.middleware.cors import CORSMiddleware\nimport json\n\napp = FastAPI()\n\n# 配置CORS跨域\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\n# HTML页面（修改了前端WebSocket实现）\nHTML_TEMPLATE = '''\n<!DOCTYPE html>\n<html>\n<head>\n    <title>FastAPI 聊天</title>\n    <style>\n        body { max-width: 800px; margin: 20px auto; padding: 20px; }\n        #output { \n            height: 300px; \n            border: 1px solid #ccc; \n            overflow-y: auto; \n            padding: 10px; \n            margin-bottom: 10px;\n        }\n        #input { \n            width: 80%; \n            padding: 8px;\n            margin-right: 10px;\n        }\n        button {\n            padding: 8px 16px;\n            background: #007bff;\n            color: white;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n        }\n        button:hover {\n            opacity: 0.8;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"output\"></div>\n    <input type=\"text\" id=\"input\" placeholder=\"输入消息...\">\n    <button onclick=\"sendMessage()\">发送</button>\n\n    <script>\n        // 初始化WebSocket连接\n        const socket = new WebSocket(`ws://${window.location.host}/ws`);\n\n        // 连接成功回调\n        socket.onopen = () => {\n            addMessage('系统', '已连接到服务器');\n        };\n\n        // 接收消息处理\n        socket.onmessage = (event) => {\n            const data = JSON.parse(event.data);\n            addMessage('机器人', data.message);\n        };\n\n        // 错误处理\n        socket.onerror = (error) => {\n            addMessage('系统', `连接错误: ${error.message}`);\n        };\n\n        // 关闭连接处理\n        socket.onclose = () => {\n            addMessage('系统', '连接已断开');\n        };\n\n        // 发送消息\n        function sendMessage() {\n            const input = document.getElementById('input');\n            const message = input.value.trim();\n            if (message) {\n                socket.send(JSON.stringify({\n                    type: \"user_message\",\n                    content: message\n                }));\n                addMessage('我', message);\n                input.value = '';\n            }\n        }\n\n        // 添加消息到界面\n        function addMessage(sender, content) {\n            const output = document.getElementById('output');\n            const div = document.createElement('div');\n            div.innerHTML = `<strong>${sender}:</strong> ${content}`;\n            output.appendChild(div);\n            // 自动滚动到底部\n            output.scrollTop = output.scrollHeight;\n        }\n    </script>\n</body>\n</html>\n'''\n\n\n@app.get(\"/\")\nasync def index():\n    return HTMLResponse(HTML_TEMPLATE)\n\n\n# WebSocket端点\n@app.websocket(\"/ws\")\nasync def websocket_endpoint(websocket: WebSocket):\n    await websocket.accept()\n    try:\n        while True:\n            # 接收客户端消息\n            data = await websocket.receive_text()\n            message_data = json.loads(data)\n\n            # 处理客户端消息\n            if message_data['type'] == 'user_message':\n                print(f\"收到客户端消息: {message_data['content']}\")\n\n                # 构造回复消息\n                reply = {\n                    \"type\": \"server_response\",\n                    \"message\": f\"机器人回复：你说的是 '{message_data['content']}' 对吗？\"\n                }\n\n                # 发送回复\n                await websocket.send_json(reply)\n\n    except WebSocketDisconnect:\n        print(\"客户端断开连接\")\n    except Exception as e:\n        print(f\"发生错误: {str(e)}\")\n\n\nif __name__ == \"__main__\":\n    import uvicorn\n\n    uvicorn.run(app, host=\"0.0.0.0\", port=8001)\n```\n## flask使用websocket\n```python\nimport eventlet\neventlet.monkey_patch()  # 关键：启用异步支持\nfrom flask import Flask, render_template_string\n#pip install flask-socketio eventlet\nfrom flask_socketio import SocketIO, emit\n\n\napp = Flask(__name__)\napp.config['SECRET_KEY'] = 'secret!'\nsocketio = SocketIO(app, cors_allowed_origins=\"*\")  # 允许跨域\n\n\n@app.route('/')\ndef index():\n    return render_template_string('''\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Socket.IO 聊天</title>\n        <script src=\"https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.7.2/socket.io.js\"></script>\n        <style>\n            /* 保持原有样式不变 */\n            body { max-width: 800px; margin: 20px auto; padding: 20px; }\n            #output { height: 300px; border: 1px solid #ccc; overflow-y: auto; padding: 10px; }\n        </style>\n    </head>\n    <body>\n        <div id=\"output\"></div>\n        <input id=\"input\" placeholder=\"输入消息\">\n        <button onclick=\"send()\">发送</button>\n\n        <script>\n            const socket = io();  // 自动连接当前域名\n\n            // 连接成功回调\n            socket.on('connect', () => {\n                addMessage('系统', '已连接到服务器');\n            });\n\n            // 接收服务器消息\n            socket.on('server_response', (data) => {\n                addMessage('机器人', data.message);\n            });\n\n            // 发送消息\n            function send() {\n                const input = document.getElementById('input');\n                const message = input.value.trim();\n                if (message) {\n                    socket.emit('client_message', message);\n                    addMessage('我', message);\n                    input.value = '';\n                }\n            }\n\n            // 添加消息到界面\n            function addMessage(sender, content) {\n                const div = document.createElement('div');\n                div.innerHTML = `<strong>${sender}:</strong> ${content}`;\n                document.getElementById('output').appendChild(div);\n                // 自动滚动到底部\n                const output = document.getElementById('output');\n                output.scrollTop = output.scrollHeight;\n            }\n        </script>\n    </body>\n    </html>\n    ''')\n\n\n# Socket.IO 事件处理\n@socketio.on('client_message')\ndef handle_message(message):\n    print(f'收到客户端消息: {message}')\n    # 构造回复消息\n    reply = f\"机器人回复：你说的是 '{message}' 对吗？\"\n    # 发送消息给客户端\n    emit('server_response', {'message': reply})\n\n\nif __name__ == '__main__':\n    socketio.run(app, host='0.0.0.0', port=8000, debug=True)\n```\n## 大模型使用websocket聊天\n```python\n# main.py\nfrom fastapi import FastAPI, WebSocket\nfrom fastapi.responses import HTMLResponse\nimport requests\nimport json\n\napp = FastAPI()\n\n# 存储对话历史 (生产环境建议使用数据库)\nconversation_history = []\n\n# 集成前端页面与后端逻辑\nHTML_TEMPLATE = \"\"\"\n<!DOCTYPE html>\n<html>\n<head>\n    <title>AI 对话助手</title>\n    <style>\n        body {\n            max-width: 800px;\n            margin: 0 auto;\n            padding: 20px;\n            font-family: Arial, sans-serif;\n        }\n        #chatContainer {\n            height: 60vh;\n            border: 1px solid #ddd;\n            border-radius: 8px;\n            overflow-y: auto;\n            padding: 15px;\n            margin-bottom: 15px;\n            background: #f9f9f9;\n        }\n        .message {\n            margin: 10px 0;\n            padding: 12px;\n            border-radius: 15px;\n            max-width: 80%;\n            word-wrap: break-word;\n        }\n        .user-message {\n            background: #e3f2fd;\n            margin-left: auto;\n            border-bottom-right-radius: 5px;\n        }\n        .bot-message {\n            background: #fff;\n            border: 1px solid #eee;\n            margin-right: auto;\n            border-bottom-left-radius: 5px;\n        }\n        #inputContainer {\n            display: flex;\n            gap: 10px;\n        }\n        #userInput {\n            flex: 1;\n            padding: 12px;\n            border: 1px solid #ddd;\n            border-radius: 25px;\n            outline: none;\n        }\n        button {\n            padding: 12px 25px;\n            background: #007bff;\n            color: white;\n            border: none;\n            border-radius: 25px;\n            cursor: pointer;\n            transition: background 0.3s;\n        }\n        button:hover {\n            background: #0056b3;\n        }\n        .status {\n            color: #666;\n            text-align: center;\n            padding: 10px;\n        }\n    </style>\n</head>\n<body>\n    <h1>AI 对话助手</h1>\n    <div id=\"chatContainer\"></div>\n    <div id=\"inputContainer\">\n        <input type=\"text\" id=\"userInput\" placeholder=\"输入消息...\" />\n        <button onclick=\"sendMessage()\">发送</button>\n    </div>\n    <div class=\"status\" id=\"status\">连接状态：正常</div>\n    \n   // <iframe\n   //      src=\"http://47.237.81.149/chatbot/9h9nyQcblGTesiGJ\"\n    //     style=\"width: 100%; height: 100%; min-height: 700px\"\n   //      frameborder=\"0\"\n  //       allow=\"microphone\">\n   // </iframe>\n\n    <script>\n        const ws = new WebSocket('ws://' + window.location.host + '/ws');\n        const chatContainer = document.getElementById('chatContainer');\n        let isBotResponding = false;\n\n        // WebSocket 事件处理\n        ws.onopen = () => updateStatus('已连接');\n        ws.onclose = () => updateStatus('连接已断开');\n        ws.onerror = () => updateStatus('连接错误');\n\n        ws.onmessage = (event) => {\n            const data = JSON.parse(event.data);\n            handleResponse(data);\n        };\n\n        function handleResponse(data) {\n            switch(data.type) {\n                case 'user_message':\n                    appendMessage(data.content, 'user');\n                    break;\n                case 'assistant_start':\n                    isBotResponding = true;\n                    appendMessage('', 'bot');\n                    break;\n                case 'assistant_chunk':\n                    appendChunk(data.content);\n                    break;\n                case 'assistant_end':\n                    isBotResponding = false;\n                    break;\n                case 'error':\n                    appendMessage(`错误：${data.content}`, 'error');\n                    break;\n            }\n        }\n\n        function appendMessage(content, role) {\n            const div = document.createElement('div');\n            div.className = `message ${role}-message`;\n            div.textContent = content;\n            chatContainer.appendChild(div);\n            scrollToBottom();\n        }\n\n        function appendChunk(content) {\n            const messages = document.getElementsByClassName('bot-message');\n            const lastMsg = messages[messages.length - 1];\n            lastMsg.textContent += content;\n            scrollToBottom();\n        }\n\n        function scrollToBottom() {\n            chatContainer.scrollTop = chatContainer.scrollHeight;\n        }\n\n        function updateStatus(text) {\n            document.getElementById('status').textContent = `状态：${text}`;\n        }\n\n        function sendMessage() {\n            const input = document.getElementById('userInput');\n            const message = input.value.trim();\n            if (message && !isBotResponding) {\n                ws.send(message);\n                input.value = '';\n            }\n        }\n\n        // 支持回车发送\n        document.getElementById('userInput').addEventListener('keypress', (e) => {\n            if (e.key === 'Enter') sendMessage();\n        });\n    </script>\n</body>\n</html>\n\"\"\"\n\n\n@app.get(\"/\")\nasync def get():\n    return HTMLResponse(HTML_TEMPLATE)\n\n\n@app.websocket(\"/ws\")\nasync def websocket_endpoint(websocket: WebSocket):\n    await websocket.accept()\n    try:\n        while True:\n            # 接收用户消息\n            user_message = await websocket.receive_text()\n\n            # 更新对话历史\n            conversation_history.append({\"role\": \"user\", \"content\": user_message})\n\n            # 发送用户消息到前端\n            await websocket.send_json({\n                \"type\": \"user_message\",\n                \"content\": user_message\n            })\n\n            # 准备流式请求\n            await websocket.send_json({\"type\": \"assistant_start\"})\n\n            # 构造请求数据\n            request_data = {\n                \"model\": \"deepseek-r1:latest\",\n                \"messages\": conversation_history,\n                \"stream\": True\n            }\n\n            # 流式获取响应\n            full_response = []\n            with requests.post(\n                    \"http://1.1.1.1:11434/api/chat\",#大模型接口地址\n                    json=request_data,\n                    stream=True\n            ) as response:\n                response.raise_for_status()\n                for line in response.iter_lines():\n                    if line:\n                        chunk = json.loads(line.decode('utf-8'))\n                        if 'message' in chunk:\n                            content = chunk['message']['content']\n                            full_response.append(content)\n                            await websocket.send_json({\n                                \"type\": \"assistant_chunk\",\n                                \"content\": content\n                            })\n\n            # 保存完整响应\n            conversation_history.append({\n                \"role\": \"assistant\",\n                \"content\": \"\".join(full_response)\n            })\n            await websocket.send_json({\"type\": \"assistant_end\"})\n\n    except Exception as e:\n        await websocket.send_json({\n            \"type\": \"error\",\n            \"content\": f\"系统错误: {str(e)}\"\n        })\n    finally:\n        await websocket.close()\n\n\nif __name__ == \"__main__\":\n    import uvicorn\n\n    uvicorn.run(app, host=\"0.0.0.0\", port=8000)\n```","source":"_posts/websocket.md","raw":"---\ntitle: websocket\ndate: 2025-05-28 15:43:49\ntags: websocket\n---\n# 异步\n因为websocket会使用到异步操作先了解一下异步\n```python\nimport asyncio\nimport time\n\n\nasync def task(name, duration):\n    print(f\"[{time.strftime('%H:%M:%S')}] 任务 {name} 开始\")\n    await asyncio.sleep(duration)  # 模拟并发等待\n    print(f\"[{time.strftime('%H:%M:%S')}] 任务 {name} 完成\")\n\n\ndef task_(name, duration):\n    print(f\"[{time.strftime('%H:%M:%S')}] 任务 {name} 开始\")\n    time.sleep(duration)  # 模拟耗时操作\n    print(f\"[{time.strftime('%H:%M:%S')}] 任务 {name} 完成\")\n\n\nasync def main():\n    start_time = time.time()\n    print(f\"[{time.strftime('%H:%M:%S')}] 异步任务开始\")\n\n    await asyncio.gather(\n        task(\"A\", 2),\n        task(\"B\", 3),\n        task(\"C\", 1)\n    )\n\n    end_time = time.time()\n    print(f\"[{time.strftime('%H:%M:%S')}] 异步任务总耗时: {end_time - start_time:.2f} 秒\")\n\n\ndef main_():\n    start_time = time.time()\n    print(f\"[{time.strftime('%H:%M:%S')}] 同步任务开始\")\n\n    task_(\"A\", 2)\n    task_(\"B\", 3)\n    task_(\"C\", 1)\n\n    end_time = time.time()\n    print(f\"[{time.strftime('%H:%M:%S')}] 同步任务总耗时: {end_time - start_time:.2f} 秒\")\n\n\nif __name__ == \"__main__\":\n    print(\"======================异步==========================\")\n    asyncio.run(main())\n    print(\"======================同步==========================\")\n    main_()\n\n\n#结果可以看出异步不需要等待会直接执行下一步操作，任务完成可以使用await来回调处理完成结果\n======================异步==========================\n[14:45:43] 异步任务开始\n[14:45:43] 任务 A 开始\n[14:45:43] 任务 B 开始\n[14:45:43] 任务 C 开始\n[14:45:44] 任务 C 完成\n[14:45:45] 任务 A 完成\n[14:45:46] 任务 B 完成\n[14:45:46] 异步任务总耗时: 3.00 秒\n======================同步==========================\n[14:45:46] 同步任务开始\n[14:45:46] 任务 A 开始\n[14:45:48] 任务 A 完成\n[14:45:48] 任务 B 开始\n[14:45:51] 任务 B 完成\n[14:45:51] 任务 C 开始\n[14:45:52] 任务 C 完成\n[14:45:52] 同步任务总耗时: 6.00 秒\n```\n# websocket\n\n## 服务端\n```python\nimport asyncio\nimport websockets\n#https://websockets.readthedocs.io/en/stable/\n# 处理客户端连接\nasync def handle_client(websocket):\n    async for message in websocket:\n        print(f\"收到客户端消息: {message}\")\n        reply = f\"机器人回复：你说的是 '{message}' 对吗？\"\n        await websocket.send(reply)\n\n\n# async def main_logic(websocket, path):\n#    # await check_permit(websocket)\n#\n#     await handle_client(websocket)\n\n# 启动服务器\nasync def main():\n    async with websockets.serve(handle_client, \"localhost\", 8765):\n        print(\"WebSocket 服务器已启动，端口 8765\")\n        await asyncio.Future()  # 永久运行\n\nasyncio.run(main())\n```\n\n\n\n## 客户端\n```python\nimport asyncio\nimport websockets\n\nasync def client():\n    async with websockets.connect(\"ws://localhost:8765\") as websocket:\n        while True:\n            message = input(\"请输入消息（输入 q 退出）: \")\n            if message == 'q':\n                break\n            await websocket.send(message)\n            response = await websocket.recv()\n            print(f\"收到回复: {response}\")\n\nasyncio.run(client())\n#效果，相当于打开了一个通道双方都可以发消息\nWebSocket 服务器已启动，端口 8765\n请输入消息（输入 q 退出）: hello websockets\n收到回复: 机器人回复：你说的是 'hello websockets' 对吗？\n请输入消息（输入 q 退出）: \n```\n# 额外\n## fastapi框架使用websocket\n```python\nfrom fastapi import FastAPI, WebSocket, WebSocketDisconnect\nfrom fastapi.responses import HTMLResponse\nfrom fastapi.middleware.cors import CORSMiddleware\nimport json\n\napp = FastAPI()\n\n# 配置CORS跨域\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\n# HTML页面（修改了前端WebSocket实现）\nHTML_TEMPLATE = '''\n<!DOCTYPE html>\n<html>\n<head>\n    <title>FastAPI 聊天</title>\n    <style>\n        body { max-width: 800px; margin: 20px auto; padding: 20px; }\n        #output { \n            height: 300px; \n            border: 1px solid #ccc; \n            overflow-y: auto; \n            padding: 10px; \n            margin-bottom: 10px;\n        }\n        #input { \n            width: 80%; \n            padding: 8px;\n            margin-right: 10px;\n        }\n        button {\n            padding: 8px 16px;\n            background: #007bff;\n            color: white;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n        }\n        button:hover {\n            opacity: 0.8;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"output\"></div>\n    <input type=\"text\" id=\"input\" placeholder=\"输入消息...\">\n    <button onclick=\"sendMessage()\">发送</button>\n\n    <script>\n        // 初始化WebSocket连接\n        const socket = new WebSocket(`ws://${window.location.host}/ws`);\n\n        // 连接成功回调\n        socket.onopen = () => {\n            addMessage('系统', '已连接到服务器');\n        };\n\n        // 接收消息处理\n        socket.onmessage = (event) => {\n            const data = JSON.parse(event.data);\n            addMessage('机器人', data.message);\n        };\n\n        // 错误处理\n        socket.onerror = (error) => {\n            addMessage('系统', `连接错误: ${error.message}`);\n        };\n\n        // 关闭连接处理\n        socket.onclose = () => {\n            addMessage('系统', '连接已断开');\n        };\n\n        // 发送消息\n        function sendMessage() {\n            const input = document.getElementById('input');\n            const message = input.value.trim();\n            if (message) {\n                socket.send(JSON.stringify({\n                    type: \"user_message\",\n                    content: message\n                }));\n                addMessage('我', message);\n                input.value = '';\n            }\n        }\n\n        // 添加消息到界面\n        function addMessage(sender, content) {\n            const output = document.getElementById('output');\n            const div = document.createElement('div');\n            div.innerHTML = `<strong>${sender}:</strong> ${content}`;\n            output.appendChild(div);\n            // 自动滚动到底部\n            output.scrollTop = output.scrollHeight;\n        }\n    </script>\n</body>\n</html>\n'''\n\n\n@app.get(\"/\")\nasync def index():\n    return HTMLResponse(HTML_TEMPLATE)\n\n\n# WebSocket端点\n@app.websocket(\"/ws\")\nasync def websocket_endpoint(websocket: WebSocket):\n    await websocket.accept()\n    try:\n        while True:\n            # 接收客户端消息\n            data = await websocket.receive_text()\n            message_data = json.loads(data)\n\n            # 处理客户端消息\n            if message_data['type'] == 'user_message':\n                print(f\"收到客户端消息: {message_data['content']}\")\n\n                # 构造回复消息\n                reply = {\n                    \"type\": \"server_response\",\n                    \"message\": f\"机器人回复：你说的是 '{message_data['content']}' 对吗？\"\n                }\n\n                # 发送回复\n                await websocket.send_json(reply)\n\n    except WebSocketDisconnect:\n        print(\"客户端断开连接\")\n    except Exception as e:\n        print(f\"发生错误: {str(e)}\")\n\n\nif __name__ == \"__main__\":\n    import uvicorn\n\n    uvicorn.run(app, host=\"0.0.0.0\", port=8001)\n```\n## flask使用websocket\n```python\nimport eventlet\neventlet.monkey_patch()  # 关键：启用异步支持\nfrom flask import Flask, render_template_string\n#pip install flask-socketio eventlet\nfrom flask_socketio import SocketIO, emit\n\n\napp = Flask(__name__)\napp.config['SECRET_KEY'] = 'secret!'\nsocketio = SocketIO(app, cors_allowed_origins=\"*\")  # 允许跨域\n\n\n@app.route('/')\ndef index():\n    return render_template_string('''\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Socket.IO 聊天</title>\n        <script src=\"https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.7.2/socket.io.js\"></script>\n        <style>\n            /* 保持原有样式不变 */\n            body { max-width: 800px; margin: 20px auto; padding: 20px; }\n            #output { height: 300px; border: 1px solid #ccc; overflow-y: auto; padding: 10px; }\n        </style>\n    </head>\n    <body>\n        <div id=\"output\"></div>\n        <input id=\"input\" placeholder=\"输入消息\">\n        <button onclick=\"send()\">发送</button>\n\n        <script>\n            const socket = io();  // 自动连接当前域名\n\n            // 连接成功回调\n            socket.on('connect', () => {\n                addMessage('系统', '已连接到服务器');\n            });\n\n            // 接收服务器消息\n            socket.on('server_response', (data) => {\n                addMessage('机器人', data.message);\n            });\n\n            // 发送消息\n            function send() {\n                const input = document.getElementById('input');\n                const message = input.value.trim();\n                if (message) {\n                    socket.emit('client_message', message);\n                    addMessage('我', message);\n                    input.value = '';\n                }\n            }\n\n            // 添加消息到界面\n            function addMessage(sender, content) {\n                const div = document.createElement('div');\n                div.innerHTML = `<strong>${sender}:</strong> ${content}`;\n                document.getElementById('output').appendChild(div);\n                // 自动滚动到底部\n                const output = document.getElementById('output');\n                output.scrollTop = output.scrollHeight;\n            }\n        </script>\n    </body>\n    </html>\n    ''')\n\n\n# Socket.IO 事件处理\n@socketio.on('client_message')\ndef handle_message(message):\n    print(f'收到客户端消息: {message}')\n    # 构造回复消息\n    reply = f\"机器人回复：你说的是 '{message}' 对吗？\"\n    # 发送消息给客户端\n    emit('server_response', {'message': reply})\n\n\nif __name__ == '__main__':\n    socketio.run(app, host='0.0.0.0', port=8000, debug=True)\n```\n## 大模型使用websocket聊天\n```python\n# main.py\nfrom fastapi import FastAPI, WebSocket\nfrom fastapi.responses import HTMLResponse\nimport requests\nimport json\n\napp = FastAPI()\n\n# 存储对话历史 (生产环境建议使用数据库)\nconversation_history = []\n\n# 集成前端页面与后端逻辑\nHTML_TEMPLATE = \"\"\"\n<!DOCTYPE html>\n<html>\n<head>\n    <title>AI 对话助手</title>\n    <style>\n        body {\n            max-width: 800px;\n            margin: 0 auto;\n            padding: 20px;\n            font-family: Arial, sans-serif;\n        }\n        #chatContainer {\n            height: 60vh;\n            border: 1px solid #ddd;\n            border-radius: 8px;\n            overflow-y: auto;\n            padding: 15px;\n            margin-bottom: 15px;\n            background: #f9f9f9;\n        }\n        .message {\n            margin: 10px 0;\n            padding: 12px;\n            border-radius: 15px;\n            max-width: 80%;\n            word-wrap: break-word;\n        }\n        .user-message {\n            background: #e3f2fd;\n            margin-left: auto;\n            border-bottom-right-radius: 5px;\n        }\n        .bot-message {\n            background: #fff;\n            border: 1px solid #eee;\n            margin-right: auto;\n            border-bottom-left-radius: 5px;\n        }\n        #inputContainer {\n            display: flex;\n            gap: 10px;\n        }\n        #userInput {\n            flex: 1;\n            padding: 12px;\n            border: 1px solid #ddd;\n            border-radius: 25px;\n            outline: none;\n        }\n        button {\n            padding: 12px 25px;\n            background: #007bff;\n            color: white;\n            border: none;\n            border-radius: 25px;\n            cursor: pointer;\n            transition: background 0.3s;\n        }\n        button:hover {\n            background: #0056b3;\n        }\n        .status {\n            color: #666;\n            text-align: center;\n            padding: 10px;\n        }\n    </style>\n</head>\n<body>\n    <h1>AI 对话助手</h1>\n    <div id=\"chatContainer\"></div>\n    <div id=\"inputContainer\">\n        <input type=\"text\" id=\"userInput\" placeholder=\"输入消息...\" />\n        <button onclick=\"sendMessage()\">发送</button>\n    </div>\n    <div class=\"status\" id=\"status\">连接状态：正常</div>\n    \n   // <iframe\n   //      src=\"http://47.237.81.149/chatbot/9h9nyQcblGTesiGJ\"\n    //     style=\"width: 100%; height: 100%; min-height: 700px\"\n   //      frameborder=\"0\"\n  //       allow=\"microphone\">\n   // </iframe>\n\n    <script>\n        const ws = new WebSocket('ws://' + window.location.host + '/ws');\n        const chatContainer = document.getElementById('chatContainer');\n        let isBotResponding = false;\n\n        // WebSocket 事件处理\n        ws.onopen = () => updateStatus('已连接');\n        ws.onclose = () => updateStatus('连接已断开');\n        ws.onerror = () => updateStatus('连接错误');\n\n        ws.onmessage = (event) => {\n            const data = JSON.parse(event.data);\n            handleResponse(data);\n        };\n\n        function handleResponse(data) {\n            switch(data.type) {\n                case 'user_message':\n                    appendMessage(data.content, 'user');\n                    break;\n                case 'assistant_start':\n                    isBotResponding = true;\n                    appendMessage('', 'bot');\n                    break;\n                case 'assistant_chunk':\n                    appendChunk(data.content);\n                    break;\n                case 'assistant_end':\n                    isBotResponding = false;\n                    break;\n                case 'error':\n                    appendMessage(`错误：${data.content}`, 'error');\n                    break;\n            }\n        }\n\n        function appendMessage(content, role) {\n            const div = document.createElement('div');\n            div.className = `message ${role}-message`;\n            div.textContent = content;\n            chatContainer.appendChild(div);\n            scrollToBottom();\n        }\n\n        function appendChunk(content) {\n            const messages = document.getElementsByClassName('bot-message');\n            const lastMsg = messages[messages.length - 1];\n            lastMsg.textContent += content;\n            scrollToBottom();\n        }\n\n        function scrollToBottom() {\n            chatContainer.scrollTop = chatContainer.scrollHeight;\n        }\n\n        function updateStatus(text) {\n            document.getElementById('status').textContent = `状态：${text}`;\n        }\n\n        function sendMessage() {\n            const input = document.getElementById('userInput');\n            const message = input.value.trim();\n            if (message && !isBotResponding) {\n                ws.send(message);\n                input.value = '';\n            }\n        }\n\n        // 支持回车发送\n        document.getElementById('userInput').addEventListener('keypress', (e) => {\n            if (e.key === 'Enter') sendMessage();\n        });\n    </script>\n</body>\n</html>\n\"\"\"\n\n\n@app.get(\"/\")\nasync def get():\n    return HTMLResponse(HTML_TEMPLATE)\n\n\n@app.websocket(\"/ws\")\nasync def websocket_endpoint(websocket: WebSocket):\n    await websocket.accept()\n    try:\n        while True:\n            # 接收用户消息\n            user_message = await websocket.receive_text()\n\n            # 更新对话历史\n            conversation_history.append({\"role\": \"user\", \"content\": user_message})\n\n            # 发送用户消息到前端\n            await websocket.send_json({\n                \"type\": \"user_message\",\n                \"content\": user_message\n            })\n\n            # 准备流式请求\n            await websocket.send_json({\"type\": \"assistant_start\"})\n\n            # 构造请求数据\n            request_data = {\n                \"model\": \"deepseek-r1:latest\",\n                \"messages\": conversation_history,\n                \"stream\": True\n            }\n\n            # 流式获取响应\n            full_response = []\n            with requests.post(\n                    \"http://1.1.1.1:11434/api/chat\",#大模型接口地址\n                    json=request_data,\n                    stream=True\n            ) as response:\n                response.raise_for_status()\n                for line in response.iter_lines():\n                    if line:\n                        chunk = json.loads(line.decode('utf-8'))\n                        if 'message' in chunk:\n                            content = chunk['message']['content']\n                            full_response.append(content)\n                            await websocket.send_json({\n                                \"type\": \"assistant_chunk\",\n                                \"content\": content\n                            })\n\n            # 保存完整响应\n            conversation_history.append({\n                \"role\": \"assistant\",\n                \"content\": \"\".join(full_response)\n            })\n            await websocket.send_json({\"type\": \"assistant_end\"})\n\n    except Exception as e:\n        await websocket.send_json({\n            \"type\": \"error\",\n            \"content\": f\"系统错误: {str(e)}\"\n        })\n    finally:\n        await websocket.close()\n\n\nif __name__ == \"__main__\":\n    import uvicorn\n\n    uvicorn.run(app, host=\"0.0.0.0\", port=8000)\n```","slug":"websocket","published":1,"updated":"2025-08-28T06:39:18.229Z","comments":1,"layout":"post","photos":[],"_id":"cmev1ggcq001ahllz5pntbt6o","content":"<h1 id=\"异步\"><a href=\"#异步\" class=\"headerlink\" title=\"异步\"></a>异步</h1><p>因为websocket会使用到异步操作先了解一下异步</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">task</span>(<span class=\"params\">name, duration</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;[<span class=\"subst\">&#123;time.strftime(<span class=\"string\">&#x27;%H:%M:%S&#x27;</span>)&#125;</span>] 任务 <span class=\"subst\">&#123;name&#125;</span> 开始&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> asyncio.sleep(duration)  <span class=\"comment\"># 模拟并发等待</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;[<span class=\"subst\">&#123;time.strftime(<span class=\"string\">&#x27;%H:%M:%S&#x27;</span>)&#125;</span>] 任务 <span class=\"subst\">&#123;name&#125;</span> 完成&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">task_</span>(<span class=\"params\">name, duration</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;[<span class=\"subst\">&#123;time.strftime(<span class=\"string\">&#x27;%H:%M:%S&#x27;</span>)&#125;</span>] 任务 <span class=\"subst\">&#123;name&#125;</span> 开始&quot;</span>)</span><br><span class=\"line\">    time.sleep(duration)  <span class=\"comment\"># 模拟耗时操作</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;[<span class=\"subst\">&#123;time.strftime(<span class=\"string\">&#x27;%H:%M:%S&#x27;</span>)&#125;</span>] 任务 <span class=\"subst\">&#123;name&#125;</span> 完成&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    start_time = time.time()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;[<span class=\"subst\">&#123;time.strftime(<span class=\"string\">&#x27;%H:%M:%S&#x27;</span>)&#125;</span>] 异步任务开始&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">await</span> asyncio.gather(</span><br><span class=\"line\">        task(<span class=\"string\">&quot;A&quot;</span>, <span class=\"number\">2</span>),</span><br><span class=\"line\">        task(<span class=\"string\">&quot;B&quot;</span>, <span class=\"number\">3</span>),</span><br><span class=\"line\">        task(<span class=\"string\">&quot;C&quot;</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    end_time = time.time()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;[<span class=\"subst\">&#123;time.strftime(<span class=\"string\">&#x27;%H:%M:%S&#x27;</span>)&#125;</span>] 异步任务总耗时: <span class=\"subst\">&#123;end_time - start_time:<span class=\"number\">.2</span>f&#125;</span> 秒&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main_</span>():</span><br><span class=\"line\">    start_time = time.time()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;[<span class=\"subst\">&#123;time.strftime(<span class=\"string\">&#x27;%H:%M:%S&#x27;</span>)&#125;</span>] 同步任务开始&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    task_(<span class=\"string\">&quot;A&quot;</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">    task_(<span class=\"string\">&quot;B&quot;</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">    task_(<span class=\"string\">&quot;C&quot;</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    end_time = time.time()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;[<span class=\"subst\">&#123;time.strftime(<span class=\"string\">&#x27;%H:%M:%S&#x27;</span>)&#125;</span>] 同步任务总耗时: <span class=\"subst\">&#123;end_time - start_time:<span class=\"number\">.2</span>f&#125;</span> 秒&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;======================异步==========================&quot;</span>)</span><br><span class=\"line\">    asyncio.run(main())</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;======================同步==========================&quot;</span>)</span><br><span class=\"line\">    main_()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#结果可以看出异步不需要等待会直接执行下一步操作，任务完成可以使用await来回调处理完成结果</span></span><br><span class=\"line\">======================异步==========================</span><br><span class=\"line\">[<span class=\"number\">14</span>:<span class=\"number\">45</span>:<span class=\"number\">43</span>] 异步任务开始</span><br><span class=\"line\">[<span class=\"number\">14</span>:<span class=\"number\">45</span>:<span class=\"number\">43</span>] 任务 A 开始</span><br><span class=\"line\">[<span class=\"number\">14</span>:<span class=\"number\">45</span>:<span class=\"number\">43</span>] 任务 B 开始</span><br><span class=\"line\">[<span class=\"number\">14</span>:<span class=\"number\">45</span>:<span class=\"number\">43</span>] 任务 C 开始</span><br><span class=\"line\">[<span class=\"number\">14</span>:<span class=\"number\">45</span>:<span class=\"number\">44</span>] 任务 C 完成</span><br><span class=\"line\">[<span class=\"number\">14</span>:<span class=\"number\">45</span>:<span class=\"number\">45</span>] 任务 A 完成</span><br><span class=\"line\">[<span class=\"number\">14</span>:<span class=\"number\">45</span>:<span class=\"number\">46</span>] 任务 B 完成</span><br><span class=\"line\">[<span class=\"number\">14</span>:<span class=\"number\">45</span>:<span class=\"number\">46</span>] 异步任务总耗时: <span class=\"number\">3.00</span> 秒</span><br><span class=\"line\">======================同步==========================</span><br><span class=\"line\">[<span class=\"number\">14</span>:<span class=\"number\">45</span>:<span class=\"number\">46</span>] 同步任务开始</span><br><span class=\"line\">[<span class=\"number\">14</span>:<span class=\"number\">45</span>:<span class=\"number\">46</span>] 任务 A 开始</span><br><span class=\"line\">[<span class=\"number\">14</span>:<span class=\"number\">45</span>:<span class=\"number\">48</span>] 任务 A 完成</span><br><span class=\"line\">[<span class=\"number\">14</span>:<span class=\"number\">45</span>:<span class=\"number\">48</span>] 任务 B 开始</span><br><span class=\"line\">[<span class=\"number\">14</span>:<span class=\"number\">45</span>:<span class=\"number\">51</span>] 任务 B 完成</span><br><span class=\"line\">[<span class=\"number\">14</span>:<span class=\"number\">45</span>:<span class=\"number\">51</span>] 任务 C 开始</span><br><span class=\"line\">[<span class=\"number\">14</span>:<span class=\"number\">45</span>:<span class=\"number\">52</span>] 任务 C 完成</span><br><span class=\"line\">[<span class=\"number\">14</span>:<span class=\"number\">45</span>:<span class=\"number\">52</span>] 同步任务总耗时: <span class=\"number\">6.00</span> 秒</span><br></pre></td></tr></table></figure>\n<h1 id=\"websocket\"><a href=\"#websocket\" class=\"headerlink\" title=\"websocket\"></a>websocket</h1><h2 id=\"服务端\"><a href=\"#服务端\" class=\"headerlink\" title=\"服务端\"></a>服务端</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"><span class=\"keyword\">import</span> websockets</span><br><span class=\"line\"><span class=\"comment\">#https://websockets.readthedocs.io/en/stable/</span></span><br><span class=\"line\"><span class=\"comment\"># 处理客户端连接</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">handle_client</span>(<span class=\"params\">websocket</span>):</span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"keyword\">for</span> message <span class=\"keyword\">in</span> websocket:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;收到客户端消息: <span class=\"subst\">&#123;message&#125;</span>&quot;</span>)</span><br><span class=\"line\">        reply = <span class=\"string\">f&quot;机器人回复：你说的是 &#x27;<span class=\"subst\">&#123;message&#125;</span>&#x27; 对吗？&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">await</span> websocket.send(reply)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># async def main_logic(websocket, path):</span></span><br><span class=\"line\"><span class=\"comment\">#    # await check_permit(websocket)</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#     await handle_client(websocket)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动服务器</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"keyword\">with</span> websockets.serve(handle_client, <span class=\"string\">&quot;localhost&quot;</span>, <span class=\"number\">8765</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;WebSocket 服务器已启动，端口 8765&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">await</span> asyncio.Future()  <span class=\"comment\"># 永久运行</span></span><br><span class=\"line\"></span><br><span class=\"line\">asyncio.run(main())</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"><span class=\"keyword\">import</span> websockets</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">client</span>():</span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"keyword\">with</span> websockets.connect(<span class=\"string\">&quot;ws://localhost:8765&quot;</span>) <span class=\"keyword\">as</span> websocket:</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            message = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入消息（输入 q 退出）: &quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> message == <span class=\"string\">&#x27;q&#x27;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            <span class=\"keyword\">await</span> websocket.send(message)</span><br><span class=\"line\">            response = <span class=\"keyword\">await</span> websocket.recv()</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;收到回复: <span class=\"subst\">&#123;response&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">asyncio.run(client())</span><br><span class=\"line\"><span class=\"comment\">#效果，相当于打开了一个通道双方都可以发消息</span></span><br><span class=\"line\">WebSocket 服务器已启动，端口 <span class=\"number\">8765</span></span><br><span class=\"line\">请输入消息（输入 q 退出）: hello websockets</span><br><span class=\"line\">收到回复: 机器人回复：你说的是 <span class=\"string\">&#x27;hello websockets&#x27;</span> 对吗？</span><br><span class=\"line\">请输入消息（输入 q 退出）: </span><br></pre></td></tr></table></figure>\n<h1 id=\"额外\"><a href=\"#额外\" class=\"headerlink\" title=\"额外\"></a>额外</h1><h2 id=\"fastapi框架使用websocket\"><a href=\"#fastapi框架使用websocket\" class=\"headerlink\" title=\"fastapi框架使用websocket\"></a>fastapi框架使用websocket</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> fastapi <span class=\"keyword\">import</span> FastAPI, WebSocket, WebSocketDisconnect</span><br><span class=\"line\"><span class=\"keyword\">from</span> fastapi.responses <span class=\"keyword\">import</span> HTMLResponse</span><br><span class=\"line\"><span class=\"keyword\">from</span> fastapi.middleware.cors <span class=\"keyword\">import</span> CORSMiddleware</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\">app = FastAPI()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置CORS跨域</span></span><br><span class=\"line\">app.add_middleware(</span><br><span class=\"line\">    CORSMiddleware,</span><br><span class=\"line\">    allow_origins=[<span class=\"string\">&quot;*&quot;</span>],</span><br><span class=\"line\">    allow_credentials=<span class=\"literal\">True</span>,</span><br><span class=\"line\">    allow_methods=[<span class=\"string\">&quot;*&quot;</span>],</span><br><span class=\"line\">    allow_headers=[<span class=\"string\">&quot;*&quot;</span>],</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># HTML页面（修改了前端WebSocket实现）</span></span><br><span class=\"line\">HTML_TEMPLATE = <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;html&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;head&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;title&gt;FastAPI 聊天&lt;/title&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;style&gt;</span></span><br><span class=\"line\"><span class=\"string\">        body &#123; max-width: 800px; margin: 20px auto; padding: 20px; &#125;</span></span><br><span class=\"line\"><span class=\"string\">        #output &#123; </span></span><br><span class=\"line\"><span class=\"string\">            height: 300px; </span></span><br><span class=\"line\"><span class=\"string\">            border: 1px solid #ccc; </span></span><br><span class=\"line\"><span class=\"string\">            overflow-y: auto; </span></span><br><span class=\"line\"><span class=\"string\">            padding: 10px; </span></span><br><span class=\"line\"><span class=\"string\">            margin-bottom: 10px;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">        #input &#123; </span></span><br><span class=\"line\"><span class=\"string\">            width: 80%; </span></span><br><span class=\"line\"><span class=\"string\">            padding: 8px;</span></span><br><span class=\"line\"><span class=\"string\">            margin-right: 10px;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">        button &#123;</span></span><br><span class=\"line\"><span class=\"string\">            padding: 8px 16px;</span></span><br><span class=\"line\"><span class=\"string\">            background: #007bff;</span></span><br><span class=\"line\"><span class=\"string\">            color: white;</span></span><br><span class=\"line\"><span class=\"string\">            border: none;</span></span><br><span class=\"line\"><span class=\"string\">            border-radius: 4px;</span></span><br><span class=\"line\"><span class=\"string\">            cursor: pointer;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">        button:hover &#123;</span></span><br><span class=\"line\"><span class=\"string\">            opacity: 0.8;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/style&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/head&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;body&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div id=&quot;output&quot;&gt;&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;input type=&quot;text&quot; id=&quot;input&quot; placeholder=&quot;输入消息...&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;button onclick=&quot;sendMessage()&quot;&gt;发送&lt;/button&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    &lt;script&gt;</span></span><br><span class=\"line\"><span class=\"string\">        // 初始化WebSocket连接</span></span><br><span class=\"line\"><span class=\"string\">        const socket = new WebSocket(`ws://$&#123;window.location.host&#125;/ws`);</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        // 连接成功回调</span></span><br><span class=\"line\"><span class=\"string\">        socket.onopen = () =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"string\">            addMessage(&#x27;系统&#x27;, &#x27;已连接到服务器&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">        &#125;;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        // 接收消息处理</span></span><br><span class=\"line\"><span class=\"string\">        socket.onmessage = (event) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"string\">            const data = JSON.parse(event.data);</span></span><br><span class=\"line\"><span class=\"string\">            addMessage(&#x27;机器人&#x27;, data.message);</span></span><br><span class=\"line\"><span class=\"string\">        &#125;;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        // 错误处理</span></span><br><span class=\"line\"><span class=\"string\">        socket.onerror = (error) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"string\">            addMessage(&#x27;系统&#x27;, `连接错误: $&#123;error.message&#125;`);</span></span><br><span class=\"line\"><span class=\"string\">        &#125;;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        // 关闭连接处理</span></span><br><span class=\"line\"><span class=\"string\">        socket.onclose = () =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"string\">            addMessage(&#x27;系统&#x27;, &#x27;连接已断开&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">        &#125;;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        // 发送消息</span></span><br><span class=\"line\"><span class=\"string\">        function sendMessage() &#123;</span></span><br><span class=\"line\"><span class=\"string\">            const input = document.getElementById(&#x27;input&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">            const message = input.value.trim();</span></span><br><span class=\"line\"><span class=\"string\">            if (message) &#123;</span></span><br><span class=\"line\"><span class=\"string\">                socket.send(JSON.stringify(&#123;</span></span><br><span class=\"line\"><span class=\"string\">                    type: &quot;user_message&quot;,</span></span><br><span class=\"line\"><span class=\"string\">                    content: message</span></span><br><span class=\"line\"><span class=\"string\">                &#125;));</span></span><br><span class=\"line\"><span class=\"string\">                addMessage(&#x27;我&#x27;, message);</span></span><br><span class=\"line\"><span class=\"string\">                input.value = &#x27;&#x27;;</span></span><br><span class=\"line\"><span class=\"string\">            &#125;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        // 添加消息到界面</span></span><br><span class=\"line\"><span class=\"string\">        function addMessage(sender, content) &#123;</span></span><br><span class=\"line\"><span class=\"string\">            const output = document.getElementById(&#x27;output&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">            const div = document.createElement(&#x27;div&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">            div.innerHTML = `&lt;strong&gt;$&#123;sender&#125;:&lt;/strong&gt; $&#123;content&#125;`;</span></span><br><span class=\"line\"><span class=\"string\">            output.appendChild(div);</span></span><br><span class=\"line\"><span class=\"string\">            // 自动滚动到底部</span></span><br><span class=\"line\"><span class=\"string\">            output.scrollTop = output.scrollHeight;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/body&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/html&gt;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.get(<span class=\"params\"><span class=\"string\">&quot;/&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">index</span>():</span><br><span class=\"line\">    <span class=\"keyword\">return</span> HTMLResponse(HTML_TEMPLATE)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># WebSocket端点</span></span><br><span class=\"line\"><span class=\"meta\">@app.websocket(<span class=\"params\"><span class=\"string\">&quot;/ws&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">websocket_endpoint</span>(<span class=\"params\">websocket: WebSocket</span>):</span><br><span class=\"line\">    <span class=\"keyword\">await</span> websocket.accept()</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 接收客户端消息</span></span><br><span class=\"line\">            data = <span class=\"keyword\">await</span> websocket.receive_text()</span><br><span class=\"line\">            message_data = json.loads(data)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># 处理客户端消息</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> message_data[<span class=\"string\">&#x27;type&#x27;</span>] == <span class=\"string\">&#x27;user_message&#x27;</span>:</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;收到客户端消息: <span class=\"subst\">&#123;message_data[<span class=\"string\">&#x27;content&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\"># 构造回复消息</span></span><br><span class=\"line\">                reply = &#123;</span><br><span class=\"line\">                    <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;server_response&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;message&quot;</span>: <span class=\"string\">f&quot;机器人回复：你说的是 &#x27;<span class=\"subst\">&#123;message_data[<span class=\"string\">&#x27;content&#x27;</span>]&#125;</span>&#x27; 对吗？&quot;</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\"># 发送回复</span></span><br><span class=\"line\">                <span class=\"keyword\">await</span> websocket.send_json(reply)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">except</span> WebSocketDisconnect:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;客户端断开连接&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;发生错误: <span class=\"subst\">&#123;<span class=\"built_in\">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    <span class=\"keyword\">import</span> uvicorn</span><br><span class=\"line\"></span><br><span class=\"line\">    uvicorn.run(app, host=<span class=\"string\">&quot;0.0.0.0&quot;</span>, port=<span class=\"number\">8001</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"flask使用websocket\"><a href=\"#flask使用websocket\" class=\"headerlink\" title=\"flask使用websocket\"></a>flask使用websocket</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> eventlet</span><br><span class=\"line\">eventlet.monkey_patch()  <span class=\"comment\"># 关键：启用异步支持</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, render_template_string</span><br><span class=\"line\"><span class=\"comment\">#pip install flask-socketio eventlet</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_socketio <span class=\"keyword\">import</span> SocketIO, emit</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\">app.config[<span class=\"string\">&#x27;SECRET_KEY&#x27;</span>] = <span class=\"string\">&#x27;secret!&#x27;</span></span><br><span class=\"line\">socketio = SocketIO(app, cors_allowed_origins=<span class=\"string\">&quot;*&quot;</span>)  <span class=\"comment\"># 允许跨域</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">index</span>():</span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template_string(<span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;html&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;head&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;title&gt;Socket.IO 聊天&lt;/title&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.7.2/socket.io.js&quot;&gt;&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;style&gt;</span></span><br><span class=\"line\"><span class=\"string\">            /* 保持原有样式不变 */</span></span><br><span class=\"line\"><span class=\"string\">            body &#123; max-width: 800px; margin: 20px auto; padding: 20px; &#125;</span></span><br><span class=\"line\"><span class=\"string\">            #output &#123; height: 300px; border: 1px solid #ccc; overflow-y: auto; padding: 10px; &#125;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/style&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/head&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;body&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;div id=&quot;output&quot;&gt;&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;input id=&quot;input&quot; placeholder=&quot;输入消息&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;button onclick=&quot;send()&quot;&gt;发送&lt;/button&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        &lt;script&gt;</span></span><br><span class=\"line\"><span class=\"string\">            const socket = io();  // 自动连接当前域名</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">            // 连接成功回调</span></span><br><span class=\"line\"><span class=\"string\">            socket.on(&#x27;connect&#x27;, () =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"string\">                addMessage(&#x27;系统&#x27;, &#x27;已连接到服务器&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">            &#125;);</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">            // 接收服务器消息</span></span><br><span class=\"line\"><span class=\"string\">            socket.on(&#x27;server_response&#x27;, (data) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"string\">                addMessage(&#x27;机器人&#x27;, data.message);</span></span><br><span class=\"line\"><span class=\"string\">            &#125;);</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">            // 发送消息</span></span><br><span class=\"line\"><span class=\"string\">            function send() &#123;</span></span><br><span class=\"line\"><span class=\"string\">                const input = document.getElementById(&#x27;input&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">                const message = input.value.trim();</span></span><br><span class=\"line\"><span class=\"string\">                if (message) &#123;</span></span><br><span class=\"line\"><span class=\"string\">                    socket.emit(&#x27;client_message&#x27;, message);</span></span><br><span class=\"line\"><span class=\"string\">                    addMessage(&#x27;我&#x27;, message);</span></span><br><span class=\"line\"><span class=\"string\">                    input.value = &#x27;&#x27;;</span></span><br><span class=\"line\"><span class=\"string\">                &#125;</span></span><br><span class=\"line\"><span class=\"string\">            &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">            // 添加消息到界面</span></span><br><span class=\"line\"><span class=\"string\">            function addMessage(sender, content) &#123;</span></span><br><span class=\"line\"><span class=\"string\">                const div = document.createElement(&#x27;div&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">                div.innerHTML = `&lt;strong&gt;$&#123;sender&#125;:&lt;/strong&gt; $&#123;content&#125;`;</span></span><br><span class=\"line\"><span class=\"string\">                document.getElementById(&#x27;output&#x27;).appendChild(div);</span></span><br><span class=\"line\"><span class=\"string\">                // 自动滚动到底部</span></span><br><span class=\"line\"><span class=\"string\">                const output = document.getElementById(&#x27;output&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">                output.scrollTop = output.scrollHeight;</span></span><br><span class=\"line\"><span class=\"string\">            &#125;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/body&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/html&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &#x27;&#x27;&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Socket.IO 事件处理</span></span><br><span class=\"line\"><span class=\"meta\">@socketio.on(<span class=\"params\"><span class=\"string\">&#x27;client_message&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">handle_message</span>(<span class=\"params\">message</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;收到客户端消息: <span class=\"subst\">&#123;message&#125;</span>&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 构造回复消息</span></span><br><span class=\"line\">    reply = <span class=\"string\">f&quot;机器人回复：你说的是 &#x27;<span class=\"subst\">&#123;message&#125;</span>&#x27; 对吗？&quot;</span></span><br><span class=\"line\">    <span class=\"comment\"># 发送消息给客户端</span></span><br><span class=\"line\">    emit(<span class=\"string\">&#x27;server_response&#x27;</span>, &#123;<span class=\"string\">&#x27;message&#x27;</span>: reply&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    socketio.run(app, host=<span class=\"string\">&#x27;0.0.0.0&#x27;</span>, port=<span class=\"number\">8000</span>, debug=<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"大模型使用websocket聊天\"><a href=\"#大模型使用websocket聊天\" class=\"headerlink\" title=\"大模型使用websocket聊天\"></a>大模型使用websocket聊天</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># main.py</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> fastapi <span class=\"keyword\">import</span> FastAPI, WebSocket</span><br><span class=\"line\"><span class=\"keyword\">from</span> fastapi.responses <span class=\"keyword\">import</span> HTMLResponse</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\">app = FastAPI()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 存储对话历史 (生产环境建议使用数据库)</span></span><br><span class=\"line\">conversation_history = []</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 集成前端页面与后端逻辑</span></span><br><span class=\"line\">HTML_TEMPLATE = <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;html&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;head&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;title&gt;AI 对话助手&lt;/title&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;style&gt;</span></span><br><span class=\"line\"><span class=\"string\">        body &#123;</span></span><br><span class=\"line\"><span class=\"string\">            max-width: 800px;</span></span><br><span class=\"line\"><span class=\"string\">            margin: 0 auto;</span></span><br><span class=\"line\"><span class=\"string\">            padding: 20px;</span></span><br><span class=\"line\"><span class=\"string\">            font-family: Arial, sans-serif;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">        #chatContainer &#123;</span></span><br><span class=\"line\"><span class=\"string\">            height: 60vh;</span></span><br><span class=\"line\"><span class=\"string\">            border: 1px solid #ddd;</span></span><br><span class=\"line\"><span class=\"string\">            border-radius: 8px;</span></span><br><span class=\"line\"><span class=\"string\">            overflow-y: auto;</span></span><br><span class=\"line\"><span class=\"string\">            padding: 15px;</span></span><br><span class=\"line\"><span class=\"string\">            margin-bottom: 15px;</span></span><br><span class=\"line\"><span class=\"string\">            background: #f9f9f9;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">        .message &#123;</span></span><br><span class=\"line\"><span class=\"string\">            margin: 10px 0;</span></span><br><span class=\"line\"><span class=\"string\">            padding: 12px;</span></span><br><span class=\"line\"><span class=\"string\">            border-radius: 15px;</span></span><br><span class=\"line\"><span class=\"string\">            max-width: 80%;</span></span><br><span class=\"line\"><span class=\"string\">            word-wrap: break-word;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">        .user-message &#123;</span></span><br><span class=\"line\"><span class=\"string\">            background: #e3f2fd;</span></span><br><span class=\"line\"><span class=\"string\">            margin-left: auto;</span></span><br><span class=\"line\"><span class=\"string\">            border-bottom-right-radius: 5px;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">        .bot-message &#123;</span></span><br><span class=\"line\"><span class=\"string\">            background: #fff;</span></span><br><span class=\"line\"><span class=\"string\">            border: 1px solid #eee;</span></span><br><span class=\"line\"><span class=\"string\">            margin-right: auto;</span></span><br><span class=\"line\"><span class=\"string\">            border-bottom-left-radius: 5px;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">        #inputContainer &#123;</span></span><br><span class=\"line\"><span class=\"string\">            display: flex;</span></span><br><span class=\"line\"><span class=\"string\">            gap: 10px;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">        #userInput &#123;</span></span><br><span class=\"line\"><span class=\"string\">            flex: 1;</span></span><br><span class=\"line\"><span class=\"string\">            padding: 12px;</span></span><br><span class=\"line\"><span class=\"string\">            border: 1px solid #ddd;</span></span><br><span class=\"line\"><span class=\"string\">            border-radius: 25px;</span></span><br><span class=\"line\"><span class=\"string\">            outline: none;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">        button &#123;</span></span><br><span class=\"line\"><span class=\"string\">            padding: 12px 25px;</span></span><br><span class=\"line\"><span class=\"string\">            background: #007bff;</span></span><br><span class=\"line\"><span class=\"string\">            color: white;</span></span><br><span class=\"line\"><span class=\"string\">            border: none;</span></span><br><span class=\"line\"><span class=\"string\">            border-radius: 25px;</span></span><br><span class=\"line\"><span class=\"string\">            cursor: pointer;</span></span><br><span class=\"line\"><span class=\"string\">            transition: background 0.3s;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">        button:hover &#123;</span></span><br><span class=\"line\"><span class=\"string\">            background: #0056b3;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">        .status &#123;</span></span><br><span class=\"line\"><span class=\"string\">            color: #666;</span></span><br><span class=\"line\"><span class=\"string\">            text-align: center;</span></span><br><span class=\"line\"><span class=\"string\">            padding: 10px;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/style&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/head&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;body&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;h1&gt;AI 对话助手&lt;/h1&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div id=&quot;chatContainer&quot;&gt;&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div id=&quot;inputContainer&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;input type=&quot;text&quot; id=&quot;userInput&quot; placeholder=&quot;输入消息...&quot; /&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;button onclick=&quot;sendMessage()&quot;&gt;发送&lt;/button&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div class=&quot;status&quot; id=&quot;status&quot;&gt;连接状态：正常&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    </span></span><br><span class=\"line\"><span class=\"string\">   // &lt;iframe</span></span><br><span class=\"line\"><span class=\"string\">   //      src=&quot;http://47.237.81.149/chatbot/9h9nyQcblGTesiGJ&quot;</span></span><br><span class=\"line\"><span class=\"string\">    //     style=&quot;width: 100%; height: 100%; min-height: 700px&quot;</span></span><br><span class=\"line\"><span class=\"string\">   //      frameborder=&quot;0&quot;</span></span><br><span class=\"line\"><span class=\"string\">  //       allow=&quot;microphone&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">   // &lt;/iframe&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    &lt;script&gt;</span></span><br><span class=\"line\"><span class=\"string\">        const ws = new WebSocket(&#x27;ws://&#x27; + window.location.host + &#x27;/ws&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">        const chatContainer = document.getElementById(&#x27;chatContainer&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">        let isBotResponding = false;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        // WebSocket 事件处理</span></span><br><span class=\"line\"><span class=\"string\">        ws.onopen = () =&gt; updateStatus(&#x27;已连接&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">        ws.onclose = () =&gt; updateStatus(&#x27;连接已断开&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">        ws.onerror = () =&gt; updateStatus(&#x27;连接错误&#x27;);</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        ws.onmessage = (event) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"string\">            const data = JSON.parse(event.data);</span></span><br><span class=\"line\"><span class=\"string\">            handleResponse(data);</span></span><br><span class=\"line\"><span class=\"string\">        &#125;;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        function handleResponse(data) &#123;</span></span><br><span class=\"line\"><span class=\"string\">            switch(data.type) &#123;</span></span><br><span class=\"line\"><span class=\"string\">                case &#x27;user_message&#x27;:</span></span><br><span class=\"line\"><span class=\"string\">                    appendMessage(data.content, &#x27;user&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">                    break;</span></span><br><span class=\"line\"><span class=\"string\">                case &#x27;assistant_start&#x27;:</span></span><br><span class=\"line\"><span class=\"string\">                    isBotResponding = true;</span></span><br><span class=\"line\"><span class=\"string\">                    appendMessage(&#x27;&#x27;, &#x27;bot&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">                    break;</span></span><br><span class=\"line\"><span class=\"string\">                case &#x27;assistant_chunk&#x27;:</span></span><br><span class=\"line\"><span class=\"string\">                    appendChunk(data.content);</span></span><br><span class=\"line\"><span class=\"string\">                    break;</span></span><br><span class=\"line\"><span class=\"string\">                case &#x27;assistant_end&#x27;:</span></span><br><span class=\"line\"><span class=\"string\">                    isBotResponding = false;</span></span><br><span class=\"line\"><span class=\"string\">                    break;</span></span><br><span class=\"line\"><span class=\"string\">                case &#x27;error&#x27;:</span></span><br><span class=\"line\"><span class=\"string\">                    appendMessage(`错误：$&#123;data.content&#125;`, &#x27;error&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">                    break;</span></span><br><span class=\"line\"><span class=\"string\">            &#125;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        function appendMessage(content, role) &#123;</span></span><br><span class=\"line\"><span class=\"string\">            const div = document.createElement(&#x27;div&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">            div.className = `message $&#123;role&#125;-message`;</span></span><br><span class=\"line\"><span class=\"string\">            div.textContent = content;</span></span><br><span class=\"line\"><span class=\"string\">            chatContainer.appendChild(div);</span></span><br><span class=\"line\"><span class=\"string\">            scrollToBottom();</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        function appendChunk(content) &#123;</span></span><br><span class=\"line\"><span class=\"string\">            const messages = document.getElementsByClassName(&#x27;bot-message&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">            const lastMsg = messages[messages.length - 1];</span></span><br><span class=\"line\"><span class=\"string\">            lastMsg.textContent += content;</span></span><br><span class=\"line\"><span class=\"string\">            scrollToBottom();</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        function scrollToBottom() &#123;</span></span><br><span class=\"line\"><span class=\"string\">            chatContainer.scrollTop = chatContainer.scrollHeight;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        function updateStatus(text) &#123;</span></span><br><span class=\"line\"><span class=\"string\">            document.getElementById(&#x27;status&#x27;).textContent = `状态：$&#123;text&#125;`;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        function sendMessage() &#123;</span></span><br><span class=\"line\"><span class=\"string\">            const input = document.getElementById(&#x27;userInput&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">            const message = input.value.trim();</span></span><br><span class=\"line\"><span class=\"string\">            if (message &amp;&amp; !isBotResponding) &#123;</span></span><br><span class=\"line\"><span class=\"string\">                ws.send(message);</span></span><br><span class=\"line\"><span class=\"string\">                input.value = &#x27;&#x27;;</span></span><br><span class=\"line\"><span class=\"string\">            &#125;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        // 支持回车发送</span></span><br><span class=\"line\"><span class=\"string\">        document.getElementById(&#x27;userInput&#x27;).addEventListener(&#x27;keypress&#x27;, (e) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"string\">            if (e.key === &#x27;Enter&#x27;) sendMessage();</span></span><br><span class=\"line\"><span class=\"string\">        &#125;);</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/body&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/html&gt;</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.get(<span class=\"params\"><span class=\"string\">&quot;/&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">get</span>():</span><br><span class=\"line\">    <span class=\"keyword\">return</span> HTMLResponse(HTML_TEMPLATE)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.websocket(<span class=\"params\"><span class=\"string\">&quot;/ws&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">websocket_endpoint</span>(<span class=\"params\">websocket: WebSocket</span>):</span><br><span class=\"line\">    <span class=\"keyword\">await</span> websocket.accept()</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 接收用户消息</span></span><br><span class=\"line\">            user_message = <span class=\"keyword\">await</span> websocket.receive_text()</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># 更新对话历史</span></span><br><span class=\"line\">            conversation_history.append(&#123;<span class=\"string\">&quot;role&quot;</span>: <span class=\"string\">&quot;user&quot;</span>, <span class=\"string\">&quot;content&quot;</span>: user_message&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># 发送用户消息到前端</span></span><br><span class=\"line\">            <span class=\"keyword\">await</span> websocket.send_json(&#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;user_message&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;content&quot;</span>: user_message</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># 准备流式请求</span></span><br><span class=\"line\">            <span class=\"keyword\">await</span> websocket.send_json(&#123;<span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;assistant_start&quot;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># 构造请求数据</span></span><br><span class=\"line\">            request_data = &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;model&quot;</span>: <span class=\"string\">&quot;deepseek-r1:latest&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;messages&quot;</span>: conversation_history,</span><br><span class=\"line\">                <span class=\"string\">&quot;stream&quot;</span>: <span class=\"literal\">True</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># 流式获取响应</span></span><br><span class=\"line\">            full_response = []</span><br><span class=\"line\">            <span class=\"keyword\">with</span> requests.post(</span><br><span class=\"line\">                    <span class=\"string\">&quot;http://1.1.1.1:11434/api/chat&quot;</span>,<span class=\"comment\">#大模型接口地址</span></span><br><span class=\"line\">                    json=request_data,</span><br><span class=\"line\">                    stream=<span class=\"literal\">True</span></span><br><span class=\"line\">            ) <span class=\"keyword\">as</span> response:</span><br><span class=\"line\">                response.raise_for_status()</span><br><span class=\"line\">                <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> response.iter_lines():</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> line:</span><br><span class=\"line\">                        chunk = json.loads(line.decode(<span class=\"string\">&#x27;utf-8&#x27;</span>))</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> <span class=\"string\">&#x27;message&#x27;</span> <span class=\"keyword\">in</span> chunk:</span><br><span class=\"line\">                            content = chunk[<span class=\"string\">&#x27;message&#x27;</span>][<span class=\"string\">&#x27;content&#x27;</span>]</span><br><span class=\"line\">                            full_response.append(content)</span><br><span class=\"line\">                            <span class=\"keyword\">await</span> websocket.send_json(&#123;</span><br><span class=\"line\">                                <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;assistant_chunk&quot;</span>,</span><br><span class=\"line\">                                <span class=\"string\">&quot;content&quot;</span>: content</span><br><span class=\"line\">                            &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># 保存完整响应</span></span><br><span class=\"line\">            conversation_history.append(&#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;role&quot;</span>: <span class=\"string\">&quot;assistant&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;content&quot;</span>: <span class=\"string\">&quot;&quot;</span>.join(full_response)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            <span class=\"keyword\">await</span> websocket.send_json(&#123;<span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;assistant_end&quot;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        <span class=\"keyword\">await</span> websocket.send_json(&#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;error&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;content&quot;</span>: <span class=\"string\">f&quot;系统错误: <span class=\"subst\">&#123;<span class=\"built_in\">str</span>(e)&#125;</span>&quot;</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">finally</span>:</span><br><span class=\"line\">        <span class=\"keyword\">await</span> websocket.close()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    <span class=\"keyword\">import</span> uvicorn</span><br><span class=\"line\"></span><br><span class=\"line\">    uvicorn.run(app, host=<span class=\"string\">&quot;0.0.0.0&quot;</span>, port=<span class=\"number\">8000</span>)</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h1 id=\"异步\"><a href=\"#异步\" class=\"headerlink\" title=\"异步\"></a>异步</h1><p>因为websocket会使用到异步操作先了解一下异步</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">task</span>(<span class=\"params\">name, duration</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;[<span class=\"subst\">&#123;time.strftime(<span class=\"string\">&#x27;%H:%M:%S&#x27;</span>)&#125;</span>] 任务 <span class=\"subst\">&#123;name&#125;</span> 开始&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> asyncio.sleep(duration)  <span class=\"comment\"># 模拟并发等待</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;[<span class=\"subst\">&#123;time.strftime(<span class=\"string\">&#x27;%H:%M:%S&#x27;</span>)&#125;</span>] 任务 <span class=\"subst\">&#123;name&#125;</span> 完成&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">task_</span>(<span class=\"params\">name, duration</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;[<span class=\"subst\">&#123;time.strftime(<span class=\"string\">&#x27;%H:%M:%S&#x27;</span>)&#125;</span>] 任务 <span class=\"subst\">&#123;name&#125;</span> 开始&quot;</span>)</span><br><span class=\"line\">    time.sleep(duration)  <span class=\"comment\"># 模拟耗时操作</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;[<span class=\"subst\">&#123;time.strftime(<span class=\"string\">&#x27;%H:%M:%S&#x27;</span>)&#125;</span>] 任务 <span class=\"subst\">&#123;name&#125;</span> 完成&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    start_time = time.time()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;[<span class=\"subst\">&#123;time.strftime(<span class=\"string\">&#x27;%H:%M:%S&#x27;</span>)&#125;</span>] 异步任务开始&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">await</span> asyncio.gather(</span><br><span class=\"line\">        task(<span class=\"string\">&quot;A&quot;</span>, <span class=\"number\">2</span>),</span><br><span class=\"line\">        task(<span class=\"string\">&quot;B&quot;</span>, <span class=\"number\">3</span>),</span><br><span class=\"line\">        task(<span class=\"string\">&quot;C&quot;</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    end_time = time.time()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;[<span class=\"subst\">&#123;time.strftime(<span class=\"string\">&#x27;%H:%M:%S&#x27;</span>)&#125;</span>] 异步任务总耗时: <span class=\"subst\">&#123;end_time - start_time:<span class=\"number\">.2</span>f&#125;</span> 秒&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main_</span>():</span><br><span class=\"line\">    start_time = time.time()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;[<span class=\"subst\">&#123;time.strftime(<span class=\"string\">&#x27;%H:%M:%S&#x27;</span>)&#125;</span>] 同步任务开始&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    task_(<span class=\"string\">&quot;A&quot;</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">    task_(<span class=\"string\">&quot;B&quot;</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">    task_(<span class=\"string\">&quot;C&quot;</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    end_time = time.time()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;[<span class=\"subst\">&#123;time.strftime(<span class=\"string\">&#x27;%H:%M:%S&#x27;</span>)&#125;</span>] 同步任务总耗时: <span class=\"subst\">&#123;end_time - start_time:<span class=\"number\">.2</span>f&#125;</span> 秒&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;======================异步==========================&quot;</span>)</span><br><span class=\"line\">    asyncio.run(main())</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;======================同步==========================&quot;</span>)</span><br><span class=\"line\">    main_()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#结果可以看出异步不需要等待会直接执行下一步操作，任务完成可以使用await来回调处理完成结果</span></span><br><span class=\"line\">======================异步==========================</span><br><span class=\"line\">[<span class=\"number\">14</span>:<span class=\"number\">45</span>:<span class=\"number\">43</span>] 异步任务开始</span><br><span class=\"line\">[<span class=\"number\">14</span>:<span class=\"number\">45</span>:<span class=\"number\">43</span>] 任务 A 开始</span><br><span class=\"line\">[<span class=\"number\">14</span>:<span class=\"number\">45</span>:<span class=\"number\">43</span>] 任务 B 开始</span><br><span class=\"line\">[<span class=\"number\">14</span>:<span class=\"number\">45</span>:<span class=\"number\">43</span>] 任务 C 开始</span><br><span class=\"line\">[<span class=\"number\">14</span>:<span class=\"number\">45</span>:<span class=\"number\">44</span>] 任务 C 完成</span><br><span class=\"line\">[<span class=\"number\">14</span>:<span class=\"number\">45</span>:<span class=\"number\">45</span>] 任务 A 完成</span><br><span class=\"line\">[<span class=\"number\">14</span>:<span class=\"number\">45</span>:<span class=\"number\">46</span>] 任务 B 完成</span><br><span class=\"line\">[<span class=\"number\">14</span>:<span class=\"number\">45</span>:<span class=\"number\">46</span>] 异步任务总耗时: <span class=\"number\">3.00</span> 秒</span><br><span class=\"line\">======================同步==========================</span><br><span class=\"line\">[<span class=\"number\">14</span>:<span class=\"number\">45</span>:<span class=\"number\">46</span>] 同步任务开始</span><br><span class=\"line\">[<span class=\"number\">14</span>:<span class=\"number\">45</span>:<span class=\"number\">46</span>] 任务 A 开始</span><br><span class=\"line\">[<span class=\"number\">14</span>:<span class=\"number\">45</span>:<span class=\"number\">48</span>] 任务 A 完成</span><br><span class=\"line\">[<span class=\"number\">14</span>:<span class=\"number\">45</span>:<span class=\"number\">48</span>] 任务 B 开始</span><br><span class=\"line\">[<span class=\"number\">14</span>:<span class=\"number\">45</span>:<span class=\"number\">51</span>] 任务 B 完成</span><br><span class=\"line\">[<span class=\"number\">14</span>:<span class=\"number\">45</span>:<span class=\"number\">51</span>] 任务 C 开始</span><br><span class=\"line\">[<span class=\"number\">14</span>:<span class=\"number\">45</span>:<span class=\"number\">52</span>] 任务 C 完成</span><br><span class=\"line\">[<span class=\"number\">14</span>:<span class=\"number\">45</span>:<span class=\"number\">52</span>] 同步任务总耗时: <span class=\"number\">6.00</span> 秒</span><br></pre></td></tr></table></figure>\n<h1 id=\"websocket\"><a href=\"#websocket\" class=\"headerlink\" title=\"websocket\"></a>websocket</h1><h2 id=\"服务端\"><a href=\"#服务端\" class=\"headerlink\" title=\"服务端\"></a>服务端</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"><span class=\"keyword\">import</span> websockets</span><br><span class=\"line\"><span class=\"comment\">#https://websockets.readthedocs.io/en/stable/</span></span><br><span class=\"line\"><span class=\"comment\"># 处理客户端连接</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">handle_client</span>(<span class=\"params\">websocket</span>):</span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"keyword\">for</span> message <span class=\"keyword\">in</span> websocket:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;收到客户端消息: <span class=\"subst\">&#123;message&#125;</span>&quot;</span>)</span><br><span class=\"line\">        reply = <span class=\"string\">f&quot;机器人回复：你说的是 &#x27;<span class=\"subst\">&#123;message&#125;</span>&#x27; 对吗？&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">await</span> websocket.send(reply)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># async def main_logic(websocket, path):</span></span><br><span class=\"line\"><span class=\"comment\">#    # await check_permit(websocket)</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#     await handle_client(websocket)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动服务器</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"keyword\">with</span> websockets.serve(handle_client, <span class=\"string\">&quot;localhost&quot;</span>, <span class=\"number\">8765</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;WebSocket 服务器已启动，端口 8765&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">await</span> asyncio.Future()  <span class=\"comment\"># 永久运行</span></span><br><span class=\"line\"></span><br><span class=\"line\">asyncio.run(main())</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"><span class=\"keyword\">import</span> websockets</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">client</span>():</span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"keyword\">with</span> websockets.connect(<span class=\"string\">&quot;ws://localhost:8765&quot;</span>) <span class=\"keyword\">as</span> websocket:</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            message = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入消息（输入 q 退出）: &quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> message == <span class=\"string\">&#x27;q&#x27;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            <span class=\"keyword\">await</span> websocket.send(message)</span><br><span class=\"line\">            response = <span class=\"keyword\">await</span> websocket.recv()</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;收到回复: <span class=\"subst\">&#123;response&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">asyncio.run(client())</span><br><span class=\"line\"><span class=\"comment\">#效果，相当于打开了一个通道双方都可以发消息</span></span><br><span class=\"line\">WebSocket 服务器已启动，端口 <span class=\"number\">8765</span></span><br><span class=\"line\">请输入消息（输入 q 退出）: hello websockets</span><br><span class=\"line\">收到回复: 机器人回复：你说的是 <span class=\"string\">&#x27;hello websockets&#x27;</span> 对吗？</span><br><span class=\"line\">请输入消息（输入 q 退出）: </span><br></pre></td></tr></table></figure>\n<h1 id=\"额外\"><a href=\"#额外\" class=\"headerlink\" title=\"额外\"></a>额外</h1><h2 id=\"fastapi框架使用websocket\"><a href=\"#fastapi框架使用websocket\" class=\"headerlink\" title=\"fastapi框架使用websocket\"></a>fastapi框架使用websocket</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> fastapi <span class=\"keyword\">import</span> FastAPI, WebSocket, WebSocketDisconnect</span><br><span class=\"line\"><span class=\"keyword\">from</span> fastapi.responses <span class=\"keyword\">import</span> HTMLResponse</span><br><span class=\"line\"><span class=\"keyword\">from</span> fastapi.middleware.cors <span class=\"keyword\">import</span> CORSMiddleware</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\">app = FastAPI()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置CORS跨域</span></span><br><span class=\"line\">app.add_middleware(</span><br><span class=\"line\">    CORSMiddleware,</span><br><span class=\"line\">    allow_origins=[<span class=\"string\">&quot;*&quot;</span>],</span><br><span class=\"line\">    allow_credentials=<span class=\"literal\">True</span>,</span><br><span class=\"line\">    allow_methods=[<span class=\"string\">&quot;*&quot;</span>],</span><br><span class=\"line\">    allow_headers=[<span class=\"string\">&quot;*&quot;</span>],</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># HTML页面（修改了前端WebSocket实现）</span></span><br><span class=\"line\">HTML_TEMPLATE = <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;html&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;head&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;title&gt;FastAPI 聊天&lt;/title&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;style&gt;</span></span><br><span class=\"line\"><span class=\"string\">        body &#123; max-width: 800px; margin: 20px auto; padding: 20px; &#125;</span></span><br><span class=\"line\"><span class=\"string\">        #output &#123; </span></span><br><span class=\"line\"><span class=\"string\">            height: 300px; </span></span><br><span class=\"line\"><span class=\"string\">            border: 1px solid #ccc; </span></span><br><span class=\"line\"><span class=\"string\">            overflow-y: auto; </span></span><br><span class=\"line\"><span class=\"string\">            padding: 10px; </span></span><br><span class=\"line\"><span class=\"string\">            margin-bottom: 10px;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">        #input &#123; </span></span><br><span class=\"line\"><span class=\"string\">            width: 80%; </span></span><br><span class=\"line\"><span class=\"string\">            padding: 8px;</span></span><br><span class=\"line\"><span class=\"string\">            margin-right: 10px;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">        button &#123;</span></span><br><span class=\"line\"><span class=\"string\">            padding: 8px 16px;</span></span><br><span class=\"line\"><span class=\"string\">            background: #007bff;</span></span><br><span class=\"line\"><span class=\"string\">            color: white;</span></span><br><span class=\"line\"><span class=\"string\">            border: none;</span></span><br><span class=\"line\"><span class=\"string\">            border-radius: 4px;</span></span><br><span class=\"line\"><span class=\"string\">            cursor: pointer;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">        button:hover &#123;</span></span><br><span class=\"line\"><span class=\"string\">            opacity: 0.8;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/style&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/head&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;body&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div id=&quot;output&quot;&gt;&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;input type=&quot;text&quot; id=&quot;input&quot; placeholder=&quot;输入消息...&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;button onclick=&quot;sendMessage()&quot;&gt;发送&lt;/button&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    &lt;script&gt;</span></span><br><span class=\"line\"><span class=\"string\">        // 初始化WebSocket连接</span></span><br><span class=\"line\"><span class=\"string\">        const socket = new WebSocket(`ws://$&#123;window.location.host&#125;/ws`);</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        // 连接成功回调</span></span><br><span class=\"line\"><span class=\"string\">        socket.onopen = () =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"string\">            addMessage(&#x27;系统&#x27;, &#x27;已连接到服务器&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">        &#125;;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        // 接收消息处理</span></span><br><span class=\"line\"><span class=\"string\">        socket.onmessage = (event) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"string\">            const data = JSON.parse(event.data);</span></span><br><span class=\"line\"><span class=\"string\">            addMessage(&#x27;机器人&#x27;, data.message);</span></span><br><span class=\"line\"><span class=\"string\">        &#125;;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        // 错误处理</span></span><br><span class=\"line\"><span class=\"string\">        socket.onerror = (error) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"string\">            addMessage(&#x27;系统&#x27;, `连接错误: $&#123;error.message&#125;`);</span></span><br><span class=\"line\"><span class=\"string\">        &#125;;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        // 关闭连接处理</span></span><br><span class=\"line\"><span class=\"string\">        socket.onclose = () =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"string\">            addMessage(&#x27;系统&#x27;, &#x27;连接已断开&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">        &#125;;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        // 发送消息</span></span><br><span class=\"line\"><span class=\"string\">        function sendMessage() &#123;</span></span><br><span class=\"line\"><span class=\"string\">            const input = document.getElementById(&#x27;input&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">            const message = input.value.trim();</span></span><br><span class=\"line\"><span class=\"string\">            if (message) &#123;</span></span><br><span class=\"line\"><span class=\"string\">                socket.send(JSON.stringify(&#123;</span></span><br><span class=\"line\"><span class=\"string\">                    type: &quot;user_message&quot;,</span></span><br><span class=\"line\"><span class=\"string\">                    content: message</span></span><br><span class=\"line\"><span class=\"string\">                &#125;));</span></span><br><span class=\"line\"><span class=\"string\">                addMessage(&#x27;我&#x27;, message);</span></span><br><span class=\"line\"><span class=\"string\">                input.value = &#x27;&#x27;;</span></span><br><span class=\"line\"><span class=\"string\">            &#125;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        // 添加消息到界面</span></span><br><span class=\"line\"><span class=\"string\">        function addMessage(sender, content) &#123;</span></span><br><span class=\"line\"><span class=\"string\">            const output = document.getElementById(&#x27;output&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">            const div = document.createElement(&#x27;div&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">            div.innerHTML = `&lt;strong&gt;$&#123;sender&#125;:&lt;/strong&gt; $&#123;content&#125;`;</span></span><br><span class=\"line\"><span class=\"string\">            output.appendChild(div);</span></span><br><span class=\"line\"><span class=\"string\">            // 自动滚动到底部</span></span><br><span class=\"line\"><span class=\"string\">            output.scrollTop = output.scrollHeight;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/body&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/html&gt;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.get(<span class=\"params\"><span class=\"string\">&quot;/&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">index</span>():</span><br><span class=\"line\">    <span class=\"keyword\">return</span> HTMLResponse(HTML_TEMPLATE)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># WebSocket端点</span></span><br><span class=\"line\"><span class=\"meta\">@app.websocket(<span class=\"params\"><span class=\"string\">&quot;/ws&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">websocket_endpoint</span>(<span class=\"params\">websocket: WebSocket</span>):</span><br><span class=\"line\">    <span class=\"keyword\">await</span> websocket.accept()</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 接收客户端消息</span></span><br><span class=\"line\">            data = <span class=\"keyword\">await</span> websocket.receive_text()</span><br><span class=\"line\">            message_data = json.loads(data)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># 处理客户端消息</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> message_data[<span class=\"string\">&#x27;type&#x27;</span>] == <span class=\"string\">&#x27;user_message&#x27;</span>:</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;收到客户端消息: <span class=\"subst\">&#123;message_data[<span class=\"string\">&#x27;content&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\"># 构造回复消息</span></span><br><span class=\"line\">                reply = &#123;</span><br><span class=\"line\">                    <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;server_response&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;message&quot;</span>: <span class=\"string\">f&quot;机器人回复：你说的是 &#x27;<span class=\"subst\">&#123;message_data[<span class=\"string\">&#x27;content&#x27;</span>]&#125;</span>&#x27; 对吗？&quot;</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\"># 发送回复</span></span><br><span class=\"line\">                <span class=\"keyword\">await</span> websocket.send_json(reply)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">except</span> WebSocketDisconnect:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;客户端断开连接&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;发生错误: <span class=\"subst\">&#123;<span class=\"built_in\">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    <span class=\"keyword\">import</span> uvicorn</span><br><span class=\"line\"></span><br><span class=\"line\">    uvicorn.run(app, host=<span class=\"string\">&quot;0.0.0.0&quot;</span>, port=<span class=\"number\">8001</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"flask使用websocket\"><a href=\"#flask使用websocket\" class=\"headerlink\" title=\"flask使用websocket\"></a>flask使用websocket</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> eventlet</span><br><span class=\"line\">eventlet.monkey_patch()  <span class=\"comment\"># 关键：启用异步支持</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, render_template_string</span><br><span class=\"line\"><span class=\"comment\">#pip install flask-socketio eventlet</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_socketio <span class=\"keyword\">import</span> SocketIO, emit</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\">app.config[<span class=\"string\">&#x27;SECRET_KEY&#x27;</span>] = <span class=\"string\">&#x27;secret!&#x27;</span></span><br><span class=\"line\">socketio = SocketIO(app, cors_allowed_origins=<span class=\"string\">&quot;*&quot;</span>)  <span class=\"comment\"># 允许跨域</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">index</span>():</span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template_string(<span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;html&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;head&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;title&gt;Socket.IO 聊天&lt;/title&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.7.2/socket.io.js&quot;&gt;&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;style&gt;</span></span><br><span class=\"line\"><span class=\"string\">            /* 保持原有样式不变 */</span></span><br><span class=\"line\"><span class=\"string\">            body &#123; max-width: 800px; margin: 20px auto; padding: 20px; &#125;</span></span><br><span class=\"line\"><span class=\"string\">            #output &#123; height: 300px; border: 1px solid #ccc; overflow-y: auto; padding: 10px; &#125;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/style&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/head&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;body&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;div id=&quot;output&quot;&gt;&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;input id=&quot;input&quot; placeholder=&quot;输入消息&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;button onclick=&quot;send()&quot;&gt;发送&lt;/button&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        &lt;script&gt;</span></span><br><span class=\"line\"><span class=\"string\">            const socket = io();  // 自动连接当前域名</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">            // 连接成功回调</span></span><br><span class=\"line\"><span class=\"string\">            socket.on(&#x27;connect&#x27;, () =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"string\">                addMessage(&#x27;系统&#x27;, &#x27;已连接到服务器&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">            &#125;);</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">            // 接收服务器消息</span></span><br><span class=\"line\"><span class=\"string\">            socket.on(&#x27;server_response&#x27;, (data) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"string\">                addMessage(&#x27;机器人&#x27;, data.message);</span></span><br><span class=\"line\"><span class=\"string\">            &#125;);</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">            // 发送消息</span></span><br><span class=\"line\"><span class=\"string\">            function send() &#123;</span></span><br><span class=\"line\"><span class=\"string\">                const input = document.getElementById(&#x27;input&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">                const message = input.value.trim();</span></span><br><span class=\"line\"><span class=\"string\">                if (message) &#123;</span></span><br><span class=\"line\"><span class=\"string\">                    socket.emit(&#x27;client_message&#x27;, message);</span></span><br><span class=\"line\"><span class=\"string\">                    addMessage(&#x27;我&#x27;, message);</span></span><br><span class=\"line\"><span class=\"string\">                    input.value = &#x27;&#x27;;</span></span><br><span class=\"line\"><span class=\"string\">                &#125;</span></span><br><span class=\"line\"><span class=\"string\">            &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">            // 添加消息到界面</span></span><br><span class=\"line\"><span class=\"string\">            function addMessage(sender, content) &#123;</span></span><br><span class=\"line\"><span class=\"string\">                const div = document.createElement(&#x27;div&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">                div.innerHTML = `&lt;strong&gt;$&#123;sender&#125;:&lt;/strong&gt; $&#123;content&#125;`;</span></span><br><span class=\"line\"><span class=\"string\">                document.getElementById(&#x27;output&#x27;).appendChild(div);</span></span><br><span class=\"line\"><span class=\"string\">                // 自动滚动到底部</span></span><br><span class=\"line\"><span class=\"string\">                const output = document.getElementById(&#x27;output&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">                output.scrollTop = output.scrollHeight;</span></span><br><span class=\"line\"><span class=\"string\">            &#125;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/body&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/html&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &#x27;&#x27;&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Socket.IO 事件处理</span></span><br><span class=\"line\"><span class=\"meta\">@socketio.on(<span class=\"params\"><span class=\"string\">&#x27;client_message&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">handle_message</span>(<span class=\"params\">message</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;收到客户端消息: <span class=\"subst\">&#123;message&#125;</span>&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 构造回复消息</span></span><br><span class=\"line\">    reply = <span class=\"string\">f&quot;机器人回复：你说的是 &#x27;<span class=\"subst\">&#123;message&#125;</span>&#x27; 对吗？&quot;</span></span><br><span class=\"line\">    <span class=\"comment\"># 发送消息给客户端</span></span><br><span class=\"line\">    emit(<span class=\"string\">&#x27;server_response&#x27;</span>, &#123;<span class=\"string\">&#x27;message&#x27;</span>: reply&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    socketio.run(app, host=<span class=\"string\">&#x27;0.0.0.0&#x27;</span>, port=<span class=\"number\">8000</span>, debug=<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"大模型使用websocket聊天\"><a href=\"#大模型使用websocket聊天\" class=\"headerlink\" title=\"大模型使用websocket聊天\"></a>大模型使用websocket聊天</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># main.py</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> fastapi <span class=\"keyword\">import</span> FastAPI, WebSocket</span><br><span class=\"line\"><span class=\"keyword\">from</span> fastapi.responses <span class=\"keyword\">import</span> HTMLResponse</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\">app = FastAPI()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 存储对话历史 (生产环境建议使用数据库)</span></span><br><span class=\"line\">conversation_history = []</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 集成前端页面与后端逻辑</span></span><br><span class=\"line\">HTML_TEMPLATE = <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;html&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;head&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;title&gt;AI 对话助手&lt;/title&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;style&gt;</span></span><br><span class=\"line\"><span class=\"string\">        body &#123;</span></span><br><span class=\"line\"><span class=\"string\">            max-width: 800px;</span></span><br><span class=\"line\"><span class=\"string\">            margin: 0 auto;</span></span><br><span class=\"line\"><span class=\"string\">            padding: 20px;</span></span><br><span class=\"line\"><span class=\"string\">            font-family: Arial, sans-serif;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">        #chatContainer &#123;</span></span><br><span class=\"line\"><span class=\"string\">            height: 60vh;</span></span><br><span class=\"line\"><span class=\"string\">            border: 1px solid #ddd;</span></span><br><span class=\"line\"><span class=\"string\">            border-radius: 8px;</span></span><br><span class=\"line\"><span class=\"string\">            overflow-y: auto;</span></span><br><span class=\"line\"><span class=\"string\">            padding: 15px;</span></span><br><span class=\"line\"><span class=\"string\">            margin-bottom: 15px;</span></span><br><span class=\"line\"><span class=\"string\">            background: #f9f9f9;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">        .message &#123;</span></span><br><span class=\"line\"><span class=\"string\">            margin: 10px 0;</span></span><br><span class=\"line\"><span class=\"string\">            padding: 12px;</span></span><br><span class=\"line\"><span class=\"string\">            border-radius: 15px;</span></span><br><span class=\"line\"><span class=\"string\">            max-width: 80%;</span></span><br><span class=\"line\"><span class=\"string\">            word-wrap: break-word;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">        .user-message &#123;</span></span><br><span class=\"line\"><span class=\"string\">            background: #e3f2fd;</span></span><br><span class=\"line\"><span class=\"string\">            margin-left: auto;</span></span><br><span class=\"line\"><span class=\"string\">            border-bottom-right-radius: 5px;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">        .bot-message &#123;</span></span><br><span class=\"line\"><span class=\"string\">            background: #fff;</span></span><br><span class=\"line\"><span class=\"string\">            border: 1px solid #eee;</span></span><br><span class=\"line\"><span class=\"string\">            margin-right: auto;</span></span><br><span class=\"line\"><span class=\"string\">            border-bottom-left-radius: 5px;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">        #inputContainer &#123;</span></span><br><span class=\"line\"><span class=\"string\">            display: flex;</span></span><br><span class=\"line\"><span class=\"string\">            gap: 10px;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">        #userInput &#123;</span></span><br><span class=\"line\"><span class=\"string\">            flex: 1;</span></span><br><span class=\"line\"><span class=\"string\">            padding: 12px;</span></span><br><span class=\"line\"><span class=\"string\">            border: 1px solid #ddd;</span></span><br><span class=\"line\"><span class=\"string\">            border-radius: 25px;</span></span><br><span class=\"line\"><span class=\"string\">            outline: none;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">        button &#123;</span></span><br><span class=\"line\"><span class=\"string\">            padding: 12px 25px;</span></span><br><span class=\"line\"><span class=\"string\">            background: #007bff;</span></span><br><span class=\"line\"><span class=\"string\">            color: white;</span></span><br><span class=\"line\"><span class=\"string\">            border: none;</span></span><br><span class=\"line\"><span class=\"string\">            border-radius: 25px;</span></span><br><span class=\"line\"><span class=\"string\">            cursor: pointer;</span></span><br><span class=\"line\"><span class=\"string\">            transition: background 0.3s;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">        button:hover &#123;</span></span><br><span class=\"line\"><span class=\"string\">            background: #0056b3;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">        .status &#123;</span></span><br><span class=\"line\"><span class=\"string\">            color: #666;</span></span><br><span class=\"line\"><span class=\"string\">            text-align: center;</span></span><br><span class=\"line\"><span class=\"string\">            padding: 10px;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/style&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/head&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;body&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;h1&gt;AI 对话助手&lt;/h1&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div id=&quot;chatContainer&quot;&gt;&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div id=&quot;inputContainer&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;input type=&quot;text&quot; id=&quot;userInput&quot; placeholder=&quot;输入消息...&quot; /&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;button onclick=&quot;sendMessage()&quot;&gt;发送&lt;/button&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div class=&quot;status&quot; id=&quot;status&quot;&gt;连接状态：正常&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    </span></span><br><span class=\"line\"><span class=\"string\">   // &lt;iframe</span></span><br><span class=\"line\"><span class=\"string\">   //      src=&quot;http://47.237.81.149/chatbot/9h9nyQcblGTesiGJ&quot;</span></span><br><span class=\"line\"><span class=\"string\">    //     style=&quot;width: 100%; height: 100%; min-height: 700px&quot;</span></span><br><span class=\"line\"><span class=\"string\">   //      frameborder=&quot;0&quot;</span></span><br><span class=\"line\"><span class=\"string\">  //       allow=&quot;microphone&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">   // &lt;/iframe&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    &lt;script&gt;</span></span><br><span class=\"line\"><span class=\"string\">        const ws = new WebSocket(&#x27;ws://&#x27; + window.location.host + &#x27;/ws&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">        const chatContainer = document.getElementById(&#x27;chatContainer&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">        let isBotResponding = false;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        // WebSocket 事件处理</span></span><br><span class=\"line\"><span class=\"string\">        ws.onopen = () =&gt; updateStatus(&#x27;已连接&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">        ws.onclose = () =&gt; updateStatus(&#x27;连接已断开&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">        ws.onerror = () =&gt; updateStatus(&#x27;连接错误&#x27;);</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        ws.onmessage = (event) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"string\">            const data = JSON.parse(event.data);</span></span><br><span class=\"line\"><span class=\"string\">            handleResponse(data);</span></span><br><span class=\"line\"><span class=\"string\">        &#125;;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        function handleResponse(data) &#123;</span></span><br><span class=\"line\"><span class=\"string\">            switch(data.type) &#123;</span></span><br><span class=\"line\"><span class=\"string\">                case &#x27;user_message&#x27;:</span></span><br><span class=\"line\"><span class=\"string\">                    appendMessage(data.content, &#x27;user&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">                    break;</span></span><br><span class=\"line\"><span class=\"string\">                case &#x27;assistant_start&#x27;:</span></span><br><span class=\"line\"><span class=\"string\">                    isBotResponding = true;</span></span><br><span class=\"line\"><span class=\"string\">                    appendMessage(&#x27;&#x27;, &#x27;bot&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">                    break;</span></span><br><span class=\"line\"><span class=\"string\">                case &#x27;assistant_chunk&#x27;:</span></span><br><span class=\"line\"><span class=\"string\">                    appendChunk(data.content);</span></span><br><span class=\"line\"><span class=\"string\">                    break;</span></span><br><span class=\"line\"><span class=\"string\">                case &#x27;assistant_end&#x27;:</span></span><br><span class=\"line\"><span class=\"string\">                    isBotResponding = false;</span></span><br><span class=\"line\"><span class=\"string\">                    break;</span></span><br><span class=\"line\"><span class=\"string\">                case &#x27;error&#x27;:</span></span><br><span class=\"line\"><span class=\"string\">                    appendMessage(`错误：$&#123;data.content&#125;`, &#x27;error&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">                    break;</span></span><br><span class=\"line\"><span class=\"string\">            &#125;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        function appendMessage(content, role) &#123;</span></span><br><span class=\"line\"><span class=\"string\">            const div = document.createElement(&#x27;div&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">            div.className = `message $&#123;role&#125;-message`;</span></span><br><span class=\"line\"><span class=\"string\">            div.textContent = content;</span></span><br><span class=\"line\"><span class=\"string\">            chatContainer.appendChild(div);</span></span><br><span class=\"line\"><span class=\"string\">            scrollToBottom();</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        function appendChunk(content) &#123;</span></span><br><span class=\"line\"><span class=\"string\">            const messages = document.getElementsByClassName(&#x27;bot-message&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">            const lastMsg = messages[messages.length - 1];</span></span><br><span class=\"line\"><span class=\"string\">            lastMsg.textContent += content;</span></span><br><span class=\"line\"><span class=\"string\">            scrollToBottom();</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        function scrollToBottom() &#123;</span></span><br><span class=\"line\"><span class=\"string\">            chatContainer.scrollTop = chatContainer.scrollHeight;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        function updateStatus(text) &#123;</span></span><br><span class=\"line\"><span class=\"string\">            document.getElementById(&#x27;status&#x27;).textContent = `状态：$&#123;text&#125;`;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        function sendMessage() &#123;</span></span><br><span class=\"line\"><span class=\"string\">            const input = document.getElementById(&#x27;userInput&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">            const message = input.value.trim();</span></span><br><span class=\"line\"><span class=\"string\">            if (message &amp;&amp; !isBotResponding) &#123;</span></span><br><span class=\"line\"><span class=\"string\">                ws.send(message);</span></span><br><span class=\"line\"><span class=\"string\">                input.value = &#x27;&#x27;;</span></span><br><span class=\"line\"><span class=\"string\">            &#125;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        // 支持回车发送</span></span><br><span class=\"line\"><span class=\"string\">        document.getElementById(&#x27;userInput&#x27;).addEventListener(&#x27;keypress&#x27;, (e) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"string\">            if (e.key === &#x27;Enter&#x27;) sendMessage();</span></span><br><span class=\"line\"><span class=\"string\">        &#125;);</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/body&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/html&gt;</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.get(<span class=\"params\"><span class=\"string\">&quot;/&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">get</span>():</span><br><span class=\"line\">    <span class=\"keyword\">return</span> HTMLResponse(HTML_TEMPLATE)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.websocket(<span class=\"params\"><span class=\"string\">&quot;/ws&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">websocket_endpoint</span>(<span class=\"params\">websocket: WebSocket</span>):</span><br><span class=\"line\">    <span class=\"keyword\">await</span> websocket.accept()</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 接收用户消息</span></span><br><span class=\"line\">            user_message = <span class=\"keyword\">await</span> websocket.receive_text()</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># 更新对话历史</span></span><br><span class=\"line\">            conversation_history.append(&#123;<span class=\"string\">&quot;role&quot;</span>: <span class=\"string\">&quot;user&quot;</span>, <span class=\"string\">&quot;content&quot;</span>: user_message&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># 发送用户消息到前端</span></span><br><span class=\"line\">            <span class=\"keyword\">await</span> websocket.send_json(&#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;user_message&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;content&quot;</span>: user_message</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># 准备流式请求</span></span><br><span class=\"line\">            <span class=\"keyword\">await</span> websocket.send_json(&#123;<span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;assistant_start&quot;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># 构造请求数据</span></span><br><span class=\"line\">            request_data = &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;model&quot;</span>: <span class=\"string\">&quot;deepseek-r1:latest&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;messages&quot;</span>: conversation_history,</span><br><span class=\"line\">                <span class=\"string\">&quot;stream&quot;</span>: <span class=\"literal\">True</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># 流式获取响应</span></span><br><span class=\"line\">            full_response = []</span><br><span class=\"line\">            <span class=\"keyword\">with</span> requests.post(</span><br><span class=\"line\">                    <span class=\"string\">&quot;http://1.1.1.1:11434/api/chat&quot;</span>,<span class=\"comment\">#大模型接口地址</span></span><br><span class=\"line\">                    json=request_data,</span><br><span class=\"line\">                    stream=<span class=\"literal\">True</span></span><br><span class=\"line\">            ) <span class=\"keyword\">as</span> response:</span><br><span class=\"line\">                response.raise_for_status()</span><br><span class=\"line\">                <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> response.iter_lines():</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> line:</span><br><span class=\"line\">                        chunk = json.loads(line.decode(<span class=\"string\">&#x27;utf-8&#x27;</span>))</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> <span class=\"string\">&#x27;message&#x27;</span> <span class=\"keyword\">in</span> chunk:</span><br><span class=\"line\">                            content = chunk[<span class=\"string\">&#x27;message&#x27;</span>][<span class=\"string\">&#x27;content&#x27;</span>]</span><br><span class=\"line\">                            full_response.append(content)</span><br><span class=\"line\">                            <span class=\"keyword\">await</span> websocket.send_json(&#123;</span><br><span class=\"line\">                                <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;assistant_chunk&quot;</span>,</span><br><span class=\"line\">                                <span class=\"string\">&quot;content&quot;</span>: content</span><br><span class=\"line\">                            &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># 保存完整响应</span></span><br><span class=\"line\">            conversation_history.append(&#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;role&quot;</span>: <span class=\"string\">&quot;assistant&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;content&quot;</span>: <span class=\"string\">&quot;&quot;</span>.join(full_response)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            <span class=\"keyword\">await</span> websocket.send_json(&#123;<span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;assistant_end&quot;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        <span class=\"keyword\">await</span> websocket.send_json(&#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;error&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;content&quot;</span>: <span class=\"string\">f&quot;系统错误: <span class=\"subst\">&#123;<span class=\"built_in\">str</span>(e)&#125;</span>&quot;</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">finally</span>:</span><br><span class=\"line\">        <span class=\"keyword\">await</span> websocket.close()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    <span class=\"keyword\">import</span> uvicorn</span><br><span class=\"line\"></span><br><span class=\"line\">    uvicorn.run(app, host=<span class=\"string\">&quot;0.0.0.0&quot;</span>, port=<span class=\"number\">8000</span>)</span><br></pre></td></tr></table></figure>"},{"title":"使用kubekey快速安装k8s","date":"2025-04-27T03:16:46.000Z","_content":"官方地址\nhttps://github.com/kubesphere/kubekey\n\n# 安装\n> curl -sfL https://get-kk.kubesphere.io | sh -\n## 单节点测试使用\n```shell\nkk create cluster\n#默认 v1.23.17\n--with-kubernetes v1.24.1 \n#默认docker\n--container-manager containerd\n#如果不使用--with-kubesphere默认不安装；默认版本为 v3.4.1\n--with-kubesphere\n```\n## 多节点\n```shell\nkk create config -f deploy.yml\n#-f 指定配置文件开始安装\nkk create cluster -f deploy.yml\n#deploy.yml;其他节点的ip用户名密码的修改成实际的\napiVersion: kubekey.kubesphere.io/v1alpha2\nkind: Cluster\nmetadata:\n  name: sample\nspec:\n  hosts:\n  - {name: node1, address: 172.16.0.2, internalAddress: 172.16.0.2, user: ubuntu, password: \"Qcloud@123\"}\n  - {name: node2, address: 172.16.0.3, internalAddress: 172.16.0.3, user: ubuntu, password: \"Qcloud@123\"}\n  roleGroups:\n    etcd:\n    - node1\n    control-plane: \n    - node1\n    worker:\n    - node1\n    - node2\n  controlPlaneEndpoint:\n    ## Internal loadbalancer for apiservers \n    # internalLoadbalancer: haproxy\n\n    domain: lb.kubesphere.local\n    address: \"\"\n    port: 6443\n  kubernetes:\n    version: v1.23.17\n    clusterName: cluster.local\n    autoRenewCerts: true\n    containerManager: docker\n  etcd:\n    type: kubekey\n  network:\n    plugin: calico\n    kubePodsCIDR: 10.233.64.0/18\n    kubeServiceCIDR: 10.233.0.0/18\n    ## multus support. https://github.com/k8snetworkplumbingwg/multus-cni\n    multusCNI:\n      enabled: false\n  registry:\n    privateRegistry: \"\"\n    namespaceOverride: \"\"\n    registryMirrors: []\n    insecureRegistries: []\n  addons: []\n----------------------------------------------------\n#默认不安装kubesphere需要指定--with-kubesphere\nkk create config --with-kubesphere -f deploy-with.yml\n```\n# 新增删除\n```shell\n#新增节点接入集群\nkk add nodes -f  deploy.yml\n#删除节点\nkk delete node <nodeName> -f deploy.yml\n#删除集群\nkk delete cluster [-f deploy.yml]\n```\n\n# 升级集群\n```shell\n使用指定版本升级集群。\n\nkk upgrade [--with-kubernetes version] [--with-kubesphere version] \n仅支持升级 Kubernetes。\n仅支持升级 KubeSphere。\n支持升级 Kubernetes 和 KubeSphere。\n多节点\n使用指定的配置文件升级集群。\n\nkk upgrade [--with-kubernetes version] [--with-kubesphere version] [(-f | --filename) path]\n如果指定了--with-kubernetes或--with-kubesphere，配置文件也将被更新。\n用于-f指定为集群创建而生成的配置文件。\n```\n\n# 更新集群证书\n>#默认一年<br>\nkk  certs renew\n![alt text](image.png)\n","source":"_posts/使用kubekey快速安装k8s.md","raw":"---\ntitle: 使用kubekey快速安装k8s\ndate: 2025-04-27 11:16:46\ntags:\ncategories: k8s\n---\n官方地址\nhttps://github.com/kubesphere/kubekey\n\n# 安装\n> curl -sfL https://get-kk.kubesphere.io | sh -\n## 单节点测试使用\n```shell\nkk create cluster\n#默认 v1.23.17\n--with-kubernetes v1.24.1 \n#默认docker\n--container-manager containerd\n#如果不使用--with-kubesphere默认不安装；默认版本为 v3.4.1\n--with-kubesphere\n```\n## 多节点\n```shell\nkk create config -f deploy.yml\n#-f 指定配置文件开始安装\nkk create cluster -f deploy.yml\n#deploy.yml;其他节点的ip用户名密码的修改成实际的\napiVersion: kubekey.kubesphere.io/v1alpha2\nkind: Cluster\nmetadata:\n  name: sample\nspec:\n  hosts:\n  - {name: node1, address: 172.16.0.2, internalAddress: 172.16.0.2, user: ubuntu, password: \"Qcloud@123\"}\n  - {name: node2, address: 172.16.0.3, internalAddress: 172.16.0.3, user: ubuntu, password: \"Qcloud@123\"}\n  roleGroups:\n    etcd:\n    - node1\n    control-plane: \n    - node1\n    worker:\n    - node1\n    - node2\n  controlPlaneEndpoint:\n    ## Internal loadbalancer for apiservers \n    # internalLoadbalancer: haproxy\n\n    domain: lb.kubesphere.local\n    address: \"\"\n    port: 6443\n  kubernetes:\n    version: v1.23.17\n    clusterName: cluster.local\n    autoRenewCerts: true\n    containerManager: docker\n  etcd:\n    type: kubekey\n  network:\n    plugin: calico\n    kubePodsCIDR: 10.233.64.0/18\n    kubeServiceCIDR: 10.233.0.0/18\n    ## multus support. https://github.com/k8snetworkplumbingwg/multus-cni\n    multusCNI:\n      enabled: false\n  registry:\n    privateRegistry: \"\"\n    namespaceOverride: \"\"\n    registryMirrors: []\n    insecureRegistries: []\n  addons: []\n----------------------------------------------------\n#默认不安装kubesphere需要指定--with-kubesphere\nkk create config --with-kubesphere -f deploy-with.yml\n```\n# 新增删除\n```shell\n#新增节点接入集群\nkk add nodes -f  deploy.yml\n#删除节点\nkk delete node <nodeName> -f deploy.yml\n#删除集群\nkk delete cluster [-f deploy.yml]\n```\n\n# 升级集群\n```shell\n使用指定版本升级集群。\n\nkk upgrade [--with-kubernetes version] [--with-kubesphere version] \n仅支持升级 Kubernetes。\n仅支持升级 KubeSphere。\n支持升级 Kubernetes 和 KubeSphere。\n多节点\n使用指定的配置文件升级集群。\n\nkk upgrade [--with-kubernetes version] [--with-kubesphere version] [(-f | --filename) path]\n如果指定了--with-kubernetes或--with-kubesphere，配置文件也将被更新。\n用于-f指定为集群创建而生成的配置文件。\n```\n\n# 更新集群证书\n>#默认一年<br>\nkk  certs renew\n![alt text](image.png)\n","slug":"使用kubekey快速安装k8s","published":1,"updated":"2025-08-28T06:39:18.229Z","comments":1,"layout":"post","photos":[],"_id":"cmev1ggcu001dhllzdmsqdjr8","content":"<p>官方地址<br><a href=\"https://github.com/kubesphere/kubekey\">https://github.com/kubesphere/kubekey</a></p>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><blockquote>\n<p>curl -sfL <a href=\"https://get-kk.kubesphere.io/\">https://get-kk.kubesphere.io</a> | sh -</p>\n</blockquote>\n<h2 id=\"单节点测试使用\"><a href=\"#单节点测试使用\" class=\"headerlink\" title=\"单节点测试使用\"></a>单节点测试使用</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kk create cluster</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">默认 v1.23.17</span></span><br><span class=\"line\">--with-kubernetes v1.24.1 </span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">默认docker</span></span><br><span class=\"line\">--container-manager containerd</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">如果不使用--with-kubesphere默认不安装；默认版本为 v3.4.1</span></span><br><span class=\"line\">--with-kubesphere</span><br></pre></td></tr></table></figure>\n<h2 id=\"多节点\"><a href=\"#多节点\" class=\"headerlink\" title=\"多节点\"></a>多节点</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kk create config -f deploy.yml</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">-f 指定配置文件开始安装</span></span><br><span class=\"line\">kk create cluster -f deploy.yml</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">deploy.yml;其他节点的ip用户名密码的修改成实际的</span></span><br><span class=\"line\">apiVersion: kubekey.kubesphere.io/v1alpha2</span><br><span class=\"line\">kind: Cluster</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: sample</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  hosts:</span><br><span class=\"line\">  - &#123;name: node1, address: 172.16.0.2, internalAddress: 172.16.0.2, user: ubuntu, password: &quot;Qcloud@123&quot;&#125;</span><br><span class=\"line\">  - &#123;name: node2, address: 172.16.0.3, internalAddress: 172.16.0.3, user: ubuntu, password: &quot;Qcloud@123&quot;&#125;</span><br><span class=\"line\">  roleGroups:</span><br><span class=\"line\">    etcd:</span><br><span class=\"line\">    - node1</span><br><span class=\"line\">    control-plane: </span><br><span class=\"line\">    - node1</span><br><span class=\"line\">    worker:</span><br><span class=\"line\">    - node1</span><br><span class=\"line\">    - node2</span><br><span class=\"line\">  controlPlaneEndpoint:</span><br><span class=\"line\">    ## Internal loadbalancer for apiservers </span><br><span class=\"line\">    # internalLoadbalancer: haproxy</span><br><span class=\"line\"></span><br><span class=\"line\">    domain: lb.kubesphere.local</span><br><span class=\"line\">    address: &quot;&quot;</span><br><span class=\"line\">    port: 6443</span><br><span class=\"line\">  kubernetes:</span><br><span class=\"line\">    version: v1.23.17</span><br><span class=\"line\">    clusterName: cluster.local</span><br><span class=\"line\">    autoRenewCerts: true</span><br><span class=\"line\">    containerManager: docker</span><br><span class=\"line\">  etcd:</span><br><span class=\"line\">    type: kubekey</span><br><span class=\"line\">  network:</span><br><span class=\"line\">    plugin: calico</span><br><span class=\"line\">    kubePodsCIDR: 10.233.64.0/18</span><br><span class=\"line\">    kubeServiceCIDR: 10.233.0.0/18</span><br><span class=\"line\">    ## multus support. https://github.com/k8snetworkplumbingwg/multus-cni</span><br><span class=\"line\">    multusCNI:</span><br><span class=\"line\">      enabled: false</span><br><span class=\"line\">  registry:</span><br><span class=\"line\">    privateRegistry: &quot;&quot;</span><br><span class=\"line\">    namespaceOverride: &quot;&quot;</span><br><span class=\"line\">    registryMirrors: []</span><br><span class=\"line\">    insecureRegistries: []</span><br><span class=\"line\">  addons: []</span><br><span class=\"line\">----------------------------------------------------</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">默认不安装kubesphere需要指定--with-kubesphere</span></span><br><span class=\"line\">kk create config --with-kubesphere -f deploy-with.yml</span><br></pre></td></tr></table></figure>\n<h1 id=\"新增删除\"><a href=\"#新增删除\" class=\"headerlink\" title=\"新增删除\"></a>新增删除</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">新增节点接入集群</span></span><br><span class=\"line\">kk add nodes -f  deploy.yml</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">删除节点</span></span><br><span class=\"line\">kk delete node &lt;nodeName&gt; -f deploy.yml</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">删除集群</span></span><br><span class=\"line\">kk delete cluster [-f deploy.yml]</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"升级集群\"><a href=\"#升级集群\" class=\"headerlink\" title=\"升级集群\"></a>升级集群</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用指定版本升级集群。</span><br><span class=\"line\"></span><br><span class=\"line\">kk upgrade [--with-kubernetes version] [--with-kubesphere version] </span><br><span class=\"line\">仅支持升级 Kubernetes。</span><br><span class=\"line\">仅支持升级 KubeSphere。</span><br><span class=\"line\">支持升级 Kubernetes 和 KubeSphere。</span><br><span class=\"line\">多节点</span><br><span class=\"line\">使用指定的配置文件升级集群。</span><br><span class=\"line\"></span><br><span class=\"line\">kk upgrade [--with-kubernetes version] [--with-kubesphere version] [(-f | --filename) path]</span><br><span class=\"line\">如果指定了--with-kubernetes或--with-kubesphere，配置文件也将被更新。</span><br><span class=\"line\">用于-f指定为集群创建而生成的配置文件。</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"更新集群证书\"><a href=\"#更新集群证书\" class=\"headerlink\" title=\"更新集群证书\"></a>更新集群证书</h1><blockquote>\n<p>#默认一年<br><br>kk  certs renew<br><img src=\"/2025/04/27/%E4%BD%BF%E7%94%A8kubekey%E5%BF%AB%E9%80%9F%E5%AE%89%E8%A3%85k8s/image.png\" alt=\"alt text\"></p>\n</blockquote>\n","excerpt":"","more":"<p>官方地址<br><a href=\"https://github.com/kubesphere/kubekey\">https://github.com/kubesphere/kubekey</a></p>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><blockquote>\n<p>curl -sfL <a href=\"https://get-kk.kubesphere.io/\">https://get-kk.kubesphere.io</a> | sh -</p>\n</blockquote>\n<h2 id=\"单节点测试使用\"><a href=\"#单节点测试使用\" class=\"headerlink\" title=\"单节点测试使用\"></a>单节点测试使用</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kk create cluster</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">默认 v1.23.17</span></span><br><span class=\"line\">--with-kubernetes v1.24.1 </span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">默认docker</span></span><br><span class=\"line\">--container-manager containerd</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">如果不使用--with-kubesphere默认不安装；默认版本为 v3.4.1</span></span><br><span class=\"line\">--with-kubesphere</span><br></pre></td></tr></table></figure>\n<h2 id=\"多节点\"><a href=\"#多节点\" class=\"headerlink\" title=\"多节点\"></a>多节点</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kk create config -f deploy.yml</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">-f 指定配置文件开始安装</span></span><br><span class=\"line\">kk create cluster -f deploy.yml</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">deploy.yml;其他节点的ip用户名密码的修改成实际的</span></span><br><span class=\"line\">apiVersion: kubekey.kubesphere.io/v1alpha2</span><br><span class=\"line\">kind: Cluster</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: sample</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  hosts:</span><br><span class=\"line\">  - &#123;name: node1, address: 172.16.0.2, internalAddress: 172.16.0.2, user: ubuntu, password: &quot;Qcloud@123&quot;&#125;</span><br><span class=\"line\">  - &#123;name: node2, address: 172.16.0.3, internalAddress: 172.16.0.3, user: ubuntu, password: &quot;Qcloud@123&quot;&#125;</span><br><span class=\"line\">  roleGroups:</span><br><span class=\"line\">    etcd:</span><br><span class=\"line\">    - node1</span><br><span class=\"line\">    control-plane: </span><br><span class=\"line\">    - node1</span><br><span class=\"line\">    worker:</span><br><span class=\"line\">    - node1</span><br><span class=\"line\">    - node2</span><br><span class=\"line\">  controlPlaneEndpoint:</span><br><span class=\"line\">    ## Internal loadbalancer for apiservers </span><br><span class=\"line\">    # internalLoadbalancer: haproxy</span><br><span class=\"line\"></span><br><span class=\"line\">    domain: lb.kubesphere.local</span><br><span class=\"line\">    address: &quot;&quot;</span><br><span class=\"line\">    port: 6443</span><br><span class=\"line\">  kubernetes:</span><br><span class=\"line\">    version: v1.23.17</span><br><span class=\"line\">    clusterName: cluster.local</span><br><span class=\"line\">    autoRenewCerts: true</span><br><span class=\"line\">    containerManager: docker</span><br><span class=\"line\">  etcd:</span><br><span class=\"line\">    type: kubekey</span><br><span class=\"line\">  network:</span><br><span class=\"line\">    plugin: calico</span><br><span class=\"line\">    kubePodsCIDR: 10.233.64.0/18</span><br><span class=\"line\">    kubeServiceCIDR: 10.233.0.0/18</span><br><span class=\"line\">    ## multus support. https://github.com/k8snetworkplumbingwg/multus-cni</span><br><span class=\"line\">    multusCNI:</span><br><span class=\"line\">      enabled: false</span><br><span class=\"line\">  registry:</span><br><span class=\"line\">    privateRegistry: &quot;&quot;</span><br><span class=\"line\">    namespaceOverride: &quot;&quot;</span><br><span class=\"line\">    registryMirrors: []</span><br><span class=\"line\">    insecureRegistries: []</span><br><span class=\"line\">  addons: []</span><br><span class=\"line\">----------------------------------------------------</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">默认不安装kubesphere需要指定--with-kubesphere</span></span><br><span class=\"line\">kk create config --with-kubesphere -f deploy-with.yml</span><br></pre></td></tr></table></figure>\n<h1 id=\"新增删除\"><a href=\"#新增删除\" class=\"headerlink\" title=\"新增删除\"></a>新增删除</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">新增节点接入集群</span></span><br><span class=\"line\">kk add nodes -f  deploy.yml</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">删除节点</span></span><br><span class=\"line\">kk delete node &lt;nodeName&gt; -f deploy.yml</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">删除集群</span></span><br><span class=\"line\">kk delete cluster [-f deploy.yml]</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"升级集群\"><a href=\"#升级集群\" class=\"headerlink\" title=\"升级集群\"></a>升级集群</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用指定版本升级集群。</span><br><span class=\"line\"></span><br><span class=\"line\">kk upgrade [--with-kubernetes version] [--with-kubesphere version] </span><br><span class=\"line\">仅支持升级 Kubernetes。</span><br><span class=\"line\">仅支持升级 KubeSphere。</span><br><span class=\"line\">支持升级 Kubernetes 和 KubeSphere。</span><br><span class=\"line\">多节点</span><br><span class=\"line\">使用指定的配置文件升级集群。</span><br><span class=\"line\"></span><br><span class=\"line\">kk upgrade [--with-kubernetes version] [--with-kubesphere version] [(-f | --filename) path]</span><br><span class=\"line\">如果指定了--with-kubernetes或--with-kubesphere，配置文件也将被更新。</span><br><span class=\"line\">用于-f指定为集群创建而生成的配置文件。</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"更新集群证书\"><a href=\"#更新集群证书\" class=\"headerlink\" title=\"更新集群证书\"></a>更新集群证书</h1><blockquote>\n<p>#默认一年<br><br>kk  certs renew<br><img src=\"/2025/04/27/%E4%BD%BF%E7%94%A8kubekey%E5%BF%AB%E9%80%9F%E5%AE%89%E8%A3%85k8s/image.png\" alt=\"alt text\"></p>\n</blockquote>\n"},{"title":"使用maven打包","date":"2025-05-12T02:25:14.000Z","_content":"# 使用springboot\n```config\n<parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.5.9</version>\n        <relativePath/>\n    </parent>\n\n    <groupId>org.ecs</groupId>\n    <artifactId>springboot01</artifactId>\n    <version>1.0-SNAPSHOT</version>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n```\n# 其他\n```config\n<groupId>org.example</groupId>\n    <artifactId>CpuLoad</artifactId>\n    <version>1.0-SNAPSHOT</version>\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-jar-plugin</artifactId>\n                <version>3.1.0</version>\n                <configuration>\n                    <archive>\n                        <manifest>\n                            <!-- 指定入口函数 -->                             \n\t\t\t    <mainClass>org.example.CpuLoad</mainClass>\n                            <!-- 是否添加依赖的jar路径配置 -->\n                            <addClasspath>true</addClasspath>\n                            <!-- 依赖的jar包存放未知，和生成的jar放在同一级目录下 -->\n                            <classpathPrefix>lib/</classpathPrefix>\n                        </manifest>\n                    </archive>\n                    <!-- 不打包com.yh.excludes下面的所有类 -->\n                    <excludes>com/xx/excludes/*</excludes>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n```\n","source":"_posts/使用maven打包.md","raw":"---\ntitle: 使用maven打包\ndate: 2025-05-12 10:25:14\ntags: maven\n---\n# 使用springboot\n```config\n<parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.5.9</version>\n        <relativePath/>\n    </parent>\n\n    <groupId>org.ecs</groupId>\n    <artifactId>springboot01</artifactId>\n    <version>1.0-SNAPSHOT</version>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n```\n# 其他\n```config\n<groupId>org.example</groupId>\n    <artifactId>CpuLoad</artifactId>\n    <version>1.0-SNAPSHOT</version>\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-jar-plugin</artifactId>\n                <version>3.1.0</version>\n                <configuration>\n                    <archive>\n                        <manifest>\n                            <!-- 指定入口函数 -->                             \n\t\t\t    <mainClass>org.example.CpuLoad</mainClass>\n                            <!-- 是否添加依赖的jar路径配置 -->\n                            <addClasspath>true</addClasspath>\n                            <!-- 依赖的jar包存放未知，和生成的jar放在同一级目录下 -->\n                            <classpathPrefix>lib/</classpathPrefix>\n                        </manifest>\n                    </archive>\n                    <!-- 不打包com.yh.excludes下面的所有类 -->\n                    <excludes>com/xx/excludes/*</excludes>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n```\n","slug":"使用maven打包","published":1,"updated":"2025-08-28T06:39:18.236Z","comments":1,"layout":"post","photos":[],"_id":"cmev1ggd1001ghllz1muah4z1","content":"<h1 id=\"使用springboot\"><a href=\"#使用springboot\" class=\"headerlink\" title=\"使用springboot\"></a>使用springboot</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;parent&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;2.5.9&lt;/version&gt;</span><br><span class=\"line\">        &lt;relativePath/&gt;</span><br><span class=\"line\">    &lt;/parent&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;groupId&gt;org.ecs&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;springboot01&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;build&gt;</span><br><span class=\"line\">        &lt;plugins&gt;</span><br><span class=\"line\">            &lt;plugin&gt;</span><br><span class=\"line\">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;/plugin&gt;</span><br><span class=\"line\">        &lt;/plugins&gt;</span><br><span class=\"line\">    &lt;/build&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;groupId&gt;org.example&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;CpuLoad&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">    &lt;build&gt;</span><br><span class=\"line\">        &lt;plugins&gt;</span><br><span class=\"line\">            &lt;plugin&gt;</span><br><span class=\"line\">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">                &lt;version&gt;3.1.0&lt;/version&gt;</span><br><span class=\"line\">                &lt;configuration&gt;</span><br><span class=\"line\">                    &lt;archive&gt;</span><br><span class=\"line\">                        &lt;manifest&gt;</span><br><span class=\"line\">                            &lt;!-- 指定入口函数 --&gt;                             </span><br><span class=\"line\">\t\t\t    &lt;mainClass&gt;org.example.CpuLoad&lt;/mainClass&gt;</span><br><span class=\"line\">                            &lt;!-- 是否添加依赖的jar路径配置 --&gt;</span><br><span class=\"line\">                            &lt;addClasspath&gt;true&lt;/addClasspath&gt;</span><br><span class=\"line\">                            &lt;!-- 依赖的jar包存放未知，和生成的jar放在同一级目录下 --&gt;</span><br><span class=\"line\">                            &lt;classpathPrefix&gt;lib/&lt;/classpathPrefix&gt;</span><br><span class=\"line\">                        &lt;/manifest&gt;</span><br><span class=\"line\">                    &lt;/archive&gt;</span><br><span class=\"line\">                    &lt;!-- 不打包com.yh.excludes下面的所有类 --&gt;</span><br><span class=\"line\">                    &lt;excludes&gt;com/xx/excludes/*&lt;/excludes&gt;</span><br><span class=\"line\">                &lt;/configuration&gt;</span><br><span class=\"line\">            &lt;/plugin&gt;</span><br><span class=\"line\">        &lt;/plugins&gt;</span><br><span class=\"line\">    &lt;/build&gt;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"使用springboot\"><a href=\"#使用springboot\" class=\"headerlink\" title=\"使用springboot\"></a>使用springboot</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;parent&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;2.5.9&lt;/version&gt;</span><br><span class=\"line\">        &lt;relativePath/&gt;</span><br><span class=\"line\">    &lt;/parent&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;groupId&gt;org.ecs&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;springboot01&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;build&gt;</span><br><span class=\"line\">        &lt;plugins&gt;</span><br><span class=\"line\">            &lt;plugin&gt;</span><br><span class=\"line\">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;/plugin&gt;</span><br><span class=\"line\">        &lt;/plugins&gt;</span><br><span class=\"line\">    &lt;/build&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;groupId&gt;org.example&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;CpuLoad&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">    &lt;build&gt;</span><br><span class=\"line\">        &lt;plugins&gt;</span><br><span class=\"line\">            &lt;plugin&gt;</span><br><span class=\"line\">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">                &lt;version&gt;3.1.0&lt;/version&gt;</span><br><span class=\"line\">                &lt;configuration&gt;</span><br><span class=\"line\">                    &lt;archive&gt;</span><br><span class=\"line\">                        &lt;manifest&gt;</span><br><span class=\"line\">                            &lt;!-- 指定入口函数 --&gt;                             </span><br><span class=\"line\">\t\t\t    &lt;mainClass&gt;org.example.CpuLoad&lt;/mainClass&gt;</span><br><span class=\"line\">                            &lt;!-- 是否添加依赖的jar路径配置 --&gt;</span><br><span class=\"line\">                            &lt;addClasspath&gt;true&lt;/addClasspath&gt;</span><br><span class=\"line\">                            &lt;!-- 依赖的jar包存放未知，和生成的jar放在同一级目录下 --&gt;</span><br><span class=\"line\">                            &lt;classpathPrefix&gt;lib/&lt;/classpathPrefix&gt;</span><br><span class=\"line\">                        &lt;/manifest&gt;</span><br><span class=\"line\">                    &lt;/archive&gt;</span><br><span class=\"line\">                    &lt;!-- 不打包com.yh.excludes下面的所有类 --&gt;</span><br><span class=\"line\">                    &lt;excludes&gt;com/xx/excludes/*&lt;/excludes&gt;</span><br><span class=\"line\">                &lt;/configuration&gt;</span><br><span class=\"line\">            &lt;/plugin&gt;</span><br><span class=\"line\">        &lt;/plugins&gt;</span><br><span class=\"line\">    &lt;/build&gt;</span><br></pre></td></tr></table></figure>\n"},{"title":"常用压测命令","date":"2025-08-28T06:41:02.000Z","_content":"\n## 一、**siege**\n### 1. 下载与安装\n```bash\n# Ubuntu/Debian\nsudo apt-get install siege\n\n# CentOS/RHEL\nsudo yum install siege\n\n# macOS\nbrew install siege\n\n# 验证安装\nsiege --version\n```\n\n### 2. 核心参数\n| 参数               | 说明                            | 示例                   |\n|--------------------|---------------------------------|------------------------|\n| `-c <并发数>`      | 并发用户数（必须参数）          | `-c 100`               |\n| `-t <时间>`        | 压测持续时间（s/m/h）           | `-t 30s`               |\n| `-r <次数>`        | 每个用户重复请求次数            | `-r 50`                |\n| `-f <文件>`        | 从文件读取多个URL进行压测       | `-f urls.txt`          |\n| `-i`               | 随机发送文件中的URL请求         | `-i -f urls.txt`       |\n| `-b`               | 无延迟模式（最大压力测试）      | `-b`                   |\n| `-v`               | 显示详细请求日志                | `-v`                   |\n\n### 3. 示例命令\n```bash\n# 100并发用户，持续30秒压测\nsiege -c 100 -t 30s http://example.com\n\n# 从文件加载URL列表，50并发用户，每个用户重复20次\nsiege -c 50 -r 20 -f urls.txt\n```\n\n### 4. 测试结果解读\n```plaintext\nTransactions:              2000 hits        # 总请求数\nAvailability:              99.50 %          # 请求成功率（失败率=1 - Availability）\nElapsed time:              59.99 sec        # 总耗时\nData transferred:          5.67 MB          # 总数据传输量\nResponse time:             0.25 sec         # 平均响应时间\nTransaction rate:          33.34 trans/sec  # 每秒处理请求数（QPS）\nLongest transaction:       1.20 sec         # 最慢请求耗时\nShortest transaction:      0.05 sec         # 最快请求耗时\n```\n\n\n---\n\n## 二、**ab（ApacheBench）**\n### 1. 下载与安装\n```bash\n# Ubuntu/Debian\nsudo apt-get install apache2-utils\n\n# CentOS/RHEL\nsudo yum install httpd-tools\n\n# macOS（预装或使用Homebrew）\nab -V\n\n# 验证安装\nab -V\n```\n\n### 2. 核心参数\n| 参数               | 说明                            | 示例                   |\n|--------------------|---------------------------------|------------------------|\n| `-n <总数>`        | 总请求数（必须参数）            | `-n 1000`              |\n| `-c <并发数>`      | 并发用户数（必须参数）          | `-c 100`               |\n| `-k`               | 启用HTTP Keep-Alive长连接       | `-k`                   |\n| `-H <头部>`        | 添加自定义HTTP头部              | `-H \"Content-Type: application/json\"` |\n| `-p <文件>`        | POST请求时发送的数据文件        | `-p data.json`         |\n| `-T <类型>`        | POST/PUT内容类型                | `-T application/json`  |\n\n### 3. 示例命令\n```bash\n# 总请求1000次，并发100用户，启用Keep-Alive\nab -n 1000 -c 100 -k http://example.com/\n\n# POST请求测试（发送JSON数据）\nab -n 500 -c 50 -T application/json -p data.json http://example.com/api\n```\n\n### 4. 测试结果解读\n```plaintext\nConcurrency Level:      100                 # 并发数\nTime taken for tests:   2.123 seconds       # 总耗时\nComplete requests:      1000                # 成功请求数\nFailed requests:        0                   # 失败请求数\nRequests per second:    470.34 [#/sec]      # QPS（每秒请求数）\nTime per request:       212.300 [ms]        # 平均请求耗时（并发场景）\nTime per request:       2.123 [ms]          # 平均请求耗时（单用户）\nTransfer rate:          512.34 [Kbytes/sec] # 数据传输速率\n\nPercentage of the requests served within a certain time (ms):\n  50%    25    # 50%的请求在25ms内完成\n  90%    50    # 90%的请求在50ms内完成\n  99%    200   # 99%的请求在200ms内完成\n```\n\n\n---\n\n## 三、**wrk**\n### 1. 下载与安装\n```bash\n# 源码编译（需提前安装Git和GCC）\ngit clone https://github.com/wg/wrk.git\ncd wrk && make\n\n# macOS\nbrew install wrk\n\n# 验证安装\nwrk --version\n```\n\n### 2. 核心参数\n| 参数               | 说明                            | 示例                   |\n|--------------------|---------------------------------|------------------------|\n| `-t <线程数>`      | 工作线程数（建议与CPU核心一致） | `-t 4`                 |\n| `-c <并发数>`      | 并发连接数（必须参数）          | `-c 100`               |\n| `-d <时间>`        | 压测持续时间（s/m/h）           | `-d 30s`               |\n| `-s <脚本>`        | 使用Lua脚本定制请求（如POST）   | `-s post.lua`          |\n| `--latency`        | 输出详细延迟分布统计            | `--latency`            |\n| `--timeout <时间>` | 设置请求超时时间                | `--timeout 10s`        |\n\n### 3. 示例命令\n```bash\n# 4线程、100并发、持续30秒压测\nwrk -t4 -c100 -d30s http://example.com\n\n# 使用Lua脚本模拟POST请求（见下方脚本示例）\nwrk -t4 -c100 -d10s -s post.lua http://example.com/api\n```\n\n#### Lua脚本示例（`post.lua`）：\n```lua\nwrk.method = \"POST\"\nwrk.headers[\"Content-Type\"] = \"application/json\"\nwrk.body = '{\"username\":\"test\", \"password\":\"123456\"}'\n```\n\n### 4. 测试结果解读\n```plaintext\nRunning 30s test @ http://example.com\n  4 threads and 100 connections                  # 线程数、并发连接数\n  Thread Stats   Avg      Stdev     Max   +/- Stdev\n    Latency    45.76ms   12.34ms 200.15ms   85.23%  # 延迟分布（平均、标准差、最大值、分布比例）\n    Req/Sec    550.12    120.45     2.34k    75.34% # 每秒请求数分布\n  Latency Distribution                           # 延迟百分比分布\n     50%   42.12ms\n     75%   50.23ms\n     90%   65.45ms\n     99%  185.67ms\n  65432 requests in 30.01s, 12.34MB read         # 总请求数、数据读取量\nRequests/sec:   2180.23                          # QPS\nTransfer/sec:    420.45KB                        # 每秒数据传输量\n```\n\n\n---\n\n## 四、工具横向对比\n| **维度**         | **siege**                                   | **ab**                                     | **wrk**                                   |\n|------------------|---------------------------------------------|--------------------------------------------|-------------------------------------------|\n| **安装复杂度**   | ⭐⭐（包管理器直装）                     | ⭐⭐⭐（ApacheUtils集成）                 | ⭐⭐（需编译或Homebrew）                 |\n| **性能上限**     | ⭐⭐（万级QPS）                           | ⭐⭐⭐（十万级QPS）                        | ⭐⭐⭐⭐（百万级QPS）                     |\n| **灵活性**       | ⭐⭐（支持URL列表、随机请求）             | ⭐（仅支持简单静态请求）                  | ⭐⭐⭐⭐（Lua脚本扩展动态场景）          |\n| **结果可读性**   | ⭐⭐⭐（清晰的成功率/响应时间）           | ⭐⭐（QPS和延迟分布）                    | ⭐⭐⭐（线程级统计+延迟分布）            |\n| **适用场景**     | 页面级压测、成功率监控                     | 快速基准测试、简单接口验证                | 高并发测试、复杂业务逻辑模拟              |\n| **资源消耗**     | 高（进程模型）                             | 中（单线程+多进程）                       | 低（多线程+事件驱动）                    |\n\n---\n\n## 五、最终建议\n1. **简单快速测试**：用 `ab`，一条命令即可获取QPS和延迟分布。\n2. **高并发/复杂场景**：选 `wrk`，支持Lua脚本模拟动态请求（如登录、鉴权）。\n3. **成功率验证**：用 `siege`，明确展示事务成功率和响应时间极值。\n4. **生产级压测**：结合多工具结果交叉验证（如先用 `ab` 快速验证，再用 `wrk` 压测极限）。\n\n附：各工具官网\n- **siege**: [https://www.joedog.org/siege-home/](https://www.joedog.org/siege-home/)\n- **ab**: [Apache HTTP Server Documentation](https://httpd.apache.org/docs/2.4/programs/ab.html)\n- **wrk**: [https://github.com/wg/wrk](https://github.com/wg/wrk)\n","source":"_posts/常用压测命令.md","raw":"---\ntitle: 常用压测命令\ndate: 2025-08-28 14:41:02\ntags:\ncategories: linux\n---\n\n## 一、**siege**\n### 1. 下载与安装\n```bash\n# Ubuntu/Debian\nsudo apt-get install siege\n\n# CentOS/RHEL\nsudo yum install siege\n\n# macOS\nbrew install siege\n\n# 验证安装\nsiege --version\n```\n\n### 2. 核心参数\n| 参数               | 说明                            | 示例                   |\n|--------------------|---------------------------------|------------------------|\n| `-c <并发数>`      | 并发用户数（必须参数）          | `-c 100`               |\n| `-t <时间>`        | 压测持续时间（s/m/h）           | `-t 30s`               |\n| `-r <次数>`        | 每个用户重复请求次数            | `-r 50`                |\n| `-f <文件>`        | 从文件读取多个URL进行压测       | `-f urls.txt`          |\n| `-i`               | 随机发送文件中的URL请求         | `-i -f urls.txt`       |\n| `-b`               | 无延迟模式（最大压力测试）      | `-b`                   |\n| `-v`               | 显示详细请求日志                | `-v`                   |\n\n### 3. 示例命令\n```bash\n# 100并发用户，持续30秒压测\nsiege -c 100 -t 30s http://example.com\n\n# 从文件加载URL列表，50并发用户，每个用户重复20次\nsiege -c 50 -r 20 -f urls.txt\n```\n\n### 4. 测试结果解读\n```plaintext\nTransactions:              2000 hits        # 总请求数\nAvailability:              99.50 %          # 请求成功率（失败率=1 - Availability）\nElapsed time:              59.99 sec        # 总耗时\nData transferred:          5.67 MB          # 总数据传输量\nResponse time:             0.25 sec         # 平均响应时间\nTransaction rate:          33.34 trans/sec  # 每秒处理请求数（QPS）\nLongest transaction:       1.20 sec         # 最慢请求耗时\nShortest transaction:      0.05 sec         # 最快请求耗时\n```\n\n\n---\n\n## 二、**ab（ApacheBench）**\n### 1. 下载与安装\n```bash\n# Ubuntu/Debian\nsudo apt-get install apache2-utils\n\n# CentOS/RHEL\nsudo yum install httpd-tools\n\n# macOS（预装或使用Homebrew）\nab -V\n\n# 验证安装\nab -V\n```\n\n### 2. 核心参数\n| 参数               | 说明                            | 示例                   |\n|--------------------|---------------------------------|------------------------|\n| `-n <总数>`        | 总请求数（必须参数）            | `-n 1000`              |\n| `-c <并发数>`      | 并发用户数（必须参数）          | `-c 100`               |\n| `-k`               | 启用HTTP Keep-Alive长连接       | `-k`                   |\n| `-H <头部>`        | 添加自定义HTTP头部              | `-H \"Content-Type: application/json\"` |\n| `-p <文件>`        | POST请求时发送的数据文件        | `-p data.json`         |\n| `-T <类型>`        | POST/PUT内容类型                | `-T application/json`  |\n\n### 3. 示例命令\n```bash\n# 总请求1000次，并发100用户，启用Keep-Alive\nab -n 1000 -c 100 -k http://example.com/\n\n# POST请求测试（发送JSON数据）\nab -n 500 -c 50 -T application/json -p data.json http://example.com/api\n```\n\n### 4. 测试结果解读\n```plaintext\nConcurrency Level:      100                 # 并发数\nTime taken for tests:   2.123 seconds       # 总耗时\nComplete requests:      1000                # 成功请求数\nFailed requests:        0                   # 失败请求数\nRequests per second:    470.34 [#/sec]      # QPS（每秒请求数）\nTime per request:       212.300 [ms]        # 平均请求耗时（并发场景）\nTime per request:       2.123 [ms]          # 平均请求耗时（单用户）\nTransfer rate:          512.34 [Kbytes/sec] # 数据传输速率\n\nPercentage of the requests served within a certain time (ms):\n  50%    25    # 50%的请求在25ms内完成\n  90%    50    # 90%的请求在50ms内完成\n  99%    200   # 99%的请求在200ms内完成\n```\n\n\n---\n\n## 三、**wrk**\n### 1. 下载与安装\n```bash\n# 源码编译（需提前安装Git和GCC）\ngit clone https://github.com/wg/wrk.git\ncd wrk && make\n\n# macOS\nbrew install wrk\n\n# 验证安装\nwrk --version\n```\n\n### 2. 核心参数\n| 参数               | 说明                            | 示例                   |\n|--------------------|---------------------------------|------------------------|\n| `-t <线程数>`      | 工作线程数（建议与CPU核心一致） | `-t 4`                 |\n| `-c <并发数>`      | 并发连接数（必须参数）          | `-c 100`               |\n| `-d <时间>`        | 压测持续时间（s/m/h）           | `-d 30s`               |\n| `-s <脚本>`        | 使用Lua脚本定制请求（如POST）   | `-s post.lua`          |\n| `--latency`        | 输出详细延迟分布统计            | `--latency`            |\n| `--timeout <时间>` | 设置请求超时时间                | `--timeout 10s`        |\n\n### 3. 示例命令\n```bash\n# 4线程、100并发、持续30秒压测\nwrk -t4 -c100 -d30s http://example.com\n\n# 使用Lua脚本模拟POST请求（见下方脚本示例）\nwrk -t4 -c100 -d10s -s post.lua http://example.com/api\n```\n\n#### Lua脚本示例（`post.lua`）：\n```lua\nwrk.method = \"POST\"\nwrk.headers[\"Content-Type\"] = \"application/json\"\nwrk.body = '{\"username\":\"test\", \"password\":\"123456\"}'\n```\n\n### 4. 测试结果解读\n```plaintext\nRunning 30s test @ http://example.com\n  4 threads and 100 connections                  # 线程数、并发连接数\n  Thread Stats   Avg      Stdev     Max   +/- Stdev\n    Latency    45.76ms   12.34ms 200.15ms   85.23%  # 延迟分布（平均、标准差、最大值、分布比例）\n    Req/Sec    550.12    120.45     2.34k    75.34% # 每秒请求数分布\n  Latency Distribution                           # 延迟百分比分布\n     50%   42.12ms\n     75%   50.23ms\n     90%   65.45ms\n     99%  185.67ms\n  65432 requests in 30.01s, 12.34MB read         # 总请求数、数据读取量\nRequests/sec:   2180.23                          # QPS\nTransfer/sec:    420.45KB                        # 每秒数据传输量\n```\n\n\n---\n\n## 四、工具横向对比\n| **维度**         | **siege**                                   | **ab**                                     | **wrk**                                   |\n|------------------|---------------------------------------------|--------------------------------------------|-------------------------------------------|\n| **安装复杂度**   | ⭐⭐（包管理器直装）                     | ⭐⭐⭐（ApacheUtils集成）                 | ⭐⭐（需编译或Homebrew）                 |\n| **性能上限**     | ⭐⭐（万级QPS）                           | ⭐⭐⭐（十万级QPS）                        | ⭐⭐⭐⭐（百万级QPS）                     |\n| **灵活性**       | ⭐⭐（支持URL列表、随机请求）             | ⭐（仅支持简单静态请求）                  | ⭐⭐⭐⭐（Lua脚本扩展动态场景）          |\n| **结果可读性**   | ⭐⭐⭐（清晰的成功率/响应时间）           | ⭐⭐（QPS和延迟分布）                    | ⭐⭐⭐（线程级统计+延迟分布）            |\n| **适用场景**     | 页面级压测、成功率监控                     | 快速基准测试、简单接口验证                | 高并发测试、复杂业务逻辑模拟              |\n| **资源消耗**     | 高（进程模型）                             | 中（单线程+多进程）                       | 低（多线程+事件驱动）                    |\n\n---\n\n## 五、最终建议\n1. **简单快速测试**：用 `ab`，一条命令即可获取QPS和延迟分布。\n2. **高并发/复杂场景**：选 `wrk`，支持Lua脚本模拟动态请求（如登录、鉴权）。\n3. **成功率验证**：用 `siege`，明确展示事务成功率和响应时间极值。\n4. **生产级压测**：结合多工具结果交叉验证（如先用 `ab` 快速验证，再用 `wrk` 压测极限）。\n\n附：各工具官网\n- **siege**: [https://www.joedog.org/siege-home/](https://www.joedog.org/siege-home/)\n- **ab**: [Apache HTTP Server Documentation](https://httpd.apache.org/docs/2.4/programs/ab.html)\n- **wrk**: [https://github.com/wg/wrk](https://github.com/wg/wrk)\n","slug":"常用压测命令","published":1,"updated":"2025-08-28T06:41:54.543Z","comments":1,"layout":"post","photos":[],"_id":"cmev1ggd7001jhllze6st3wbu","content":"<h2 id=\"一、siege\"><a href=\"#一、siege\" class=\"headerlink\" title=\"一、siege\"></a>一、<strong>siege</strong></h2><h3 id=\"1-下载与安装\"><a href=\"#1-下载与安装\" class=\"headerlink\" title=\"1. 下载与安装\"></a>1. 下载与安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Ubuntu/Debian</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> apt-get install siege</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># CentOS/RHEL</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> yum install siege</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># macOS</span></span><br><span class=\"line\">brew install siege</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 验证安装</span></span><br><span class=\"line\">siege --version</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-核心参数\"><a href=\"#2-核心参数\" class=\"headerlink\" title=\"2. 核心参数\"></a>2. 核心参数</h3><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>-c &lt;并发数&gt;</code></td>\n<td>并发用户数（必须参数）</td>\n<td><code>-c 100</code></td>\n</tr>\n<tr>\n<td><code>-t &lt;时间&gt;</code></td>\n<td>压测持续时间（s&#x2F;m&#x2F;h）</td>\n<td><code>-t 30s</code></td>\n</tr>\n<tr>\n<td><code>-r &lt;次数&gt;</code></td>\n<td>每个用户重复请求次数</td>\n<td><code>-r 50</code></td>\n</tr>\n<tr>\n<td><code>-f &lt;文件&gt;</code></td>\n<td>从文件读取多个URL进行压测</td>\n<td><code>-f urls.txt</code></td>\n</tr>\n<tr>\n<td><code>-i</code></td>\n<td>随机发送文件中的URL请求</td>\n<td><code>-i -f urls.txt</code></td>\n</tr>\n<tr>\n<td><code>-b</code></td>\n<td>无延迟模式（最大压力测试）</td>\n<td><code>-b</code></td>\n</tr>\n<tr>\n<td><code>-v</code></td>\n<td>显示详细请求日志</td>\n<td><code>-v</code></td>\n</tr>\n</tbody></table>\n<h3 id=\"3-示例命令\"><a href=\"#3-示例命令\" class=\"headerlink\" title=\"3. 示例命令\"></a>3. 示例命令</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 100并发用户，持续30秒压测</span></span><br><span class=\"line\">siege -c 100 -t 30s http://example.com</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 从文件加载URL列表，50并发用户，每个用户重复20次</span></span><br><span class=\"line\">siege -c 50 -r 20 -f urls.txt</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-测试结果解读\"><a href=\"#4-测试结果解读\" class=\"headerlink\" title=\"4. 测试结果解读\"></a>4. 测试结果解读</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Transactions:              2000 hits        # 总请求数</span><br><span class=\"line\">Availability:              99.50 %          # 请求成功率（失败率=1 - Availability）</span><br><span class=\"line\">Elapsed time:              59.99 sec        # 总耗时</span><br><span class=\"line\">Data transferred:          5.67 MB          # 总数据传输量</span><br><span class=\"line\">Response time:             0.25 sec         # 平均响应时间</span><br><span class=\"line\">Transaction rate:          33.34 trans/sec  # 每秒处理请求数（QPS）</span><br><span class=\"line\">Longest transaction:       1.20 sec         # 最慢请求耗时</span><br><span class=\"line\">Shortest transaction:      0.05 sec         # 最快请求耗时</span><br></pre></td></tr></table></figure>\n\n\n<hr>\n<h2 id=\"二、ab（ApacheBench）\"><a href=\"#二、ab（ApacheBench）\" class=\"headerlink\" title=\"二、ab（ApacheBench）\"></a>二、<strong>ab（ApacheBench）</strong></h2><h3 id=\"1-下载与安装-1\"><a href=\"#1-下载与安装-1\" class=\"headerlink\" title=\"1. 下载与安装\"></a>1. 下载与安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Ubuntu/Debian</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> apt-get install apache2-utils</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># CentOS/RHEL</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> yum install httpd-tools</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># macOS（预装或使用Homebrew）</span></span><br><span class=\"line\">ab -V</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 验证安装</span></span><br><span class=\"line\">ab -V</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-核心参数-1\"><a href=\"#2-核心参数-1\" class=\"headerlink\" title=\"2. 核心参数\"></a>2. 核心参数</h3><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>-n &lt;总数&gt;</code></td>\n<td>总请求数（必须参数）</td>\n<td><code>-n 1000</code></td>\n</tr>\n<tr>\n<td><code>-c &lt;并发数&gt;</code></td>\n<td>并发用户数（必须参数）</td>\n<td><code>-c 100</code></td>\n</tr>\n<tr>\n<td><code>-k</code></td>\n<td>启用HTTP Keep-Alive长连接</td>\n<td><code>-k</code></td>\n</tr>\n<tr>\n<td><code>-H &lt;头部&gt;</code></td>\n<td>添加自定义HTTP头部</td>\n<td><code>-H &quot;Content-Type: application/json&quot;</code></td>\n</tr>\n<tr>\n<td><code>-p &lt;文件&gt;</code></td>\n<td>POST请求时发送的数据文件</td>\n<td><code>-p data.json</code></td>\n</tr>\n<tr>\n<td><code>-T &lt;类型&gt;</code></td>\n<td>POST&#x2F;PUT内容类型</td>\n<td><code>-T application/json</code></td>\n</tr>\n</tbody></table>\n<h3 id=\"3-示例命令-1\"><a href=\"#3-示例命令-1\" class=\"headerlink\" title=\"3. 示例命令\"></a>3. 示例命令</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 总请求1000次，并发100用户，启用Keep-Alive</span></span><br><span class=\"line\">ab -n 1000 -c 100 -k http://example.com/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># POST请求测试（发送JSON数据）</span></span><br><span class=\"line\">ab -n 500 -c 50 -T application/json -p data.json http://example.com/api</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-测试结果解读-1\"><a href=\"#4-测试结果解读-1\" class=\"headerlink\" title=\"4. 测试结果解读\"></a>4. 测试结果解读</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Concurrency Level:      100                 # 并发数</span><br><span class=\"line\">Time taken for tests:   2.123 seconds       # 总耗时</span><br><span class=\"line\">Complete requests:      1000                # 成功请求数</span><br><span class=\"line\">Failed requests:        0                   # 失败请求数</span><br><span class=\"line\">Requests per second:    470.34 [#/sec]      # QPS（每秒请求数）</span><br><span class=\"line\">Time per request:       212.300 [ms]        # 平均请求耗时（并发场景）</span><br><span class=\"line\">Time per request:       2.123 [ms]          # 平均请求耗时（单用户）</span><br><span class=\"line\">Transfer rate:          512.34 [Kbytes/sec] # 数据传输速率</span><br><span class=\"line\"></span><br><span class=\"line\">Percentage of the requests served within a certain time (ms):</span><br><span class=\"line\">  50%    25    # 50%的请求在25ms内完成</span><br><span class=\"line\">  90%    50    # 90%的请求在50ms内完成</span><br><span class=\"line\">  99%    200   # 99%的请求在200ms内完成</span><br></pre></td></tr></table></figure>\n\n\n<hr>\n<h2 id=\"三、wrk\"><a href=\"#三、wrk\" class=\"headerlink\" title=\"三、wrk\"></a>三、<strong>wrk</strong></h2><h3 id=\"1-下载与安装-2\"><a href=\"#1-下载与安装-2\" class=\"headerlink\" title=\"1. 下载与安装\"></a>1. 下载与安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 源码编译（需提前安装Git和GCC）</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/wg/wrk.git</span><br><span class=\"line\"><span class=\"built_in\">cd</span> wrk &amp;&amp; make</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># macOS</span></span><br><span class=\"line\">brew install wrk</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 验证安装</span></span><br><span class=\"line\">wrk --version</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-核心参数-2\"><a href=\"#2-核心参数-2\" class=\"headerlink\" title=\"2. 核心参数\"></a>2. 核心参数</h3><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>-t &lt;线程数&gt;</code></td>\n<td>工作线程数（建议与CPU核心一致）</td>\n<td><code>-t 4</code></td>\n</tr>\n<tr>\n<td><code>-c &lt;并发数&gt;</code></td>\n<td>并发连接数（必须参数）</td>\n<td><code>-c 100</code></td>\n</tr>\n<tr>\n<td><code>-d &lt;时间&gt;</code></td>\n<td>压测持续时间（s&#x2F;m&#x2F;h）</td>\n<td><code>-d 30s</code></td>\n</tr>\n<tr>\n<td><code>-s &lt;脚本&gt;</code></td>\n<td>使用Lua脚本定制请求（如POST）</td>\n<td><code>-s post.lua</code></td>\n</tr>\n<tr>\n<td><code>--latency</code></td>\n<td>输出详细延迟分布统计</td>\n<td><code>--latency</code></td>\n</tr>\n<tr>\n<td><code>--timeout &lt;时间&gt;</code></td>\n<td>设置请求超时时间</td>\n<td><code>--timeout 10s</code></td>\n</tr>\n</tbody></table>\n<h3 id=\"3-示例命令-2\"><a href=\"#3-示例命令-2\" class=\"headerlink\" title=\"3. 示例命令\"></a>3. 示例命令</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 4线程、100并发、持续30秒压测</span></span><br><span class=\"line\">wrk -t4 -c100 -d30s http://example.com</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用Lua脚本模拟POST请求（见下方脚本示例）</span></span><br><span class=\"line\">wrk -t4 -c100 -d10s -s post.lua http://example.com/api</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Lua脚本示例（post-lua）：\"><a href=\"#Lua脚本示例（post-lua）：\" class=\"headerlink\" title=\"Lua脚本示例（post.lua）：\"></a>Lua脚本示例（<code>post.lua</code>）：</h4><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wrk.method = <span class=\"string\">&quot;POST&quot;</span></span><br><span class=\"line\">wrk.headers[<span class=\"string\">&quot;Content-Type&quot;</span>] = <span class=\"string\">&quot;application/json&quot;</span></span><br><span class=\"line\">wrk.body = <span class=\"string\">&#x27;&#123;&quot;username&quot;:&quot;test&quot;, &quot;password&quot;:&quot;123456&quot;&#125;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-测试结果解读-2\"><a href=\"#4-测试结果解读-2\" class=\"headerlink\" title=\"4. 测试结果解读\"></a>4. 测试结果解读</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Running 30s test @ http://example.com</span><br><span class=\"line\">  4 threads and 100 connections                  # 线程数、并发连接数</span><br><span class=\"line\">  Thread Stats   Avg      Stdev     Max   +/- Stdev</span><br><span class=\"line\">    Latency    45.76ms   12.34ms 200.15ms   85.23%  # 延迟分布（平均、标准差、最大值、分布比例）</span><br><span class=\"line\">    Req/Sec    550.12    120.45     2.34k    75.34% # 每秒请求数分布</span><br><span class=\"line\">  Latency Distribution                           # 延迟百分比分布</span><br><span class=\"line\">     50%   42.12ms</span><br><span class=\"line\">     75%   50.23ms</span><br><span class=\"line\">     90%   65.45ms</span><br><span class=\"line\">     99%  185.67ms</span><br><span class=\"line\">  65432 requests in 30.01s, 12.34MB read         # 总请求数、数据读取量</span><br><span class=\"line\">Requests/sec:   2180.23                          # QPS</span><br><span class=\"line\">Transfer/sec:    420.45KB                        # 每秒数据传输量</span><br></pre></td></tr></table></figure>\n\n\n<hr>\n<h2 id=\"四、工具横向对比\"><a href=\"#四、工具横向对比\" class=\"headerlink\" title=\"四、工具横向对比\"></a>四、工具横向对比</h2><table>\n<thead>\n<tr>\n<th><strong>维度</strong></th>\n<th><strong>siege</strong></th>\n<th><strong>ab</strong></th>\n<th><strong>wrk</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>安装复杂度</strong></td>\n<td>⭐⭐（包管理器直装）</td>\n<td>⭐⭐⭐（ApacheUtils集成）</td>\n<td>⭐⭐（需编译或Homebrew）</td>\n</tr>\n<tr>\n<td><strong>性能上限</strong></td>\n<td>⭐⭐（万级QPS）</td>\n<td>⭐⭐⭐（十万级QPS）</td>\n<td>⭐⭐⭐⭐（百万级QPS）</td>\n</tr>\n<tr>\n<td><strong>灵活性</strong></td>\n<td>⭐⭐（支持URL列表、随机请求）</td>\n<td>⭐（仅支持简单静态请求）</td>\n<td>⭐⭐⭐⭐（Lua脚本扩展动态场景）</td>\n</tr>\n<tr>\n<td><strong>结果可读性</strong></td>\n<td>⭐⭐⭐（清晰的成功率&#x2F;响应时间）</td>\n<td>⭐⭐（QPS和延迟分布）</td>\n<td>⭐⭐⭐（线程级统计+延迟分布）</td>\n</tr>\n<tr>\n<td><strong>适用场景</strong></td>\n<td>页面级压测、成功率监控</td>\n<td>快速基准测试、简单接口验证</td>\n<td>高并发测试、复杂业务逻辑模拟</td>\n</tr>\n<tr>\n<td><strong>资源消耗</strong></td>\n<td>高（进程模型）</td>\n<td>中（单线程+多进程）</td>\n<td>低（多线程+事件驱动）</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"五、最终建议\"><a href=\"#五、最终建议\" class=\"headerlink\" title=\"五、最终建议\"></a>五、最终建议</h2><ol>\n<li><strong>简单快速测试</strong>：用 <code>ab</code>，一条命令即可获取QPS和延迟分布。</li>\n<li><strong>高并发&#x2F;复杂场景</strong>：选 <code>wrk</code>，支持Lua脚本模拟动态请求（如登录、鉴权）。</li>\n<li><strong>成功率验证</strong>：用 <code>siege</code>，明确展示事务成功率和响应时间极值。</li>\n<li><strong>生产级压测</strong>：结合多工具结果交叉验证（如先用 <code>ab</code> 快速验证，再用 <code>wrk</code> 压测极限）。</li>\n</ol>\n<p>附：各工具官网</p>\n<ul>\n<li><strong>siege</strong>: <a href=\"https://www.joedog.org/siege-home/\">https://www.joedog.org/siege-home/</a></li>\n<li><strong>ab</strong>: <a href=\"https://httpd.apache.org/docs/2.4/programs/ab.html\">Apache HTTP Server Documentation</a></li>\n<li><strong>wrk</strong>: <a href=\"https://github.com/wg/wrk\">https://github.com/wg/wrk</a></li>\n</ul>\n","excerpt":"","more":"<h2 id=\"一、siege\"><a href=\"#一、siege\" class=\"headerlink\" title=\"一、siege\"></a>一、<strong>siege</strong></h2><h3 id=\"1-下载与安装\"><a href=\"#1-下载与安装\" class=\"headerlink\" title=\"1. 下载与安装\"></a>1. 下载与安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Ubuntu/Debian</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> apt-get install siege</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># CentOS/RHEL</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> yum install siege</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># macOS</span></span><br><span class=\"line\">brew install siege</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 验证安装</span></span><br><span class=\"line\">siege --version</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-核心参数\"><a href=\"#2-核心参数\" class=\"headerlink\" title=\"2. 核心参数\"></a>2. 核心参数</h3><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>-c &lt;并发数&gt;</code></td>\n<td>并发用户数（必须参数）</td>\n<td><code>-c 100</code></td>\n</tr>\n<tr>\n<td><code>-t &lt;时间&gt;</code></td>\n<td>压测持续时间（s&#x2F;m&#x2F;h）</td>\n<td><code>-t 30s</code></td>\n</tr>\n<tr>\n<td><code>-r &lt;次数&gt;</code></td>\n<td>每个用户重复请求次数</td>\n<td><code>-r 50</code></td>\n</tr>\n<tr>\n<td><code>-f &lt;文件&gt;</code></td>\n<td>从文件读取多个URL进行压测</td>\n<td><code>-f urls.txt</code></td>\n</tr>\n<tr>\n<td><code>-i</code></td>\n<td>随机发送文件中的URL请求</td>\n<td><code>-i -f urls.txt</code></td>\n</tr>\n<tr>\n<td><code>-b</code></td>\n<td>无延迟模式（最大压力测试）</td>\n<td><code>-b</code></td>\n</tr>\n<tr>\n<td><code>-v</code></td>\n<td>显示详细请求日志</td>\n<td><code>-v</code></td>\n</tr>\n</tbody></table>\n<h3 id=\"3-示例命令\"><a href=\"#3-示例命令\" class=\"headerlink\" title=\"3. 示例命令\"></a>3. 示例命令</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 100并发用户，持续30秒压测</span></span><br><span class=\"line\">siege -c 100 -t 30s http://example.com</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 从文件加载URL列表，50并发用户，每个用户重复20次</span></span><br><span class=\"line\">siege -c 50 -r 20 -f urls.txt</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-测试结果解读\"><a href=\"#4-测试结果解读\" class=\"headerlink\" title=\"4. 测试结果解读\"></a>4. 测试结果解读</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Transactions:              2000 hits        # 总请求数</span><br><span class=\"line\">Availability:              99.50 %          # 请求成功率（失败率=1 - Availability）</span><br><span class=\"line\">Elapsed time:              59.99 sec        # 总耗时</span><br><span class=\"line\">Data transferred:          5.67 MB          # 总数据传输量</span><br><span class=\"line\">Response time:             0.25 sec         # 平均响应时间</span><br><span class=\"line\">Transaction rate:          33.34 trans/sec  # 每秒处理请求数（QPS）</span><br><span class=\"line\">Longest transaction:       1.20 sec         # 最慢请求耗时</span><br><span class=\"line\">Shortest transaction:      0.05 sec         # 最快请求耗时</span><br></pre></td></tr></table></figure>\n\n\n<hr>\n<h2 id=\"二、ab（ApacheBench）\"><a href=\"#二、ab（ApacheBench）\" class=\"headerlink\" title=\"二、ab（ApacheBench）\"></a>二、<strong>ab（ApacheBench）</strong></h2><h3 id=\"1-下载与安装-1\"><a href=\"#1-下载与安装-1\" class=\"headerlink\" title=\"1. 下载与安装\"></a>1. 下载与安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Ubuntu/Debian</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> apt-get install apache2-utils</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># CentOS/RHEL</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> yum install httpd-tools</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># macOS（预装或使用Homebrew）</span></span><br><span class=\"line\">ab -V</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 验证安装</span></span><br><span class=\"line\">ab -V</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-核心参数-1\"><a href=\"#2-核心参数-1\" class=\"headerlink\" title=\"2. 核心参数\"></a>2. 核心参数</h3><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>-n &lt;总数&gt;</code></td>\n<td>总请求数（必须参数）</td>\n<td><code>-n 1000</code></td>\n</tr>\n<tr>\n<td><code>-c &lt;并发数&gt;</code></td>\n<td>并发用户数（必须参数）</td>\n<td><code>-c 100</code></td>\n</tr>\n<tr>\n<td><code>-k</code></td>\n<td>启用HTTP Keep-Alive长连接</td>\n<td><code>-k</code></td>\n</tr>\n<tr>\n<td><code>-H &lt;头部&gt;</code></td>\n<td>添加自定义HTTP头部</td>\n<td><code>-H &quot;Content-Type: application/json&quot;</code></td>\n</tr>\n<tr>\n<td><code>-p &lt;文件&gt;</code></td>\n<td>POST请求时发送的数据文件</td>\n<td><code>-p data.json</code></td>\n</tr>\n<tr>\n<td><code>-T &lt;类型&gt;</code></td>\n<td>POST&#x2F;PUT内容类型</td>\n<td><code>-T application/json</code></td>\n</tr>\n</tbody></table>\n<h3 id=\"3-示例命令-1\"><a href=\"#3-示例命令-1\" class=\"headerlink\" title=\"3. 示例命令\"></a>3. 示例命令</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 总请求1000次，并发100用户，启用Keep-Alive</span></span><br><span class=\"line\">ab -n 1000 -c 100 -k http://example.com/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># POST请求测试（发送JSON数据）</span></span><br><span class=\"line\">ab -n 500 -c 50 -T application/json -p data.json http://example.com/api</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-测试结果解读-1\"><a href=\"#4-测试结果解读-1\" class=\"headerlink\" title=\"4. 测试结果解读\"></a>4. 测试结果解读</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Concurrency Level:      100                 # 并发数</span><br><span class=\"line\">Time taken for tests:   2.123 seconds       # 总耗时</span><br><span class=\"line\">Complete requests:      1000                # 成功请求数</span><br><span class=\"line\">Failed requests:        0                   # 失败请求数</span><br><span class=\"line\">Requests per second:    470.34 [#/sec]      # QPS（每秒请求数）</span><br><span class=\"line\">Time per request:       212.300 [ms]        # 平均请求耗时（并发场景）</span><br><span class=\"line\">Time per request:       2.123 [ms]          # 平均请求耗时（单用户）</span><br><span class=\"line\">Transfer rate:          512.34 [Kbytes/sec] # 数据传输速率</span><br><span class=\"line\"></span><br><span class=\"line\">Percentage of the requests served within a certain time (ms):</span><br><span class=\"line\">  50%    25    # 50%的请求在25ms内完成</span><br><span class=\"line\">  90%    50    # 90%的请求在50ms内完成</span><br><span class=\"line\">  99%    200   # 99%的请求在200ms内完成</span><br></pre></td></tr></table></figure>\n\n\n<hr>\n<h2 id=\"三、wrk\"><a href=\"#三、wrk\" class=\"headerlink\" title=\"三、wrk\"></a>三、<strong>wrk</strong></h2><h3 id=\"1-下载与安装-2\"><a href=\"#1-下载与安装-2\" class=\"headerlink\" title=\"1. 下载与安装\"></a>1. 下载与安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 源码编译（需提前安装Git和GCC）</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/wg/wrk.git</span><br><span class=\"line\"><span class=\"built_in\">cd</span> wrk &amp;&amp; make</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># macOS</span></span><br><span class=\"line\">brew install wrk</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 验证安装</span></span><br><span class=\"line\">wrk --version</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-核心参数-2\"><a href=\"#2-核心参数-2\" class=\"headerlink\" title=\"2. 核心参数\"></a>2. 核心参数</h3><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>-t &lt;线程数&gt;</code></td>\n<td>工作线程数（建议与CPU核心一致）</td>\n<td><code>-t 4</code></td>\n</tr>\n<tr>\n<td><code>-c &lt;并发数&gt;</code></td>\n<td>并发连接数（必须参数）</td>\n<td><code>-c 100</code></td>\n</tr>\n<tr>\n<td><code>-d &lt;时间&gt;</code></td>\n<td>压测持续时间（s&#x2F;m&#x2F;h）</td>\n<td><code>-d 30s</code></td>\n</tr>\n<tr>\n<td><code>-s &lt;脚本&gt;</code></td>\n<td>使用Lua脚本定制请求（如POST）</td>\n<td><code>-s post.lua</code></td>\n</tr>\n<tr>\n<td><code>--latency</code></td>\n<td>输出详细延迟分布统计</td>\n<td><code>--latency</code></td>\n</tr>\n<tr>\n<td><code>--timeout &lt;时间&gt;</code></td>\n<td>设置请求超时时间</td>\n<td><code>--timeout 10s</code></td>\n</tr>\n</tbody></table>\n<h3 id=\"3-示例命令-2\"><a href=\"#3-示例命令-2\" class=\"headerlink\" title=\"3. 示例命令\"></a>3. 示例命令</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 4线程、100并发、持续30秒压测</span></span><br><span class=\"line\">wrk -t4 -c100 -d30s http://example.com</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用Lua脚本模拟POST请求（见下方脚本示例）</span></span><br><span class=\"line\">wrk -t4 -c100 -d10s -s post.lua http://example.com/api</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Lua脚本示例（post-lua）：\"><a href=\"#Lua脚本示例（post-lua）：\" class=\"headerlink\" title=\"Lua脚本示例（post.lua）：\"></a>Lua脚本示例（<code>post.lua</code>）：</h4><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wrk.method = <span class=\"string\">&quot;POST&quot;</span></span><br><span class=\"line\">wrk.headers[<span class=\"string\">&quot;Content-Type&quot;</span>] = <span class=\"string\">&quot;application/json&quot;</span></span><br><span class=\"line\">wrk.body = <span class=\"string\">&#x27;&#123;&quot;username&quot;:&quot;test&quot;, &quot;password&quot;:&quot;123456&quot;&#125;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-测试结果解读-2\"><a href=\"#4-测试结果解读-2\" class=\"headerlink\" title=\"4. 测试结果解读\"></a>4. 测试结果解读</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Running 30s test @ http://example.com</span><br><span class=\"line\">  4 threads and 100 connections                  # 线程数、并发连接数</span><br><span class=\"line\">  Thread Stats   Avg      Stdev     Max   +/- Stdev</span><br><span class=\"line\">    Latency    45.76ms   12.34ms 200.15ms   85.23%  # 延迟分布（平均、标准差、最大值、分布比例）</span><br><span class=\"line\">    Req/Sec    550.12    120.45     2.34k    75.34% # 每秒请求数分布</span><br><span class=\"line\">  Latency Distribution                           # 延迟百分比分布</span><br><span class=\"line\">     50%   42.12ms</span><br><span class=\"line\">     75%   50.23ms</span><br><span class=\"line\">     90%   65.45ms</span><br><span class=\"line\">     99%  185.67ms</span><br><span class=\"line\">  65432 requests in 30.01s, 12.34MB read         # 总请求数、数据读取量</span><br><span class=\"line\">Requests/sec:   2180.23                          # QPS</span><br><span class=\"line\">Transfer/sec:    420.45KB                        # 每秒数据传输量</span><br></pre></td></tr></table></figure>\n\n\n<hr>\n<h2 id=\"四、工具横向对比\"><a href=\"#四、工具横向对比\" class=\"headerlink\" title=\"四、工具横向对比\"></a>四、工具横向对比</h2><table>\n<thead>\n<tr>\n<th><strong>维度</strong></th>\n<th><strong>siege</strong></th>\n<th><strong>ab</strong></th>\n<th><strong>wrk</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>安装复杂度</strong></td>\n<td>⭐⭐（包管理器直装）</td>\n<td>⭐⭐⭐（ApacheUtils集成）</td>\n<td>⭐⭐（需编译或Homebrew）</td>\n</tr>\n<tr>\n<td><strong>性能上限</strong></td>\n<td>⭐⭐（万级QPS）</td>\n<td>⭐⭐⭐（十万级QPS）</td>\n<td>⭐⭐⭐⭐（百万级QPS）</td>\n</tr>\n<tr>\n<td><strong>灵活性</strong></td>\n<td>⭐⭐（支持URL列表、随机请求）</td>\n<td>⭐（仅支持简单静态请求）</td>\n<td>⭐⭐⭐⭐（Lua脚本扩展动态场景）</td>\n</tr>\n<tr>\n<td><strong>结果可读性</strong></td>\n<td>⭐⭐⭐（清晰的成功率&#x2F;响应时间）</td>\n<td>⭐⭐（QPS和延迟分布）</td>\n<td>⭐⭐⭐（线程级统计+延迟分布）</td>\n</tr>\n<tr>\n<td><strong>适用场景</strong></td>\n<td>页面级压测、成功率监控</td>\n<td>快速基准测试、简单接口验证</td>\n<td>高并发测试、复杂业务逻辑模拟</td>\n</tr>\n<tr>\n<td><strong>资源消耗</strong></td>\n<td>高（进程模型）</td>\n<td>中（单线程+多进程）</td>\n<td>低（多线程+事件驱动）</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"五、最终建议\"><a href=\"#五、最终建议\" class=\"headerlink\" title=\"五、最终建议\"></a>五、最终建议</h2><ol>\n<li><strong>简单快速测试</strong>：用 <code>ab</code>，一条命令即可获取QPS和延迟分布。</li>\n<li><strong>高并发&#x2F;复杂场景</strong>：选 <code>wrk</code>，支持Lua脚本模拟动态请求（如登录、鉴权）。</li>\n<li><strong>成功率验证</strong>：用 <code>siege</code>，明确展示事务成功率和响应时间极值。</li>\n<li><strong>生产级压测</strong>：结合多工具结果交叉验证（如先用 <code>ab</code> 快速验证，再用 <code>wrk</code> 压测极限）。</li>\n</ol>\n<p>附：各工具官网</p>\n<ul>\n<li><strong>siege</strong>: <a href=\"https://www.joedog.org/siege-home/\">https://www.joedog.org/siege-home/</a></li>\n<li><strong>ab</strong>: <a href=\"https://httpd.apache.org/docs/2.4/programs/ab.html\">Apache HTTP Server Documentation</a></li>\n<li><strong>wrk</strong>: <a href=\"https://github.com/wg/wrk\">https://github.com/wg/wrk</a></li>\n</ul>\n"},{"title":"常用命令记录","date":"2025-08-12T07:16:55.000Z","_content":"# perf\n```shell\n#进程热点函数分析\nperf top -g -p 21515\nperf record -F 99 -a -g -p $pid -- sleep 60\n-e选项允许您在perf list命令中列出的多个类别中选择一个事件类别。\nperf report -i 文件 -g\nperf report -g graph,0.3\n#默认0.5，低于不显示堆栈\n\n#隐藏CPU\nperf sched record -C 0 -- sleep 5 (-C后面的参数，填CPU使用率高的cpu序号，0表示第一个CPU)\nperf report 选择 sched:sched_switch 按回车键\nperf sched latency --sort max\n```\n# strace\n```shell\nstrace -tt -T -v -f -e trace=file -o /data/log/strace.log -s 1024 -p 23489\n\n● -tt：在每行输出的前面，显示毫秒级别的时间\n● -T：显示每次系统调用所花费的时间\n● -v：对于某些相关调用，把完整的环境变量，文件 stat 结构等打出来。\n● -f：跟踪目标进程，以及目标进程创建的所有子进程\n● -e：控制要跟踪的事件和跟踪行为，比如指定要跟踪的系统调用名称\n● -o：把 strace 的输出单独写到指定的文件\n● -s：当系统调用的某个参数是字符串时，最多输出指定长度的内容，默认是 32 个字节\n● -p：指定要跟踪的进程 pid，要同时跟踪多个 pid，重复多次 -p 选项即可。\n-e trace=file     跟踪和文件访问相关的调用(参数中有文件名)\n-e trace=process  和进程管理相关的调用，比如fork/exec/exit_group\n-e trace=network  和网络通信相关的调用，比如socket/sendto/connect\n-e trace=signal    信号发送和处理相关，比如kill/sigaction\n-e trace=desc  和文件描述符相关，比如write/read/select/epoll等\n\n```\n\n# dd\n```shell\ndd if=/dev/zero  of=/data/test  bs=10M status=progress  count=10000 oflag=direct  写入\n\ndd if=/data/test  of=/dev/null   bs=10M  count=10000 oflag=direct  status=progress  读取\n\n#direct　　　　　　　　　　　　　　　  读写数据采用直接IO方式；\n#status=progress 显示进度\n```\n# tcpdump\n```shell\n• 选择所有端口，指定host域名抓包，抓包文件存入/tmp/中：\ntcpdump –nni any –s 0 host www.ex.com –w /tmp/ex.com.pcap\n• 指定eth0，指定目标IP和端口，并指定抓取1000个报文\ntcpdump –nni eth0 host 1.1.1.1 and port 80 –c 1000\n• 指定某网段，如下表达式默认为/24位\ntcpdump –nni eth0 net 1.1.1.1 and portrange 8000-8080\n常用语句\n•循环抓包（抓取前500个字节，500M一个文件，保存10个）\ntcpdump -i eth0 -s 500 host 1.1.1.1 -w /tmp/test.pcap -C 500 -W 10\n特殊场景语句，抓取特定的tcp置位报文\ntcpdump -nni any tcp[tcpflags]=tcp-syn/tcp-rst/tcp-ack/tcp-ack\n```\n\n# iperf3\n```shell\nClient/Server: # 客户端和服务端公有的参数\n指定端口号，默认为5201             \n    -p, --port      #        server port to listen on/connect to \n回显报告的间隔时间                       \n    -i, --interval  #        seconds between periodic bandwidth reports  \n显示帮助菜单  \n    -h, --help               print this message and quit   \n显示版本\n    -v, --version            print version information and quit    \n\nServer specific:  #服务端私有参数\n指定以服务端运行                                                            \n    -s, --server             run in server mode                                               \n\nClient specific:  #客户端私有参数\n带宽参数，单位：字节每秒：KMG，为2的n次方，比如1K=1024,；设置为0代表无限制，此参数UDP默认1M/s，TCP无限制 \n    -b, --bandwidth #[KMG][/#] target bandwidth in bits/sec (0 for unlimited)\n                            (default 1 Mbit/sec for UDP, unlimited for TCP)\n                            (optional slash and packet count for burst mode) \n指定以客户端运行，后面要带服务端的IP地址                            \n    -c, --client    <host>   run in client mode, connecting to <host>   \nudp模式，不带-u默认为tcp模式\n    -u, --udp                use UDP rather than TCP   \n指定测试时间，不带参数默认测试10s        \n    -t, --time      #        time in seconds to transmit for (default 10 secs)  \n翻转测试，这是iperf3比iperf2方便的主要亮点，iperf2不支持此功能，无法使用   \n    -R, --reverse            reverse the test (client receives, server sends)  \ntcp窗口大小，默认无上限，可以不设此参数，作为udp模式测试时也不需要此参数 ，单位：KM，1K=1024     \n    -w, --window    #[KMG]    set window size / socket buffer size  \n\n\niperf -s -i 1\n# 作为服务端运行，报告回显间隔时间1s\niperf3 -c 192.168.3.250 -i 1 -t 10 -b 7M\n#作为客户端，连接服务端ip地址192.168.3.250，报告回显间隔1s，测试时间10s,带宽限制为7M。\niperf3 -c 192.168.3.250 -i 1 -t 10 -b 7M -R\n#作为客户端，连接服务端ip地址192.168.3.250，报告回显间隔1s，测试时间10s,带宽限制为7M,-R为反向测试，这个参数也是iperf3的主要亮点，支持直接转换数据发送方向\n\n\n#udp不指定-b默认1M\niperf -s -i 1\n# 作为服务端运行，报告回显间隔时间1s，服务端不区分tcp或udp\niperf3 -u -c 192.168.3.250 -b 70M -i 1 -t 10\n#作为客户端运行，限制带宽70M，报告回显间隔1s，测试时间10s\niperf3 -u -c 192.168.3.250 -b 70M -i 1 -t 10 -R\n#作为客户端运行，限制带宽70M，报告回显间隔1s，测试时间10s\n\n```\n\n# 额外常用\n```shell\n时间\nwhile  true; do date +%Y-%m-%d' '%H:%M:%S.%N | cut -b 1-23 && sleep 1;done\n\ncurl\ncurl localhost:3000/api/json -X POST -d '{\"hello\": \"world\"}' --header \"Content-Type: application/json\ncurl -v -o output.html \"https://dana.lobn.com.cn/\" \\\n     --resolve dana.lobn.com.cn:443:8.152.0.157\ncurl -L -XPOST -H 'Cookie: authToken $token' -F \"uploadFiles=@/home/user/test1\" https://gdw-3.com/api/v1/detail/upload \n\n端口\nnmap -v  -sS  -sV  -T 5 39.105.26.196  -p 9984\n\nsed -i.bak '/^\\s*[^#].*\\/data\\s/s/^/#/' /etc/fstab  \nbadblocks -sv /dev/vda\n● -v：显示详情。\n● -s：显示进度。\n● -w：写模式测试（慎用！会覆盖数据）\n\n登录日志\nlastb | awk '{ print\" IP地址为：\" $3}' | sort | uniq -c | sort -nr|head\n\n\n网络\nnetstat -ant | awk '/^tcp/ {++y[$NF]} END {for(w in y) print w, y[w]}'\n\nwhile true;do netstat -n | awk '/^tcp/ {++S[$NF]} END {for(a in S) print a,S[a]}';sleep 1;done | grep TIME_WAIT\n\ntraceroute  -n -T global-cs.aceux.net -p 80 || yum install traceroute -y\n\n\nnetstat -s |grep -e \"passive connections rejected because of time stamp\" \nnetstat -s | grep \"SYNs to LISTEN\"\nnetstat -s|egrep -i 'syn|ignore|overflow|reject|becau|error|drop|back' \n\n\n进程\nps -A -ostat,ppid,pid,cmd | grep -e '^[Zz]'\nps  -e -L h o state,cmd,pid | awk '{if($1==\"R\"||$1==\"D\"){print $0}}' | sort | uniq -c | sort -k 1nr\n\nps -auxww --sort=-%cpu|head\nps -eT -o%cpu,pid,tid,ppid,comm | grep -v CPU | sort -n -r | head -20\nps -auxww --sort=-%mem|head\nps -T -o%cpu,pid,tid,ppid,comm -p           # 查看指定进程的所有线程\nps -Lf <PID>            # 显示线程的详细信息\nps axjf --no-header  #进程树\n\n\nsystemctl list-units --type=service --state=running\nsystemctl list-units --type=service --state=running --no-pager |grep running |awk '{print $1}' |xargs systemctl cat |grep -i execstart\n\nlsof -nw|awk '{print $2}'| sort | uniq -c | sort -nr | head\n\n# 自定义终端提示符\nPS1='\\[\\e[38;5;208m\\]\\u@\\h\\[\\e[0m\\] \\[\\e[38;5;34m\\]\\D{%H:%M:%S}\\[\\e[0m\\] \\[\\e[38;5;33m\\]\\w\\[\\e[0m\\] \\[\\e[1;31m\\]$(git branch 2>/dev/null | grep \"^*\" | colrm 1 2)\\[\\e[0m\\]\\n\\[\\e[1;32m\\]➜ \\[\\e[0m\\]'\n\nPS1='\\[\\033[1;31m\\][\\t] \\[\\033[1;32m\\]\\u\\[\\033[1;36m\\]@\\[\\033[1;34m\\]\\h \\[\\033[1;33m\\]\\w\\[\\033[0m\\] '\n\n#python\npip cache purge\npip cache remove package-name\npip install --no-cache-dir torch \npip show  torch\npip install --target=/mnt/xinference \\ --cache-dir=/mnt/xinference/pip_cache \\ \"xinference[all]\"\npython -c \"import os; print('\\n'.join(dir(os)))\" | grep 'kill'\nnginx -V 2>&1 | grep -o with-http_stub_status_module\n```\n","source":"_posts/常用命令记录.md","raw":"---\ntitle: 常用命令记录\ndate: 2025-08-12 15:16:55\ntags:\ncategories: linux\n---\n# perf\n```shell\n#进程热点函数分析\nperf top -g -p 21515\nperf record -F 99 -a -g -p $pid -- sleep 60\n-e选项允许您在perf list命令中列出的多个类别中选择一个事件类别。\nperf report -i 文件 -g\nperf report -g graph,0.3\n#默认0.5，低于不显示堆栈\n\n#隐藏CPU\nperf sched record -C 0 -- sleep 5 (-C后面的参数，填CPU使用率高的cpu序号，0表示第一个CPU)\nperf report 选择 sched:sched_switch 按回车键\nperf sched latency --sort max\n```\n# strace\n```shell\nstrace -tt -T -v -f -e trace=file -o /data/log/strace.log -s 1024 -p 23489\n\n● -tt：在每行输出的前面，显示毫秒级别的时间\n● -T：显示每次系统调用所花费的时间\n● -v：对于某些相关调用，把完整的环境变量，文件 stat 结构等打出来。\n● -f：跟踪目标进程，以及目标进程创建的所有子进程\n● -e：控制要跟踪的事件和跟踪行为，比如指定要跟踪的系统调用名称\n● -o：把 strace 的输出单独写到指定的文件\n● -s：当系统调用的某个参数是字符串时，最多输出指定长度的内容，默认是 32 个字节\n● -p：指定要跟踪的进程 pid，要同时跟踪多个 pid，重复多次 -p 选项即可。\n-e trace=file     跟踪和文件访问相关的调用(参数中有文件名)\n-e trace=process  和进程管理相关的调用，比如fork/exec/exit_group\n-e trace=network  和网络通信相关的调用，比如socket/sendto/connect\n-e trace=signal    信号发送和处理相关，比如kill/sigaction\n-e trace=desc  和文件描述符相关，比如write/read/select/epoll等\n\n```\n\n# dd\n```shell\ndd if=/dev/zero  of=/data/test  bs=10M status=progress  count=10000 oflag=direct  写入\n\ndd if=/data/test  of=/dev/null   bs=10M  count=10000 oflag=direct  status=progress  读取\n\n#direct　　　　　　　　　　　　　　　  读写数据采用直接IO方式；\n#status=progress 显示进度\n```\n# tcpdump\n```shell\n• 选择所有端口，指定host域名抓包，抓包文件存入/tmp/中：\ntcpdump –nni any –s 0 host www.ex.com –w /tmp/ex.com.pcap\n• 指定eth0，指定目标IP和端口，并指定抓取1000个报文\ntcpdump –nni eth0 host 1.1.1.1 and port 80 –c 1000\n• 指定某网段，如下表达式默认为/24位\ntcpdump –nni eth0 net 1.1.1.1 and portrange 8000-8080\n常用语句\n•循环抓包（抓取前500个字节，500M一个文件，保存10个）\ntcpdump -i eth0 -s 500 host 1.1.1.1 -w /tmp/test.pcap -C 500 -W 10\n特殊场景语句，抓取特定的tcp置位报文\ntcpdump -nni any tcp[tcpflags]=tcp-syn/tcp-rst/tcp-ack/tcp-ack\n```\n\n# iperf3\n```shell\nClient/Server: # 客户端和服务端公有的参数\n指定端口号，默认为5201             \n    -p, --port      #        server port to listen on/connect to \n回显报告的间隔时间                       \n    -i, --interval  #        seconds between periodic bandwidth reports  \n显示帮助菜单  \n    -h, --help               print this message and quit   \n显示版本\n    -v, --version            print version information and quit    \n\nServer specific:  #服务端私有参数\n指定以服务端运行                                                            \n    -s, --server             run in server mode                                               \n\nClient specific:  #客户端私有参数\n带宽参数，单位：字节每秒：KMG，为2的n次方，比如1K=1024,；设置为0代表无限制，此参数UDP默认1M/s，TCP无限制 \n    -b, --bandwidth #[KMG][/#] target bandwidth in bits/sec (0 for unlimited)\n                            (default 1 Mbit/sec for UDP, unlimited for TCP)\n                            (optional slash and packet count for burst mode) \n指定以客户端运行，后面要带服务端的IP地址                            \n    -c, --client    <host>   run in client mode, connecting to <host>   \nudp模式，不带-u默认为tcp模式\n    -u, --udp                use UDP rather than TCP   \n指定测试时间，不带参数默认测试10s        \n    -t, --time      #        time in seconds to transmit for (default 10 secs)  \n翻转测试，这是iperf3比iperf2方便的主要亮点，iperf2不支持此功能，无法使用   \n    -R, --reverse            reverse the test (client receives, server sends)  \ntcp窗口大小，默认无上限，可以不设此参数，作为udp模式测试时也不需要此参数 ，单位：KM，1K=1024     \n    -w, --window    #[KMG]    set window size / socket buffer size  \n\n\niperf -s -i 1\n# 作为服务端运行，报告回显间隔时间1s\niperf3 -c 192.168.3.250 -i 1 -t 10 -b 7M\n#作为客户端，连接服务端ip地址192.168.3.250，报告回显间隔1s，测试时间10s,带宽限制为7M。\niperf3 -c 192.168.3.250 -i 1 -t 10 -b 7M -R\n#作为客户端，连接服务端ip地址192.168.3.250，报告回显间隔1s，测试时间10s,带宽限制为7M,-R为反向测试，这个参数也是iperf3的主要亮点，支持直接转换数据发送方向\n\n\n#udp不指定-b默认1M\niperf -s -i 1\n# 作为服务端运行，报告回显间隔时间1s，服务端不区分tcp或udp\niperf3 -u -c 192.168.3.250 -b 70M -i 1 -t 10\n#作为客户端运行，限制带宽70M，报告回显间隔1s，测试时间10s\niperf3 -u -c 192.168.3.250 -b 70M -i 1 -t 10 -R\n#作为客户端运行，限制带宽70M，报告回显间隔1s，测试时间10s\n\n```\n\n# 额外常用\n```shell\n时间\nwhile  true; do date +%Y-%m-%d' '%H:%M:%S.%N | cut -b 1-23 && sleep 1;done\n\ncurl\ncurl localhost:3000/api/json -X POST -d '{\"hello\": \"world\"}' --header \"Content-Type: application/json\ncurl -v -o output.html \"https://dana.lobn.com.cn/\" \\\n     --resolve dana.lobn.com.cn:443:8.152.0.157\ncurl -L -XPOST -H 'Cookie: authToken $token' -F \"uploadFiles=@/home/user/test1\" https://gdw-3.com/api/v1/detail/upload \n\n端口\nnmap -v  -sS  -sV  -T 5 39.105.26.196  -p 9984\n\nsed -i.bak '/^\\s*[^#].*\\/data\\s/s/^/#/' /etc/fstab  \nbadblocks -sv /dev/vda\n● -v：显示详情。\n● -s：显示进度。\n● -w：写模式测试（慎用！会覆盖数据）\n\n登录日志\nlastb | awk '{ print\" IP地址为：\" $3}' | sort | uniq -c | sort -nr|head\n\n\n网络\nnetstat -ant | awk '/^tcp/ {++y[$NF]} END {for(w in y) print w, y[w]}'\n\nwhile true;do netstat -n | awk '/^tcp/ {++S[$NF]} END {for(a in S) print a,S[a]}';sleep 1;done | grep TIME_WAIT\n\ntraceroute  -n -T global-cs.aceux.net -p 80 || yum install traceroute -y\n\n\nnetstat -s |grep -e \"passive connections rejected because of time stamp\" \nnetstat -s | grep \"SYNs to LISTEN\"\nnetstat -s|egrep -i 'syn|ignore|overflow|reject|becau|error|drop|back' \n\n\n进程\nps -A -ostat,ppid,pid,cmd | grep -e '^[Zz]'\nps  -e -L h o state,cmd,pid | awk '{if($1==\"R\"||$1==\"D\"){print $0}}' | sort | uniq -c | sort -k 1nr\n\nps -auxww --sort=-%cpu|head\nps -eT -o%cpu,pid,tid,ppid,comm | grep -v CPU | sort -n -r | head -20\nps -auxww --sort=-%mem|head\nps -T -o%cpu,pid,tid,ppid,comm -p           # 查看指定进程的所有线程\nps -Lf <PID>            # 显示线程的详细信息\nps axjf --no-header  #进程树\n\n\nsystemctl list-units --type=service --state=running\nsystemctl list-units --type=service --state=running --no-pager |grep running |awk '{print $1}' |xargs systemctl cat |grep -i execstart\n\nlsof -nw|awk '{print $2}'| sort | uniq -c | sort -nr | head\n\n# 自定义终端提示符\nPS1='\\[\\e[38;5;208m\\]\\u@\\h\\[\\e[0m\\] \\[\\e[38;5;34m\\]\\D{%H:%M:%S}\\[\\e[0m\\] \\[\\e[38;5;33m\\]\\w\\[\\e[0m\\] \\[\\e[1;31m\\]$(git branch 2>/dev/null | grep \"^*\" | colrm 1 2)\\[\\e[0m\\]\\n\\[\\e[1;32m\\]➜ \\[\\e[0m\\]'\n\nPS1='\\[\\033[1;31m\\][\\t] \\[\\033[1;32m\\]\\u\\[\\033[1;36m\\]@\\[\\033[1;34m\\]\\h \\[\\033[1;33m\\]\\w\\[\\033[0m\\] '\n\n#python\npip cache purge\npip cache remove package-name\npip install --no-cache-dir torch \npip show  torch\npip install --target=/mnt/xinference \\ --cache-dir=/mnt/xinference/pip_cache \\ \"xinference[all]\"\npython -c \"import os; print('\\n'.join(dir(os)))\" | grep 'kill'\nnginx -V 2>&1 | grep -o with-http_stub_status_module\n```\n","slug":"常用命令记录","published":1,"updated":"2025-08-28T06:39:18.236Z","comments":1,"layout":"post","photos":[],"_id":"cmev1ggda001lhllz88gk3uuq","content":"<h1 id=\"perf\"><a href=\"#perf\" class=\"headerlink\" title=\"perf\"></a>perf</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">进程热点函数分析</span></span><br><span class=\"line\">perf top -g -p 21515</span><br><span class=\"line\">perf record -F 99 -a -g -p $pid -- sleep 60</span><br><span class=\"line\">-e选项允许您在perf list命令中列出的多个类别中选择一个事件类别。</span><br><span class=\"line\">perf report -i 文件 -g</span><br><span class=\"line\">perf report -g graph,0.3</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">默认0.5，低于不显示堆栈</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">隐藏CPU</span></span><br><span class=\"line\">perf sched record -C 0 -- sleep 5 (-C后面的参数，填CPU使用率高的cpu序号，0表示第一个CPU)</span><br><span class=\"line\">perf report 选择 sched:sched_switch 按回车键</span><br><span class=\"line\">perf sched latency --sort max</span><br></pre></td></tr></table></figure>\n<h1 id=\"strace\"><a href=\"#strace\" class=\"headerlink\" title=\"strace\"></a>strace</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strace -tt -T -v -f -e trace=file -o /data/log/strace.log -s 1024 -p 23489</span><br><span class=\"line\"></span><br><span class=\"line\">● -tt：在每行输出的前面，显示毫秒级别的时间</span><br><span class=\"line\">● -T：显示每次系统调用所花费的时间</span><br><span class=\"line\">● -v：对于某些相关调用，把完整的环境变量，文件 stat 结构等打出来。</span><br><span class=\"line\">● -f：跟踪目标进程，以及目标进程创建的所有子进程</span><br><span class=\"line\">● -e：控制要跟踪的事件和跟踪行为，比如指定要跟踪的系统调用名称</span><br><span class=\"line\">● -o：把 strace 的输出单独写到指定的文件</span><br><span class=\"line\">● -s：当系统调用的某个参数是字符串时，最多输出指定长度的内容，默认是 32 个字节</span><br><span class=\"line\">● -p：指定要跟踪的进程 pid，要同时跟踪多个 pid，重复多次 -p 选项即可。</span><br><span class=\"line\">-e trace=file     跟踪和文件访问相关的调用(参数中有文件名)</span><br><span class=\"line\">-e trace=process  和进程管理相关的调用，比如fork/exec/exit_group</span><br><span class=\"line\">-e trace=network  和网络通信相关的调用，比如socket/sendto/connect</span><br><span class=\"line\">-e trace=signal    信号发送和处理相关，比如kill/sigaction</span><br><span class=\"line\">-e trace=desc  和文件描述符相关，比如write/read/select/epoll等</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"dd\"><a href=\"#dd\" class=\"headerlink\" title=\"dd\"></a>dd</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dd if=/dev/zero  of=/data/test  bs=10M status=progress  count=10000 oflag=direct  写入</span><br><span class=\"line\"></span><br><span class=\"line\">dd if=/data/test  of=/dev/null   bs=10M  count=10000 oflag=direct  status=progress  读取</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">direct　　　　　　　　　　　　　　　  读写数据采用直接IO方式；</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">status=progress 显示进度</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"tcpdump\"><a href=\"#tcpdump\" class=\"headerlink\" title=\"tcpdump\"></a>tcpdump</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">• 选择所有端口，指定host域名抓包，抓包文件存入/tmp/中：</span><br><span class=\"line\">tcpdump –nni any –s 0 host www.ex.com –w /tmp/ex.com.pcap</span><br><span class=\"line\">• 指定eth0，指定目标IP和端口，并指定抓取1000个报文</span><br><span class=\"line\">tcpdump –nni eth0 host 1.1.1.1 and port 80 –c 1000</span><br><span class=\"line\">• 指定某网段，如下表达式默认为/24位</span><br><span class=\"line\">tcpdump –nni eth0 net 1.1.1.1 and portrange 8000-8080</span><br><span class=\"line\">常用语句</span><br><span class=\"line\">•循环抓包（抓取前500个字节，500M一个文件，保存10个）</span><br><span class=\"line\">tcpdump -i eth0 -s 500 host 1.1.1.1 -w /tmp/test.pcap -C 500 -W 10</span><br><span class=\"line\">特殊场景语句，抓取特定的tcp置位报文</span><br><span class=\"line\">tcpdump -nni any tcp[tcpflags]=tcp-syn/tcp-rst/tcp-ack/tcp-ack</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"iperf3\"><a href=\"#iperf3\" class=\"headerlink\" title=\"iperf3\"></a>iperf3</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Client/Server: # 客户端和服务端公有的参数</span><br><span class=\"line\">指定端口号，默认为5201             </span><br><span class=\"line\">    -p, --port      #        server port to listen on/connect to </span><br><span class=\"line\">回显报告的间隔时间                       </span><br><span class=\"line\">    -i, --interval  #        seconds between periodic bandwidth reports  </span><br><span class=\"line\">显示帮助菜单  </span><br><span class=\"line\">    -h, --help               print this message and quit   </span><br><span class=\"line\">显示版本</span><br><span class=\"line\">    -v, --version            print version information and quit    </span><br><span class=\"line\"></span><br><span class=\"line\">Server specific:  #服务端私有参数</span><br><span class=\"line\">指定以服务端运行                                                            </span><br><span class=\"line\">    -s, --server             run in server mode                                               </span><br><span class=\"line\"></span><br><span class=\"line\">Client specific:  #客户端私有参数</span><br><span class=\"line\">带宽参数，单位：字节每秒：KMG，为2的n次方，比如1K=1024,；设置为0代表无限制，此参数UDP默认1M/s，TCP无限制 </span><br><span class=\"line\">    -b, --bandwidth #[KMG][/#] target bandwidth in bits/sec (0 for unlimited)</span><br><span class=\"line\">                            (default 1 Mbit/sec for UDP, unlimited for TCP)</span><br><span class=\"line\">                            (optional slash and packet count for burst mode) </span><br><span class=\"line\">指定以客户端运行，后面要带服务端的IP地址                            </span><br><span class=\"line\">    -c, --client    &lt;host&gt;   run in client mode, connecting to &lt;host&gt;   </span><br><span class=\"line\">udp模式，不带-u默认为tcp模式</span><br><span class=\"line\">    -u, --udp                use UDP rather than TCP   </span><br><span class=\"line\">指定测试时间，不带参数默认测试10s        </span><br><span class=\"line\">    -t, --time      #        time in seconds to transmit for (default 10 secs)  </span><br><span class=\"line\">翻转测试，这是iperf3比iperf2方便的主要亮点，iperf2不支持此功能，无法使用   </span><br><span class=\"line\">    -R, --reverse            reverse the test (client receives, server sends)  </span><br><span class=\"line\">tcp窗口大小，默认无上限，可以不设此参数，作为udp模式测试时也不需要此参数 ，单位：KM，1K=1024     </span><br><span class=\"line\">    -w, --window    #[KMG]    set window size / socket buffer size  </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">iperf -s -i 1</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">作为服务端运行，报告回显间隔时间1s</span></span><br><span class=\"line\">iperf3 -c 192.168.3.250 -i 1 -t 10 -b 7M</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">作为客户端，连接服务端ip地址192.168.3.250，报告回显间隔1s，测试时间10s,带宽限制为7M。</span></span><br><span class=\"line\">iperf3 -c 192.168.3.250 -i 1 -t 10 -b 7M -R</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">作为客户端，连接服务端ip地址192.168.3.250，报告回显间隔1s，测试时间10s,带宽限制为7M,-R为反向测试，这个参数也是iperf3的主要亮点，支持直接转换数据发送方向</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">udp不指定-b默认1M</span></span><br><span class=\"line\">iperf -s -i 1</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">作为服务端运行，报告回显间隔时间1s，服务端不区分tcp或udp</span></span><br><span class=\"line\">iperf3 -u -c 192.168.3.250 -b 70M -i 1 -t 10</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">作为客户端运行，限制带宽70M，报告回显间隔1s，测试时间10s</span></span><br><span class=\"line\">iperf3 -u -c 192.168.3.250 -b 70M -i 1 -t 10 -R</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">作为客户端运行，限制带宽70M，报告回显间隔1s，测试时间10s</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"额外常用\"><a href=\"#额外常用\" class=\"headerlink\" title=\"额外常用\"></a>额外常用</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">时间</span><br><span class=\"line\">while  true; do date +%Y-%m-%d&#x27; &#x27;%H:%M:%S.%N | cut -b 1-23 &amp;&amp; sleep 1;done</span><br><span class=\"line\"></span><br><span class=\"line\">curl</span><br><span class=\"line\">curl localhost:3000/api/json -X POST -d &#x27;&#123;&quot;hello&quot;: &quot;world&quot;&#125;&#x27; --header &quot;Content-Type: application/json</span><br><span class=\"line\">curl -v -o output.html &quot;https://dana.lobn.com.cn/&quot; \\</span><br><span class=\"line\">     --resolve dana.lobn.com.cn:443:8.152.0.157</span><br><span class=\"line\">curl -L -XPOST -H &#x27;Cookie: authToken $token&#x27; -F &quot;uploadFiles=@/home/user/test1&quot; https://gdw-3.com/api/v1/detail/upload </span><br><span class=\"line\"></span><br><span class=\"line\">端口</span><br><span class=\"line\">nmap -v  -sS  -sV  -T 5 39.105.26.196  -p 9984</span><br><span class=\"line\"></span><br><span class=\"line\">sed -i.bak &#x27;/^\\s*[^#].*\\/data\\s/s/^/#/&#x27; /etc/fstab  </span><br><span class=\"line\">badblocks -sv /dev/vda</span><br><span class=\"line\">● -v：显示详情。</span><br><span class=\"line\">● -s：显示进度。</span><br><span class=\"line\">● -w：写模式测试（慎用！会覆盖数据）</span><br><span class=\"line\"></span><br><span class=\"line\">登录日志</span><br><span class=\"line\">lastb | awk &#x27;&#123; print&quot; IP地址为：&quot; $3&#125;&#x27; | sort | uniq -c | sort -nr|head</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">网络</span><br><span class=\"line\">netstat -ant | awk &#x27;/^tcp/ &#123;++y[$NF]&#125; END &#123;for(w in y) print w, y[w]&#125;&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">while true;do netstat -n | awk &#x27;/^tcp/ &#123;++S[$NF]&#125; END &#123;for(a in S) print a,S[a]&#125;&#x27;;sleep 1;done | grep TIME_WAIT</span><br><span class=\"line\"></span><br><span class=\"line\">traceroute  -n -T global-cs.aceux.net -p 80 || yum install traceroute -y</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">netstat -s |grep -e &quot;passive connections rejected because of time stamp&quot; </span><br><span class=\"line\">netstat -s | grep &quot;SYNs to LISTEN&quot;</span><br><span class=\"line\">netstat -s|egrep -i &#x27;syn|ignore|overflow|reject|becau|error|drop|back&#x27; </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">进程</span><br><span class=\"line\">ps -A -ostat,ppid,pid,cmd | grep -e &#x27;^[Zz]&#x27;</span><br><span class=\"line\">ps  -e -L h o state,cmd,pid | awk &#x27;&#123;if($1==&quot;R&quot;||$1==&quot;D&quot;)&#123;print $0&#125;&#125;&#x27; | sort | uniq -c | sort -k 1nr</span><br><span class=\"line\"></span><br><span class=\"line\">ps -auxww --sort=-%cpu|head</span><br><span class=\"line\">ps -eT -o%cpu,pid,tid,ppid,comm | grep -v CPU | sort -n -r | head -20</span><br><span class=\"line\">ps -auxww --sort=-%mem|head</span><br><span class=\"line\">ps -T -o%cpu,pid,tid,ppid,comm -p           # 查看指定进程的所有线程</span><br><span class=\"line\">ps -Lf &lt;PID&gt;            # 显示线程的详细信息</span><br><span class=\"line\">ps axjf --no-header  #进程树</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">systemctl list-units --type=service --state=running</span><br><span class=\"line\">systemctl list-units --type=service --state=running --no-pager |grep running |awk &#x27;&#123;print $1&#125;&#x27; |xargs systemctl cat |grep -i execstart</span><br><span class=\"line\"></span><br><span class=\"line\">lsof -nw|awk &#x27;&#123;print $2&#125;&#x27;| sort | uniq -c | sort -nr | head</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">自定义终端提示符</span></span><br><span class=\"line\">PS1=&#x27;\\[\\e[38;5;208m\\]\\u@\\h\\[\\e[0m\\] \\[\\e[38;5;34m\\]\\D&#123;%H:%M:%S&#125;\\[\\e[0m\\] \\[\\e[38;5;33m\\]\\w\\[\\e[0m\\] \\[\\e[1;31m\\]$(git branch 2&gt;/dev/null | grep &quot;^*&quot; | colrm 1 2)\\[\\e[0m\\]\\n\\[\\e[1;32m\\]➜ \\[\\e[0m\\]&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">PS1=&#x27;\\[\\033[1;31m\\][\\t] \\[\\033[1;32m\\]\\u\\[\\033[1;36m\\]@\\[\\033[1;34m\\]\\h \\[\\033[1;33m\\]\\w\\[\\033[0m\\] &#x27;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">python</span></span><br><span class=\"line\">pip cache purge</span><br><span class=\"line\">pip cache remove package-name</span><br><span class=\"line\">pip install --no-cache-dir torch </span><br><span class=\"line\">pip show  torch</span><br><span class=\"line\">pip install --target=/mnt/xinference \\ --cache-dir=/mnt/xinference/pip_cache \\ &quot;xinference[all]&quot;</span><br><span class=\"line\">python -c &quot;import os; print(&#x27;\\n&#x27;.join(dir(os)))&quot; | grep &#x27;kill&#x27;</span><br><span class=\"line\">nginx -V 2&gt;&amp;1 | grep -o with-http_stub_status_module</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"perf\"><a href=\"#perf\" class=\"headerlink\" title=\"perf\"></a>perf</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">进程热点函数分析</span></span><br><span class=\"line\">perf top -g -p 21515</span><br><span class=\"line\">perf record -F 99 -a -g -p $pid -- sleep 60</span><br><span class=\"line\">-e选项允许您在perf list命令中列出的多个类别中选择一个事件类别。</span><br><span class=\"line\">perf report -i 文件 -g</span><br><span class=\"line\">perf report -g graph,0.3</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">默认0.5，低于不显示堆栈</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">隐藏CPU</span></span><br><span class=\"line\">perf sched record -C 0 -- sleep 5 (-C后面的参数，填CPU使用率高的cpu序号，0表示第一个CPU)</span><br><span class=\"line\">perf report 选择 sched:sched_switch 按回车键</span><br><span class=\"line\">perf sched latency --sort max</span><br></pre></td></tr></table></figure>\n<h1 id=\"strace\"><a href=\"#strace\" class=\"headerlink\" title=\"strace\"></a>strace</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strace -tt -T -v -f -e trace=file -o /data/log/strace.log -s 1024 -p 23489</span><br><span class=\"line\"></span><br><span class=\"line\">● -tt：在每行输出的前面，显示毫秒级别的时间</span><br><span class=\"line\">● -T：显示每次系统调用所花费的时间</span><br><span class=\"line\">● -v：对于某些相关调用，把完整的环境变量，文件 stat 结构等打出来。</span><br><span class=\"line\">● -f：跟踪目标进程，以及目标进程创建的所有子进程</span><br><span class=\"line\">● -e：控制要跟踪的事件和跟踪行为，比如指定要跟踪的系统调用名称</span><br><span class=\"line\">● -o：把 strace 的输出单独写到指定的文件</span><br><span class=\"line\">● -s：当系统调用的某个参数是字符串时，最多输出指定长度的内容，默认是 32 个字节</span><br><span class=\"line\">● -p：指定要跟踪的进程 pid，要同时跟踪多个 pid，重复多次 -p 选项即可。</span><br><span class=\"line\">-e trace=file     跟踪和文件访问相关的调用(参数中有文件名)</span><br><span class=\"line\">-e trace=process  和进程管理相关的调用，比如fork/exec/exit_group</span><br><span class=\"line\">-e trace=network  和网络通信相关的调用，比如socket/sendto/connect</span><br><span class=\"line\">-e trace=signal    信号发送和处理相关，比如kill/sigaction</span><br><span class=\"line\">-e trace=desc  和文件描述符相关，比如write/read/select/epoll等</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"dd\"><a href=\"#dd\" class=\"headerlink\" title=\"dd\"></a>dd</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dd if=/dev/zero  of=/data/test  bs=10M status=progress  count=10000 oflag=direct  写入</span><br><span class=\"line\"></span><br><span class=\"line\">dd if=/data/test  of=/dev/null   bs=10M  count=10000 oflag=direct  status=progress  读取</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">direct　　　　　　　　　　　　　　　  读写数据采用直接IO方式；</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">status=progress 显示进度</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"tcpdump\"><a href=\"#tcpdump\" class=\"headerlink\" title=\"tcpdump\"></a>tcpdump</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">• 选择所有端口，指定host域名抓包，抓包文件存入/tmp/中：</span><br><span class=\"line\">tcpdump –nni any –s 0 host www.ex.com –w /tmp/ex.com.pcap</span><br><span class=\"line\">• 指定eth0，指定目标IP和端口，并指定抓取1000个报文</span><br><span class=\"line\">tcpdump –nni eth0 host 1.1.1.1 and port 80 –c 1000</span><br><span class=\"line\">• 指定某网段，如下表达式默认为/24位</span><br><span class=\"line\">tcpdump –nni eth0 net 1.1.1.1 and portrange 8000-8080</span><br><span class=\"line\">常用语句</span><br><span class=\"line\">•循环抓包（抓取前500个字节，500M一个文件，保存10个）</span><br><span class=\"line\">tcpdump -i eth0 -s 500 host 1.1.1.1 -w /tmp/test.pcap -C 500 -W 10</span><br><span class=\"line\">特殊场景语句，抓取特定的tcp置位报文</span><br><span class=\"line\">tcpdump -nni any tcp[tcpflags]=tcp-syn/tcp-rst/tcp-ack/tcp-ack</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"iperf3\"><a href=\"#iperf3\" class=\"headerlink\" title=\"iperf3\"></a>iperf3</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Client/Server: # 客户端和服务端公有的参数</span><br><span class=\"line\">指定端口号，默认为5201             </span><br><span class=\"line\">    -p, --port      #        server port to listen on/connect to </span><br><span class=\"line\">回显报告的间隔时间                       </span><br><span class=\"line\">    -i, --interval  #        seconds between periodic bandwidth reports  </span><br><span class=\"line\">显示帮助菜单  </span><br><span class=\"line\">    -h, --help               print this message and quit   </span><br><span class=\"line\">显示版本</span><br><span class=\"line\">    -v, --version            print version information and quit    </span><br><span class=\"line\"></span><br><span class=\"line\">Server specific:  #服务端私有参数</span><br><span class=\"line\">指定以服务端运行                                                            </span><br><span class=\"line\">    -s, --server             run in server mode                                               </span><br><span class=\"line\"></span><br><span class=\"line\">Client specific:  #客户端私有参数</span><br><span class=\"line\">带宽参数，单位：字节每秒：KMG，为2的n次方，比如1K=1024,；设置为0代表无限制，此参数UDP默认1M/s，TCP无限制 </span><br><span class=\"line\">    -b, --bandwidth #[KMG][/#] target bandwidth in bits/sec (0 for unlimited)</span><br><span class=\"line\">                            (default 1 Mbit/sec for UDP, unlimited for TCP)</span><br><span class=\"line\">                            (optional slash and packet count for burst mode) </span><br><span class=\"line\">指定以客户端运行，后面要带服务端的IP地址                            </span><br><span class=\"line\">    -c, --client    &lt;host&gt;   run in client mode, connecting to &lt;host&gt;   </span><br><span class=\"line\">udp模式，不带-u默认为tcp模式</span><br><span class=\"line\">    -u, --udp                use UDP rather than TCP   </span><br><span class=\"line\">指定测试时间，不带参数默认测试10s        </span><br><span class=\"line\">    -t, --time      #        time in seconds to transmit for (default 10 secs)  </span><br><span class=\"line\">翻转测试，这是iperf3比iperf2方便的主要亮点，iperf2不支持此功能，无法使用   </span><br><span class=\"line\">    -R, --reverse            reverse the test (client receives, server sends)  </span><br><span class=\"line\">tcp窗口大小，默认无上限，可以不设此参数，作为udp模式测试时也不需要此参数 ，单位：KM，1K=1024     </span><br><span class=\"line\">    -w, --window    #[KMG]    set window size / socket buffer size  </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">iperf -s -i 1</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">作为服务端运行，报告回显间隔时间1s</span></span><br><span class=\"line\">iperf3 -c 192.168.3.250 -i 1 -t 10 -b 7M</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">作为客户端，连接服务端ip地址192.168.3.250，报告回显间隔1s，测试时间10s,带宽限制为7M。</span></span><br><span class=\"line\">iperf3 -c 192.168.3.250 -i 1 -t 10 -b 7M -R</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">作为客户端，连接服务端ip地址192.168.3.250，报告回显间隔1s，测试时间10s,带宽限制为7M,-R为反向测试，这个参数也是iperf3的主要亮点，支持直接转换数据发送方向</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">udp不指定-b默认1M</span></span><br><span class=\"line\">iperf -s -i 1</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">作为服务端运行，报告回显间隔时间1s，服务端不区分tcp或udp</span></span><br><span class=\"line\">iperf3 -u -c 192.168.3.250 -b 70M -i 1 -t 10</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">作为客户端运行，限制带宽70M，报告回显间隔1s，测试时间10s</span></span><br><span class=\"line\">iperf3 -u -c 192.168.3.250 -b 70M -i 1 -t 10 -R</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">作为客户端运行，限制带宽70M，报告回显间隔1s，测试时间10s</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"额外常用\"><a href=\"#额外常用\" class=\"headerlink\" title=\"额外常用\"></a>额外常用</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">时间</span><br><span class=\"line\">while  true; do date +%Y-%m-%d&#x27; &#x27;%H:%M:%S.%N | cut -b 1-23 &amp;&amp; sleep 1;done</span><br><span class=\"line\"></span><br><span class=\"line\">curl</span><br><span class=\"line\">curl localhost:3000/api/json -X POST -d &#x27;&#123;&quot;hello&quot;: &quot;world&quot;&#125;&#x27; --header &quot;Content-Type: application/json</span><br><span class=\"line\">curl -v -o output.html &quot;https://dana.lobn.com.cn/&quot; \\</span><br><span class=\"line\">     --resolve dana.lobn.com.cn:443:8.152.0.157</span><br><span class=\"line\">curl -L -XPOST -H &#x27;Cookie: authToken $token&#x27; -F &quot;uploadFiles=@/home/user/test1&quot; https://gdw-3.com/api/v1/detail/upload </span><br><span class=\"line\"></span><br><span class=\"line\">端口</span><br><span class=\"line\">nmap -v  -sS  -sV  -T 5 39.105.26.196  -p 9984</span><br><span class=\"line\"></span><br><span class=\"line\">sed -i.bak &#x27;/^\\s*[^#].*\\/data\\s/s/^/#/&#x27; /etc/fstab  </span><br><span class=\"line\">badblocks -sv /dev/vda</span><br><span class=\"line\">● -v：显示详情。</span><br><span class=\"line\">● -s：显示进度。</span><br><span class=\"line\">● -w：写模式测试（慎用！会覆盖数据）</span><br><span class=\"line\"></span><br><span class=\"line\">登录日志</span><br><span class=\"line\">lastb | awk &#x27;&#123; print&quot; IP地址为：&quot; $3&#125;&#x27; | sort | uniq -c | sort -nr|head</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">网络</span><br><span class=\"line\">netstat -ant | awk &#x27;/^tcp/ &#123;++y[$NF]&#125; END &#123;for(w in y) print w, y[w]&#125;&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">while true;do netstat -n | awk &#x27;/^tcp/ &#123;++S[$NF]&#125; END &#123;for(a in S) print a,S[a]&#125;&#x27;;sleep 1;done | grep TIME_WAIT</span><br><span class=\"line\"></span><br><span class=\"line\">traceroute  -n -T global-cs.aceux.net -p 80 || yum install traceroute -y</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">netstat -s |grep -e &quot;passive connections rejected because of time stamp&quot; </span><br><span class=\"line\">netstat -s | grep &quot;SYNs to LISTEN&quot;</span><br><span class=\"line\">netstat -s|egrep -i &#x27;syn|ignore|overflow|reject|becau|error|drop|back&#x27; </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">进程</span><br><span class=\"line\">ps -A -ostat,ppid,pid,cmd | grep -e &#x27;^[Zz]&#x27;</span><br><span class=\"line\">ps  -e -L h o state,cmd,pid | awk &#x27;&#123;if($1==&quot;R&quot;||$1==&quot;D&quot;)&#123;print $0&#125;&#125;&#x27; | sort | uniq -c | sort -k 1nr</span><br><span class=\"line\"></span><br><span class=\"line\">ps -auxww --sort=-%cpu|head</span><br><span class=\"line\">ps -eT -o%cpu,pid,tid,ppid,comm | grep -v CPU | sort -n -r | head -20</span><br><span class=\"line\">ps -auxww --sort=-%mem|head</span><br><span class=\"line\">ps -T -o%cpu,pid,tid,ppid,comm -p           # 查看指定进程的所有线程</span><br><span class=\"line\">ps -Lf &lt;PID&gt;            # 显示线程的详细信息</span><br><span class=\"line\">ps axjf --no-header  #进程树</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">systemctl list-units --type=service --state=running</span><br><span class=\"line\">systemctl list-units --type=service --state=running --no-pager |grep running |awk &#x27;&#123;print $1&#125;&#x27; |xargs systemctl cat |grep -i execstart</span><br><span class=\"line\"></span><br><span class=\"line\">lsof -nw|awk &#x27;&#123;print $2&#125;&#x27;| sort | uniq -c | sort -nr | head</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">自定义终端提示符</span></span><br><span class=\"line\">PS1=&#x27;\\[\\e[38;5;208m\\]\\u@\\h\\[\\e[0m\\] \\[\\e[38;5;34m\\]\\D&#123;%H:%M:%S&#125;\\[\\e[0m\\] \\[\\e[38;5;33m\\]\\w\\[\\e[0m\\] \\[\\e[1;31m\\]$(git branch 2&gt;/dev/null | grep &quot;^*&quot; | colrm 1 2)\\[\\e[0m\\]\\n\\[\\e[1;32m\\]➜ \\[\\e[0m\\]&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">PS1=&#x27;\\[\\033[1;31m\\][\\t] \\[\\033[1;32m\\]\\u\\[\\033[1;36m\\]@\\[\\033[1;34m\\]\\h \\[\\033[1;33m\\]\\w\\[\\033[0m\\] &#x27;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">python</span></span><br><span class=\"line\">pip cache purge</span><br><span class=\"line\">pip cache remove package-name</span><br><span class=\"line\">pip install --no-cache-dir torch </span><br><span class=\"line\">pip show  torch</span><br><span class=\"line\">pip install --target=/mnt/xinference \\ --cache-dir=/mnt/xinference/pip_cache \\ &quot;xinference[all]&quot;</span><br><span class=\"line\">python -c &quot;import os; print(&#x27;\\n&#x27;.join(dir(os)))&quot; | grep &#x27;kill&#x27;</span><br><span class=\"line\">nginx -V 2&gt;&amp;1 | grep -o with-http_stub_status_module</span><br></pre></td></tr></table></figure>\n"},{"title":"数据库","date":"2025-07-24T09:30:42.000Z","_content":"\n# 数据库\n\n\n## mysql\n[索引失效情况](https://cloud.tencent.com/developer/article/1992920)\n### 回表概念\n```shell\n1.聚集索引的B+树，性能最优，叶子节点存储的数据是整行的所有字段数据(主键索引)\n2.非聚集索引的B+树，非聚集索引列可能是一列，也可能是多列（联合索引），\n  叶子节点存储的数据是非聚集索引列（1列或多列）的数据和聚集索引列\n\n\n用户user表4列（id, userCode, userName, userSex）\nid是主键（聚集索引）；userCode 是非聚集索引，此时会创建2个索引的B+树\n\n聚集索引的B+树，叶子节点保存了4列（id, userCode, userName, userSex）的数据\n非聚集索引的B+树，叶子节点保存了2列（id, userCode）的数据\n\n不回表\n走主键索引不回表，因为挂载的是整列数据\nselect * from user where id = 1 \n走非聚集索引不回表，因为叶子结点挂载了非聚集索引和聚集索引的值\nselect id,userCode from user where userCode = 1 \n\n\n回表\n因为查询的列除了主键id和非聚集索引userCode还有\nuserName, userSex，这两个叶子节点没有存数据，会通过主键索引id回表来\n查询userName, userSex的值，因为主键索引id挂载的整列的值\nselect id,userCode，userSex from user where userCode = 1\nselect id,userCode，userName from user where userCode = 1\nselect * from user where userCode = 1\n\n```\n### 常用sql元数据\n```sql\n#指定数据库的详细信息\nSELECT \n  TABLE_SCHEMA AS '数据库',\n  TABLE_NAME AS '表名',\n  TABLE_ROWS AS `行数`,\n  ROUND( (DATA_LENGTH + INDEX_LENGTH) / 1024 / 1024, 2) AS '总大小(MB)',\n  ROUND(DATA_LENGTH / 1024 / 1024, 2) AS '数据大小(MB)',\n  ROUND(INDEX_LENGTH / 1024 / 1024, 2) AS '索引大小(MB)',\n  TABLE_ROWS AS '数据行数（估算值）'\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = 'y_back'  -- 替换为你的数据库名\nORDER BY (DATA_LENGTH + INDEX_LENGTH) DESC;  -- 按总大小排序\n\n\n\n#数据库表的行数\nSELECT \n  TABLE_NAME AS '表名',\n  TABLE_ROWS AS '估算行数',\n  (SELECT COUNT(*) FROM y_back.t_work) AS '精确行数'  -- 替换为实际表名\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = 'y_back';\n\n#all\nSELECT\n\ttable_schema AS '数据库',\n\tsum( table_rows ) AS '记录数',\n\tsum(\n\tTRUNCATE ( data_length / 1024 / 1024, 2 )) AS '数据容量(MB)',\n\tsum(\n\tTRUNCATE ( index_length / 1024 / 1024, 2 )) AS '索引容量(MB)' \nFROM\n\tinformation_schema.TABLES \nGROUP BY\n\ttable_schema \nORDER BY\n\tsum( data_length ) DESC,\n\tsum( index_length ) DESC;\n\n#过滤元数据库\nSELECT\n  table_schema AS '数据库',\n  SUM(table_rows) AS '记录数',\n  TRUNCATE(SUM(data_length) / 1024 / 1024, 2) AS '数据容量(MB)',  -- 先求和再转换单位\n  TRUNCATE(SUM(index_length) / 1024 / 1024, 2) AS '索引容量(MB)'\nFROM\n  information_schema.TABLES\nWHERE\n  table_schema NOT IN (\n    'information_schema', \n    'mysql', \n    'performance_schema', \n    'sys'\n  )\nGROUP BY\n  table_schema\nORDER BY\n  SUM(data_length) DESC,\n  SUM(index_length) DESC;\n\nANALYZE TABLE - 更新统计信息\nOPTIMIZE TABLE - 表优化重组俗称清理碎片\n\n#造数据\nCREATE TABLE `t_work_db01` (\n  `id` bigint NOT NULL AUTO_INCREMENT,\n  `name` varchar(256) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL,\n  `age` int DEFAULT NULL,\n  `sex` char(1) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL,\n  `money` float DEFAULT NULL COMMENT '金额',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=100001 DEFAULT CHARSET=utf8mb3 ROW_FORMAT=DYNAMIC\n\n\nDELIMITER $$\nCREATE PROCEDURE InsertDummyData()\nBEGIN\n    DECLARE i INT DEFAULT 0;\n    WHILE i < 100000 DO\n        INSERT INTO t_work (NAME, age, sex, money)\n        VALUES (\n            -- 随机生成用户名（示例：User_XXXX）\n            CONCAT('User_', SUBSTRING(MD5(RAND()) FROM 1 FOR 8)),\n            -- 随机年龄 18~65 岁\n            FLOOR(18 + RAND() * 48),\n            -- 随机性别（M/F）\n            IF(RAND() < 0.5, 'M', 'F'),\n            -- 随机金额 1000~10000（保留两位小数）\n            ROUND(1000 + RAND() * 9000, 2)\n        );\n        SET i = i + 1;\n    END WHILE;\nEND$$\nDELIMITER ;\n\n-- 执行存储过程\nCALL InsertDummyData();\n\nDROP PROCEDURE IF EXISTS InsertDummyData;  -- 强制删除（如果存在）\n```\n### mysql读写分离\n[github](https://github.com/sysown/proxysql) <br>\n[ProxySql](https://www.cnblogs.com/keme/p/12290977.html)<br>\n[MaxScale](https://www.cnblogs.com/ejiyuan/p/17156065.html)\n\n### mysql分表分库\n[mycat](https://cloud.tencent.com/developer/article/2349899)\n\n## pgsql\n[PostgreSQL psql 常用命令](https://www.sjkjc.com/postgresql/psql-commands/)\n### 概念\n```\nPUBLIC 是 PostgreSQL 数据库中一个特殊的角色组，在元数据表（pg_roles）中都查不到该角色，\n数据库中所创建的角色都可以理解为是 PUBLIC 角色组成员。\n而且对 PUBLIC 权限的继承完全不受 NOINHERIT 的控制，\n一旦创建了一个拥有 login 权限的角色，它会立即继承 PUBLIC 角色组拥有的权限，\n此时如果想通过 revoke（比如 revoke connect on database）来回收的话不会成功，\n只能从 PUBLIC 组回收相关权限（比如 revoke connect on database from PUBLIC）\n\nREVOKE CONNECT ON DATABASE test FROM PUBLIC;\n--这样普通用户就无法自由切换数据库，默认数据库下面有一个public的scheme\n\nMySQL 的 datadir ≈ PostgreSQL 的默认表空间 pg_default\nPostgreSQL 的 pg_default 表空间对应默认数据目录（由参数 data_directory 配置），类似于 MySQL 的 datadir。\nPostgreSQL 的数据库 ≈ MySQL 的实例（但更轻量）。\nPostgreSQL 的模式 ≈ MySQL 的数据库\n```\n\n### 基本使用命令\n```\ndocker run -id --name=pgsql -v postgre-data:/var/lib/postgresql/data -p 54222:5432 -e POSTGRES_PASSWORD=123456 -e LANG=C.UTF-8 bitnami/postgresql\n\ndocker exec -it -uroot pgsql bash\npsql -U postgres -W -n\ncat .psql_history \npsql -h host -p port -d dbname -U  user -W\n\n使用反斜线作为命令前缀.\n  postgres=# \\db\n# 输出的信息如下：\n       List of tablespaces\n    Name    |  Owner   | Location \n------------+----------+----------\n pg_default | postgres | \n pg_global  | postgres | \n(2 rows)\n\n退出    \\q\n 列出所有的数据库      \\l\n 列出所有的数据库的大小      \\l+\n 更改当前连接的数据库       \\c\n 列出当前数据库的连接信息    \\connect\n 列出当前数据库和连接的详细信息 \\conninfo\n 查看当前数据库里面的表和拥有者和表大小         \\dt+\n 展示所有用户           \\dg\n ​模式 \\dn\n 查看所有表名的列表             \\d\n 获取表结构                   \\da\n 展示所有用户               \\du\n 查看t_sms表的结构      \\d t_sms \n 展示数据库里面的所有的表         \\dt\n 列出所有的数据库的详细信息（包括数据库大小和字符格式）         \\l+\n 显示用户访问权限。                            \\z或\\dp\n 显示所有可设置的访问权限                     \\h GRAN\n 显示用户的对所有数据库表的详细访问权限     \\dp或者\\z\n 确认当前连接的用户为超级用户postgres，且该用户后创建角色和数据库的权限等     #select current_user;\n 在超级用户连接postgres后，设置不允许普通用户a连接数据库         #alter role a nologin;\n ​\n 使用普通用户a连接数据库正常                   #\\c highgo a\n\n\n\n快速查看当前所有用户：\\du\n查看详细用户信息：select * from pg_user;\n查看详细角色信息：select * from pg_roles;\n查看当前登录用户：select user;\n一般建议先创建用户然后使用这个用户去创建数据库模式，因为数据库那个用户创建的默认Owner就是这个用户\n创建用户：CREATE USER $user_name PASSWORD '$password';\n创建角色：CREATE ROLE $role_name;\n \n修改用户与角色：ALTER USER[ROLE] $user_name \n        e.g.\n        //修改用户名：ALTER USER U2 RENAME TO U22;\n        //修改用户的密码：ALTER USER U22 PASSWORD'U22;\n        //修改用户的权限：ALTER USER u22 CREATEROLE;\n        //修改数据库 testdb中的参数重设为默认值：ALTER USER u22 IN DATABASE testdb RESET all1;\n        //修改角色的名字：ALTER ROLE dev RENAME TO dev1;\n        //修改角色的权限：ALTER ROLE dev1 SUPERUSER;\n        //修改角色的权限：ALTER ROLE dev1 LOGIN;\n \n删除用户与角色：DROP USER[ROLE] [IF EXISTS] $user_name\n \n授权用户某个角色:GRANT $role_name TO $user_name;    (授权后set role $role_name启用生效）\n \n\ncreate user test with password 'rong ';\nCREATE DATABASE testdb OWNER test;\nGRANT ALL PRIVILEGES ON DATABASE testdb TO test;\nalter user qh with password '123';\n\\password qh;  //需要输入两次密码（推荐）\n\n\n```\n\n\n\n## manggodb\n[详细使用教程](https://www.runoob.com/mongodb/mongodb-tutorial.html)\n```\ndocker run -itd --name mongo -v /docker_volume/mongodb/data:/data/db -p 27017:27017 mongo:4.4 --auth\n–auth：需要密码才能访问容器服务；\nmongodb安装好后第一次进入是不需要密码的，也没有任何用户，通过shell命令可直接进入\nuse admin 使用admin数据库并进行验证，如果不验证，是做不了任何操作的\ndb.auth(\"root\",\"123456\")  返回1表示成功 \n验证之后还是做不了操作，因为root只有用户管理权限，下面创建用户，用户都跟着库走\nuse mydb \ndb.createUser({user: \"admin\",pwd: \"123456\",roles: [{ role: \"readWrite\", db: \"mydb\" }]}) \n通过admin用户增删改查\n\n\ndocker exec -it mongo mongo admin\n\n\ndb.createUser({ user:'root',pwd:'123456',roles:[ { role:'userAdminAnyDatabase', db: 'admin'},'readWriteAnyDatabase']});\n【role:‘userAdminAnyDatabase’】：只在admin数据库中可用，赋予用户所有数据库的userAdmin权限\n【db: ‘admin’】：可操作的数据库\n【‘readWriteAnyDatabase’】：赋予用户读写权限\nmongoDB 没有无敌用户root，只有能管理用户的用户 userAdminAnyDatabase \n\n\nSQL 术语/概念\tMongoDB 术语/概念   解释/说明\ndatabase\t    database\t       数据库\ntable\t        collection\t       数据库表/集合\nrow\t            document\t       数据记录行/文档\ncolumn\t        field\t           数据字段/域\nindex\t        index\t           索引\ntable joins\t \t表连接,            MongoDB不支持\nprimary key\t    primary key\t       主键,MongoDB自动将_id字段设置为主键\n```\n## sqlserver\n```\ndocker run -d \\\n  --name sqlserver --user=root \\\n  -e \"ACCEPT_EULA=Y\" \\\n  -e \"SA_PASSWORD=Testing@123\"  -p 1433:1433  -v /data/sqlserver:/var/opt/mssql \\\n  --cap-add SYS_PTRACE mcr.microsoft.com/mssql/server:2019-latest\n\n  /opt/mssql-tools18/bin/sqlcmd -S localhost -U SA -P \"Testing@123\" -C\n  \n-- 数据库级\n  SELECT name, type_desc FROM sys.database_principals WHERE type IN ('S', 'U', 'G');\n  select * from master.dbo.SysDatabases\n  --服务器级\n  SELECT name, type_desc FROM sys.server_principals WHERE type IN ('S', 'U', 'G');\n  go\n  SELECT DB_NAME() AS [CurrentDatabase];\n  USE master; SELECT name FROM sys.schemas\n  USE master; SELECT name FROM sys.tables\n  SELECT name, USER_NAME(principal_id) FROM sys.schemas;\n\nCREATE TABLE Users (    UserID INT PRIMARY KEY IDENTITY(1,1),     UserName NVARCHAR(50) NOT NULL,   Email NVARCHAR(100) NOT NULL, RegistrationDate DATETIME DEFAULT GETDATE(), IsActive BIT DEFAULT 1);\nINSERT INTO Users (UserName, Email) VALUES     ('王五', 'wangwu@example.com'),    ('赵六', 'zhaoliu@example.com'),    ('孙七', 'sunqi@example.com');\n\n--cdc\nuse y_test\nEXEC sys.sp_cdc_enable_db;\ngo\n SELECT name AS [y_test],    is_cdc_enabled AS [CDCEnabled]FROM   sys.databases WHERE     name = DB_NAME(); \n```\n","source":"_posts/数据库.md","raw":"---\ntitle: 数据库\ndate: 2025-07-24 17:30:42\ntags:\ncategories: db\n---\n\n# 数据库\n\n\n## mysql\n[索引失效情况](https://cloud.tencent.com/developer/article/1992920)\n### 回表概念\n```shell\n1.聚集索引的B+树，性能最优，叶子节点存储的数据是整行的所有字段数据(主键索引)\n2.非聚集索引的B+树，非聚集索引列可能是一列，也可能是多列（联合索引），\n  叶子节点存储的数据是非聚集索引列（1列或多列）的数据和聚集索引列\n\n\n用户user表4列（id, userCode, userName, userSex）\nid是主键（聚集索引）；userCode 是非聚集索引，此时会创建2个索引的B+树\n\n聚集索引的B+树，叶子节点保存了4列（id, userCode, userName, userSex）的数据\n非聚集索引的B+树，叶子节点保存了2列（id, userCode）的数据\n\n不回表\n走主键索引不回表，因为挂载的是整列数据\nselect * from user where id = 1 \n走非聚集索引不回表，因为叶子结点挂载了非聚集索引和聚集索引的值\nselect id,userCode from user where userCode = 1 \n\n\n回表\n因为查询的列除了主键id和非聚集索引userCode还有\nuserName, userSex，这两个叶子节点没有存数据，会通过主键索引id回表来\n查询userName, userSex的值，因为主键索引id挂载的整列的值\nselect id,userCode，userSex from user where userCode = 1\nselect id,userCode，userName from user where userCode = 1\nselect * from user where userCode = 1\n\n```\n### 常用sql元数据\n```sql\n#指定数据库的详细信息\nSELECT \n  TABLE_SCHEMA AS '数据库',\n  TABLE_NAME AS '表名',\n  TABLE_ROWS AS `行数`,\n  ROUND( (DATA_LENGTH + INDEX_LENGTH) / 1024 / 1024, 2) AS '总大小(MB)',\n  ROUND(DATA_LENGTH / 1024 / 1024, 2) AS '数据大小(MB)',\n  ROUND(INDEX_LENGTH / 1024 / 1024, 2) AS '索引大小(MB)',\n  TABLE_ROWS AS '数据行数（估算值）'\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = 'y_back'  -- 替换为你的数据库名\nORDER BY (DATA_LENGTH + INDEX_LENGTH) DESC;  -- 按总大小排序\n\n\n\n#数据库表的行数\nSELECT \n  TABLE_NAME AS '表名',\n  TABLE_ROWS AS '估算行数',\n  (SELECT COUNT(*) FROM y_back.t_work) AS '精确行数'  -- 替换为实际表名\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = 'y_back';\n\n#all\nSELECT\n\ttable_schema AS '数据库',\n\tsum( table_rows ) AS '记录数',\n\tsum(\n\tTRUNCATE ( data_length / 1024 / 1024, 2 )) AS '数据容量(MB)',\n\tsum(\n\tTRUNCATE ( index_length / 1024 / 1024, 2 )) AS '索引容量(MB)' \nFROM\n\tinformation_schema.TABLES \nGROUP BY\n\ttable_schema \nORDER BY\n\tsum( data_length ) DESC,\n\tsum( index_length ) DESC;\n\n#过滤元数据库\nSELECT\n  table_schema AS '数据库',\n  SUM(table_rows) AS '记录数',\n  TRUNCATE(SUM(data_length) / 1024 / 1024, 2) AS '数据容量(MB)',  -- 先求和再转换单位\n  TRUNCATE(SUM(index_length) / 1024 / 1024, 2) AS '索引容量(MB)'\nFROM\n  information_schema.TABLES\nWHERE\n  table_schema NOT IN (\n    'information_schema', \n    'mysql', \n    'performance_schema', \n    'sys'\n  )\nGROUP BY\n  table_schema\nORDER BY\n  SUM(data_length) DESC,\n  SUM(index_length) DESC;\n\nANALYZE TABLE - 更新统计信息\nOPTIMIZE TABLE - 表优化重组俗称清理碎片\n\n#造数据\nCREATE TABLE `t_work_db01` (\n  `id` bigint NOT NULL AUTO_INCREMENT,\n  `name` varchar(256) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL,\n  `age` int DEFAULT NULL,\n  `sex` char(1) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL,\n  `money` float DEFAULT NULL COMMENT '金额',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=100001 DEFAULT CHARSET=utf8mb3 ROW_FORMAT=DYNAMIC\n\n\nDELIMITER $$\nCREATE PROCEDURE InsertDummyData()\nBEGIN\n    DECLARE i INT DEFAULT 0;\n    WHILE i < 100000 DO\n        INSERT INTO t_work (NAME, age, sex, money)\n        VALUES (\n            -- 随机生成用户名（示例：User_XXXX）\n            CONCAT('User_', SUBSTRING(MD5(RAND()) FROM 1 FOR 8)),\n            -- 随机年龄 18~65 岁\n            FLOOR(18 + RAND() * 48),\n            -- 随机性别（M/F）\n            IF(RAND() < 0.5, 'M', 'F'),\n            -- 随机金额 1000~10000（保留两位小数）\n            ROUND(1000 + RAND() * 9000, 2)\n        );\n        SET i = i + 1;\n    END WHILE;\nEND$$\nDELIMITER ;\n\n-- 执行存储过程\nCALL InsertDummyData();\n\nDROP PROCEDURE IF EXISTS InsertDummyData;  -- 强制删除（如果存在）\n```\n### mysql读写分离\n[github](https://github.com/sysown/proxysql) <br>\n[ProxySql](https://www.cnblogs.com/keme/p/12290977.html)<br>\n[MaxScale](https://www.cnblogs.com/ejiyuan/p/17156065.html)\n\n### mysql分表分库\n[mycat](https://cloud.tencent.com/developer/article/2349899)\n\n## pgsql\n[PostgreSQL psql 常用命令](https://www.sjkjc.com/postgresql/psql-commands/)\n### 概念\n```\nPUBLIC 是 PostgreSQL 数据库中一个特殊的角色组，在元数据表（pg_roles）中都查不到该角色，\n数据库中所创建的角色都可以理解为是 PUBLIC 角色组成员。\n而且对 PUBLIC 权限的继承完全不受 NOINHERIT 的控制，\n一旦创建了一个拥有 login 权限的角色，它会立即继承 PUBLIC 角色组拥有的权限，\n此时如果想通过 revoke（比如 revoke connect on database）来回收的话不会成功，\n只能从 PUBLIC 组回收相关权限（比如 revoke connect on database from PUBLIC）\n\nREVOKE CONNECT ON DATABASE test FROM PUBLIC;\n--这样普通用户就无法自由切换数据库，默认数据库下面有一个public的scheme\n\nMySQL 的 datadir ≈ PostgreSQL 的默认表空间 pg_default\nPostgreSQL 的 pg_default 表空间对应默认数据目录（由参数 data_directory 配置），类似于 MySQL 的 datadir。\nPostgreSQL 的数据库 ≈ MySQL 的实例（但更轻量）。\nPostgreSQL 的模式 ≈ MySQL 的数据库\n```\n\n### 基本使用命令\n```\ndocker run -id --name=pgsql -v postgre-data:/var/lib/postgresql/data -p 54222:5432 -e POSTGRES_PASSWORD=123456 -e LANG=C.UTF-8 bitnami/postgresql\n\ndocker exec -it -uroot pgsql bash\npsql -U postgres -W -n\ncat .psql_history \npsql -h host -p port -d dbname -U  user -W\n\n使用反斜线作为命令前缀.\n  postgres=# \\db\n# 输出的信息如下：\n       List of tablespaces\n    Name    |  Owner   | Location \n------------+----------+----------\n pg_default | postgres | \n pg_global  | postgres | \n(2 rows)\n\n退出    \\q\n 列出所有的数据库      \\l\n 列出所有的数据库的大小      \\l+\n 更改当前连接的数据库       \\c\n 列出当前数据库的连接信息    \\connect\n 列出当前数据库和连接的详细信息 \\conninfo\n 查看当前数据库里面的表和拥有者和表大小         \\dt+\n 展示所有用户           \\dg\n ​模式 \\dn\n 查看所有表名的列表             \\d\n 获取表结构                   \\da\n 展示所有用户               \\du\n 查看t_sms表的结构      \\d t_sms \n 展示数据库里面的所有的表         \\dt\n 列出所有的数据库的详细信息（包括数据库大小和字符格式）         \\l+\n 显示用户访问权限。                            \\z或\\dp\n 显示所有可设置的访问权限                     \\h GRAN\n 显示用户的对所有数据库表的详细访问权限     \\dp或者\\z\n 确认当前连接的用户为超级用户postgres，且该用户后创建角色和数据库的权限等     #select current_user;\n 在超级用户连接postgres后，设置不允许普通用户a连接数据库         #alter role a nologin;\n ​\n 使用普通用户a连接数据库正常                   #\\c highgo a\n\n\n\n快速查看当前所有用户：\\du\n查看详细用户信息：select * from pg_user;\n查看详细角色信息：select * from pg_roles;\n查看当前登录用户：select user;\n一般建议先创建用户然后使用这个用户去创建数据库模式，因为数据库那个用户创建的默认Owner就是这个用户\n创建用户：CREATE USER $user_name PASSWORD '$password';\n创建角色：CREATE ROLE $role_name;\n \n修改用户与角色：ALTER USER[ROLE] $user_name \n        e.g.\n        //修改用户名：ALTER USER U2 RENAME TO U22;\n        //修改用户的密码：ALTER USER U22 PASSWORD'U22;\n        //修改用户的权限：ALTER USER u22 CREATEROLE;\n        //修改数据库 testdb中的参数重设为默认值：ALTER USER u22 IN DATABASE testdb RESET all1;\n        //修改角色的名字：ALTER ROLE dev RENAME TO dev1;\n        //修改角色的权限：ALTER ROLE dev1 SUPERUSER;\n        //修改角色的权限：ALTER ROLE dev1 LOGIN;\n \n删除用户与角色：DROP USER[ROLE] [IF EXISTS] $user_name\n \n授权用户某个角色:GRANT $role_name TO $user_name;    (授权后set role $role_name启用生效）\n \n\ncreate user test with password 'rong ';\nCREATE DATABASE testdb OWNER test;\nGRANT ALL PRIVILEGES ON DATABASE testdb TO test;\nalter user qh with password '123';\n\\password qh;  //需要输入两次密码（推荐）\n\n\n```\n\n\n\n## manggodb\n[详细使用教程](https://www.runoob.com/mongodb/mongodb-tutorial.html)\n```\ndocker run -itd --name mongo -v /docker_volume/mongodb/data:/data/db -p 27017:27017 mongo:4.4 --auth\n–auth：需要密码才能访问容器服务；\nmongodb安装好后第一次进入是不需要密码的，也没有任何用户，通过shell命令可直接进入\nuse admin 使用admin数据库并进行验证，如果不验证，是做不了任何操作的\ndb.auth(\"root\",\"123456\")  返回1表示成功 \n验证之后还是做不了操作，因为root只有用户管理权限，下面创建用户，用户都跟着库走\nuse mydb \ndb.createUser({user: \"admin\",pwd: \"123456\",roles: [{ role: \"readWrite\", db: \"mydb\" }]}) \n通过admin用户增删改查\n\n\ndocker exec -it mongo mongo admin\n\n\ndb.createUser({ user:'root',pwd:'123456',roles:[ { role:'userAdminAnyDatabase', db: 'admin'},'readWriteAnyDatabase']});\n【role:‘userAdminAnyDatabase’】：只在admin数据库中可用，赋予用户所有数据库的userAdmin权限\n【db: ‘admin’】：可操作的数据库\n【‘readWriteAnyDatabase’】：赋予用户读写权限\nmongoDB 没有无敌用户root，只有能管理用户的用户 userAdminAnyDatabase \n\n\nSQL 术语/概念\tMongoDB 术语/概念   解释/说明\ndatabase\t    database\t       数据库\ntable\t        collection\t       数据库表/集合\nrow\t            document\t       数据记录行/文档\ncolumn\t        field\t           数据字段/域\nindex\t        index\t           索引\ntable joins\t \t表连接,            MongoDB不支持\nprimary key\t    primary key\t       主键,MongoDB自动将_id字段设置为主键\n```\n## sqlserver\n```\ndocker run -d \\\n  --name sqlserver --user=root \\\n  -e \"ACCEPT_EULA=Y\" \\\n  -e \"SA_PASSWORD=Testing@123\"  -p 1433:1433  -v /data/sqlserver:/var/opt/mssql \\\n  --cap-add SYS_PTRACE mcr.microsoft.com/mssql/server:2019-latest\n\n  /opt/mssql-tools18/bin/sqlcmd -S localhost -U SA -P \"Testing@123\" -C\n  \n-- 数据库级\n  SELECT name, type_desc FROM sys.database_principals WHERE type IN ('S', 'U', 'G');\n  select * from master.dbo.SysDatabases\n  --服务器级\n  SELECT name, type_desc FROM sys.server_principals WHERE type IN ('S', 'U', 'G');\n  go\n  SELECT DB_NAME() AS [CurrentDatabase];\n  USE master; SELECT name FROM sys.schemas\n  USE master; SELECT name FROM sys.tables\n  SELECT name, USER_NAME(principal_id) FROM sys.schemas;\n\nCREATE TABLE Users (    UserID INT PRIMARY KEY IDENTITY(1,1),     UserName NVARCHAR(50) NOT NULL,   Email NVARCHAR(100) NOT NULL, RegistrationDate DATETIME DEFAULT GETDATE(), IsActive BIT DEFAULT 1);\nINSERT INTO Users (UserName, Email) VALUES     ('王五', 'wangwu@example.com'),    ('赵六', 'zhaoliu@example.com'),    ('孙七', 'sunqi@example.com');\n\n--cdc\nuse y_test\nEXEC sys.sp_cdc_enable_db;\ngo\n SELECT name AS [y_test],    is_cdc_enabled AS [CDCEnabled]FROM   sys.databases WHERE     name = DB_NAME(); \n```\n","slug":"数据库","published":1,"updated":"2025-08-28T06:39:18.236Z","comments":1,"layout":"post","photos":[],"_id":"cmev1ggdf001phllzgs78fsdq","content":"<h1 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h1><h2 id=\"mysql\"><a href=\"#mysql\" class=\"headerlink\" title=\"mysql\"></a>mysql</h2><p><a href=\"https://cloud.tencent.com/developer/article/1992920\">索引失效情况</a></p>\n<h3 id=\"回表概念\"><a href=\"#回表概念\" class=\"headerlink\" title=\"回表概念\"></a>回表概念</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.聚集索引的B+树，性能最优，叶子节点存储的数据是整行的所有字段数据(主键索引)</span><br><span class=\"line\">2.非聚集索引的B+树，非聚集索引列可能是一列，也可能是多列（联合索引），</span><br><span class=\"line\">  叶子节点存储的数据是非聚集索引列（1列或多列）的数据和聚集索引列</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">用户user表4列（id, userCode, userName, userSex）</span><br><span class=\"line\">id是主键（聚集索引）；userCode 是非聚集索引，此时会创建2个索引的B+树</span><br><span class=\"line\"></span><br><span class=\"line\">聚集索引的B+树，叶子节点保存了4列（id, userCode, userName, userSex）的数据</span><br><span class=\"line\">非聚集索引的B+树，叶子节点保存了2列（id, userCode）的数据</span><br><span class=\"line\"></span><br><span class=\"line\">不回表</span><br><span class=\"line\">走主键索引不回表，因为挂载的是整列数据</span><br><span class=\"line\">select * from user where id = 1 </span><br><span class=\"line\">走非聚集索引不回表，因为叶子结点挂载了非聚集索引和聚集索引的值</span><br><span class=\"line\">select id,userCode from user where userCode = 1 </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">回表</span><br><span class=\"line\">因为查询的列除了主键id和非聚集索引userCode还有</span><br><span class=\"line\">userName, userSex，这两个叶子节点没有存数据，会通过主键索引id回表来</span><br><span class=\"line\">查询userName, userSex的值，因为主键索引id挂载的整列的值</span><br><span class=\"line\">select id,userCode，userSex from user where userCode = 1</span><br><span class=\"line\">select id,userCode，userName from user where userCode = 1</span><br><span class=\"line\">select * from user where userCode = 1</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"常用sql元数据\"><a href=\"#常用sql元数据\" class=\"headerlink\" title=\"常用sql元数据\"></a>常用sql元数据</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#指定数据库的详细信息</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> </span><br><span class=\"line\">  TABLE_SCHEMA <span class=\"keyword\">AS</span> <span class=\"string\">&#x27;数据库&#x27;</span>,</span><br><span class=\"line\">  TABLE_NAME <span class=\"keyword\">AS</span> <span class=\"string\">&#x27;表名&#x27;</span>,</span><br><span class=\"line\">  TABLE_ROWS <span class=\"keyword\">AS</span> `行数`,</span><br><span class=\"line\">  ROUND( (DATA_LENGTH <span class=\"operator\">+</span> INDEX_LENGTH) <span class=\"operator\">/</span> <span class=\"number\">1024</span> <span class=\"operator\">/</span> <span class=\"number\">1024</span>, <span class=\"number\">2</span>) <span class=\"keyword\">AS</span> <span class=\"string\">&#x27;总大小(MB)&#x27;</span>,</span><br><span class=\"line\">  ROUND(DATA_LENGTH <span class=\"operator\">/</span> <span class=\"number\">1024</span> <span class=\"operator\">/</span> <span class=\"number\">1024</span>, <span class=\"number\">2</span>) <span class=\"keyword\">AS</span> <span class=\"string\">&#x27;数据大小(MB)&#x27;</span>,</span><br><span class=\"line\">  ROUND(INDEX_LENGTH <span class=\"operator\">/</span> <span class=\"number\">1024</span> <span class=\"operator\">/</span> <span class=\"number\">1024</span>, <span class=\"number\">2</span>) <span class=\"keyword\">AS</span> <span class=\"string\">&#x27;索引大小(MB)&#x27;</span>,</span><br><span class=\"line\">  TABLE_ROWS <span class=\"keyword\">AS</span> <span class=\"string\">&#x27;数据行数（估算值）&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> information_schema.TABLES</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> TABLE_SCHEMA <span class=\"operator\">=</span> <span class=\"string\">&#x27;y_back&#x27;</span>  <span class=\"comment\">-- 替换为你的数据库名</span></span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> (DATA_LENGTH <span class=\"operator\">+</span> INDEX_LENGTH) <span class=\"keyword\">DESC</span>;  <span class=\"comment\">-- 按总大小排序</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#数据库表的行数</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> </span><br><span class=\"line\">  TABLE_NAME <span class=\"keyword\">AS</span> <span class=\"string\">&#x27;表名&#x27;</span>,</span><br><span class=\"line\">  TABLE_ROWS <span class=\"keyword\">AS</span> <span class=\"string\">&#x27;估算行数&#x27;</span>,</span><br><span class=\"line\">  (<span class=\"keyword\">SELECT</span> <span class=\"built_in\">COUNT</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">FROM</span> y_back.t_work) <span class=\"keyword\">AS</span> <span class=\"string\">&#x27;精确行数&#x27;</span>  <span class=\"comment\">-- 替换为实际表名</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> information_schema.TABLES</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> TABLE_SCHEMA <span class=\"operator\">=</span> <span class=\"string\">&#x27;y_back&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">#<span class=\"keyword\">all</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">\ttable_schema <span class=\"keyword\">AS</span> <span class=\"string\">&#x27;数据库&#x27;</span>,</span><br><span class=\"line\">\t<span class=\"built_in\">sum</span>( table_rows ) <span class=\"keyword\">AS</span> <span class=\"string\">&#x27;记录数&#x27;</span>,</span><br><span class=\"line\">\t<span class=\"built_in\">sum</span>(</span><br><span class=\"line\">\t<span class=\"keyword\">TRUNCATE</span> ( data_length <span class=\"operator\">/</span> <span class=\"number\">1024</span> <span class=\"operator\">/</span> <span class=\"number\">1024</span>, <span class=\"number\">2</span> )) <span class=\"keyword\">AS</span> <span class=\"string\">&#x27;数据容量(MB)&#x27;</span>,</span><br><span class=\"line\">\t<span class=\"built_in\">sum</span>(</span><br><span class=\"line\">\t<span class=\"keyword\">TRUNCATE</span> ( index_length <span class=\"operator\">/</span> <span class=\"number\">1024</span> <span class=\"operator\">/</span> <span class=\"number\">1024</span>, <span class=\"number\">2</span> )) <span class=\"keyword\">AS</span> <span class=\"string\">&#x27;索引容量(MB)&#x27;</span> </span><br><span class=\"line\"><span class=\"keyword\">FROM</span></span><br><span class=\"line\">\tinformation_schema.TABLES </span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span></span><br><span class=\"line\">\ttable_schema </span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span></span><br><span class=\"line\">\t<span class=\"built_in\">sum</span>( data_length ) <span class=\"keyword\">DESC</span>,</span><br><span class=\"line\">\t<span class=\"built_in\">sum</span>( index_length ) <span class=\"keyword\">DESC</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">#过滤元数据库</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">  table_schema <span class=\"keyword\">AS</span> <span class=\"string\">&#x27;数据库&#x27;</span>,</span><br><span class=\"line\">  <span class=\"built_in\">SUM</span>(table_rows) <span class=\"keyword\">AS</span> <span class=\"string\">&#x27;记录数&#x27;</span>,</span><br><span class=\"line\">  <span class=\"keyword\">TRUNCATE</span>(<span class=\"built_in\">SUM</span>(data_length) <span class=\"operator\">/</span> <span class=\"number\">1024</span> <span class=\"operator\">/</span> <span class=\"number\">1024</span>, <span class=\"number\">2</span>) <span class=\"keyword\">AS</span> <span class=\"string\">&#x27;数据容量(MB)&#x27;</span>,  <span class=\"comment\">-- 先求和再转换单位</span></span><br><span class=\"line\">  <span class=\"keyword\">TRUNCATE</span>(<span class=\"built_in\">SUM</span>(index_length) <span class=\"operator\">/</span> <span class=\"number\">1024</span> <span class=\"operator\">/</span> <span class=\"number\">1024</span>, <span class=\"number\">2</span>) <span class=\"keyword\">AS</span> <span class=\"string\">&#x27;索引容量(MB)&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span></span><br><span class=\"line\">  information_schema.TABLES</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span></span><br><span class=\"line\">  table_schema <span class=\"keyword\">NOT</span> <span class=\"keyword\">IN</span> (</span><br><span class=\"line\">    <span class=\"string\">&#x27;information_schema&#x27;</span>, </span><br><span class=\"line\">    <span class=\"string\">&#x27;mysql&#x27;</span>, </span><br><span class=\"line\">    <span class=\"string\">&#x27;performance_schema&#x27;</span>, </span><br><span class=\"line\">    <span class=\"string\">&#x27;sys&#x27;</span></span><br><span class=\"line\">  )</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span></span><br><span class=\"line\">  table_schema</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span></span><br><span class=\"line\">  <span class=\"built_in\">SUM</span>(data_length) <span class=\"keyword\">DESC</span>,</span><br><span class=\"line\">  <span class=\"built_in\">SUM</span>(index_length) <span class=\"keyword\">DESC</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">ANALYZE <span class=\"keyword\">TABLE</span> <span class=\"operator\">-</span> 更新统计信息</span><br><span class=\"line\">OPTIMIZE <span class=\"keyword\">TABLE</span> <span class=\"operator\">-</span> 表优化重组俗称清理碎片</span><br><span class=\"line\"></span><br><span class=\"line\">#造数据</span><br><span class=\"line\"><span class=\"keyword\">CREATE TABLE</span> `t_work_db01` (</span><br><span class=\"line\">  `id` <span class=\"type\">bigint</span> <span class=\"keyword\">NOT NULL</span> AUTO_INCREMENT,</span><br><span class=\"line\">  `name` <span class=\"type\">varchar</span>(<span class=\"number\">256</span>) <span class=\"keyword\">CHARACTER SET</span> utf8mb3 <span class=\"keyword\">COLLATE</span> utf8mb3_general_ci <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  `age` <span class=\"type\">int</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  `sex` <span class=\"type\">char</span>(<span class=\"number\">1</span>) <span class=\"keyword\">CHARACTER SET</span> utf8mb3 <span class=\"keyword\">COLLATE</span> utf8mb3_general_ci <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  `money` <span class=\"type\">float</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;金额&#x27;</span>,</span><br><span class=\"line\">  <span class=\"keyword\">PRIMARY KEY</span> (`id`)</span><br><span class=\"line\">) ENGINE<span class=\"operator\">=</span>InnoDB AUTO_INCREMENT<span class=\"operator\">=</span><span class=\"number\">100001</span> <span class=\"keyword\">DEFAULT</span> CHARSET<span class=\"operator\">=</span>utf8mb3 ROW_FORMAT<span class=\"operator\">=</span><span class=\"keyword\">DYNAMIC</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">DELIMITER $$</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> InsertDummyData()</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">    <span class=\"keyword\">DECLARE</span> i <span class=\"type\">INT</span> <span class=\"keyword\">DEFAULT</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    WHILE i <span class=\"operator\">&lt;</span> <span class=\"number\">100000</span> DO</span><br><span class=\"line\">        <span class=\"keyword\">INSERT INTO</span> t_work (NAME, age, sex, money)</span><br><span class=\"line\">        <span class=\"keyword\">VALUES</span> (</span><br><span class=\"line\">            <span class=\"comment\">-- 随机生成用户名（示例：User_XXXX）</span></span><br><span class=\"line\">            CONCAT(<span class=\"string\">&#x27;User_&#x27;</span>, <span class=\"built_in\">SUBSTRING</span>(MD5(RAND()) <span class=\"keyword\">FROM</span> <span class=\"number\">1</span> <span class=\"keyword\">FOR</span> <span class=\"number\">8</span>)),</span><br><span class=\"line\">            <span class=\"comment\">-- 随机年龄 18~65 岁</span></span><br><span class=\"line\">            <span class=\"built_in\">FLOOR</span>(<span class=\"number\">18</span> <span class=\"operator\">+</span> RAND() <span class=\"operator\">*</span> <span class=\"number\">48</span>),</span><br><span class=\"line\">            <span class=\"comment\">-- 随机性别（M/F）</span></span><br><span class=\"line\">            IF(RAND() <span class=\"operator\">&lt;</span> <span class=\"number\">0.5</span>, <span class=\"string\">&#x27;M&#x27;</span>, <span class=\"string\">&#x27;F&#x27;</span>),</span><br><span class=\"line\">            <span class=\"comment\">-- 随机金额 1000~10000（保留两位小数）</span></span><br><span class=\"line\">            ROUND(<span class=\"number\">1000</span> <span class=\"operator\">+</span> RAND() <span class=\"operator\">*</span> <span class=\"number\">9000</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">        );</span><br><span class=\"line\">        <span class=\"keyword\">SET</span> i <span class=\"operator\">=</span> i <span class=\"operator\">+</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">END</span> WHILE;</span><br><span class=\"line\"><span class=\"keyword\">END</span>$$</span><br><span class=\"line\">DELIMITER ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 执行存储过程</span></span><br><span class=\"line\"><span class=\"keyword\">CALL</span> InsertDummyData();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">PROCEDURE</span> IF <span class=\"keyword\">EXISTS</span> InsertDummyData;  <span class=\"comment\">-- 强制删除（如果存在）</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"mysql读写分离\"><a href=\"#mysql读写分离\" class=\"headerlink\" title=\"mysql读写分离\"></a>mysql读写分离</h3><p><a href=\"https://github.com/sysown/proxysql\">github</a> <br><br><a href=\"https://www.cnblogs.com/keme/p/12290977.html\">ProxySql</a><br><br><a href=\"https://www.cnblogs.com/ejiyuan/p/17156065.html\">MaxScale</a></p>\n<h3 id=\"mysql分表分库\"><a href=\"#mysql分表分库\" class=\"headerlink\" title=\"mysql分表分库\"></a>mysql分表分库</h3><p><a href=\"https://cloud.tencent.com/developer/article/2349899\">mycat</a></p>\n<h2 id=\"pgsql\"><a href=\"#pgsql\" class=\"headerlink\" title=\"pgsql\"></a>pgsql</h2><p><a href=\"https://www.sjkjc.com/postgresql/psql-commands/\">PostgreSQL psql 常用命令</a></p>\n<h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PUBLIC 是 PostgreSQL 数据库中一个特殊的角色组，在元数据表（pg_roles）中都查不到该角色，</span><br><span class=\"line\">数据库中所创建的角色都可以理解为是 PUBLIC 角色组成员。</span><br><span class=\"line\">而且对 PUBLIC 权限的继承完全不受 NOINHERIT 的控制，</span><br><span class=\"line\">一旦创建了一个拥有 login 权限的角色，它会立即继承 PUBLIC 角色组拥有的权限，</span><br><span class=\"line\">此时如果想通过 revoke（比如 revoke connect on database）来回收的话不会成功，</span><br><span class=\"line\">只能从 PUBLIC 组回收相关权限（比如 revoke connect on database from PUBLIC）</span><br><span class=\"line\"></span><br><span class=\"line\">REVOKE CONNECT ON DATABASE test FROM PUBLIC;</span><br><span class=\"line\">--这样普通用户就无法自由切换数据库，默认数据库下面有一个public的scheme</span><br><span class=\"line\"></span><br><span class=\"line\">MySQL 的 datadir ≈ PostgreSQL 的默认表空间 pg_default</span><br><span class=\"line\">PostgreSQL 的 pg_default 表空间对应默认数据目录（由参数 data_directory 配置），类似于 MySQL 的 datadir。</span><br><span class=\"line\">PostgreSQL 的数据库 ≈ MySQL 的实例（但更轻量）。</span><br><span class=\"line\">PostgreSQL 的模式 ≈ MySQL 的数据库</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"基本使用命令\"><a href=\"#基本使用命令\" class=\"headerlink\" title=\"基本使用命令\"></a>基本使用命令</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -id --name=pgsql -v postgre-data:/var/lib/postgresql/data -p 54222:5432 -e POSTGRES_PASSWORD=123456 -e LANG=C.UTF-8 bitnami/postgresql</span><br><span class=\"line\"></span><br><span class=\"line\">docker exec -it -uroot pgsql bash</span><br><span class=\"line\">psql -U postgres -W -n</span><br><span class=\"line\">cat .psql_history </span><br><span class=\"line\">psql -h host -p port -d dbname -U  user -W</span><br><span class=\"line\"></span><br><span class=\"line\">使用反斜线作为命令前缀.</span><br><span class=\"line\">  postgres=# \\db</span><br><span class=\"line\"># 输出的信息如下：</span><br><span class=\"line\">       List of tablespaces</span><br><span class=\"line\">    Name    |  Owner   | Location </span><br><span class=\"line\">------------+----------+----------</span><br><span class=\"line\"> pg_default | postgres | </span><br><span class=\"line\"> pg_global  | postgres | </span><br><span class=\"line\">(2 rows)</span><br><span class=\"line\"></span><br><span class=\"line\">退出    \\q</span><br><span class=\"line\"> 列出所有的数据库      \\l</span><br><span class=\"line\"> 列出所有的数据库的大小      \\l+</span><br><span class=\"line\"> 更改当前连接的数据库       \\c</span><br><span class=\"line\"> 列出当前数据库的连接信息    \\connect</span><br><span class=\"line\"> 列出当前数据库和连接的详细信息 \\conninfo</span><br><span class=\"line\"> 查看当前数据库里面的表和拥有者和表大小         \\dt+</span><br><span class=\"line\"> 展示所有用户           \\dg</span><br><span class=\"line\"> ​模式 \\dn</span><br><span class=\"line\"> 查看所有表名的列表             \\d</span><br><span class=\"line\"> 获取表结构                   \\da</span><br><span class=\"line\"> 展示所有用户               \\du</span><br><span class=\"line\"> 查看t_sms表的结构      \\d t_sms </span><br><span class=\"line\"> 展示数据库里面的所有的表         \\dt</span><br><span class=\"line\"> 列出所有的数据库的详细信息（包括数据库大小和字符格式）         \\l+</span><br><span class=\"line\"> 显示用户访问权限。                            \\z或\\dp</span><br><span class=\"line\"> 显示所有可设置的访问权限                     \\h GRAN</span><br><span class=\"line\"> 显示用户的对所有数据库表的详细访问权限     \\dp或者\\z</span><br><span class=\"line\"> 确认当前连接的用户为超级用户postgres，且该用户后创建角色和数据库的权限等     #select current_user;</span><br><span class=\"line\"> 在超级用户连接postgres后，设置不允许普通用户a连接数据库         #alter role a nologin;</span><br><span class=\"line\"> ​</span><br><span class=\"line\"> 使用普通用户a连接数据库正常                   #\\c highgo a</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">快速查看当前所有用户：\\du</span><br><span class=\"line\">查看详细用户信息：select * from pg_user;</span><br><span class=\"line\">查看详细角色信息：select * from pg_roles;</span><br><span class=\"line\">查看当前登录用户：select user;</span><br><span class=\"line\">一般建议先创建用户然后使用这个用户去创建数据库模式，因为数据库那个用户创建的默认Owner就是这个用户</span><br><span class=\"line\">创建用户：CREATE USER $user_name PASSWORD &#x27;$password&#x27;;</span><br><span class=\"line\">创建角色：CREATE ROLE $role_name;</span><br><span class=\"line\"> </span><br><span class=\"line\">修改用户与角色：ALTER USER[ROLE] $user_name </span><br><span class=\"line\">        e.g.</span><br><span class=\"line\">        //修改用户名：ALTER USER U2 RENAME TO U22;</span><br><span class=\"line\">        //修改用户的密码：ALTER USER U22 PASSWORD&#x27;U22;</span><br><span class=\"line\">        //修改用户的权限：ALTER USER u22 CREATEROLE;</span><br><span class=\"line\">        //修改数据库 testdb中的参数重设为默认值：ALTER USER u22 IN DATABASE testdb RESET all1;</span><br><span class=\"line\">        //修改角色的名字：ALTER ROLE dev RENAME TO dev1;</span><br><span class=\"line\">        //修改角色的权限：ALTER ROLE dev1 SUPERUSER;</span><br><span class=\"line\">        //修改角色的权限：ALTER ROLE dev1 LOGIN;</span><br><span class=\"line\"> </span><br><span class=\"line\">删除用户与角色：DROP USER[ROLE] [IF EXISTS] $user_name</span><br><span class=\"line\"> </span><br><span class=\"line\">授权用户某个角色:GRANT $role_name TO $user_name;    (授权后set role $role_name启用生效）</span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">create user test with password &#x27;rong &#x27;;</span><br><span class=\"line\">CREATE DATABASE testdb OWNER test;</span><br><span class=\"line\">GRANT ALL PRIVILEGES ON DATABASE testdb TO test;</span><br><span class=\"line\">alter user qh with password &#x27;123&#x27;;</span><br><span class=\"line\">\\password qh;  //需要输入两次密码（推荐）</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"manggodb\"><a href=\"#manggodb\" class=\"headerlink\" title=\"manggodb\"></a>manggodb</h2><p><a href=\"https://www.runoob.com/mongodb/mongodb-tutorial.html\">详细使用教程</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -itd --name mongo -v /docker_volume/mongodb/data:/data/db -p 27017:27017 mongo:4.4 --auth</span><br><span class=\"line\">–auth：需要密码才能访问容器服务；</span><br><span class=\"line\">mongodb安装好后第一次进入是不需要密码的，也没有任何用户，通过shell命令可直接进入</span><br><span class=\"line\">use admin 使用admin数据库并进行验证，如果不验证，是做不了任何操作的</span><br><span class=\"line\">db.auth(&quot;root&quot;,&quot;123456&quot;)  返回1表示成功 </span><br><span class=\"line\">验证之后还是做不了操作，因为root只有用户管理权限，下面创建用户，用户都跟着库走</span><br><span class=\"line\">use mydb </span><br><span class=\"line\">db.createUser(&#123;user: &quot;admin&quot;,pwd: &quot;123456&quot;,roles: [&#123; role: &quot;readWrite&quot;, db: &quot;mydb&quot; &#125;]&#125;) </span><br><span class=\"line\">通过admin用户增删改查</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">docker exec -it mongo mongo admin</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">db.createUser(&#123; user:&#x27;root&#x27;,pwd:&#x27;123456&#x27;,roles:[ &#123; role:&#x27;userAdminAnyDatabase&#x27;, db: &#x27;admin&#x27;&#125;,&#x27;readWriteAnyDatabase&#x27;]&#125;);</span><br><span class=\"line\">【role:‘userAdminAnyDatabase’】：只在admin数据库中可用，赋予用户所有数据库的userAdmin权限</span><br><span class=\"line\">【db: ‘admin’】：可操作的数据库</span><br><span class=\"line\">【‘readWriteAnyDatabase’】：赋予用户读写权限</span><br><span class=\"line\">mongoDB 没有无敌用户root，只有能管理用户的用户 userAdminAnyDatabase </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">SQL 术语/概念\tMongoDB 术语/概念   解释/说明</span><br><span class=\"line\">database\t    database\t       数据库</span><br><span class=\"line\">table\t        collection\t       数据库表/集合</span><br><span class=\"line\">row\t            document\t       数据记录行/文档</span><br><span class=\"line\">column\t        field\t           数据字段/域</span><br><span class=\"line\">index\t        index\t           索引</span><br><span class=\"line\">table joins\t \t表连接,            MongoDB不支持</span><br><span class=\"line\">primary key\t    primary key\t       主键,MongoDB自动将_id字段设置为主键</span><br></pre></td></tr></table></figure>\n<h2 id=\"sqlserver\"><a href=\"#sqlserver\" class=\"headerlink\" title=\"sqlserver\"></a>sqlserver</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d \\</span><br><span class=\"line\">  --name sqlserver --user=root \\</span><br><span class=\"line\">  -e &quot;ACCEPT_EULA=Y&quot; \\</span><br><span class=\"line\">  -e &quot;SA_PASSWORD=Testing@123&quot;  -p 1433:1433  -v /data/sqlserver:/var/opt/mssql \\</span><br><span class=\"line\">  --cap-add SYS_PTRACE mcr.microsoft.com/mssql/server:2019-latest</span><br><span class=\"line\"></span><br><span class=\"line\">  /opt/mssql-tools18/bin/sqlcmd -S localhost -U SA -P &quot;Testing@123&quot; -C</span><br><span class=\"line\">  </span><br><span class=\"line\">-- 数据库级</span><br><span class=\"line\">  SELECT name, type_desc FROM sys.database_principals WHERE type IN (&#x27;S&#x27;, &#x27;U&#x27;, &#x27;G&#x27;);</span><br><span class=\"line\">  select * from master.dbo.SysDatabases</span><br><span class=\"line\">  --服务器级</span><br><span class=\"line\">  SELECT name, type_desc FROM sys.server_principals WHERE type IN (&#x27;S&#x27;, &#x27;U&#x27;, &#x27;G&#x27;);</span><br><span class=\"line\">  go</span><br><span class=\"line\">  SELECT DB_NAME() AS [CurrentDatabase];</span><br><span class=\"line\">  USE master; SELECT name FROM sys.schemas</span><br><span class=\"line\">  USE master; SELECT name FROM sys.tables</span><br><span class=\"line\">  SELECT name, USER_NAME(principal_id) FROM sys.schemas;</span><br><span class=\"line\"></span><br><span class=\"line\">CREATE TABLE Users (    UserID INT PRIMARY KEY IDENTITY(1,1),     UserName NVARCHAR(50) NOT NULL,   Email NVARCHAR(100) NOT NULL, RegistrationDate DATETIME DEFAULT GETDATE(), IsActive BIT DEFAULT 1);</span><br><span class=\"line\">INSERT INTO Users (UserName, Email) VALUES     (&#x27;王五&#x27;, &#x27;wangwu@example.com&#x27;),    (&#x27;赵六&#x27;, &#x27;zhaoliu@example.com&#x27;),    (&#x27;孙七&#x27;, &#x27;sunqi@example.com&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">--cdc</span><br><span class=\"line\">use y_test</span><br><span class=\"line\">EXEC sys.sp_cdc_enable_db;</span><br><span class=\"line\">go</span><br><span class=\"line\"> SELECT name AS [y_test],    is_cdc_enabled AS [CDCEnabled]FROM   sys.databases WHERE     name = DB_NAME(); </span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h1><h2 id=\"mysql\"><a href=\"#mysql\" class=\"headerlink\" title=\"mysql\"></a>mysql</h2><p><a href=\"https://cloud.tencent.com/developer/article/1992920\">索引失效情况</a></p>\n<h3 id=\"回表概念\"><a href=\"#回表概念\" class=\"headerlink\" title=\"回表概念\"></a>回表概念</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.聚集索引的B+树，性能最优，叶子节点存储的数据是整行的所有字段数据(主键索引)</span><br><span class=\"line\">2.非聚集索引的B+树，非聚集索引列可能是一列，也可能是多列（联合索引），</span><br><span class=\"line\">  叶子节点存储的数据是非聚集索引列（1列或多列）的数据和聚集索引列</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">用户user表4列（id, userCode, userName, userSex）</span><br><span class=\"line\">id是主键（聚集索引）；userCode 是非聚集索引，此时会创建2个索引的B+树</span><br><span class=\"line\"></span><br><span class=\"line\">聚集索引的B+树，叶子节点保存了4列（id, userCode, userName, userSex）的数据</span><br><span class=\"line\">非聚集索引的B+树，叶子节点保存了2列（id, userCode）的数据</span><br><span class=\"line\"></span><br><span class=\"line\">不回表</span><br><span class=\"line\">走主键索引不回表，因为挂载的是整列数据</span><br><span class=\"line\">select * from user where id = 1 </span><br><span class=\"line\">走非聚集索引不回表，因为叶子结点挂载了非聚集索引和聚集索引的值</span><br><span class=\"line\">select id,userCode from user where userCode = 1 </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">回表</span><br><span class=\"line\">因为查询的列除了主键id和非聚集索引userCode还有</span><br><span class=\"line\">userName, userSex，这两个叶子节点没有存数据，会通过主键索引id回表来</span><br><span class=\"line\">查询userName, userSex的值，因为主键索引id挂载的整列的值</span><br><span class=\"line\">select id,userCode，userSex from user where userCode = 1</span><br><span class=\"line\">select id,userCode，userName from user where userCode = 1</span><br><span class=\"line\">select * from user where userCode = 1</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"常用sql元数据\"><a href=\"#常用sql元数据\" class=\"headerlink\" title=\"常用sql元数据\"></a>常用sql元数据</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#指定数据库的详细信息</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> </span><br><span class=\"line\">  TABLE_SCHEMA <span class=\"keyword\">AS</span> <span class=\"string\">&#x27;数据库&#x27;</span>,</span><br><span class=\"line\">  TABLE_NAME <span class=\"keyword\">AS</span> <span class=\"string\">&#x27;表名&#x27;</span>,</span><br><span class=\"line\">  TABLE_ROWS <span class=\"keyword\">AS</span> `行数`,</span><br><span class=\"line\">  ROUND( (DATA_LENGTH <span class=\"operator\">+</span> INDEX_LENGTH) <span class=\"operator\">/</span> <span class=\"number\">1024</span> <span class=\"operator\">/</span> <span class=\"number\">1024</span>, <span class=\"number\">2</span>) <span class=\"keyword\">AS</span> <span class=\"string\">&#x27;总大小(MB)&#x27;</span>,</span><br><span class=\"line\">  ROUND(DATA_LENGTH <span class=\"operator\">/</span> <span class=\"number\">1024</span> <span class=\"operator\">/</span> <span class=\"number\">1024</span>, <span class=\"number\">2</span>) <span class=\"keyword\">AS</span> <span class=\"string\">&#x27;数据大小(MB)&#x27;</span>,</span><br><span class=\"line\">  ROUND(INDEX_LENGTH <span class=\"operator\">/</span> <span class=\"number\">1024</span> <span class=\"operator\">/</span> <span class=\"number\">1024</span>, <span class=\"number\">2</span>) <span class=\"keyword\">AS</span> <span class=\"string\">&#x27;索引大小(MB)&#x27;</span>,</span><br><span class=\"line\">  TABLE_ROWS <span class=\"keyword\">AS</span> <span class=\"string\">&#x27;数据行数（估算值）&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> information_schema.TABLES</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> TABLE_SCHEMA <span class=\"operator\">=</span> <span class=\"string\">&#x27;y_back&#x27;</span>  <span class=\"comment\">-- 替换为你的数据库名</span></span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> (DATA_LENGTH <span class=\"operator\">+</span> INDEX_LENGTH) <span class=\"keyword\">DESC</span>;  <span class=\"comment\">-- 按总大小排序</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#数据库表的行数</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> </span><br><span class=\"line\">  TABLE_NAME <span class=\"keyword\">AS</span> <span class=\"string\">&#x27;表名&#x27;</span>,</span><br><span class=\"line\">  TABLE_ROWS <span class=\"keyword\">AS</span> <span class=\"string\">&#x27;估算行数&#x27;</span>,</span><br><span class=\"line\">  (<span class=\"keyword\">SELECT</span> <span class=\"built_in\">COUNT</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">FROM</span> y_back.t_work) <span class=\"keyword\">AS</span> <span class=\"string\">&#x27;精确行数&#x27;</span>  <span class=\"comment\">-- 替换为实际表名</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> information_schema.TABLES</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> TABLE_SCHEMA <span class=\"operator\">=</span> <span class=\"string\">&#x27;y_back&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">#<span class=\"keyword\">all</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">\ttable_schema <span class=\"keyword\">AS</span> <span class=\"string\">&#x27;数据库&#x27;</span>,</span><br><span class=\"line\">\t<span class=\"built_in\">sum</span>( table_rows ) <span class=\"keyword\">AS</span> <span class=\"string\">&#x27;记录数&#x27;</span>,</span><br><span class=\"line\">\t<span class=\"built_in\">sum</span>(</span><br><span class=\"line\">\t<span class=\"keyword\">TRUNCATE</span> ( data_length <span class=\"operator\">/</span> <span class=\"number\">1024</span> <span class=\"operator\">/</span> <span class=\"number\">1024</span>, <span class=\"number\">2</span> )) <span class=\"keyword\">AS</span> <span class=\"string\">&#x27;数据容量(MB)&#x27;</span>,</span><br><span class=\"line\">\t<span class=\"built_in\">sum</span>(</span><br><span class=\"line\">\t<span class=\"keyword\">TRUNCATE</span> ( index_length <span class=\"operator\">/</span> <span class=\"number\">1024</span> <span class=\"operator\">/</span> <span class=\"number\">1024</span>, <span class=\"number\">2</span> )) <span class=\"keyword\">AS</span> <span class=\"string\">&#x27;索引容量(MB)&#x27;</span> </span><br><span class=\"line\"><span class=\"keyword\">FROM</span></span><br><span class=\"line\">\tinformation_schema.TABLES </span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span></span><br><span class=\"line\">\ttable_schema </span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span></span><br><span class=\"line\">\t<span class=\"built_in\">sum</span>( data_length ) <span class=\"keyword\">DESC</span>,</span><br><span class=\"line\">\t<span class=\"built_in\">sum</span>( index_length ) <span class=\"keyword\">DESC</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">#过滤元数据库</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">  table_schema <span class=\"keyword\">AS</span> <span class=\"string\">&#x27;数据库&#x27;</span>,</span><br><span class=\"line\">  <span class=\"built_in\">SUM</span>(table_rows) <span class=\"keyword\">AS</span> <span class=\"string\">&#x27;记录数&#x27;</span>,</span><br><span class=\"line\">  <span class=\"keyword\">TRUNCATE</span>(<span class=\"built_in\">SUM</span>(data_length) <span class=\"operator\">/</span> <span class=\"number\">1024</span> <span class=\"operator\">/</span> <span class=\"number\">1024</span>, <span class=\"number\">2</span>) <span class=\"keyword\">AS</span> <span class=\"string\">&#x27;数据容量(MB)&#x27;</span>,  <span class=\"comment\">-- 先求和再转换单位</span></span><br><span class=\"line\">  <span class=\"keyword\">TRUNCATE</span>(<span class=\"built_in\">SUM</span>(index_length) <span class=\"operator\">/</span> <span class=\"number\">1024</span> <span class=\"operator\">/</span> <span class=\"number\">1024</span>, <span class=\"number\">2</span>) <span class=\"keyword\">AS</span> <span class=\"string\">&#x27;索引容量(MB)&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span></span><br><span class=\"line\">  information_schema.TABLES</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span></span><br><span class=\"line\">  table_schema <span class=\"keyword\">NOT</span> <span class=\"keyword\">IN</span> (</span><br><span class=\"line\">    <span class=\"string\">&#x27;information_schema&#x27;</span>, </span><br><span class=\"line\">    <span class=\"string\">&#x27;mysql&#x27;</span>, </span><br><span class=\"line\">    <span class=\"string\">&#x27;performance_schema&#x27;</span>, </span><br><span class=\"line\">    <span class=\"string\">&#x27;sys&#x27;</span></span><br><span class=\"line\">  )</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span></span><br><span class=\"line\">  table_schema</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span></span><br><span class=\"line\">  <span class=\"built_in\">SUM</span>(data_length) <span class=\"keyword\">DESC</span>,</span><br><span class=\"line\">  <span class=\"built_in\">SUM</span>(index_length) <span class=\"keyword\">DESC</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">ANALYZE <span class=\"keyword\">TABLE</span> <span class=\"operator\">-</span> 更新统计信息</span><br><span class=\"line\">OPTIMIZE <span class=\"keyword\">TABLE</span> <span class=\"operator\">-</span> 表优化重组俗称清理碎片</span><br><span class=\"line\"></span><br><span class=\"line\">#造数据</span><br><span class=\"line\"><span class=\"keyword\">CREATE TABLE</span> `t_work_db01` (</span><br><span class=\"line\">  `id` <span class=\"type\">bigint</span> <span class=\"keyword\">NOT NULL</span> AUTO_INCREMENT,</span><br><span class=\"line\">  `name` <span class=\"type\">varchar</span>(<span class=\"number\">256</span>) <span class=\"keyword\">CHARACTER SET</span> utf8mb3 <span class=\"keyword\">COLLATE</span> utf8mb3_general_ci <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  `age` <span class=\"type\">int</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  `sex` <span class=\"type\">char</span>(<span class=\"number\">1</span>) <span class=\"keyword\">CHARACTER SET</span> utf8mb3 <span class=\"keyword\">COLLATE</span> utf8mb3_general_ci <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  `money` <span class=\"type\">float</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;金额&#x27;</span>,</span><br><span class=\"line\">  <span class=\"keyword\">PRIMARY KEY</span> (`id`)</span><br><span class=\"line\">) ENGINE<span class=\"operator\">=</span>InnoDB AUTO_INCREMENT<span class=\"operator\">=</span><span class=\"number\">100001</span> <span class=\"keyword\">DEFAULT</span> CHARSET<span class=\"operator\">=</span>utf8mb3 ROW_FORMAT<span class=\"operator\">=</span><span class=\"keyword\">DYNAMIC</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">DELIMITER $$</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> InsertDummyData()</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">    <span class=\"keyword\">DECLARE</span> i <span class=\"type\">INT</span> <span class=\"keyword\">DEFAULT</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    WHILE i <span class=\"operator\">&lt;</span> <span class=\"number\">100000</span> DO</span><br><span class=\"line\">        <span class=\"keyword\">INSERT INTO</span> t_work (NAME, age, sex, money)</span><br><span class=\"line\">        <span class=\"keyword\">VALUES</span> (</span><br><span class=\"line\">            <span class=\"comment\">-- 随机生成用户名（示例：User_XXXX）</span></span><br><span class=\"line\">            CONCAT(<span class=\"string\">&#x27;User_&#x27;</span>, <span class=\"built_in\">SUBSTRING</span>(MD5(RAND()) <span class=\"keyword\">FROM</span> <span class=\"number\">1</span> <span class=\"keyword\">FOR</span> <span class=\"number\">8</span>)),</span><br><span class=\"line\">            <span class=\"comment\">-- 随机年龄 18~65 岁</span></span><br><span class=\"line\">            <span class=\"built_in\">FLOOR</span>(<span class=\"number\">18</span> <span class=\"operator\">+</span> RAND() <span class=\"operator\">*</span> <span class=\"number\">48</span>),</span><br><span class=\"line\">            <span class=\"comment\">-- 随机性别（M/F）</span></span><br><span class=\"line\">            IF(RAND() <span class=\"operator\">&lt;</span> <span class=\"number\">0.5</span>, <span class=\"string\">&#x27;M&#x27;</span>, <span class=\"string\">&#x27;F&#x27;</span>),</span><br><span class=\"line\">            <span class=\"comment\">-- 随机金额 1000~10000（保留两位小数）</span></span><br><span class=\"line\">            ROUND(<span class=\"number\">1000</span> <span class=\"operator\">+</span> RAND() <span class=\"operator\">*</span> <span class=\"number\">9000</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">        );</span><br><span class=\"line\">        <span class=\"keyword\">SET</span> i <span class=\"operator\">=</span> i <span class=\"operator\">+</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">END</span> WHILE;</span><br><span class=\"line\"><span class=\"keyword\">END</span>$$</span><br><span class=\"line\">DELIMITER ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 执行存储过程</span></span><br><span class=\"line\"><span class=\"keyword\">CALL</span> InsertDummyData();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">PROCEDURE</span> IF <span class=\"keyword\">EXISTS</span> InsertDummyData;  <span class=\"comment\">-- 强制删除（如果存在）</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"mysql读写分离\"><a href=\"#mysql读写分离\" class=\"headerlink\" title=\"mysql读写分离\"></a>mysql读写分离</h3><p><a href=\"https://github.com/sysown/proxysql\">github</a> <br><br><a href=\"https://www.cnblogs.com/keme/p/12290977.html\">ProxySql</a><br><br><a href=\"https://www.cnblogs.com/ejiyuan/p/17156065.html\">MaxScale</a></p>\n<h3 id=\"mysql分表分库\"><a href=\"#mysql分表分库\" class=\"headerlink\" title=\"mysql分表分库\"></a>mysql分表分库</h3><p><a href=\"https://cloud.tencent.com/developer/article/2349899\">mycat</a></p>\n<h2 id=\"pgsql\"><a href=\"#pgsql\" class=\"headerlink\" title=\"pgsql\"></a>pgsql</h2><p><a href=\"https://www.sjkjc.com/postgresql/psql-commands/\">PostgreSQL psql 常用命令</a></p>\n<h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PUBLIC 是 PostgreSQL 数据库中一个特殊的角色组，在元数据表（pg_roles）中都查不到该角色，</span><br><span class=\"line\">数据库中所创建的角色都可以理解为是 PUBLIC 角色组成员。</span><br><span class=\"line\">而且对 PUBLIC 权限的继承完全不受 NOINHERIT 的控制，</span><br><span class=\"line\">一旦创建了一个拥有 login 权限的角色，它会立即继承 PUBLIC 角色组拥有的权限，</span><br><span class=\"line\">此时如果想通过 revoke（比如 revoke connect on database）来回收的话不会成功，</span><br><span class=\"line\">只能从 PUBLIC 组回收相关权限（比如 revoke connect on database from PUBLIC）</span><br><span class=\"line\"></span><br><span class=\"line\">REVOKE CONNECT ON DATABASE test FROM PUBLIC;</span><br><span class=\"line\">--这样普通用户就无法自由切换数据库，默认数据库下面有一个public的scheme</span><br><span class=\"line\"></span><br><span class=\"line\">MySQL 的 datadir ≈ PostgreSQL 的默认表空间 pg_default</span><br><span class=\"line\">PostgreSQL 的 pg_default 表空间对应默认数据目录（由参数 data_directory 配置），类似于 MySQL 的 datadir。</span><br><span class=\"line\">PostgreSQL 的数据库 ≈ MySQL 的实例（但更轻量）。</span><br><span class=\"line\">PostgreSQL 的模式 ≈ MySQL 的数据库</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"基本使用命令\"><a href=\"#基本使用命令\" class=\"headerlink\" title=\"基本使用命令\"></a>基本使用命令</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -id --name=pgsql -v postgre-data:/var/lib/postgresql/data -p 54222:5432 -e POSTGRES_PASSWORD=123456 -e LANG=C.UTF-8 bitnami/postgresql</span><br><span class=\"line\"></span><br><span class=\"line\">docker exec -it -uroot pgsql bash</span><br><span class=\"line\">psql -U postgres -W -n</span><br><span class=\"line\">cat .psql_history </span><br><span class=\"line\">psql -h host -p port -d dbname -U  user -W</span><br><span class=\"line\"></span><br><span class=\"line\">使用反斜线作为命令前缀.</span><br><span class=\"line\">  postgres=# \\db</span><br><span class=\"line\"># 输出的信息如下：</span><br><span class=\"line\">       List of tablespaces</span><br><span class=\"line\">    Name    |  Owner   | Location </span><br><span class=\"line\">------------+----------+----------</span><br><span class=\"line\"> pg_default | postgres | </span><br><span class=\"line\"> pg_global  | postgres | </span><br><span class=\"line\">(2 rows)</span><br><span class=\"line\"></span><br><span class=\"line\">退出    \\q</span><br><span class=\"line\"> 列出所有的数据库      \\l</span><br><span class=\"line\"> 列出所有的数据库的大小      \\l+</span><br><span class=\"line\"> 更改当前连接的数据库       \\c</span><br><span class=\"line\"> 列出当前数据库的连接信息    \\connect</span><br><span class=\"line\"> 列出当前数据库和连接的详细信息 \\conninfo</span><br><span class=\"line\"> 查看当前数据库里面的表和拥有者和表大小         \\dt+</span><br><span class=\"line\"> 展示所有用户           \\dg</span><br><span class=\"line\"> ​模式 \\dn</span><br><span class=\"line\"> 查看所有表名的列表             \\d</span><br><span class=\"line\"> 获取表结构                   \\da</span><br><span class=\"line\"> 展示所有用户               \\du</span><br><span class=\"line\"> 查看t_sms表的结构      \\d t_sms </span><br><span class=\"line\"> 展示数据库里面的所有的表         \\dt</span><br><span class=\"line\"> 列出所有的数据库的详细信息（包括数据库大小和字符格式）         \\l+</span><br><span class=\"line\"> 显示用户访问权限。                            \\z或\\dp</span><br><span class=\"line\"> 显示所有可设置的访问权限                     \\h GRAN</span><br><span class=\"line\"> 显示用户的对所有数据库表的详细访问权限     \\dp或者\\z</span><br><span class=\"line\"> 确认当前连接的用户为超级用户postgres，且该用户后创建角色和数据库的权限等     #select current_user;</span><br><span class=\"line\"> 在超级用户连接postgres后，设置不允许普通用户a连接数据库         #alter role a nologin;</span><br><span class=\"line\"> ​</span><br><span class=\"line\"> 使用普通用户a连接数据库正常                   #\\c highgo a</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">快速查看当前所有用户：\\du</span><br><span class=\"line\">查看详细用户信息：select * from pg_user;</span><br><span class=\"line\">查看详细角色信息：select * from pg_roles;</span><br><span class=\"line\">查看当前登录用户：select user;</span><br><span class=\"line\">一般建议先创建用户然后使用这个用户去创建数据库模式，因为数据库那个用户创建的默认Owner就是这个用户</span><br><span class=\"line\">创建用户：CREATE USER $user_name PASSWORD &#x27;$password&#x27;;</span><br><span class=\"line\">创建角色：CREATE ROLE $role_name;</span><br><span class=\"line\"> </span><br><span class=\"line\">修改用户与角色：ALTER USER[ROLE] $user_name </span><br><span class=\"line\">        e.g.</span><br><span class=\"line\">        //修改用户名：ALTER USER U2 RENAME TO U22;</span><br><span class=\"line\">        //修改用户的密码：ALTER USER U22 PASSWORD&#x27;U22;</span><br><span class=\"line\">        //修改用户的权限：ALTER USER u22 CREATEROLE;</span><br><span class=\"line\">        //修改数据库 testdb中的参数重设为默认值：ALTER USER u22 IN DATABASE testdb RESET all1;</span><br><span class=\"line\">        //修改角色的名字：ALTER ROLE dev RENAME TO dev1;</span><br><span class=\"line\">        //修改角色的权限：ALTER ROLE dev1 SUPERUSER;</span><br><span class=\"line\">        //修改角色的权限：ALTER ROLE dev1 LOGIN;</span><br><span class=\"line\"> </span><br><span class=\"line\">删除用户与角色：DROP USER[ROLE] [IF EXISTS] $user_name</span><br><span class=\"line\"> </span><br><span class=\"line\">授权用户某个角色:GRANT $role_name TO $user_name;    (授权后set role $role_name启用生效）</span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">create user test with password &#x27;rong &#x27;;</span><br><span class=\"line\">CREATE DATABASE testdb OWNER test;</span><br><span class=\"line\">GRANT ALL PRIVILEGES ON DATABASE testdb TO test;</span><br><span class=\"line\">alter user qh with password &#x27;123&#x27;;</span><br><span class=\"line\">\\password qh;  //需要输入两次密码（推荐）</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"manggodb\"><a href=\"#manggodb\" class=\"headerlink\" title=\"manggodb\"></a>manggodb</h2><p><a href=\"https://www.runoob.com/mongodb/mongodb-tutorial.html\">详细使用教程</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -itd --name mongo -v /docker_volume/mongodb/data:/data/db -p 27017:27017 mongo:4.4 --auth</span><br><span class=\"line\">–auth：需要密码才能访问容器服务；</span><br><span class=\"line\">mongodb安装好后第一次进入是不需要密码的，也没有任何用户，通过shell命令可直接进入</span><br><span class=\"line\">use admin 使用admin数据库并进行验证，如果不验证，是做不了任何操作的</span><br><span class=\"line\">db.auth(&quot;root&quot;,&quot;123456&quot;)  返回1表示成功 </span><br><span class=\"line\">验证之后还是做不了操作，因为root只有用户管理权限，下面创建用户，用户都跟着库走</span><br><span class=\"line\">use mydb </span><br><span class=\"line\">db.createUser(&#123;user: &quot;admin&quot;,pwd: &quot;123456&quot;,roles: [&#123; role: &quot;readWrite&quot;, db: &quot;mydb&quot; &#125;]&#125;) </span><br><span class=\"line\">通过admin用户增删改查</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">docker exec -it mongo mongo admin</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">db.createUser(&#123; user:&#x27;root&#x27;,pwd:&#x27;123456&#x27;,roles:[ &#123; role:&#x27;userAdminAnyDatabase&#x27;, db: &#x27;admin&#x27;&#125;,&#x27;readWriteAnyDatabase&#x27;]&#125;);</span><br><span class=\"line\">【role:‘userAdminAnyDatabase’】：只在admin数据库中可用，赋予用户所有数据库的userAdmin权限</span><br><span class=\"line\">【db: ‘admin’】：可操作的数据库</span><br><span class=\"line\">【‘readWriteAnyDatabase’】：赋予用户读写权限</span><br><span class=\"line\">mongoDB 没有无敌用户root，只有能管理用户的用户 userAdminAnyDatabase </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">SQL 术语/概念\tMongoDB 术语/概念   解释/说明</span><br><span class=\"line\">database\t    database\t       数据库</span><br><span class=\"line\">table\t        collection\t       数据库表/集合</span><br><span class=\"line\">row\t            document\t       数据记录行/文档</span><br><span class=\"line\">column\t        field\t           数据字段/域</span><br><span class=\"line\">index\t        index\t           索引</span><br><span class=\"line\">table joins\t \t表连接,            MongoDB不支持</span><br><span class=\"line\">primary key\t    primary key\t       主键,MongoDB自动将_id字段设置为主键</span><br></pre></td></tr></table></figure>\n<h2 id=\"sqlserver\"><a href=\"#sqlserver\" class=\"headerlink\" title=\"sqlserver\"></a>sqlserver</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d \\</span><br><span class=\"line\">  --name sqlserver --user=root \\</span><br><span class=\"line\">  -e &quot;ACCEPT_EULA=Y&quot; \\</span><br><span class=\"line\">  -e &quot;SA_PASSWORD=Testing@123&quot;  -p 1433:1433  -v /data/sqlserver:/var/opt/mssql \\</span><br><span class=\"line\">  --cap-add SYS_PTRACE mcr.microsoft.com/mssql/server:2019-latest</span><br><span class=\"line\"></span><br><span class=\"line\">  /opt/mssql-tools18/bin/sqlcmd -S localhost -U SA -P &quot;Testing@123&quot; -C</span><br><span class=\"line\">  </span><br><span class=\"line\">-- 数据库级</span><br><span class=\"line\">  SELECT name, type_desc FROM sys.database_principals WHERE type IN (&#x27;S&#x27;, &#x27;U&#x27;, &#x27;G&#x27;);</span><br><span class=\"line\">  select * from master.dbo.SysDatabases</span><br><span class=\"line\">  --服务器级</span><br><span class=\"line\">  SELECT name, type_desc FROM sys.server_principals WHERE type IN (&#x27;S&#x27;, &#x27;U&#x27;, &#x27;G&#x27;);</span><br><span class=\"line\">  go</span><br><span class=\"line\">  SELECT DB_NAME() AS [CurrentDatabase];</span><br><span class=\"line\">  USE master; SELECT name FROM sys.schemas</span><br><span class=\"line\">  USE master; SELECT name FROM sys.tables</span><br><span class=\"line\">  SELECT name, USER_NAME(principal_id) FROM sys.schemas;</span><br><span class=\"line\"></span><br><span class=\"line\">CREATE TABLE Users (    UserID INT PRIMARY KEY IDENTITY(1,1),     UserName NVARCHAR(50) NOT NULL,   Email NVARCHAR(100) NOT NULL, RegistrationDate DATETIME DEFAULT GETDATE(), IsActive BIT DEFAULT 1);</span><br><span class=\"line\">INSERT INTO Users (UserName, Email) VALUES     (&#x27;王五&#x27;, &#x27;wangwu@example.com&#x27;),    (&#x27;赵六&#x27;, &#x27;zhaoliu@example.com&#x27;),    (&#x27;孙七&#x27;, &#x27;sunqi@example.com&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">--cdc</span><br><span class=\"line\">use y_test</span><br><span class=\"line\">EXEC sys.sp_cdc_enable_db;</span><br><span class=\"line\">go</span><br><span class=\"line\"> SELECT name AS [y_test],    is_cdc_enabled AS [CDCEnabled]FROM   sys.databases WHERE     name = DB_NAME(); </span><br></pre></td></tr></table></figure>\n"},{"title":"斗地主","date":"2025-08-15T06:49:39.000Z","_content":"\n* 简易gui斗地主摸鱼小游戏；启动服务端和三个客户端即可使用\n  \n# 服务端\n```python\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n# 文件名：server.py\n\nimport socket\nimport json\nimport random\nimport threading\nimport time\n\nClient_Number = 0  # 客户端数\nFLAG = 0\nFLAG1 = 0\nFLAG2 = 0  # 抢地主判定符\n# 牌型全局\ntype = 'init'\nvalue = 0\nseq_num = 0\njumpCounter = 0\n\nPOKER = [0 for i in range(54)]\nfor i in range(1, 55):\n    POKER[i - 1] = i\nrandom.shuffle(POKER)  # 洗牌\n# print(POKER)\ns = socket.socket()  # 创建 socket 对象\n#host = socket.gethostname()  # 获取本地主机名\nhost = '0.0.0.0'\nport = 12345  # 设置端口\ns.bind((host, port))  # 绑定端口\ns.listen(3)  # 等待客户端连接\n\n\ndef Turner(num):\n    if num == 0:\n        return 1\n    if num == 1:\n        return 2\n    if num == 2:\n        return 0\n\n\ndef send_message(socket, string):\n    json = {\n        'status': 200,\n        'Operation': 'message',\n        'Card': [0],\n        'message': ''\n    }\n    json['message'] = string\n    socket.sendall(str.encode(str(json)))\n\n\ndef ask_select(socket, socket1, socket2):\n    json = {\n        'Status': 200,\n        'Operation': 'AskS'\n    }\n    socket.sendall(str.encode(str(json)))\n    socket1.sendall(str.encode(str(json)))\n    socket2.sendall(str.encode(str(json)))\n\n\ndef set_turn(socket, Type, value, seq_num):\n    json = {\n        'Status': 200,\n        'Operation': 'SetTurn',\n        'type': Type,\n        'value': value\n    }\n    print('sent:type=', Type, ' value=', value, ' seq_num=', seq_num)\n    socket.sendall(str.encode(str(json)))\n\n\ndef json_prase(js, socket=s, socket1=s, socket2=s):\n    recjs = eval(js)\n    global type\n    global value\n    global seq_num\n    global jumpCounter\n\n    if recjs['Operation'] == 'AnsS':\n        return recjs['message']\n    elif recjs['Operation'] == 'AnsTurn':\n        print(recjs)\n        # 这里会收到回牌\n        json = {\n            'Status': 200,\n            'Operation': 'Announce',\n            'message': recjs['message']\n        }\n        socket.sendall(str.encode(str(json)))\n        socket1.sendall(str.encode(str(json)))\n        socket2.sendall(str.encode(str(json)))\n        if recjs['type'] == 'Jump':\n\n            if jumpCounter == 1:\n                type = 'init'\n                value = 0\n                seq_num = 0\n                jumpCounter = 0\n            else:\n                jumpCounter += 1\n        else:\n            jumpCounter = 0\n            type = recjs['type']\n            value = recjs['value']\n            seq_num = recjs['seq_num']\n        print('JC=', jumpCounter)\n        time.sleep(0.5)\n\n    elif recjs['Operation'] == 'Clear':\n        send_message(socket, 'Game Over!')\n        send_message(socket1, 'Game Over!')\n        send_message(socket2, 'Game Over!')\n        socket.close()\n        socket1.close()\n        socket2.close()\n    else:\n        print('Unknown json')\n        return -1\n\n\ndef send_card(socket):\n    ADD = [0 for i in range(3)]\n    ADD[0] = POKER[53]\n    ADD[1] = POKER[52]\n    ADD[2] = POKER[51]\n    json = {\n        'status': 200,\n        'Operation': 'Add',\n        'message': ''\n    }\n    json['message'] = ADD\n    print(json)\n    socket.sendall(str.encode(str(json)))\n\n\ndef init_card(socket, socket1, socket2):\n    SET = [0 for i in range(20)]\n    SET1 = [0 for i in range(20)]\n    SET2 = [0 for i in range(20)]\n\n    for i in range(0, 17):\n        SET[i] = POKER[i]  # poker的0到16号\n        SET1[i] = POKER[i + 17]  # poker的17到34\n        SET2[i] = POKER[i + 34]  # poker的34到51\n    print('SET:')\n    print(sorted(SET))\n    print('SET1')\n    print(sorted(SET1))\n    print('SET2')\n    print(sorted(SET2))\n    json = {\n        'status': 200,\n        'Operation': 'init',\n        'Card': [0],\n        'message': SET\n    }\n    json1 = {\n        'status': 200,\n        'Operation': 'init',\n        'Card': [0],\n        'message': SET1\n    }\n    json2 = {\n        'status': 200,\n        'Operation': 'init',\n        'Card': [0],\n        'message': SET2\n    }\n\n    socket.sendall(str.encode(str(json)))\n    socket1.sendall(str.encode(str(json1)))\n    socket2.sendall(str.encode(str(json2)))\n\n\n# def receive_card(socket,socket1,socket2):\n# START REGISTERRING\nwhile True:\n    if Client_Number == 9:  # 暂存\n\n        c, addr = s.accept()  # 建立客户端连接。 c是本连接的socket\n        Client_Number = Client_Number + 1\n        print('Connected by', addr)  # 输出客户端的IP地址\n        data = c.recv(1024)  # 把接收的数据实例化\n\n        if len(data.strip()) == 0:\n            c.sendall(b\"Done\")\n        else:\n            recData = eval(data)  # str 转 Dict\n            string = bytes.decode(data)  # byte to str\n            print(string)\n            print(recData['massage'])\n        c.sendall(b'successfully connected')\n\n    elif Client_Number == 0:\n        c, addr = s.accept()\n        Client_Number = Client_Number + 1\n        print('Connected by', addr)\n        # c.sendall(str.encode('successfully connected from'+addr.__str__()))\n        send_message(c, 'hello!')\n\n\n    elif Client_Number == 1:\n        c1, addr1 = s.accept()\n        Client_Number = Client_Number + 1\n        print('Connected by', addr1)\n        # c1.sendall(str.encode('successfully connected from'+addr1.__str__()))\n        send_message(c1, 'hello!')\n\n    else:\n        c2, addr2 = s.accept()\n        Client_Number = Client_Number + 1\n        print('Connected By', addr2)\n        # c2.sendall(str.encode('successfully connected from'+addr1.__str__()))\n        send_message(c2, 'hello!')\n\n    if Client_Number == 3:\n        print('Players all connected')\n        time.sleep(2)\n        send_message(c, 'Players all connected')\n        send_message(c1, 'Players all connected')\n        send_message(c2, 'Players all connected')\n        break\n    # START PLAYING\ntime.sleep(2)\ninit_card(c, c1, c2)  # 发牌\n# START APPLICATING\nTURN = 0\nwhile True:\n    ask_select(c, c1, c2)  # 要求客户端回复抢地主结果\n    Client_Number = 0  ##收到回应数\n    time.sleep(1)\n    # Waiting for Client 0\n    receive = c.recv(1024)\n    if len(receive.strip()) == 0:\n        continue\n    else:\n        FLAG = json_prase(receive)\n        Client_Number = Client_Number + 1\n    # Waiting for Client 1\n    time.sleep(1)  # 等待buffer\n    receive1 = c1.recv(1024)\n    if len(receive1.strip()) == 0:\n        continue\n    else:\n        FLAG1 = json_prase(receive1)\n        Client_Number = Client_Number + 1\n    # Waiting for Client 2\n    time.sleep(1)\n    receive2 = c2.recv(1024)\n    if len(receive.strip()) == 0:\n        continue\n    else:\n        FLAG2 = json_prase(receive2)\n        Client_Number = Client_Number + 1\n    if Client_Number == 3:\n        # print('FLAG=',FLAG)\n        # print('FLAG1=',FLAG1)\n        # print('FLAG2=',FLAG2)\n        if FLAG + FLAG1 + FLAG2 == 0:\n            continue\n        elif FLAG + FLAG1 + FLAG2 != 1:\n            continue  # 这里之后要有个加倍积分的函数\n        else:\n            if FLAG == 1:\n                send_message(c, 'You are the king!')\n                send_message(c1, 'Player0 is the king!')\n                send_message(c2, 'Player0 is the king!')\n                time.sleep(2)\n                send_card(c)\n            if FLAG1 == 1:\n                send_message(c1, 'You are the king!')\n                send_message(c, 'Player1 is the king!')\n                send_message(c2, 'Player1 is the king!')\n                time.sleep(2)\n                send_card(c1)\n                TURN = 1\n            if FLAG2 == 1:\n                send_message(c2, 'You are the king!')\n                send_message(c, 'Player2 is the king!')\n                send_message(c1, 'Player2 is the king!')\n                time.sleep(2)\n                send_card(c2)\n                TURN = 2\n            break\n# GAME START!\nwhile True:\n    time.sleep(2)\n    if TURN == 0:\n        set_turn(c, type, value, seq_num)\n        while True:\n            time.sleep(0.1)\n            receive = c.recv(1024)\n            if len(receive.strip()) == 0:\n                continue\n            else:\n                json_prase(receive, c, c1, c2)\n                TURN = Turner(TURN)\n                break\n    elif TURN == 1:\n        set_turn(c1, type, value, seq_num)\n        while True:\n            time.sleep(0.1)\n            receive = c1.recv(1024)\n            if len(receive.strip()) == 0:\n                continue\n            else:\n                json_prase(receive, c, c1, c2)\n                TURN = Turner(TURN)\n                break\n    elif TURN == 2:\n        set_turn(c2, type, value, seq_num)\n        while True:\n            time.sleep(0.1)\n            receive = c2.recv(1024)\n            if len(receive.strip()) == 0:\n                continue\n            else:\n                json_prase(receive, c, c1, c2)\n                TURN = Turner(TURN)\n                break\nprint('Shutting down server...')\nc.close()\nc1.close()\nc2.close()\n```\n\n\n\n# 客户端\n```python\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\nimport tkinter as tk\nfrom tkinter import ttk, messagebox\nimport socket\nimport json\nimport threading\nimport time\n\n\nclass DouDiZhuGUI:\n    def __init__(self, root):\n        self.root = root\n        self.root.title(\"斗地主游戏\")\n        self.root.geometry(\"800x600\")\n\n        # 游戏状态变量\n        self.CARD = [0 for i in range(20)]\n        self.Card_num = 17\n        self.CURRENT = []\n        self.selected_cards = []  # 当前选中的牌\n\n        # 当前牌型要求\n        self.required_type = 'init'\n        self.required_value = 0\n        self.required_count = 0\n\n        # 玩家信息\n        self.player_id = 0  # 默认玩家ID\n        self.current_player = 0  # 当前出牌玩家\n        self.landlord = -1  # 地主玩家ID\n\n        # 游戏状态\n        self.game_over = False\n\n        # Socket连接\n        self.s = None\n        self.connected = False\n\n        # 扑克牌映射\n        self.A = ['红桃', '黑桃', '方片', '梅花']\n        self.B = ['3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A', '2']\n        self.POKERS = []\n        n = 1\n        for i in self.A:\n            for j in self.B:\n                self.POKERS.append(((i + j + '(' + str(n) + ')')))\n                n += 1\n        self.POKERS.append('小王(53)')\n        self.POKERS.append('大王(54)')\n\n        # 创建UI界面\n        self.create_widgets()\n\n        # 启动接收消息的线程\n        self.receive_thread = None\n\n    def map_card(self, Cno):\n        \"\"\"将牌编号映射为牌面\"\"\"\n        if Cno == 0:\n            return None\n        else:\n            return self.POKERS[Cno - 1]\n\n    def get_card_color(self, card_num):\n        \"\"\"获取牌的颜色\"\"\"\n        if card_num >= 1 and card_num <= 13:  # 红桃\n            return \"red\"\n        elif card_num >= 14 and card_num <= 26:  # 黑桃\n            return \"black\"\n        elif card_num >= 27 and card_num <= 39:  # 方片\n            return \"red\"\n        elif card_num >= 40 and card_num <= 52:  # 梅花\n            return \"black\"\n        else:  # 王\n            return \"gold\"\n\n    def get_card_display_info(self, card_num):\n        \"\"\"获取牌的显示信息（文本和颜色）\"\"\"\n        card_text = self.map_card(card_num)\n        card_color = self.get_card_color(card_num)\n        return card_text, card_color\n\n    def sort_cards_for_display(self, cards):\n        \"\"\"按牌面大小排序，相同大小的牌放在一起\"\"\"\n        if not cards:\n            return []\n\n        # 按照牌面值分组\n        card_groups = {}\n        for card in cards:\n            card_value = self.get_card_value(card)\n            if card_value not in card_groups:\n                card_groups[card_value] = []\n            card_groups[card_value].append(card)\n\n        # 对组进行排序（按牌值大小）\n        sorted_groups = sorted(card_groups.items(), key=lambda x: x[0])\n\n        # 合并排序后的牌\n        sorted_cards = []\n        for value, group in sorted_groups:\n            # 组内按花色排序\n            group.sort()\n            sorted_cards.extend(group)\n\n        return sorted_cards\n\n    def get_card_value(self, card_num):\n        \"\"\"获取牌的数值用于比较大小\"\"\"\n        if card_num == 53:  # 小王\n            return 16\n        elif card_num == 54:  # 大王\n            return 17\n        else:\n            return (card_num - 1) % 13 + 3  # 3到17的值，其中3最小，2最大（15）\n\n    def parse_cards_type(self, cards):\n        \"\"\"分析牌型\"\"\"\n        if not cards:\n            return None, 0, 0\n\n        sorted_cards = sorted(cards)\n        card_values = [self.get_card_value(card) for card in sorted_cards]\n\n        # 特殊牌型：王炸\n        if sorted_cards == [53, 54]:\n            return 'DualKing', 17, 2  # 王炸是最大的牌型\n\n        # 获取牌的点数分布\n        value_counts = {}\n        for value in card_values:\n            value_counts[value] = value_counts.get(value, 0) + 1\n\n        unique_values = sorted(value_counts.keys())\n        counts = sorted(value_counts.values(), reverse=True)\n        card_count = len(cards)\n\n        # 分析牌型\n        if card_count == 1:\n            # 单张\n            return 'Single', card_values[0], 1\n        elif card_count == 2:\n            if len(value_counts) == 1:\n                # 对子\n                return 'Dual', card_values[0], 2\n        elif card_count == 3:\n            if len(value_counts) == 1:\n                # 三张\n                return 'Tri', card_values[0], 3\n        elif card_count == 4:\n            if len(value_counts) == 1:\n                # 炸弹\n                return 'Quad', card_values[0], 4\n            elif len(value_counts) == 2 and 3 in counts:\n                # 三带一\n                tri_value = [v for v, c in value_counts.items() if c == 3][0]\n                return '3+1', tri_value, 4\n        elif card_count == 5:\n            if len(value_counts) == 2 and 3 in counts:\n                # 三带二\n                tri_value = [v for v, c in value_counts.items() if c == 3][0]\n                return '3+2', tri_value, 5\n            elif len(value_counts) == 5:\n                # 顺子（5张）\n                if unique_values[-1] - unique_values[0] == 4 and len(unique_values) == 5:\n                    return 'Sequ', unique_values[0], 5\n        elif card_count >= 5 and len(value_counts) == card_count:\n            # 检查是否为顺子（所有牌点数连续，且无重复）\n            if unique_values[-1] - unique_values[0] == card_count - 1:\n                # 还需要检查不能包含2（除非是最后一张）\n                if 15 not in unique_values or unique_values[-1] == 15:\n                    return 'Sequ', unique_values[0], card_count\n        elif card_count % 2 == 0 and card_count >= 6:\n            # 双顺子检查\n            if self._is_double_sequence(value_counts):\n                return 'doubleSequ', unique_values[0], card_count\n        elif card_count % 3 == 0 and card_count >= 6:\n            # 三顺子检查\n            if self._is_triple_sequence(value_counts):\n                return 'triSequ', unique_values[0], card_count\n\n        # 其他牌型\n        return None, 0, 0\n\n    def _is_double_sequence(self, value_counts):\n        \"\"\"检查是否为双顺子\"\"\"\n        # 每个点数都必须出现2次，且点数连续\n        values = sorted(value_counts.keys())\n        counts = [value_counts[v] for v in values]\n\n        # 检查每个点数是否都出现2次\n        if not all(c == 2 for c in counts):\n            return False\n\n        # 检查点数是否连续（不能包含2）\n        if 15 in values:\n            return False\n\n        # 检查是否连续\n        for i in range(1, len(values)):\n            if values[i] - values[i - 1] != 1:\n                return False\n\n        return True\n\n    def _is_triple_sequence(self, value_counts):\n        \"\"\"检查是否为三顺子\"\"\"\n        # 每个点数都必须出现3次，且点数连续\n        values = sorted(value_counts.keys())\n        counts = [value_counts[v] for v in values]\n\n        # 检查每个点数是否都出现3次\n        if not all(c == 3 for c in counts):\n            return False\n\n        # 检查点数是否连续（不能包含2）\n        if 15 in values:\n            return False\n\n        # 检查是否连续\n        for i in range(1, len(values)):\n            if values[i] - values[i - 1] != 1:\n                return False\n\n        return True\n\n    def is_valid_play(self, selected_cards, required_type, required_value, required_count):\n        \"\"\"验证出牌是否符合规则\"\"\"\n        if not selected_cards:\n            return False, \"没有选择牌\"\n\n        # 分析当前出牌的牌型\n        card_type, card_value, card_count = self.parse_cards_type(selected_cards)\n\n        if card_type is None:\n            return False, \"无效的牌型\"\n\n        # 如果是跳过，直接返回True\n        if card_type == 'Jump':\n            return True, \"\"\n\n        # 如果是初始出牌（required_type为'init'），则不需要匹配牌型\n        if required_type == 'init':\n            return True, \"\"\n\n        # 检查牌数是否匹配\n        if required_count > 0 and card_count != required_count and card_type not in ['Quad', 'DualKing']:\n            return False, f\"牌数不匹配，需要{required_count}张\"\n\n        # 特殊牌型可以直接压制任何非特殊牌型\n        if card_type == 'Quad':  # 炸弹可以压制非炸弹\n            return True, \"\"\n        elif card_type == 'DualKing':  # 王炸是最大的\n            return True, \"\"\n\n        # 如果上家是特殊牌型，当前牌必须也是特殊牌型且能压制\n        if required_type == 'Quad' and card_type != 'Quad' and card_type != 'DualKing':\n            return False, \"只能用炸弹或王炸压制炸弹\"\n        elif required_type == 'DualKing':\n            return False, \"王炸无法被压制\"\n\n        # 检查牌型是否匹配\n        if card_type != required_type:\n            return False, f\"牌型不匹配，需要{required_type}\"\n\n        # 检查牌力是否足够大\n        if required_value > 0 and card_value <= required_value:\n            return False, f\"牌力不够大，需要大于{required_value}\"\n\n        return True, \"\"\n\n    def create_widgets(self):\n        \"\"\"创建GUI界面\"\"\"\n        # 顶部信息栏\n        self.info_frame = ttk.Frame(self.root)\n        self.info_frame.pack(fill=tk.X, padx=10, pady=5)\n\n        self.info_label = ttk.Label(self.info_frame, text=\"欢迎来到斗地主游戏！\")\n        self.info_label.pack(side=tk.LEFT)\n\n        # 玩家信息标签\n        self.player_info_label = ttk.Label(self.info_frame, text=\"玩家ID: 0\")\n        self.player_info_label.pack(side=tk.LEFT, padx=10)\n\n        # 当前玩家标签\n        self.current_player_label = ttk.Label(self.info_frame, text=\"当前玩家: 0\")\n        self.current_player_label.pack(side=tk.LEFT, padx=10)\n\n        # 地主标识标签\n        self.landlord_label = ttk.Label(self.info_frame, text=\"地主: 未确定\")\n        self.landlord_label.pack(side=tk.LEFT, padx=10)\n\n        # 连接按钮\n        self.connect_button = ttk.Button(self.info_frame, text=\"连接服务器\", command=self.connect_to_server)\n        self.connect_button.pack(side=tk.RIGHT)\n\n        # 中间游戏区域\n        self.game_frame = ttk.Frame(self.root)\n        self.game_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)\n\n        # 手牌显示区域\n        self.hand_frame = ttk.LabelFrame(self.game_frame, text=\"我的手牌\")\n        self.hand_frame.pack(fill=tk.BOTH, expand=True, pady=5)\n\n        # 手牌画布和滚动条\n        self.hand_canvas = tk.Canvas(self.hand_frame, height=150)\n        self.hand_scrollbar = ttk.Scrollbar(self.hand_frame, orient=\"horizontal\", command=self.hand_canvas.xview)\n        self.hand_scrollable_frame = ttk.Frame(self.hand_canvas)\n\n        self.hand_scrollable_frame.bind(\n            \"<Configure>\",\n            lambda e: self.hand_canvas.configure(\n                scrollregion=self.hand_canvas.bbox(\"all\")\n            )\n        )\n\n        self.hand_canvas.create_window((0, 0), window=self.hand_scrollable_frame, anchor=\"nw\")\n        self.hand_canvas.configure(xscrollcommand=self.hand_scrollbar.set)\n\n        self.hand_canvas.pack(side=\"top\", fill=\"both\", expand=True)\n        self.hand_scrollbar.pack(side=\"bottom\", fill=\"x\")\n\n        # 出牌信息区域\n        self.play_info_frame = ttk.Frame(self.game_frame)\n        self.play_info_frame.pack(fill=tk.X, pady=5)\n\n        self.current_type_label = ttk.Label(self.play_info_frame, text=\"当前牌型: 无\")\n        self.current_type_label.pack(side=tk.LEFT)\n\n        self.current_cards_label = ttk.Label(self.play_info_frame, text=\"当前出牌: 无\")\n        self.current_cards_label.pack(side=tk.RIGHT)\n\n        # 操作按钮区域\n        self.button_frame = ttk.Frame(self.root)\n        self.button_frame.pack(fill=tk.X, padx=10, pady=5)\n\n        self.play_button = ttk.Button(self.button_frame, text=\"出牌\", command=self.play_cards, state=tk.DISABLED)\n        self.play_button.pack(side=tk.LEFT, padx=5)\n\n        self.pass_button = ttk.Button(self.button_frame, text=\"不出\", command=self.pass_turn, state=tk.DISABLED)\n        self.pass_button.pack(side=tk.LEFT, padx=5)\n\n        self.show_hand_button = ttk.Button(self.button_frame, text=\"刷新手牌\", command=self.show_hand)\n        self.show_hand_button.pack(side=tk.LEFT, padx=5)\n\n        # 消息显示区域\n        self.message_frame = ttk.LabelFrame(self.root, text=\"游戏消息\")\n        self.message_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)\n\n        self.message_text = tk.Text(self.message_frame, height=8)\n        self.message_scrollbar = ttk.Scrollbar(self.message_frame, orient=\"vertical\", command=self.message_text.yview)\n        self.message_text.configure(yscrollcommand=self.message_scrollbar.set)\n\n        self.message_text.pack(side=\"left\", fill=\"both\", expand=True)\n        self.message_scrollbar.pack(side=\"right\", fill=\"y\")\n\n        # 底部状态栏\n        self.status_frame = ttk.Frame(self.root)\n        self.status_frame.pack(fill=tk.X, padx=10, pady=5)\n\n        self.status_label = ttk.Label(self.status_frame, text=\"未连接\")\n        self.status_label.pack()\n\n    def connect_to_server(self):\n        \"\"\"连接到游戏服务器\"\"\"\n        try:\n            if not self.connected:\n                self.s = socket.socket()\n                # host = '1.1.1.1'\n                host = socket.gethostname()\n                port = 12345\n                self.s.connect((host, port))\n                self.connected = True\n                self.connect_button.config(text=\"断开连接\")\n                self.add_message(\"成功连接到服务器\")\n                self.status_label.config(text=\"已连接\")\n\n                # 启动接收消息线程\n                self.receive_thread = threading.Thread(target=self.receive_messages, daemon=True)\n                self.receive_thread.start()\n            else:\n                # 断开连接\n                self.connected = False\n                if self.s:\n                    self.s.close()\n                self.connect_button.config(text=\"连接服务器\")\n                self.add_message(\"已断开服务器连接\")\n                self.status_label.config(text=\"未连接\")\n        except Exception as e:\n            messagebox.showerror(\"连接错误\", f\"无法连接到服务器: {str(e)}\")\n\n    def receive_messages(self):\n        \"\"\"接收服务器消息的线程函数\"\"\"\n        while self.connected:\n            try:\n                receive = self.s.recv(1024)\n                if len(receive.strip()) == 0:\n                    continue\n                else:\n                    self.root.after(0, self.json_parse, receive)\n            except Exception as e:\n                if self.connected:\n                    self.root.after(0, self.handle_receive_error, str(e))\n                break\n\n    def handle_receive_error(self, error):\n        \"\"\"处理接收消息错误\"\"\"\n        self.add_message(f\"接收消息错误: {error}\")\n        self.connected = False\n        self.connect_button.config(text=\"连接服务器\")\n        self.status_label.config(text=\"连接已断开\")\n\n    def json_parse(self, js):\n        \"\"\"解析服务器消息\"\"\"\n        try:\n            recjs = eval(js)\n            if recjs['Operation'] == 'message':\n                self.add_message(recjs['message'])\n            elif recjs['Operation'] == 'init':\n                self.CARD = recjs['message']\n                self.show_hand()\n                self.add_message(\"游戏开始，手牌已发放\")\n            elif recjs['Operation'] == 'AskS':\n                self.ask_king()\n            elif recjs['Operation'] == 'Add':\n                self.Card_num = 20\n                EX_CARD = [0 for x in range(3)]\n                for i in range(0, 3):\n                    EX_CARD[i] = recjs['message'][i]\n                    # 将底牌添加到手牌中\n                    self.CARD.append(recjs['message'][i])\n                self.add_message(f\"你获得了底牌: {', '.join(filter(None, (list(map(self.map_card, EX_CARD)))))}\")\n                self.show_hand()\n                # 更新地主标识\n                self.landlord = self.player_id\n                self.landlord_label.config(text=f\"地主: {self.landlord}\")\n                if self.landlord == self.player_id:\n                    self.info_label.config(text=\"你是地主！\")\n            elif recjs['Operation'] == 'SetTurn':\n                # 保存当前牌型要求\n                self.required_type = recjs.get('type', 'init')\n                self.required_value = recjs.get('value', 0)\n                self.required_count = recjs.get('seq_num', 0)\n\n                # 更新当前玩家信息\n                self.current_player = recjs.get('player', 0)  # 假设服务器会发送player字段\n                self.current_player_label.config(text=f\"当前玩家: {self.current_player}\")\n\n                # 启用出牌按钮\n                self.play_button.config(state=tk.NORMAL)\n                self.pass_button.config(state=tk.NORMAL)\n                self.add_message(\"轮到你出牌了\")\n                if self.required_type != 'init':\n                    self.current_type_label.config(\n                        text=f\"当前牌型: {self.required_type} (需要大于{self.required_value})\")\n                else:\n                    self.current_type_label.config(text=\"当前牌型: 无限制\")\n            elif recjs['Operation'] == 'Announce':\n                if recjs['message'] == []:\n                    self.add_message('上家选择跳过')\n                else:\n                    played_cards = list(filter(None, (list(map(self.map_card, sorted(recjs['message']))))))\n                    self.add_message(f\"上家打出了: {', '.join(played_cards)}\")\n            elif recjs['Operation'] == 'GameOver':\n                winner = recjs.get('winner', '未知')\n                role = recjs.get('role', '未知')\n                if winner == self.player_id:\n                    messagebox.showinfo(\"游戏结束\", f\"恭喜你赢了！你的角色是{role}\")\n                else:\n                    messagebox.showinfo(\"游戏结束\", f\"游戏结束！获胜方是玩家{winner}，角色是{role}\")\n                self.game_over = True\n                self.play_button.config(state=tk.DISABLED)\n                self.pass_button.config(state=tk.DISABLED)\n                self.add_message(f\"游戏结束！获胜方是玩家{winner}，角色是{role}\")\n            else:\n                self.add_message('未知消息类型')\n        except Exception as e:\n            self.add_message(f\"消息解析错误: {str(e)}\")\n\n    def show_hand(self):\n        \"\"\"显示手牌\"\"\"\n        # 清空当前手牌显示\n        for widget in self.hand_scrollable_frame.winfo_children():\n            widget.destroy()\n\n        # 显示手牌\n        self.selected_cards = []  # 清空选中状态\n        sorted_cards = self.sort_cards_for_display(self.CARD)\n        filtered_cards = list(filter(None, sorted_cards))  # 过滤掉0\n\n        for i, card_num in enumerate(filtered_cards):\n            card_text, card_color = self.get_card_display_info(card_num)\n            if card_text:\n                # 创建牌按钮\n                card_button = tk.Button(\n                    self.hand_scrollable_frame,\n                    text=card_text,\n                    width=12,\n                    height=4,\n                    fg=card_color,  # 设置文字颜色\n                    font=('Arial', 8),\n                    command=lambda idx=i, num=card_num: self.toggle_card_selection(idx, num, card_button)\n                )\n                card_button.pack(side=tk.LEFT, padx=2, pady=5)\n\n    def toggle_card_selection(self, idx, card_num, button):\n        \"\"\"切换牌的选中状态\"\"\"\n        if card_num in self.selected_cards:\n            self.selected_cards.remove(card_num)\n            button.config(relief=tk.RAISED, bg=\"lightgray\")\n        else:\n            self.selected_cards.append(card_num)\n            button.config(relief=tk.SUNKEN, bg=\"yellow\")\n\n        # 更新当前选中牌显示\n        selected_names = list(filter(None, (list(map(self.map_card, sorted(self.selected_cards))))))\n        self.current_cards_label.config(text=f\"选中的牌: {', '.join(selected_names) if selected_names else '无'}\")\n\n    def play_cards(self):\n        \"\"\"出牌\"\"\"\n        if not self.selected_cards:\n            messagebox.showwarning(\"出牌错误\", \"请先选择要出的牌\")\n            return\n\n        # 验证出牌是否符合规则\n        is_valid, message = self.is_valid_play(\n            self.selected_cards,\n            self.required_type,\n            self.required_value,\n            self.required_count\n        )\n\n        if not is_valid:\n            messagebox.showwarning(\"出牌错误\", message)\n            return\n\n        # 分析当前出牌的牌型\n        card_type, card_value, card_count = self.parse_cards_type(self.selected_cards)\n\n        # 构造JSON消息\n        json_data = {\n            'Status': 200,\n            'Operation': 'AnsTurn',\n            'type': card_type,\n            'seq_num': card_count,  # 对于顺子等牌型，这个表示牌的数量\n            'message': self.selected_cards,\n            'value': card_value\n        }\n\n        try:\n            self.s.sendall(str.encode(str(json_data)))\n            # 从手牌中移除已出的牌\n            for card in self.selected_cards:\n                if card in self.CARD:\n                    self.CARD.remove(card)\n\n            self.Card_num -= len(self.selected_cards)\n\n            # 检查是否出完所有牌\n            if self.Card_num == 0:\n                self.game_over = True\n                self.add_message(\"恭喜你出完所有牌！\")\n                # 禁用按钮\n                self.play_button.config(state=tk.DISABLED)\n                self.pass_button.config(state=tk.DISABLED)\n\n            self.selected_cards = []\n            self.show_hand()\n            self.current_cards_label.config(text=\"选中的牌: 无\")\n            self.play_button.config(state=tk.DISABLED)\n            self.pass_button.config(state=tk.DISABLED)\n        except Exception as e:\n            messagebox.showerror(\"出牌错误\", f\"出牌失败: {str(e)}\")\n\n    def pass_turn(self):\n        \"\"\"跳过出牌\"\"\"\n        json_data = {\n            'Status': 200,\n            'Operation': 'AnsTurn',\n            'type': 'Jump',\n            'seq_num': 0,\n            'message': [],\n            'value': 0\n        }\n\n        try:\n            self.s.sendall(str.encode(str(json_data)))\n            self.selected_cards = []\n            self.current_cards_label.config(text=\"选中的牌: 无\")\n            self.play_button.config(state=tk.DISABLED)\n            self.pass_button.config(state=tk.DISABLED)\n        except Exception as e:\n            messagebox.showerror(\"操作错误\", f\"跳过出牌失败: {str(e)}\")\n\n    def ask_king(self):\n        \"\"\"询问是否抢地主\"\"\"\n        result = messagebox.askyesno(\"抢地主\", \"是否抢地主?\")\n        json_data = {\n            'Status': 200,\n            'Operation': 'AnsS',\n            'message': 1 if result else 0\n        }\n\n        try:\n            self.s.sendall(str.encode(str(json_data)))\n        except Exception as e:\n            messagebox.showerror(\"操作错误\", f\"抢地主选择发送失败: {str(e)}\")\n\n    def add_message(self, message):\n        \"\"\"添加消息到消息框\"\"\"\n        self.message_text.insert(tk.END, f\"[{time.strftime('%H:%M:%S')}] {message}\\n\")\n        self.message_text.see(tk.END)\n\n\ndef main():\n    root = tk.Tk()\n    app = DouDiZhuGUI(root)\n    root.mainloop()\n\n\nif __name__ == \"__main__\":\n    main()\n```\n","source":"_posts/斗地主.md","raw":"---\ntitle: 斗地主\ndate: 2025-08-15 14:49:39\ntags:\ncategories: python\n---\n\n* 简易gui斗地主摸鱼小游戏；启动服务端和三个客户端即可使用\n  \n# 服务端\n```python\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n# 文件名：server.py\n\nimport socket\nimport json\nimport random\nimport threading\nimport time\n\nClient_Number = 0  # 客户端数\nFLAG = 0\nFLAG1 = 0\nFLAG2 = 0  # 抢地主判定符\n# 牌型全局\ntype = 'init'\nvalue = 0\nseq_num = 0\njumpCounter = 0\n\nPOKER = [0 for i in range(54)]\nfor i in range(1, 55):\n    POKER[i - 1] = i\nrandom.shuffle(POKER)  # 洗牌\n# print(POKER)\ns = socket.socket()  # 创建 socket 对象\n#host = socket.gethostname()  # 获取本地主机名\nhost = '0.0.0.0'\nport = 12345  # 设置端口\ns.bind((host, port))  # 绑定端口\ns.listen(3)  # 等待客户端连接\n\n\ndef Turner(num):\n    if num == 0:\n        return 1\n    if num == 1:\n        return 2\n    if num == 2:\n        return 0\n\n\ndef send_message(socket, string):\n    json = {\n        'status': 200,\n        'Operation': 'message',\n        'Card': [0],\n        'message': ''\n    }\n    json['message'] = string\n    socket.sendall(str.encode(str(json)))\n\n\ndef ask_select(socket, socket1, socket2):\n    json = {\n        'Status': 200,\n        'Operation': 'AskS'\n    }\n    socket.sendall(str.encode(str(json)))\n    socket1.sendall(str.encode(str(json)))\n    socket2.sendall(str.encode(str(json)))\n\n\ndef set_turn(socket, Type, value, seq_num):\n    json = {\n        'Status': 200,\n        'Operation': 'SetTurn',\n        'type': Type,\n        'value': value\n    }\n    print('sent:type=', Type, ' value=', value, ' seq_num=', seq_num)\n    socket.sendall(str.encode(str(json)))\n\n\ndef json_prase(js, socket=s, socket1=s, socket2=s):\n    recjs = eval(js)\n    global type\n    global value\n    global seq_num\n    global jumpCounter\n\n    if recjs['Operation'] == 'AnsS':\n        return recjs['message']\n    elif recjs['Operation'] == 'AnsTurn':\n        print(recjs)\n        # 这里会收到回牌\n        json = {\n            'Status': 200,\n            'Operation': 'Announce',\n            'message': recjs['message']\n        }\n        socket.sendall(str.encode(str(json)))\n        socket1.sendall(str.encode(str(json)))\n        socket2.sendall(str.encode(str(json)))\n        if recjs['type'] == 'Jump':\n\n            if jumpCounter == 1:\n                type = 'init'\n                value = 0\n                seq_num = 0\n                jumpCounter = 0\n            else:\n                jumpCounter += 1\n        else:\n            jumpCounter = 0\n            type = recjs['type']\n            value = recjs['value']\n            seq_num = recjs['seq_num']\n        print('JC=', jumpCounter)\n        time.sleep(0.5)\n\n    elif recjs['Operation'] == 'Clear':\n        send_message(socket, 'Game Over!')\n        send_message(socket1, 'Game Over!')\n        send_message(socket2, 'Game Over!')\n        socket.close()\n        socket1.close()\n        socket2.close()\n    else:\n        print('Unknown json')\n        return -1\n\n\ndef send_card(socket):\n    ADD = [0 for i in range(3)]\n    ADD[0] = POKER[53]\n    ADD[1] = POKER[52]\n    ADD[2] = POKER[51]\n    json = {\n        'status': 200,\n        'Operation': 'Add',\n        'message': ''\n    }\n    json['message'] = ADD\n    print(json)\n    socket.sendall(str.encode(str(json)))\n\n\ndef init_card(socket, socket1, socket2):\n    SET = [0 for i in range(20)]\n    SET1 = [0 for i in range(20)]\n    SET2 = [0 for i in range(20)]\n\n    for i in range(0, 17):\n        SET[i] = POKER[i]  # poker的0到16号\n        SET1[i] = POKER[i + 17]  # poker的17到34\n        SET2[i] = POKER[i + 34]  # poker的34到51\n    print('SET:')\n    print(sorted(SET))\n    print('SET1')\n    print(sorted(SET1))\n    print('SET2')\n    print(sorted(SET2))\n    json = {\n        'status': 200,\n        'Operation': 'init',\n        'Card': [0],\n        'message': SET\n    }\n    json1 = {\n        'status': 200,\n        'Operation': 'init',\n        'Card': [0],\n        'message': SET1\n    }\n    json2 = {\n        'status': 200,\n        'Operation': 'init',\n        'Card': [0],\n        'message': SET2\n    }\n\n    socket.sendall(str.encode(str(json)))\n    socket1.sendall(str.encode(str(json1)))\n    socket2.sendall(str.encode(str(json2)))\n\n\n# def receive_card(socket,socket1,socket2):\n# START REGISTERRING\nwhile True:\n    if Client_Number == 9:  # 暂存\n\n        c, addr = s.accept()  # 建立客户端连接。 c是本连接的socket\n        Client_Number = Client_Number + 1\n        print('Connected by', addr)  # 输出客户端的IP地址\n        data = c.recv(1024)  # 把接收的数据实例化\n\n        if len(data.strip()) == 0:\n            c.sendall(b\"Done\")\n        else:\n            recData = eval(data)  # str 转 Dict\n            string = bytes.decode(data)  # byte to str\n            print(string)\n            print(recData['massage'])\n        c.sendall(b'successfully connected')\n\n    elif Client_Number == 0:\n        c, addr = s.accept()\n        Client_Number = Client_Number + 1\n        print('Connected by', addr)\n        # c.sendall(str.encode('successfully connected from'+addr.__str__()))\n        send_message(c, 'hello!')\n\n\n    elif Client_Number == 1:\n        c1, addr1 = s.accept()\n        Client_Number = Client_Number + 1\n        print('Connected by', addr1)\n        # c1.sendall(str.encode('successfully connected from'+addr1.__str__()))\n        send_message(c1, 'hello!')\n\n    else:\n        c2, addr2 = s.accept()\n        Client_Number = Client_Number + 1\n        print('Connected By', addr2)\n        # c2.sendall(str.encode('successfully connected from'+addr1.__str__()))\n        send_message(c2, 'hello!')\n\n    if Client_Number == 3:\n        print('Players all connected')\n        time.sleep(2)\n        send_message(c, 'Players all connected')\n        send_message(c1, 'Players all connected')\n        send_message(c2, 'Players all connected')\n        break\n    # START PLAYING\ntime.sleep(2)\ninit_card(c, c1, c2)  # 发牌\n# START APPLICATING\nTURN = 0\nwhile True:\n    ask_select(c, c1, c2)  # 要求客户端回复抢地主结果\n    Client_Number = 0  ##收到回应数\n    time.sleep(1)\n    # Waiting for Client 0\n    receive = c.recv(1024)\n    if len(receive.strip()) == 0:\n        continue\n    else:\n        FLAG = json_prase(receive)\n        Client_Number = Client_Number + 1\n    # Waiting for Client 1\n    time.sleep(1)  # 等待buffer\n    receive1 = c1.recv(1024)\n    if len(receive1.strip()) == 0:\n        continue\n    else:\n        FLAG1 = json_prase(receive1)\n        Client_Number = Client_Number + 1\n    # Waiting for Client 2\n    time.sleep(1)\n    receive2 = c2.recv(1024)\n    if len(receive.strip()) == 0:\n        continue\n    else:\n        FLAG2 = json_prase(receive2)\n        Client_Number = Client_Number + 1\n    if Client_Number == 3:\n        # print('FLAG=',FLAG)\n        # print('FLAG1=',FLAG1)\n        # print('FLAG2=',FLAG2)\n        if FLAG + FLAG1 + FLAG2 == 0:\n            continue\n        elif FLAG + FLAG1 + FLAG2 != 1:\n            continue  # 这里之后要有个加倍积分的函数\n        else:\n            if FLAG == 1:\n                send_message(c, 'You are the king!')\n                send_message(c1, 'Player0 is the king!')\n                send_message(c2, 'Player0 is the king!')\n                time.sleep(2)\n                send_card(c)\n            if FLAG1 == 1:\n                send_message(c1, 'You are the king!')\n                send_message(c, 'Player1 is the king!')\n                send_message(c2, 'Player1 is the king!')\n                time.sleep(2)\n                send_card(c1)\n                TURN = 1\n            if FLAG2 == 1:\n                send_message(c2, 'You are the king!')\n                send_message(c, 'Player2 is the king!')\n                send_message(c1, 'Player2 is the king!')\n                time.sleep(2)\n                send_card(c2)\n                TURN = 2\n            break\n# GAME START!\nwhile True:\n    time.sleep(2)\n    if TURN == 0:\n        set_turn(c, type, value, seq_num)\n        while True:\n            time.sleep(0.1)\n            receive = c.recv(1024)\n            if len(receive.strip()) == 0:\n                continue\n            else:\n                json_prase(receive, c, c1, c2)\n                TURN = Turner(TURN)\n                break\n    elif TURN == 1:\n        set_turn(c1, type, value, seq_num)\n        while True:\n            time.sleep(0.1)\n            receive = c1.recv(1024)\n            if len(receive.strip()) == 0:\n                continue\n            else:\n                json_prase(receive, c, c1, c2)\n                TURN = Turner(TURN)\n                break\n    elif TURN == 2:\n        set_turn(c2, type, value, seq_num)\n        while True:\n            time.sleep(0.1)\n            receive = c2.recv(1024)\n            if len(receive.strip()) == 0:\n                continue\n            else:\n                json_prase(receive, c, c1, c2)\n                TURN = Turner(TURN)\n                break\nprint('Shutting down server...')\nc.close()\nc1.close()\nc2.close()\n```\n\n\n\n# 客户端\n```python\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\nimport tkinter as tk\nfrom tkinter import ttk, messagebox\nimport socket\nimport json\nimport threading\nimport time\n\n\nclass DouDiZhuGUI:\n    def __init__(self, root):\n        self.root = root\n        self.root.title(\"斗地主游戏\")\n        self.root.geometry(\"800x600\")\n\n        # 游戏状态变量\n        self.CARD = [0 for i in range(20)]\n        self.Card_num = 17\n        self.CURRENT = []\n        self.selected_cards = []  # 当前选中的牌\n\n        # 当前牌型要求\n        self.required_type = 'init'\n        self.required_value = 0\n        self.required_count = 0\n\n        # 玩家信息\n        self.player_id = 0  # 默认玩家ID\n        self.current_player = 0  # 当前出牌玩家\n        self.landlord = -1  # 地主玩家ID\n\n        # 游戏状态\n        self.game_over = False\n\n        # Socket连接\n        self.s = None\n        self.connected = False\n\n        # 扑克牌映射\n        self.A = ['红桃', '黑桃', '方片', '梅花']\n        self.B = ['3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A', '2']\n        self.POKERS = []\n        n = 1\n        for i in self.A:\n            for j in self.B:\n                self.POKERS.append(((i + j + '(' + str(n) + ')')))\n                n += 1\n        self.POKERS.append('小王(53)')\n        self.POKERS.append('大王(54)')\n\n        # 创建UI界面\n        self.create_widgets()\n\n        # 启动接收消息的线程\n        self.receive_thread = None\n\n    def map_card(self, Cno):\n        \"\"\"将牌编号映射为牌面\"\"\"\n        if Cno == 0:\n            return None\n        else:\n            return self.POKERS[Cno - 1]\n\n    def get_card_color(self, card_num):\n        \"\"\"获取牌的颜色\"\"\"\n        if card_num >= 1 and card_num <= 13:  # 红桃\n            return \"red\"\n        elif card_num >= 14 and card_num <= 26:  # 黑桃\n            return \"black\"\n        elif card_num >= 27 and card_num <= 39:  # 方片\n            return \"red\"\n        elif card_num >= 40 and card_num <= 52:  # 梅花\n            return \"black\"\n        else:  # 王\n            return \"gold\"\n\n    def get_card_display_info(self, card_num):\n        \"\"\"获取牌的显示信息（文本和颜色）\"\"\"\n        card_text = self.map_card(card_num)\n        card_color = self.get_card_color(card_num)\n        return card_text, card_color\n\n    def sort_cards_for_display(self, cards):\n        \"\"\"按牌面大小排序，相同大小的牌放在一起\"\"\"\n        if not cards:\n            return []\n\n        # 按照牌面值分组\n        card_groups = {}\n        for card in cards:\n            card_value = self.get_card_value(card)\n            if card_value not in card_groups:\n                card_groups[card_value] = []\n            card_groups[card_value].append(card)\n\n        # 对组进行排序（按牌值大小）\n        sorted_groups = sorted(card_groups.items(), key=lambda x: x[0])\n\n        # 合并排序后的牌\n        sorted_cards = []\n        for value, group in sorted_groups:\n            # 组内按花色排序\n            group.sort()\n            sorted_cards.extend(group)\n\n        return sorted_cards\n\n    def get_card_value(self, card_num):\n        \"\"\"获取牌的数值用于比较大小\"\"\"\n        if card_num == 53:  # 小王\n            return 16\n        elif card_num == 54:  # 大王\n            return 17\n        else:\n            return (card_num - 1) % 13 + 3  # 3到17的值，其中3最小，2最大（15）\n\n    def parse_cards_type(self, cards):\n        \"\"\"分析牌型\"\"\"\n        if not cards:\n            return None, 0, 0\n\n        sorted_cards = sorted(cards)\n        card_values = [self.get_card_value(card) for card in sorted_cards]\n\n        # 特殊牌型：王炸\n        if sorted_cards == [53, 54]:\n            return 'DualKing', 17, 2  # 王炸是最大的牌型\n\n        # 获取牌的点数分布\n        value_counts = {}\n        for value in card_values:\n            value_counts[value] = value_counts.get(value, 0) + 1\n\n        unique_values = sorted(value_counts.keys())\n        counts = sorted(value_counts.values(), reverse=True)\n        card_count = len(cards)\n\n        # 分析牌型\n        if card_count == 1:\n            # 单张\n            return 'Single', card_values[0], 1\n        elif card_count == 2:\n            if len(value_counts) == 1:\n                # 对子\n                return 'Dual', card_values[0], 2\n        elif card_count == 3:\n            if len(value_counts) == 1:\n                # 三张\n                return 'Tri', card_values[0], 3\n        elif card_count == 4:\n            if len(value_counts) == 1:\n                # 炸弹\n                return 'Quad', card_values[0], 4\n            elif len(value_counts) == 2 and 3 in counts:\n                # 三带一\n                tri_value = [v for v, c in value_counts.items() if c == 3][0]\n                return '3+1', tri_value, 4\n        elif card_count == 5:\n            if len(value_counts) == 2 and 3 in counts:\n                # 三带二\n                tri_value = [v for v, c in value_counts.items() if c == 3][0]\n                return '3+2', tri_value, 5\n            elif len(value_counts) == 5:\n                # 顺子（5张）\n                if unique_values[-1] - unique_values[0] == 4 and len(unique_values) == 5:\n                    return 'Sequ', unique_values[0], 5\n        elif card_count >= 5 and len(value_counts) == card_count:\n            # 检查是否为顺子（所有牌点数连续，且无重复）\n            if unique_values[-1] - unique_values[0] == card_count - 1:\n                # 还需要检查不能包含2（除非是最后一张）\n                if 15 not in unique_values or unique_values[-1] == 15:\n                    return 'Sequ', unique_values[0], card_count\n        elif card_count % 2 == 0 and card_count >= 6:\n            # 双顺子检查\n            if self._is_double_sequence(value_counts):\n                return 'doubleSequ', unique_values[0], card_count\n        elif card_count % 3 == 0 and card_count >= 6:\n            # 三顺子检查\n            if self._is_triple_sequence(value_counts):\n                return 'triSequ', unique_values[0], card_count\n\n        # 其他牌型\n        return None, 0, 0\n\n    def _is_double_sequence(self, value_counts):\n        \"\"\"检查是否为双顺子\"\"\"\n        # 每个点数都必须出现2次，且点数连续\n        values = sorted(value_counts.keys())\n        counts = [value_counts[v] for v in values]\n\n        # 检查每个点数是否都出现2次\n        if not all(c == 2 for c in counts):\n            return False\n\n        # 检查点数是否连续（不能包含2）\n        if 15 in values:\n            return False\n\n        # 检查是否连续\n        for i in range(1, len(values)):\n            if values[i] - values[i - 1] != 1:\n                return False\n\n        return True\n\n    def _is_triple_sequence(self, value_counts):\n        \"\"\"检查是否为三顺子\"\"\"\n        # 每个点数都必须出现3次，且点数连续\n        values = sorted(value_counts.keys())\n        counts = [value_counts[v] for v in values]\n\n        # 检查每个点数是否都出现3次\n        if not all(c == 3 for c in counts):\n            return False\n\n        # 检查点数是否连续（不能包含2）\n        if 15 in values:\n            return False\n\n        # 检查是否连续\n        for i in range(1, len(values)):\n            if values[i] - values[i - 1] != 1:\n                return False\n\n        return True\n\n    def is_valid_play(self, selected_cards, required_type, required_value, required_count):\n        \"\"\"验证出牌是否符合规则\"\"\"\n        if not selected_cards:\n            return False, \"没有选择牌\"\n\n        # 分析当前出牌的牌型\n        card_type, card_value, card_count = self.parse_cards_type(selected_cards)\n\n        if card_type is None:\n            return False, \"无效的牌型\"\n\n        # 如果是跳过，直接返回True\n        if card_type == 'Jump':\n            return True, \"\"\n\n        # 如果是初始出牌（required_type为'init'），则不需要匹配牌型\n        if required_type == 'init':\n            return True, \"\"\n\n        # 检查牌数是否匹配\n        if required_count > 0 and card_count != required_count and card_type not in ['Quad', 'DualKing']:\n            return False, f\"牌数不匹配，需要{required_count}张\"\n\n        # 特殊牌型可以直接压制任何非特殊牌型\n        if card_type == 'Quad':  # 炸弹可以压制非炸弹\n            return True, \"\"\n        elif card_type == 'DualKing':  # 王炸是最大的\n            return True, \"\"\n\n        # 如果上家是特殊牌型，当前牌必须也是特殊牌型且能压制\n        if required_type == 'Quad' and card_type != 'Quad' and card_type != 'DualKing':\n            return False, \"只能用炸弹或王炸压制炸弹\"\n        elif required_type == 'DualKing':\n            return False, \"王炸无法被压制\"\n\n        # 检查牌型是否匹配\n        if card_type != required_type:\n            return False, f\"牌型不匹配，需要{required_type}\"\n\n        # 检查牌力是否足够大\n        if required_value > 0 and card_value <= required_value:\n            return False, f\"牌力不够大，需要大于{required_value}\"\n\n        return True, \"\"\n\n    def create_widgets(self):\n        \"\"\"创建GUI界面\"\"\"\n        # 顶部信息栏\n        self.info_frame = ttk.Frame(self.root)\n        self.info_frame.pack(fill=tk.X, padx=10, pady=5)\n\n        self.info_label = ttk.Label(self.info_frame, text=\"欢迎来到斗地主游戏！\")\n        self.info_label.pack(side=tk.LEFT)\n\n        # 玩家信息标签\n        self.player_info_label = ttk.Label(self.info_frame, text=\"玩家ID: 0\")\n        self.player_info_label.pack(side=tk.LEFT, padx=10)\n\n        # 当前玩家标签\n        self.current_player_label = ttk.Label(self.info_frame, text=\"当前玩家: 0\")\n        self.current_player_label.pack(side=tk.LEFT, padx=10)\n\n        # 地主标识标签\n        self.landlord_label = ttk.Label(self.info_frame, text=\"地主: 未确定\")\n        self.landlord_label.pack(side=tk.LEFT, padx=10)\n\n        # 连接按钮\n        self.connect_button = ttk.Button(self.info_frame, text=\"连接服务器\", command=self.connect_to_server)\n        self.connect_button.pack(side=tk.RIGHT)\n\n        # 中间游戏区域\n        self.game_frame = ttk.Frame(self.root)\n        self.game_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)\n\n        # 手牌显示区域\n        self.hand_frame = ttk.LabelFrame(self.game_frame, text=\"我的手牌\")\n        self.hand_frame.pack(fill=tk.BOTH, expand=True, pady=5)\n\n        # 手牌画布和滚动条\n        self.hand_canvas = tk.Canvas(self.hand_frame, height=150)\n        self.hand_scrollbar = ttk.Scrollbar(self.hand_frame, orient=\"horizontal\", command=self.hand_canvas.xview)\n        self.hand_scrollable_frame = ttk.Frame(self.hand_canvas)\n\n        self.hand_scrollable_frame.bind(\n            \"<Configure>\",\n            lambda e: self.hand_canvas.configure(\n                scrollregion=self.hand_canvas.bbox(\"all\")\n            )\n        )\n\n        self.hand_canvas.create_window((0, 0), window=self.hand_scrollable_frame, anchor=\"nw\")\n        self.hand_canvas.configure(xscrollcommand=self.hand_scrollbar.set)\n\n        self.hand_canvas.pack(side=\"top\", fill=\"both\", expand=True)\n        self.hand_scrollbar.pack(side=\"bottom\", fill=\"x\")\n\n        # 出牌信息区域\n        self.play_info_frame = ttk.Frame(self.game_frame)\n        self.play_info_frame.pack(fill=tk.X, pady=5)\n\n        self.current_type_label = ttk.Label(self.play_info_frame, text=\"当前牌型: 无\")\n        self.current_type_label.pack(side=tk.LEFT)\n\n        self.current_cards_label = ttk.Label(self.play_info_frame, text=\"当前出牌: 无\")\n        self.current_cards_label.pack(side=tk.RIGHT)\n\n        # 操作按钮区域\n        self.button_frame = ttk.Frame(self.root)\n        self.button_frame.pack(fill=tk.X, padx=10, pady=5)\n\n        self.play_button = ttk.Button(self.button_frame, text=\"出牌\", command=self.play_cards, state=tk.DISABLED)\n        self.play_button.pack(side=tk.LEFT, padx=5)\n\n        self.pass_button = ttk.Button(self.button_frame, text=\"不出\", command=self.pass_turn, state=tk.DISABLED)\n        self.pass_button.pack(side=tk.LEFT, padx=5)\n\n        self.show_hand_button = ttk.Button(self.button_frame, text=\"刷新手牌\", command=self.show_hand)\n        self.show_hand_button.pack(side=tk.LEFT, padx=5)\n\n        # 消息显示区域\n        self.message_frame = ttk.LabelFrame(self.root, text=\"游戏消息\")\n        self.message_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)\n\n        self.message_text = tk.Text(self.message_frame, height=8)\n        self.message_scrollbar = ttk.Scrollbar(self.message_frame, orient=\"vertical\", command=self.message_text.yview)\n        self.message_text.configure(yscrollcommand=self.message_scrollbar.set)\n\n        self.message_text.pack(side=\"left\", fill=\"both\", expand=True)\n        self.message_scrollbar.pack(side=\"right\", fill=\"y\")\n\n        # 底部状态栏\n        self.status_frame = ttk.Frame(self.root)\n        self.status_frame.pack(fill=tk.X, padx=10, pady=5)\n\n        self.status_label = ttk.Label(self.status_frame, text=\"未连接\")\n        self.status_label.pack()\n\n    def connect_to_server(self):\n        \"\"\"连接到游戏服务器\"\"\"\n        try:\n            if not self.connected:\n                self.s = socket.socket()\n                # host = '1.1.1.1'\n                host = socket.gethostname()\n                port = 12345\n                self.s.connect((host, port))\n                self.connected = True\n                self.connect_button.config(text=\"断开连接\")\n                self.add_message(\"成功连接到服务器\")\n                self.status_label.config(text=\"已连接\")\n\n                # 启动接收消息线程\n                self.receive_thread = threading.Thread(target=self.receive_messages, daemon=True)\n                self.receive_thread.start()\n            else:\n                # 断开连接\n                self.connected = False\n                if self.s:\n                    self.s.close()\n                self.connect_button.config(text=\"连接服务器\")\n                self.add_message(\"已断开服务器连接\")\n                self.status_label.config(text=\"未连接\")\n        except Exception as e:\n            messagebox.showerror(\"连接错误\", f\"无法连接到服务器: {str(e)}\")\n\n    def receive_messages(self):\n        \"\"\"接收服务器消息的线程函数\"\"\"\n        while self.connected:\n            try:\n                receive = self.s.recv(1024)\n                if len(receive.strip()) == 0:\n                    continue\n                else:\n                    self.root.after(0, self.json_parse, receive)\n            except Exception as e:\n                if self.connected:\n                    self.root.after(0, self.handle_receive_error, str(e))\n                break\n\n    def handle_receive_error(self, error):\n        \"\"\"处理接收消息错误\"\"\"\n        self.add_message(f\"接收消息错误: {error}\")\n        self.connected = False\n        self.connect_button.config(text=\"连接服务器\")\n        self.status_label.config(text=\"连接已断开\")\n\n    def json_parse(self, js):\n        \"\"\"解析服务器消息\"\"\"\n        try:\n            recjs = eval(js)\n            if recjs['Operation'] == 'message':\n                self.add_message(recjs['message'])\n            elif recjs['Operation'] == 'init':\n                self.CARD = recjs['message']\n                self.show_hand()\n                self.add_message(\"游戏开始，手牌已发放\")\n            elif recjs['Operation'] == 'AskS':\n                self.ask_king()\n            elif recjs['Operation'] == 'Add':\n                self.Card_num = 20\n                EX_CARD = [0 for x in range(3)]\n                for i in range(0, 3):\n                    EX_CARD[i] = recjs['message'][i]\n                    # 将底牌添加到手牌中\n                    self.CARD.append(recjs['message'][i])\n                self.add_message(f\"你获得了底牌: {', '.join(filter(None, (list(map(self.map_card, EX_CARD)))))}\")\n                self.show_hand()\n                # 更新地主标识\n                self.landlord = self.player_id\n                self.landlord_label.config(text=f\"地主: {self.landlord}\")\n                if self.landlord == self.player_id:\n                    self.info_label.config(text=\"你是地主！\")\n            elif recjs['Operation'] == 'SetTurn':\n                # 保存当前牌型要求\n                self.required_type = recjs.get('type', 'init')\n                self.required_value = recjs.get('value', 0)\n                self.required_count = recjs.get('seq_num', 0)\n\n                # 更新当前玩家信息\n                self.current_player = recjs.get('player', 0)  # 假设服务器会发送player字段\n                self.current_player_label.config(text=f\"当前玩家: {self.current_player}\")\n\n                # 启用出牌按钮\n                self.play_button.config(state=tk.NORMAL)\n                self.pass_button.config(state=tk.NORMAL)\n                self.add_message(\"轮到你出牌了\")\n                if self.required_type != 'init':\n                    self.current_type_label.config(\n                        text=f\"当前牌型: {self.required_type} (需要大于{self.required_value})\")\n                else:\n                    self.current_type_label.config(text=\"当前牌型: 无限制\")\n            elif recjs['Operation'] == 'Announce':\n                if recjs['message'] == []:\n                    self.add_message('上家选择跳过')\n                else:\n                    played_cards = list(filter(None, (list(map(self.map_card, sorted(recjs['message']))))))\n                    self.add_message(f\"上家打出了: {', '.join(played_cards)}\")\n            elif recjs['Operation'] == 'GameOver':\n                winner = recjs.get('winner', '未知')\n                role = recjs.get('role', '未知')\n                if winner == self.player_id:\n                    messagebox.showinfo(\"游戏结束\", f\"恭喜你赢了！你的角色是{role}\")\n                else:\n                    messagebox.showinfo(\"游戏结束\", f\"游戏结束！获胜方是玩家{winner}，角色是{role}\")\n                self.game_over = True\n                self.play_button.config(state=tk.DISABLED)\n                self.pass_button.config(state=tk.DISABLED)\n                self.add_message(f\"游戏结束！获胜方是玩家{winner}，角色是{role}\")\n            else:\n                self.add_message('未知消息类型')\n        except Exception as e:\n            self.add_message(f\"消息解析错误: {str(e)}\")\n\n    def show_hand(self):\n        \"\"\"显示手牌\"\"\"\n        # 清空当前手牌显示\n        for widget in self.hand_scrollable_frame.winfo_children():\n            widget.destroy()\n\n        # 显示手牌\n        self.selected_cards = []  # 清空选中状态\n        sorted_cards = self.sort_cards_for_display(self.CARD)\n        filtered_cards = list(filter(None, sorted_cards))  # 过滤掉0\n\n        for i, card_num in enumerate(filtered_cards):\n            card_text, card_color = self.get_card_display_info(card_num)\n            if card_text:\n                # 创建牌按钮\n                card_button = tk.Button(\n                    self.hand_scrollable_frame,\n                    text=card_text,\n                    width=12,\n                    height=4,\n                    fg=card_color,  # 设置文字颜色\n                    font=('Arial', 8),\n                    command=lambda idx=i, num=card_num: self.toggle_card_selection(idx, num, card_button)\n                )\n                card_button.pack(side=tk.LEFT, padx=2, pady=5)\n\n    def toggle_card_selection(self, idx, card_num, button):\n        \"\"\"切换牌的选中状态\"\"\"\n        if card_num in self.selected_cards:\n            self.selected_cards.remove(card_num)\n            button.config(relief=tk.RAISED, bg=\"lightgray\")\n        else:\n            self.selected_cards.append(card_num)\n            button.config(relief=tk.SUNKEN, bg=\"yellow\")\n\n        # 更新当前选中牌显示\n        selected_names = list(filter(None, (list(map(self.map_card, sorted(self.selected_cards))))))\n        self.current_cards_label.config(text=f\"选中的牌: {', '.join(selected_names) if selected_names else '无'}\")\n\n    def play_cards(self):\n        \"\"\"出牌\"\"\"\n        if not self.selected_cards:\n            messagebox.showwarning(\"出牌错误\", \"请先选择要出的牌\")\n            return\n\n        # 验证出牌是否符合规则\n        is_valid, message = self.is_valid_play(\n            self.selected_cards,\n            self.required_type,\n            self.required_value,\n            self.required_count\n        )\n\n        if not is_valid:\n            messagebox.showwarning(\"出牌错误\", message)\n            return\n\n        # 分析当前出牌的牌型\n        card_type, card_value, card_count = self.parse_cards_type(self.selected_cards)\n\n        # 构造JSON消息\n        json_data = {\n            'Status': 200,\n            'Operation': 'AnsTurn',\n            'type': card_type,\n            'seq_num': card_count,  # 对于顺子等牌型，这个表示牌的数量\n            'message': self.selected_cards,\n            'value': card_value\n        }\n\n        try:\n            self.s.sendall(str.encode(str(json_data)))\n            # 从手牌中移除已出的牌\n            for card in self.selected_cards:\n                if card in self.CARD:\n                    self.CARD.remove(card)\n\n            self.Card_num -= len(self.selected_cards)\n\n            # 检查是否出完所有牌\n            if self.Card_num == 0:\n                self.game_over = True\n                self.add_message(\"恭喜你出完所有牌！\")\n                # 禁用按钮\n                self.play_button.config(state=tk.DISABLED)\n                self.pass_button.config(state=tk.DISABLED)\n\n            self.selected_cards = []\n            self.show_hand()\n            self.current_cards_label.config(text=\"选中的牌: 无\")\n            self.play_button.config(state=tk.DISABLED)\n            self.pass_button.config(state=tk.DISABLED)\n        except Exception as e:\n            messagebox.showerror(\"出牌错误\", f\"出牌失败: {str(e)}\")\n\n    def pass_turn(self):\n        \"\"\"跳过出牌\"\"\"\n        json_data = {\n            'Status': 200,\n            'Operation': 'AnsTurn',\n            'type': 'Jump',\n            'seq_num': 0,\n            'message': [],\n            'value': 0\n        }\n\n        try:\n            self.s.sendall(str.encode(str(json_data)))\n            self.selected_cards = []\n            self.current_cards_label.config(text=\"选中的牌: 无\")\n            self.play_button.config(state=tk.DISABLED)\n            self.pass_button.config(state=tk.DISABLED)\n        except Exception as e:\n            messagebox.showerror(\"操作错误\", f\"跳过出牌失败: {str(e)}\")\n\n    def ask_king(self):\n        \"\"\"询问是否抢地主\"\"\"\n        result = messagebox.askyesno(\"抢地主\", \"是否抢地主?\")\n        json_data = {\n            'Status': 200,\n            'Operation': 'AnsS',\n            'message': 1 if result else 0\n        }\n\n        try:\n            self.s.sendall(str.encode(str(json_data)))\n        except Exception as e:\n            messagebox.showerror(\"操作错误\", f\"抢地主选择发送失败: {str(e)}\")\n\n    def add_message(self, message):\n        \"\"\"添加消息到消息框\"\"\"\n        self.message_text.insert(tk.END, f\"[{time.strftime('%H:%M:%S')}] {message}\\n\")\n        self.message_text.see(tk.END)\n\n\ndef main():\n    root = tk.Tk()\n    app = DouDiZhuGUI(root)\n    root.mainloop()\n\n\nif __name__ == \"__main__\":\n    main()\n```\n","slug":"斗地主","published":1,"updated":"2025-08-28T06:39:18.237Z","comments":1,"layout":"post","photos":[],"_id":"cmev1ggdi001rhllz3zxe7dr3","content":"<ul>\n<li>简易gui斗地主摸鱼小游戏；启动服务端和三个客户端即可使用</li>\n</ul>\n<h1 id=\"服务端\"><a href=\"#服务端\" class=\"headerlink\" title=\"服务端\"></a>服务端</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># 文件名：server.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\">Client_Number = <span class=\"number\">0</span>  <span class=\"comment\"># 客户端数</span></span><br><span class=\"line\">FLAG = <span class=\"number\">0</span></span><br><span class=\"line\">FLAG1 = <span class=\"number\">0</span></span><br><span class=\"line\">FLAG2 = <span class=\"number\">0</span>  <span class=\"comment\"># 抢地主判定符</span></span><br><span class=\"line\"><span class=\"comment\"># 牌型全局</span></span><br><span class=\"line\"><span class=\"built_in\">type</span> = <span class=\"string\">&#x27;init&#x27;</span></span><br><span class=\"line\">value = <span class=\"number\">0</span></span><br><span class=\"line\">seq_num = <span class=\"number\">0</span></span><br><span class=\"line\">jumpCounter = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">POKER = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">54</span>)]</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">55</span>):</span><br><span class=\"line\">    POKER[i - <span class=\"number\">1</span>] = i</span><br><span class=\"line\">random.shuffle(POKER)  <span class=\"comment\"># 洗牌</span></span><br><span class=\"line\"><span class=\"comment\"># print(POKER)</span></span><br><span class=\"line\">s = socket.socket()  <span class=\"comment\"># 创建 socket 对象</span></span><br><span class=\"line\"><span class=\"comment\">#host = socket.gethostname()  # 获取本地主机名</span></span><br><span class=\"line\">host = <span class=\"string\">&#x27;0.0.0.0&#x27;</span></span><br><span class=\"line\">port = <span class=\"number\">12345</span>  <span class=\"comment\"># 设置端口</span></span><br><span class=\"line\">s.bind((host, port))  <span class=\"comment\"># 绑定端口</span></span><br><span class=\"line\">s.listen(<span class=\"number\">3</span>)  <span class=\"comment\"># 等待客户端连接</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">Turner</span>(<span class=\"params\">num</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> num == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> num == <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> num == <span class=\"number\">2</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">send_message</span>(<span class=\"params\">socket, string</span>):</span><br><span class=\"line\">    json = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;status&#x27;</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;Operation&#x27;</span>: <span class=\"string\">&#x27;message&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;Card&#x27;</span>: [<span class=\"number\">0</span>],</span><br><span class=\"line\">        <span class=\"string\">&#x27;message&#x27;</span>: <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    json[<span class=\"string\">&#x27;message&#x27;</span>] = string</span><br><span class=\"line\">    socket.sendall(<span class=\"built_in\">str</span>.encode(<span class=\"built_in\">str</span>(json)))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">ask_select</span>(<span class=\"params\">socket, socket1, socket2</span>):</span><br><span class=\"line\">    json = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;Status&#x27;</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;Operation&#x27;</span>: <span class=\"string\">&#x27;AskS&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    socket.sendall(<span class=\"built_in\">str</span>.encode(<span class=\"built_in\">str</span>(json)))</span><br><span class=\"line\">    socket1.sendall(<span class=\"built_in\">str</span>.encode(<span class=\"built_in\">str</span>(json)))</span><br><span class=\"line\">    socket2.sendall(<span class=\"built_in\">str</span>.encode(<span class=\"built_in\">str</span>(json)))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">set_turn</span>(<span class=\"params\">socket, <span class=\"type\">Type</span>, value, seq_num</span>):</span><br><span class=\"line\">    json = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;Status&#x27;</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;Operation&#x27;</span>: <span class=\"string\">&#x27;SetTurn&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;type&#x27;</span>: <span class=\"type\">Type</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;value&#x27;</span>: value</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;sent:type=&#x27;</span>, <span class=\"type\">Type</span>, <span class=\"string\">&#x27; value=&#x27;</span>, value, <span class=\"string\">&#x27; seq_num=&#x27;</span>, seq_num)</span><br><span class=\"line\">    socket.sendall(<span class=\"built_in\">str</span>.encode(<span class=\"built_in\">str</span>(json)))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">json_prase</span>(<span class=\"params\">js, socket=s, socket1=s, socket2=s</span>):</span><br><span class=\"line\">    recjs = <span class=\"built_in\">eval</span>(js)</span><br><span class=\"line\">    <span class=\"keyword\">global</span> <span class=\"built_in\">type</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> value</span><br><span class=\"line\">    <span class=\"keyword\">global</span> seq_num</span><br><span class=\"line\">    <span class=\"keyword\">global</span> jumpCounter</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> recjs[<span class=\"string\">&#x27;Operation&#x27;</span>] == <span class=\"string\">&#x27;AnsS&#x27;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> recjs[<span class=\"string\">&#x27;message&#x27;</span>]</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> recjs[<span class=\"string\">&#x27;Operation&#x27;</span>] == <span class=\"string\">&#x27;AnsTurn&#x27;</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(recjs)</span><br><span class=\"line\">        <span class=\"comment\"># 这里会收到回牌</span></span><br><span class=\"line\">        json = &#123;</span><br><span class=\"line\">            <span class=\"string\">&#x27;Status&#x27;</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;Operation&#x27;</span>: <span class=\"string\">&#x27;Announce&#x27;</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;message&#x27;</span>: recjs[<span class=\"string\">&#x27;message&#x27;</span>]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        socket.sendall(<span class=\"built_in\">str</span>.encode(<span class=\"built_in\">str</span>(json)))</span><br><span class=\"line\">        socket1.sendall(<span class=\"built_in\">str</span>.encode(<span class=\"built_in\">str</span>(json)))</span><br><span class=\"line\">        socket2.sendall(<span class=\"built_in\">str</span>.encode(<span class=\"built_in\">str</span>(json)))</span><br><span class=\"line\">        <span class=\"keyword\">if</span> recjs[<span class=\"string\">&#x27;type&#x27;</span>] == <span class=\"string\">&#x27;Jump&#x27;</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> jumpCounter == <span class=\"number\">1</span>:</span><br><span class=\"line\">                <span class=\"built_in\">type</span> = <span class=\"string\">&#x27;init&#x27;</span></span><br><span class=\"line\">                value = <span class=\"number\">0</span></span><br><span class=\"line\">                seq_num = <span class=\"number\">0</span></span><br><span class=\"line\">                jumpCounter = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                jumpCounter += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            jumpCounter = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"built_in\">type</span> = recjs[<span class=\"string\">&#x27;type&#x27;</span>]</span><br><span class=\"line\">            value = recjs[<span class=\"string\">&#x27;value&#x27;</span>]</span><br><span class=\"line\">            seq_num = recjs[<span class=\"string\">&#x27;seq_num&#x27;</span>]</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;JC=&#x27;</span>, jumpCounter)</span><br><span class=\"line\">        time.sleep(<span class=\"number\">0.5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> recjs[<span class=\"string\">&#x27;Operation&#x27;</span>] == <span class=\"string\">&#x27;Clear&#x27;</span>:</span><br><span class=\"line\">        send_message(socket, <span class=\"string\">&#x27;Game Over!&#x27;</span>)</span><br><span class=\"line\">        send_message(socket1, <span class=\"string\">&#x27;Game Over!&#x27;</span>)</span><br><span class=\"line\">        send_message(socket2, <span class=\"string\">&#x27;Game Over!&#x27;</span>)</span><br><span class=\"line\">        socket.close()</span><br><span class=\"line\">        socket1.close()</span><br><span class=\"line\">        socket2.close()</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Unknown json&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">send_card</span>(<span class=\"params\">socket</span>):</span><br><span class=\"line\">    ADD = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">3</span>)]</span><br><span class=\"line\">    ADD[<span class=\"number\">0</span>] = POKER[<span class=\"number\">53</span>]</span><br><span class=\"line\">    ADD[<span class=\"number\">1</span>] = POKER[<span class=\"number\">52</span>]</span><br><span class=\"line\">    ADD[<span class=\"number\">2</span>] = POKER[<span class=\"number\">51</span>]</span><br><span class=\"line\">    json = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;status&#x27;</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;Operation&#x27;</span>: <span class=\"string\">&#x27;Add&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;message&#x27;</span>: <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    json[<span class=\"string\">&#x27;message&#x27;</span>] = ADD</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(json)</span><br><span class=\"line\">    socket.sendall(<span class=\"built_in\">str</span>.encode(<span class=\"built_in\">str</span>(json)))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">init_card</span>(<span class=\"params\">socket, socket1, socket2</span>):</span><br><span class=\"line\">    SET = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">20</span>)]</span><br><span class=\"line\">    SET1 = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">20</span>)]</span><br><span class=\"line\">    SET2 = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">20</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"number\">17</span>):</span><br><span class=\"line\">        SET[i] = POKER[i]  <span class=\"comment\"># poker的0到16号</span></span><br><span class=\"line\">        SET1[i] = POKER[i + <span class=\"number\">17</span>]  <span class=\"comment\"># poker的17到34</span></span><br><span class=\"line\">        SET2[i] = POKER[i + <span class=\"number\">34</span>]  <span class=\"comment\"># poker的34到51</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;SET:&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">sorted</span>(SET))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;SET1&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">sorted</span>(SET1))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;SET2&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">sorted</span>(SET2))</span><br><span class=\"line\">    json = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;status&#x27;</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;Operation&#x27;</span>: <span class=\"string\">&#x27;init&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;Card&#x27;</span>: [<span class=\"number\">0</span>],</span><br><span class=\"line\">        <span class=\"string\">&#x27;message&#x27;</span>: SET</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    json1 = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;status&#x27;</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;Operation&#x27;</span>: <span class=\"string\">&#x27;init&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;Card&#x27;</span>: [<span class=\"number\">0</span>],</span><br><span class=\"line\">        <span class=\"string\">&#x27;message&#x27;</span>: SET1</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    json2 = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;status&#x27;</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;Operation&#x27;</span>: <span class=\"string\">&#x27;init&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;Card&#x27;</span>: [<span class=\"number\">0</span>],</span><br><span class=\"line\">        <span class=\"string\">&#x27;message&#x27;</span>: SET2</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    socket.sendall(<span class=\"built_in\">str</span>.encode(<span class=\"built_in\">str</span>(json)))</span><br><span class=\"line\">    socket1.sendall(<span class=\"built_in\">str</span>.encode(<span class=\"built_in\">str</span>(json1)))</span><br><span class=\"line\">    socket2.sendall(<span class=\"built_in\">str</span>.encode(<span class=\"built_in\">str</span>(json2)))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># def receive_card(socket,socket1,socket2):</span></span><br><span class=\"line\"><span class=\"comment\"># START REGISTERRING</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> Client_Number == <span class=\"number\">9</span>:  <span class=\"comment\"># 暂存</span></span><br><span class=\"line\"></span><br><span class=\"line\">        c, addr = s.accept()  <span class=\"comment\"># 建立客户端连接。 c是本连接的socket</span></span><br><span class=\"line\">        Client_Number = Client_Number + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Connected by&#x27;</span>, addr)  <span class=\"comment\"># 输出客户端的IP地址</span></span><br><span class=\"line\">        data = c.recv(<span class=\"number\">1024</span>)  <span class=\"comment\"># 把接收的数据实例化</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(data.strip()) == <span class=\"number\">0</span>:</span><br><span class=\"line\">            c.sendall(<span class=\"string\">b&quot;Done&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            recData = <span class=\"built_in\">eval</span>(data)  <span class=\"comment\"># str 转 Dict</span></span><br><span class=\"line\">            string = <span class=\"built_in\">bytes</span>.decode(data)  <span class=\"comment\"># byte to str</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(string)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(recData[<span class=\"string\">&#x27;massage&#x27;</span>])</span><br><span class=\"line\">        c.sendall(<span class=\"string\">b&#x27;successfully connected&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> Client_Number == <span class=\"number\">0</span>:</span><br><span class=\"line\">        c, addr = s.accept()</span><br><span class=\"line\">        Client_Number = Client_Number + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Connected by&#x27;</span>, addr)</span><br><span class=\"line\">        <span class=\"comment\"># c.sendall(str.encode(&#x27;successfully connected from&#x27;+addr.__str__()))</span></span><br><span class=\"line\">        send_message(c, <span class=\"string\">&#x27;hello!&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> Client_Number == <span class=\"number\">1</span>:</span><br><span class=\"line\">        c1, addr1 = s.accept()</span><br><span class=\"line\">        Client_Number = Client_Number + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Connected by&#x27;</span>, addr1)</span><br><span class=\"line\">        <span class=\"comment\"># c1.sendall(str.encode(&#x27;successfully connected from&#x27;+addr1.__str__()))</span></span><br><span class=\"line\">        send_message(c1, <span class=\"string\">&#x27;hello!&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        c2, addr2 = s.accept()</span><br><span class=\"line\">        Client_Number = Client_Number + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Connected By&#x27;</span>, addr2)</span><br><span class=\"line\">        <span class=\"comment\"># c2.sendall(str.encode(&#x27;successfully connected from&#x27;+addr1.__str__()))</span></span><br><span class=\"line\">        send_message(c2, <span class=\"string\">&#x27;hello!&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> Client_Number == <span class=\"number\">3</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Players all connected&#x27;</span>)</span><br><span class=\"line\">        time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">        send_message(c, <span class=\"string\">&#x27;Players all connected&#x27;</span>)</span><br><span class=\"line\">        send_message(c1, <span class=\"string\">&#x27;Players all connected&#x27;</span>)</span><br><span class=\"line\">        send_message(c2, <span class=\"string\">&#x27;Players all connected&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"comment\"># START PLAYING</span></span><br><span class=\"line\">time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">init_card(c, c1, c2)  <span class=\"comment\"># 发牌</span></span><br><span class=\"line\"><span class=\"comment\"># START APPLICATING</span></span><br><span class=\"line\">TURN = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    ask_select(c, c1, c2)  <span class=\"comment\"># 要求客户端回复抢地主结果</span></span><br><span class=\"line\">    Client_Number = <span class=\"number\">0</span>  <span class=\"comment\">##收到回应数</span></span><br><span class=\"line\">    time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"comment\"># Waiting for Client 0</span></span><br><span class=\"line\">    receive = c.recv(<span class=\"number\">1024</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(receive.strip()) == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">continue</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        FLAG = json_prase(receive)</span><br><span class=\"line\">        Client_Number = Client_Number + <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"comment\"># Waiting for Client 1</span></span><br><span class=\"line\">    time.sleep(<span class=\"number\">1</span>)  <span class=\"comment\"># 等待buffer</span></span><br><span class=\"line\">    receive1 = c1.recv(<span class=\"number\">1024</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(receive1.strip()) == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">continue</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        FLAG1 = json_prase(receive1)</span><br><span class=\"line\">        Client_Number = Client_Number + <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"comment\"># Waiting for Client 2</span></span><br><span class=\"line\">    time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\">    receive2 = c2.recv(<span class=\"number\">1024</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(receive.strip()) == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">continue</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        FLAG2 = json_prase(receive2)</span><br><span class=\"line\">        Client_Number = Client_Number + <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> Client_Number == <span class=\"number\">3</span>:</span><br><span class=\"line\">        <span class=\"comment\"># print(&#x27;FLAG=&#x27;,FLAG)</span></span><br><span class=\"line\">        <span class=\"comment\"># print(&#x27;FLAG1=&#x27;,FLAG1)</span></span><br><span class=\"line\">        <span class=\"comment\"># print(&#x27;FLAG2=&#x27;,FLAG2)</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> FLAG + FLAG1 + FLAG2 == <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> FLAG + FLAG1 + FLAG2 != <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>  <span class=\"comment\"># 这里之后要有个加倍积分的函数</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> FLAG == <span class=\"number\">1</span>:</span><br><span class=\"line\">                send_message(c, <span class=\"string\">&#x27;You are the king!&#x27;</span>)</span><br><span class=\"line\">                send_message(c1, <span class=\"string\">&#x27;Player0 is the king!&#x27;</span>)</span><br><span class=\"line\">                send_message(c2, <span class=\"string\">&#x27;Player0 is the king!&#x27;</span>)</span><br><span class=\"line\">                time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">                send_card(c)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> FLAG1 == <span class=\"number\">1</span>:</span><br><span class=\"line\">                send_message(c1, <span class=\"string\">&#x27;You are the king!&#x27;</span>)</span><br><span class=\"line\">                send_message(c, <span class=\"string\">&#x27;Player1 is the king!&#x27;</span>)</span><br><span class=\"line\">                send_message(c2, <span class=\"string\">&#x27;Player1 is the king!&#x27;</span>)</span><br><span class=\"line\">                time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">                send_card(c1)</span><br><span class=\"line\">                TURN = <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> FLAG2 == <span class=\"number\">1</span>:</span><br><span class=\"line\">                send_message(c2, <span class=\"string\">&#x27;You are the king!&#x27;</span>)</span><br><span class=\"line\">                send_message(c, <span class=\"string\">&#x27;Player2 is the king!&#x27;</span>)</span><br><span class=\"line\">                send_message(c1, <span class=\"string\">&#x27;Player2 is the king!&#x27;</span>)</span><br><span class=\"line\">                time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">                send_card(c2)</span><br><span class=\"line\">                TURN = <span class=\"number\">2</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\"><span class=\"comment\"># GAME START!</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> TURN == <span class=\"number\">0</span>:</span><br><span class=\"line\">        set_turn(c, <span class=\"built_in\">type</span>, value, seq_num)</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            time.sleep(<span class=\"number\">0.1</span>)</span><br><span class=\"line\">            receive = c.recv(<span class=\"number\">1024</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(receive.strip()) == <span class=\"number\">0</span>:</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                json_prase(receive, c, c1, c2)</span><br><span class=\"line\">                TURN = Turner(TURN)</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> TURN == <span class=\"number\">1</span>:</span><br><span class=\"line\">        set_turn(c1, <span class=\"built_in\">type</span>, value, seq_num)</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            time.sleep(<span class=\"number\">0.1</span>)</span><br><span class=\"line\">            receive = c1.recv(<span class=\"number\">1024</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(receive.strip()) == <span class=\"number\">0</span>:</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                json_prase(receive, c, c1, c2)</span><br><span class=\"line\">                TURN = Turner(TURN)</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> TURN == <span class=\"number\">2</span>:</span><br><span class=\"line\">        set_turn(c2, <span class=\"built_in\">type</span>, value, seq_num)</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            time.sleep(<span class=\"number\">0.1</span>)</span><br><span class=\"line\">            receive = c2.recv(<span class=\"number\">1024</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(receive.strip()) == <span class=\"number\">0</span>:</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                json_prase(receive, c, c1, c2)</span><br><span class=\"line\">                TURN = Turner(TURN)</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Shutting down server...&#x27;</span>)</span><br><span class=\"line\">c.close()</span><br><span class=\"line\">c1.close()</span><br><span class=\"line\">c2.close()</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br><span class=\"line\">449</span><br><span class=\"line\">450</span><br><span class=\"line\">451</span><br><span class=\"line\">452</span><br><span class=\"line\">453</span><br><span class=\"line\">454</span><br><span class=\"line\">455</span><br><span class=\"line\">456</span><br><span class=\"line\">457</span><br><span class=\"line\">458</span><br><span class=\"line\">459</span><br><span class=\"line\">460</span><br><span class=\"line\">461</span><br><span class=\"line\">462</span><br><span class=\"line\">463</span><br><span class=\"line\">464</span><br><span class=\"line\">465</span><br><span class=\"line\">466</span><br><span class=\"line\">467</span><br><span class=\"line\">468</span><br><span class=\"line\">469</span><br><span class=\"line\">470</span><br><span class=\"line\">471</span><br><span class=\"line\">472</span><br><span class=\"line\">473</span><br><span class=\"line\">474</span><br><span class=\"line\">475</span><br><span class=\"line\">476</span><br><span class=\"line\">477</span><br><span class=\"line\">478</span><br><span class=\"line\">479</span><br><span class=\"line\">480</span><br><span class=\"line\">481</span><br><span class=\"line\">482</span><br><span class=\"line\">483</span><br><span class=\"line\">484</span><br><span class=\"line\">485</span><br><span class=\"line\">486</span><br><span class=\"line\">487</span><br><span class=\"line\">488</span><br><span class=\"line\">489</span><br><span class=\"line\">490</span><br><span class=\"line\">491</span><br><span class=\"line\">492</span><br><span class=\"line\">493</span><br><span class=\"line\">494</span><br><span class=\"line\">495</span><br><span class=\"line\">496</span><br><span class=\"line\">497</span><br><span class=\"line\">498</span><br><span class=\"line\">499</span><br><span class=\"line\">500</span><br><span class=\"line\">501</span><br><span class=\"line\">502</span><br><span class=\"line\">503</span><br><span class=\"line\">504</span><br><span class=\"line\">505</span><br><span class=\"line\">506</span><br><span class=\"line\">507</span><br><span class=\"line\">508</span><br><span class=\"line\">509</span><br><span class=\"line\">510</span><br><span class=\"line\">511</span><br><span class=\"line\">512</span><br><span class=\"line\">513</span><br><span class=\"line\">514</span><br><span class=\"line\">515</span><br><span class=\"line\">516</span><br><span class=\"line\">517</span><br><span class=\"line\">518</span><br><span class=\"line\">519</span><br><span class=\"line\">520</span><br><span class=\"line\">521</span><br><span class=\"line\">522</span><br><span class=\"line\">523</span><br><span class=\"line\">524</span><br><span class=\"line\">525</span><br><span class=\"line\">526</span><br><span class=\"line\">527</span><br><span class=\"line\">528</span><br><span class=\"line\">529</span><br><span class=\"line\">530</span><br><span class=\"line\">531</span><br><span class=\"line\">532</span><br><span class=\"line\">533</span><br><span class=\"line\">534</span><br><span class=\"line\">535</span><br><span class=\"line\">536</span><br><span class=\"line\">537</span><br><span class=\"line\">538</span><br><span class=\"line\">539</span><br><span class=\"line\">540</span><br><span class=\"line\">541</span><br><span class=\"line\">542</span><br><span class=\"line\">543</span><br><span class=\"line\">544</span><br><span class=\"line\">545</span><br><span class=\"line\">546</span><br><span class=\"line\">547</span><br><span class=\"line\">548</span><br><span class=\"line\">549</span><br><span class=\"line\">550</span><br><span class=\"line\">551</span><br><span class=\"line\">552</span><br><span class=\"line\">553</span><br><span class=\"line\">554</span><br><span class=\"line\">555</span><br><span class=\"line\">556</span><br><span class=\"line\">557</span><br><span class=\"line\">558</span><br><span class=\"line\">559</span><br><span class=\"line\">560</span><br><span class=\"line\">561</span><br><span class=\"line\">562</span><br><span class=\"line\">563</span><br><span class=\"line\">564</span><br><span class=\"line\">565</span><br><span class=\"line\">566</span><br><span class=\"line\">567</span><br><span class=\"line\">568</span><br><span class=\"line\">569</span><br><span class=\"line\">570</span><br><span class=\"line\">571</span><br><span class=\"line\">572</span><br><span class=\"line\">573</span><br><span class=\"line\">574</span><br><span class=\"line\">575</span><br><span class=\"line\">576</span><br><span class=\"line\">577</span><br><span class=\"line\">578</span><br><span class=\"line\">579</span><br><span class=\"line\">580</span><br><span class=\"line\">581</span><br><span class=\"line\">582</span><br><span class=\"line\">583</span><br><span class=\"line\">584</span><br><span class=\"line\">585</span><br><span class=\"line\">586</span><br><span class=\"line\">587</span><br><span class=\"line\">588</span><br><span class=\"line\">589</span><br><span class=\"line\">590</span><br><span class=\"line\">591</span><br><span class=\"line\">592</span><br><span class=\"line\">593</span><br><span class=\"line\">594</span><br><span class=\"line\">595</span><br><span class=\"line\">596</span><br><span class=\"line\">597</span><br><span class=\"line\">598</span><br><span class=\"line\">599</span><br><span class=\"line\">600</span><br><span class=\"line\">601</span><br><span class=\"line\">602</span><br><span class=\"line\">603</span><br><span class=\"line\">604</span><br><span class=\"line\">605</span><br><span class=\"line\">606</span><br><span class=\"line\">607</span><br><span class=\"line\">608</span><br><span class=\"line\">609</span><br><span class=\"line\">610</span><br><span class=\"line\">611</span><br><span class=\"line\">612</span><br><span class=\"line\">613</span><br><span class=\"line\">614</span><br><span class=\"line\">615</span><br><span class=\"line\">616</span><br><span class=\"line\">617</span><br><span class=\"line\">618</span><br><span class=\"line\">619</span><br><span class=\"line\">620</span><br><span class=\"line\">621</span><br><span class=\"line\">622</span><br><span class=\"line\">623</span><br><span class=\"line\">624</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> tkinter <span class=\"keyword\">as</span> tk</span><br><span class=\"line\"><span class=\"keyword\">from</span> tkinter <span class=\"keyword\">import</span> ttk, messagebox</span><br><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DouDiZhuGUI</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, root</span>):</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.root = root</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.root.title(<span class=\"string\">&quot;斗地主游戏&quot;</span>)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.root.geometry(<span class=\"string\">&quot;800x600&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 游戏状态变量</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.CARD = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">20</span>)]</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.Card_num = <span class=\"number\">17</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.CURRENT = []</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.selected_cards = []  <span class=\"comment\"># 当前选中的牌</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 当前牌型要求</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.required_type = <span class=\"string\">&#x27;init&#x27;</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.required_value = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.required_count = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 玩家信息</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.player_id = <span class=\"number\">0</span>  <span class=\"comment\"># 默认玩家ID</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.current_player = <span class=\"number\">0</span>  <span class=\"comment\"># 当前出牌玩家</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.landlord = -<span class=\"number\">1</span>  <span class=\"comment\"># 地主玩家ID</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 游戏状态</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.game_over = <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Socket连接</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.s = <span class=\"literal\">None</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.connected = <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 扑克牌映射</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.A = [<span class=\"string\">&#x27;红桃&#x27;</span>, <span class=\"string\">&#x27;黑桃&#x27;</span>, <span class=\"string\">&#x27;方片&#x27;</span>, <span class=\"string\">&#x27;梅花&#x27;</span>]</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.B = [<span class=\"string\">&#x27;3&#x27;</span>, <span class=\"string\">&#x27;4&#x27;</span>, <span class=\"string\">&#x27;5&#x27;</span>, <span class=\"string\">&#x27;6&#x27;</span>, <span class=\"string\">&#x27;7&#x27;</span>, <span class=\"string\">&#x27;8&#x27;</span>, <span class=\"string\">&#x27;9&#x27;</span>, <span class=\"string\">&#x27;10&#x27;</span>, <span class=\"string\">&#x27;J&#x27;</span>, <span class=\"string\">&#x27;Q&#x27;</span>, <span class=\"string\">&#x27;K&#x27;</span>, <span class=\"string\">&#x27;A&#x27;</span>, <span class=\"string\">&#x27;2&#x27;</span>]</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.POKERS = []</span><br><span class=\"line\">        n = <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"variable language_\">self</span>.A:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"variable language_\">self</span>.B:</span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.POKERS.append(((i + j + <span class=\"string\">&#x27;(&#x27;</span> + <span class=\"built_in\">str</span>(n) + <span class=\"string\">&#x27;)&#x27;</span>)))</span><br><span class=\"line\">                n += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.POKERS.append(<span class=\"string\">&#x27;小王(53)&#x27;</span>)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.POKERS.append(<span class=\"string\">&#x27;大王(54)&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 创建UI界面</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.create_widgets()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 启动接收消息的线程</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.receive_thread = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">map_card</span>(<span class=\"params\">self, Cno</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;将牌编号映射为牌面&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> Cno == <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"variable language_\">self</span>.POKERS[Cno - <span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get_card_color</span>(<span class=\"params\">self, card_num</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;获取牌的颜色&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> card_num &gt;= <span class=\"number\">1</span> <span class=\"keyword\">and</span> card_num &lt;= <span class=\"number\">13</span>:  <span class=\"comment\"># 红桃</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;red&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> card_num &gt;= <span class=\"number\">14</span> <span class=\"keyword\">and</span> card_num &lt;= <span class=\"number\">26</span>:  <span class=\"comment\"># 黑桃</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;black&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> card_num &gt;= <span class=\"number\">27</span> <span class=\"keyword\">and</span> card_num &lt;= <span class=\"number\">39</span>:  <span class=\"comment\"># 方片</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;red&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> card_num &gt;= <span class=\"number\">40</span> <span class=\"keyword\">and</span> card_num &lt;= <span class=\"number\">52</span>:  <span class=\"comment\"># 梅花</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;black&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:  <span class=\"comment\"># 王</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;gold&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get_card_display_info</span>(<span class=\"params\">self, card_num</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;获取牌的显示信息（文本和颜色）&quot;&quot;&quot;</span></span><br><span class=\"line\">        card_text = <span class=\"variable language_\">self</span>.map_card(card_num)</span><br><span class=\"line\">        card_color = <span class=\"variable language_\">self</span>.get_card_color(card_num)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> card_text, card_color</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">sort_cards_for_display</span>(<span class=\"params\">self, cards</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;按牌面大小排序，相同大小的牌放在一起&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> cards:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> []</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 按照牌面值分组</span></span><br><span class=\"line\">        card_groups = &#123;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> card <span class=\"keyword\">in</span> cards:</span><br><span class=\"line\">            card_value = <span class=\"variable language_\">self</span>.get_card_value(card)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> card_value <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> card_groups:</span><br><span class=\"line\">                card_groups[card_value] = []</span><br><span class=\"line\">            card_groups[card_value].append(card)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 对组进行排序（按牌值大小）</span></span><br><span class=\"line\">        sorted_groups = <span class=\"built_in\">sorted</span>(card_groups.items(), key=<span class=\"keyword\">lambda</span> x: x[<span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 合并排序后的牌</span></span><br><span class=\"line\">        sorted_cards = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> value, group <span class=\"keyword\">in</span> sorted_groups:</span><br><span class=\"line\">            <span class=\"comment\"># 组内按花色排序</span></span><br><span class=\"line\">            group.sort()</span><br><span class=\"line\">            sorted_cards.extend(group)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> sorted_cards</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get_card_value</span>(<span class=\"params\">self, card_num</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;获取牌的数值用于比较大小&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> card_num == <span class=\"number\">53</span>:  <span class=\"comment\"># 小王</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">16</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> card_num == <span class=\"number\">54</span>:  <span class=\"comment\"># 大王</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">17</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (card_num - <span class=\"number\">1</span>) % <span class=\"number\">13</span> + <span class=\"number\">3</span>  <span class=\"comment\"># 3到17的值，其中3最小，2最大（15）</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">parse_cards_type</span>(<span class=\"params\">self, cards</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;分析牌型&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> cards:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">None</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">        sorted_cards = <span class=\"built_in\">sorted</span>(cards)</span><br><span class=\"line\">        card_values = [<span class=\"variable language_\">self</span>.get_card_value(card) <span class=\"keyword\">for</span> card <span class=\"keyword\">in</span> sorted_cards]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 特殊牌型：王炸</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> sorted_cards == [<span class=\"number\">53</span>, <span class=\"number\">54</span>]:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&#x27;DualKing&#x27;</span>, <span class=\"number\">17</span>, <span class=\"number\">2</span>  <span class=\"comment\"># 王炸是最大的牌型</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 获取牌的点数分布</span></span><br><span class=\"line\">        value_counts = &#123;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> value <span class=\"keyword\">in</span> card_values:</span><br><span class=\"line\">            value_counts[value] = value_counts.get(value, <span class=\"number\">0</span>) + <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        unique_values = <span class=\"built_in\">sorted</span>(value_counts.keys())</span><br><span class=\"line\">        counts = <span class=\"built_in\">sorted</span>(value_counts.values(), reverse=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        card_count = <span class=\"built_in\">len</span>(cards)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 分析牌型</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> card_count == <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 单张</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Single&#x27;</span>, card_values[<span class=\"number\">0</span>], <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> card_count == <span class=\"number\">2</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(value_counts) == <span class=\"number\">1</span>:</span><br><span class=\"line\">                <span class=\"comment\"># 对子</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Dual&#x27;</span>, card_values[<span class=\"number\">0</span>], <span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> card_count == <span class=\"number\">3</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(value_counts) == <span class=\"number\">1</span>:</span><br><span class=\"line\">                <span class=\"comment\"># 三张</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Tri&#x27;</span>, card_values[<span class=\"number\">0</span>], <span class=\"number\">3</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> card_count == <span class=\"number\">4</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(value_counts) == <span class=\"number\">1</span>:</span><br><span class=\"line\">                <span class=\"comment\"># 炸弹</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Quad&#x27;</span>, card_values[<span class=\"number\">0</span>], <span class=\"number\">4</span></span><br><span class=\"line\">            <span class=\"keyword\">elif</span> <span class=\"built_in\">len</span>(value_counts) == <span class=\"number\">2</span> <span class=\"keyword\">and</span> <span class=\"number\">3</span> <span class=\"keyword\">in</span> counts:</span><br><span class=\"line\">                <span class=\"comment\"># 三带一</span></span><br><span class=\"line\">                tri_value = [v <span class=\"keyword\">for</span> v, c <span class=\"keyword\">in</span> value_counts.items() <span class=\"keyword\">if</span> c == <span class=\"number\">3</span>][<span class=\"number\">0</span>]</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">&#x27;3+1&#x27;</span>, tri_value, <span class=\"number\">4</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> card_count == <span class=\"number\">5</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(value_counts) == <span class=\"number\">2</span> <span class=\"keyword\">and</span> <span class=\"number\">3</span> <span class=\"keyword\">in</span> counts:</span><br><span class=\"line\">                <span class=\"comment\"># 三带二</span></span><br><span class=\"line\">                tri_value = [v <span class=\"keyword\">for</span> v, c <span class=\"keyword\">in</span> value_counts.items() <span class=\"keyword\">if</span> c == <span class=\"number\">3</span>][<span class=\"number\">0</span>]</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">&#x27;3+2&#x27;</span>, tri_value, <span class=\"number\">5</span></span><br><span class=\"line\">            <span class=\"keyword\">elif</span> <span class=\"built_in\">len</span>(value_counts) == <span class=\"number\">5</span>:</span><br><span class=\"line\">                <span class=\"comment\"># 顺子（5张）</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> unique_values[-<span class=\"number\">1</span>] - unique_values[<span class=\"number\">0</span>] == <span class=\"number\">4</span> <span class=\"keyword\">and</span> <span class=\"built_in\">len</span>(unique_values) == <span class=\"number\">5</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Sequ&#x27;</span>, unique_values[<span class=\"number\">0</span>], <span class=\"number\">5</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> card_count &gt;= <span class=\"number\">5</span> <span class=\"keyword\">and</span> <span class=\"built_in\">len</span>(value_counts) == card_count:</span><br><span class=\"line\">            <span class=\"comment\"># 检查是否为顺子（所有牌点数连续，且无重复）</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> unique_values[-<span class=\"number\">1</span>] - unique_values[<span class=\"number\">0</span>] == card_count - <span class=\"number\">1</span>:</span><br><span class=\"line\">                <span class=\"comment\"># 还需要检查不能包含2（除非是最后一张）</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> <span class=\"number\">15</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> unique_values <span class=\"keyword\">or</span> unique_values[-<span class=\"number\">1</span>] == <span class=\"number\">15</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Sequ&#x27;</span>, unique_values[<span class=\"number\">0</span>], card_count</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> card_count % <span class=\"number\">2</span> == <span class=\"number\">0</span> <span class=\"keyword\">and</span> card_count &gt;= <span class=\"number\">6</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 双顺子检查</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"variable language_\">self</span>._is_double_sequence(value_counts):</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">&#x27;doubleSequ&#x27;</span>, unique_values[<span class=\"number\">0</span>], card_count</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> card_count % <span class=\"number\">3</span> == <span class=\"number\">0</span> <span class=\"keyword\">and</span> card_count &gt;= <span class=\"number\">6</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 三顺子检查</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"variable language_\">self</span>._is_triple_sequence(value_counts):</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">&#x27;triSequ&#x27;</span>, unique_values[<span class=\"number\">0</span>], card_count</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 其他牌型</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">None</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">_is_double_sequence</span>(<span class=\"params\">self, value_counts</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;检查是否为双顺子&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"comment\"># 每个点数都必须出现2次，且点数连续</span></span><br><span class=\"line\">        values = <span class=\"built_in\">sorted</span>(value_counts.keys())</span><br><span class=\"line\">        counts = [value_counts[v] <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> values]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 检查每个点数是否都出现2次</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"built_in\">all</span>(c == <span class=\"number\">2</span> <span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> counts):</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 检查点数是否连续（不能包含2）</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"number\">15</span> <span class=\"keyword\">in</span> values:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 检查是否连续</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"built_in\">len</span>(values)):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> values[i] - values[i - <span class=\"number\">1</span>] != <span class=\"number\">1</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">_is_triple_sequence</span>(<span class=\"params\">self, value_counts</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;检查是否为三顺子&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"comment\"># 每个点数都必须出现3次，且点数连续</span></span><br><span class=\"line\">        values = <span class=\"built_in\">sorted</span>(value_counts.keys())</span><br><span class=\"line\">        counts = [value_counts[v] <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> values]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 检查每个点数是否都出现3次</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"built_in\">all</span>(c == <span class=\"number\">3</span> <span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> counts):</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 检查点数是否连续（不能包含2）</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"number\">15</span> <span class=\"keyword\">in</span> values:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 检查是否连续</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"built_in\">len</span>(values)):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> values[i] - values[i - <span class=\"number\">1</span>] != <span class=\"number\">1</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">is_valid_play</span>(<span class=\"params\">self, selected_cards, required_type, required_value, required_count</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;验证出牌是否符合规则&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> selected_cards:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span>, <span class=\"string\">&quot;没有选择牌&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 分析当前出牌的牌型</span></span><br><span class=\"line\">        card_type, card_value, card_count = <span class=\"variable language_\">self</span>.parse_cards_type(selected_cards)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> card_type <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span>, <span class=\"string\">&quot;无效的牌型&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 如果是跳过，直接返回True</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> card_type == <span class=\"string\">&#x27;Jump&#x27;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">True</span>, <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 如果是初始出牌（required_type为&#x27;init&#x27;），则不需要匹配牌型</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> required_type == <span class=\"string\">&#x27;init&#x27;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">True</span>, <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 检查牌数是否匹配</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> required_count &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> card_count != required_count <span class=\"keyword\">and</span> card_type <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> [<span class=\"string\">&#x27;Quad&#x27;</span>, <span class=\"string\">&#x27;DualKing&#x27;</span>]:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span>, <span class=\"string\">f&quot;牌数不匹配，需要<span class=\"subst\">&#123;required_count&#125;</span>张&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 特殊牌型可以直接压制任何非特殊牌型</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> card_type == <span class=\"string\">&#x27;Quad&#x27;</span>:  <span class=\"comment\"># 炸弹可以压制非炸弹</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">True</span>, <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> card_type == <span class=\"string\">&#x27;DualKing&#x27;</span>:  <span class=\"comment\"># 王炸是最大的</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">True</span>, <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 如果上家是特殊牌型，当前牌必须也是特殊牌型且能压制</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> required_type == <span class=\"string\">&#x27;Quad&#x27;</span> <span class=\"keyword\">and</span> card_type != <span class=\"string\">&#x27;Quad&#x27;</span> <span class=\"keyword\">and</span> card_type != <span class=\"string\">&#x27;DualKing&#x27;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span>, <span class=\"string\">&quot;只能用炸弹或王炸压制炸弹&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> required_type == <span class=\"string\">&#x27;DualKing&#x27;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span>, <span class=\"string\">&quot;王炸无法被压制&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 检查牌型是否匹配</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> card_type != required_type:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span>, <span class=\"string\">f&quot;牌型不匹配，需要<span class=\"subst\">&#123;required_type&#125;</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 检查牌力是否足够大</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> required_value &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> card_value &lt;= required_value:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span>, <span class=\"string\">f&quot;牌力不够大，需要大于<span class=\"subst\">&#123;required_value&#125;</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span>, <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">create_widgets</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;创建GUI界面&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"comment\"># 顶部信息栏</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.info_frame = ttk.Frame(<span class=\"variable language_\">self</span>.root)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.info_frame.pack(fill=tk.X, padx=<span class=\"number\">10</span>, pady=<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.info_label = ttk.Label(<span class=\"variable language_\">self</span>.info_frame, text=<span class=\"string\">&quot;欢迎来到斗地主游戏！&quot;</span>)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.info_label.pack(side=tk.LEFT)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 玩家信息标签</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.player_info_label = ttk.Label(<span class=\"variable language_\">self</span>.info_frame, text=<span class=\"string\">&quot;玩家ID: 0&quot;</span>)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.player_info_label.pack(side=tk.LEFT, padx=<span class=\"number\">10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 当前玩家标签</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.current_player_label = ttk.Label(<span class=\"variable language_\">self</span>.info_frame, text=<span class=\"string\">&quot;当前玩家: 0&quot;</span>)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.current_player_label.pack(side=tk.LEFT, padx=<span class=\"number\">10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 地主标识标签</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.landlord_label = ttk.Label(<span class=\"variable language_\">self</span>.info_frame, text=<span class=\"string\">&quot;地主: 未确定&quot;</span>)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.landlord_label.pack(side=tk.LEFT, padx=<span class=\"number\">10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 连接按钮</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.connect_button = ttk.Button(<span class=\"variable language_\">self</span>.info_frame, text=<span class=\"string\">&quot;连接服务器&quot;</span>, command=<span class=\"variable language_\">self</span>.connect_to_server)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.connect_button.pack(side=tk.RIGHT)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 中间游戏区域</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.game_frame = ttk.Frame(<span class=\"variable language_\">self</span>.root)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.game_frame.pack(fill=tk.BOTH, expand=<span class=\"literal\">True</span>, padx=<span class=\"number\">10</span>, pady=<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 手牌显示区域</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.hand_frame = ttk.LabelFrame(<span class=\"variable language_\">self</span>.game_frame, text=<span class=\"string\">&quot;我的手牌&quot;</span>)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.hand_frame.pack(fill=tk.BOTH, expand=<span class=\"literal\">True</span>, pady=<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 手牌画布和滚动条</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.hand_canvas = tk.Canvas(<span class=\"variable language_\">self</span>.hand_frame, height=<span class=\"number\">150</span>)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.hand_scrollbar = ttk.Scrollbar(<span class=\"variable language_\">self</span>.hand_frame, orient=<span class=\"string\">&quot;horizontal&quot;</span>, command=<span class=\"variable language_\">self</span>.hand_canvas.xview)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.hand_scrollable_frame = ttk.Frame(<span class=\"variable language_\">self</span>.hand_canvas)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.hand_scrollable_frame.bind(</span><br><span class=\"line\">            <span class=\"string\">&quot;&lt;Configure&gt;&quot;</span>,</span><br><span class=\"line\">            <span class=\"keyword\">lambda</span> e: <span class=\"variable language_\">self</span>.hand_canvas.configure(</span><br><span class=\"line\">                scrollregion=<span class=\"variable language_\">self</span>.hand_canvas.bbox(<span class=\"string\">&quot;all&quot;</span>)</span><br><span class=\"line\">            )</span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.hand_canvas.create_window((<span class=\"number\">0</span>, <span class=\"number\">0</span>), window=<span class=\"variable language_\">self</span>.hand_scrollable_frame, anchor=<span class=\"string\">&quot;nw&quot;</span>)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.hand_canvas.configure(xscrollcommand=<span class=\"variable language_\">self</span>.hand_scrollbar.<span class=\"built_in\">set</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.hand_canvas.pack(side=<span class=\"string\">&quot;top&quot;</span>, fill=<span class=\"string\">&quot;both&quot;</span>, expand=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.hand_scrollbar.pack(side=<span class=\"string\">&quot;bottom&quot;</span>, fill=<span class=\"string\">&quot;x&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 出牌信息区域</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.play_info_frame = ttk.Frame(<span class=\"variable language_\">self</span>.game_frame)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.play_info_frame.pack(fill=tk.X, pady=<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.current_type_label = ttk.Label(<span class=\"variable language_\">self</span>.play_info_frame, text=<span class=\"string\">&quot;当前牌型: 无&quot;</span>)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.current_type_label.pack(side=tk.LEFT)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.current_cards_label = ttk.Label(<span class=\"variable language_\">self</span>.play_info_frame, text=<span class=\"string\">&quot;当前出牌: 无&quot;</span>)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.current_cards_label.pack(side=tk.RIGHT)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 操作按钮区域</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.button_frame = ttk.Frame(<span class=\"variable language_\">self</span>.root)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.button_frame.pack(fill=tk.X, padx=<span class=\"number\">10</span>, pady=<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.play_button = ttk.Button(<span class=\"variable language_\">self</span>.button_frame, text=<span class=\"string\">&quot;出牌&quot;</span>, command=<span class=\"variable language_\">self</span>.play_cards, state=tk.DISABLED)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.play_button.pack(side=tk.LEFT, padx=<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.pass_button = ttk.Button(<span class=\"variable language_\">self</span>.button_frame, text=<span class=\"string\">&quot;不出&quot;</span>, command=<span class=\"variable language_\">self</span>.pass_turn, state=tk.DISABLED)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.pass_button.pack(side=tk.LEFT, padx=<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.show_hand_button = ttk.Button(<span class=\"variable language_\">self</span>.button_frame, text=<span class=\"string\">&quot;刷新手牌&quot;</span>, command=<span class=\"variable language_\">self</span>.show_hand)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.show_hand_button.pack(side=tk.LEFT, padx=<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 消息显示区域</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.message_frame = ttk.LabelFrame(<span class=\"variable language_\">self</span>.root, text=<span class=\"string\">&quot;游戏消息&quot;</span>)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.message_frame.pack(fill=tk.BOTH, expand=<span class=\"literal\">True</span>, padx=<span class=\"number\">10</span>, pady=<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.message_text = tk.Text(<span class=\"variable language_\">self</span>.message_frame, height=<span class=\"number\">8</span>)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.message_scrollbar = ttk.Scrollbar(<span class=\"variable language_\">self</span>.message_frame, orient=<span class=\"string\">&quot;vertical&quot;</span>, command=<span class=\"variable language_\">self</span>.message_text.yview)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.message_text.configure(yscrollcommand=<span class=\"variable language_\">self</span>.message_scrollbar.<span class=\"built_in\">set</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.message_text.pack(side=<span class=\"string\">&quot;left&quot;</span>, fill=<span class=\"string\">&quot;both&quot;</span>, expand=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.message_scrollbar.pack(side=<span class=\"string\">&quot;right&quot;</span>, fill=<span class=\"string\">&quot;y&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 底部状态栏</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.status_frame = ttk.Frame(<span class=\"variable language_\">self</span>.root)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.status_frame.pack(fill=tk.X, padx=<span class=\"number\">10</span>, pady=<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.status_label = ttk.Label(<span class=\"variable language_\">self</span>.status_frame, text=<span class=\"string\">&quot;未连接&quot;</span>)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.status_label.pack()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">connect_to_server</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;连接到游戏服务器&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"variable language_\">self</span>.connected:</span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.s = socket.socket()</span><br><span class=\"line\">                <span class=\"comment\"># host = &#x27;1.1.1.1&#x27;</span></span><br><span class=\"line\">                host = socket.gethostname()</span><br><span class=\"line\">                port = <span class=\"number\">12345</span></span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.s.connect((host, port))</span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.connected = <span class=\"literal\">True</span></span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.connect_button.config(text=<span class=\"string\">&quot;断开连接&quot;</span>)</span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.add_message(<span class=\"string\">&quot;成功连接到服务器&quot;</span>)</span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.status_label.config(text=<span class=\"string\">&quot;已连接&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\"># 启动接收消息线程</span></span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.receive_thread = threading.Thread(target=<span class=\"variable language_\">self</span>.receive_messages, daemon=<span class=\"literal\">True</span>)</span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.receive_thread.start()</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"comment\"># 断开连接</span></span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.connected = <span class=\"literal\">False</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> <span class=\"variable language_\">self</span>.s:</span><br><span class=\"line\">                    <span class=\"variable language_\">self</span>.s.close()</span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.connect_button.config(text=<span class=\"string\">&quot;连接服务器&quot;</span>)</span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.add_message(<span class=\"string\">&quot;已断开服务器连接&quot;</span>)</span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.status_label.config(text=<span class=\"string\">&quot;未连接&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">            messagebox.showerror(<span class=\"string\">&quot;连接错误&quot;</span>, <span class=\"string\">f&quot;无法连接到服务器: <span class=\"subst\">&#123;<span class=\"built_in\">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">receive_messages</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;接收服务器消息的线程函数&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"variable language_\">self</span>.connected:</span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                receive = <span class=\"variable language_\">self</span>.s.recv(<span class=\"number\">1024</span>)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(receive.strip()) == <span class=\"number\">0</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span></span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    <span class=\"variable language_\">self</span>.root.after(<span class=\"number\">0</span>, <span class=\"variable language_\">self</span>.json_parse, receive)</span><br><span class=\"line\">            <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> <span class=\"variable language_\">self</span>.connected:</span><br><span class=\"line\">                    <span class=\"variable language_\">self</span>.root.after(<span class=\"number\">0</span>, <span class=\"variable language_\">self</span>.handle_receive_error, <span class=\"built_in\">str</span>(e))</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">handle_receive_error</span>(<span class=\"params\">self, error</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;处理接收消息错误&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.add_message(<span class=\"string\">f&quot;接收消息错误: <span class=\"subst\">&#123;error&#125;</span>&quot;</span>)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.connected = <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.connect_button.config(text=<span class=\"string\">&quot;连接服务器&quot;</span>)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.status_label.config(text=<span class=\"string\">&quot;连接已断开&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">json_parse</span>(<span class=\"params\">self, js</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;解析服务器消息&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            recjs = <span class=\"built_in\">eval</span>(js)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> recjs[<span class=\"string\">&#x27;Operation&#x27;</span>] == <span class=\"string\">&#x27;message&#x27;</span>:</span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.add_message(recjs[<span class=\"string\">&#x27;message&#x27;</span>])</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> recjs[<span class=\"string\">&#x27;Operation&#x27;</span>] == <span class=\"string\">&#x27;init&#x27;</span>:</span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.CARD = recjs[<span class=\"string\">&#x27;message&#x27;</span>]</span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.show_hand()</span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.add_message(<span class=\"string\">&quot;游戏开始，手牌已发放&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> recjs[<span class=\"string\">&#x27;Operation&#x27;</span>] == <span class=\"string\">&#x27;AskS&#x27;</span>:</span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.ask_king()</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> recjs[<span class=\"string\">&#x27;Operation&#x27;</span>] == <span class=\"string\">&#x27;Add&#x27;</span>:</span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.Card_num = <span class=\"number\">20</span></span><br><span class=\"line\">                EX_CARD = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">3</span>)]</span><br><span class=\"line\">                <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"number\">3</span>):</span><br><span class=\"line\">                    EX_CARD[i] = recjs[<span class=\"string\">&#x27;message&#x27;</span>][i]</span><br><span class=\"line\">                    <span class=\"comment\"># 将底牌添加到手牌中</span></span><br><span class=\"line\">                    <span class=\"variable language_\">self</span>.CARD.append(recjs[<span class=\"string\">&#x27;message&#x27;</span>][i])</span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.add_message(<span class=\"string\">f&quot;你获得了底牌: <span class=\"subst\">&#123;<span class=\"string\">&#x27;, &#x27;</span>.join(<span class=\"built_in\">filter</span>(<span class=\"literal\">None</span>, (<span class=\"built_in\">list</span>(<span class=\"built_in\">map</span>(self.map_card, EX_CARD)))))&#125;</span>&quot;</span>)</span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.show_hand()</span><br><span class=\"line\">                <span class=\"comment\"># 更新地主标识</span></span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.landlord = <span class=\"variable language_\">self</span>.player_id</span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.landlord_label.config(text=<span class=\"string\">f&quot;地主: <span class=\"subst\">&#123;self.landlord&#125;</span>&quot;</span>)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> <span class=\"variable language_\">self</span>.landlord == <span class=\"variable language_\">self</span>.player_id:</span><br><span class=\"line\">                    <span class=\"variable language_\">self</span>.info_label.config(text=<span class=\"string\">&quot;你是地主！&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> recjs[<span class=\"string\">&#x27;Operation&#x27;</span>] == <span class=\"string\">&#x27;SetTurn&#x27;</span>:</span><br><span class=\"line\">                <span class=\"comment\"># 保存当前牌型要求</span></span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.required_type = recjs.get(<span class=\"string\">&#x27;type&#x27;</span>, <span class=\"string\">&#x27;init&#x27;</span>)</span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.required_value = recjs.get(<span class=\"string\">&#x27;value&#x27;</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.required_count = recjs.get(<span class=\"string\">&#x27;seq_num&#x27;</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\"># 更新当前玩家信息</span></span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.current_player = recjs.get(<span class=\"string\">&#x27;player&#x27;</span>, <span class=\"number\">0</span>)  <span class=\"comment\"># 假设服务器会发送player字段</span></span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.current_player_label.config(text=<span class=\"string\">f&quot;当前玩家: <span class=\"subst\">&#123;self.current_player&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\"># 启用出牌按钮</span></span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.play_button.config(state=tk.NORMAL)</span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.pass_button.config(state=tk.NORMAL)</span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.add_message(<span class=\"string\">&quot;轮到你出牌了&quot;</span>)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> <span class=\"variable language_\">self</span>.required_type != <span class=\"string\">&#x27;init&#x27;</span>:</span><br><span class=\"line\">                    <span class=\"variable language_\">self</span>.current_type_label.config(</span><br><span class=\"line\">                        text=<span class=\"string\">f&quot;当前牌型: <span class=\"subst\">&#123;self.required_type&#125;</span> (需要大于<span class=\"subst\">&#123;self.required_value&#125;</span>)&quot;</span>)</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    <span class=\"variable language_\">self</span>.current_type_label.config(text=<span class=\"string\">&quot;当前牌型: 无限制&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> recjs[<span class=\"string\">&#x27;Operation&#x27;</span>] == <span class=\"string\">&#x27;Announce&#x27;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> recjs[<span class=\"string\">&#x27;message&#x27;</span>] == []:</span><br><span class=\"line\">                    <span class=\"variable language_\">self</span>.add_message(<span class=\"string\">&#x27;上家选择跳过&#x27;</span>)</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    played_cards = <span class=\"built_in\">list</span>(<span class=\"built_in\">filter</span>(<span class=\"literal\">None</span>, (<span class=\"built_in\">list</span>(<span class=\"built_in\">map</span>(<span class=\"variable language_\">self</span>.map_card, <span class=\"built_in\">sorted</span>(recjs[<span class=\"string\">&#x27;message&#x27;</span>]))))))</span><br><span class=\"line\">                    <span class=\"variable language_\">self</span>.add_message(<span class=\"string\">f&quot;上家打出了: <span class=\"subst\">&#123;<span class=\"string\">&#x27;, &#x27;</span>.join(played_cards)&#125;</span>&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> recjs[<span class=\"string\">&#x27;Operation&#x27;</span>] == <span class=\"string\">&#x27;GameOver&#x27;</span>:</span><br><span class=\"line\">                winner = recjs.get(<span class=\"string\">&#x27;winner&#x27;</span>, <span class=\"string\">&#x27;未知&#x27;</span>)</span><br><span class=\"line\">                role = recjs.get(<span class=\"string\">&#x27;role&#x27;</span>, <span class=\"string\">&#x27;未知&#x27;</span>)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> winner == <span class=\"variable language_\">self</span>.player_id:</span><br><span class=\"line\">                    messagebox.showinfo(<span class=\"string\">&quot;游戏结束&quot;</span>, <span class=\"string\">f&quot;恭喜你赢了！你的角色是<span class=\"subst\">&#123;role&#125;</span>&quot;</span>)</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    messagebox.showinfo(<span class=\"string\">&quot;游戏结束&quot;</span>, <span class=\"string\">f&quot;游戏结束！获胜方是玩家<span class=\"subst\">&#123;winner&#125;</span>，角色是<span class=\"subst\">&#123;role&#125;</span>&quot;</span>)</span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.game_over = <span class=\"literal\">True</span></span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.play_button.config(state=tk.DISABLED)</span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.pass_button.config(state=tk.DISABLED)</span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.add_message(<span class=\"string\">f&quot;游戏结束！获胜方是玩家<span class=\"subst\">&#123;winner&#125;</span>，角色是<span class=\"subst\">&#123;role&#125;</span>&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.add_message(<span class=\"string\">&#x27;未知消息类型&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.add_message(<span class=\"string\">f&quot;消息解析错误: <span class=\"subst\">&#123;<span class=\"built_in\">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">show_hand</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;显示手牌&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"comment\"># 清空当前手牌显示</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> widget <span class=\"keyword\">in</span> <span class=\"variable language_\">self</span>.hand_scrollable_frame.winfo_children():</span><br><span class=\"line\">            widget.destroy()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 显示手牌</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.selected_cards = []  <span class=\"comment\"># 清空选中状态</span></span><br><span class=\"line\">        sorted_cards = <span class=\"variable language_\">self</span>.sort_cards_for_display(<span class=\"variable language_\">self</span>.CARD)</span><br><span class=\"line\">        filtered_cards = <span class=\"built_in\">list</span>(<span class=\"built_in\">filter</span>(<span class=\"literal\">None</span>, sorted_cards))  <span class=\"comment\"># 过滤掉0</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i, card_num <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(filtered_cards):</span><br><span class=\"line\">            card_text, card_color = <span class=\"variable language_\">self</span>.get_card_display_info(card_num)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> card_text:</span><br><span class=\"line\">                <span class=\"comment\"># 创建牌按钮</span></span><br><span class=\"line\">                card_button = tk.Button(</span><br><span class=\"line\">                    <span class=\"variable language_\">self</span>.hand_scrollable_frame,</span><br><span class=\"line\">                    text=card_text,</span><br><span class=\"line\">                    width=<span class=\"number\">12</span>,</span><br><span class=\"line\">                    height=<span class=\"number\">4</span>,</span><br><span class=\"line\">                    fg=card_color,  <span class=\"comment\"># 设置文字颜色</span></span><br><span class=\"line\">                    font=(<span class=\"string\">&#x27;Arial&#x27;</span>, <span class=\"number\">8</span>),</span><br><span class=\"line\">                    command=<span class=\"keyword\">lambda</span> idx=i, num=card_num: <span class=\"variable language_\">self</span>.toggle_card_selection(idx, num, card_button)</span><br><span class=\"line\">                )</span><br><span class=\"line\">                card_button.pack(side=tk.LEFT, padx=<span class=\"number\">2</span>, pady=<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">toggle_card_selection</span>(<span class=\"params\">self, idx, card_num, button</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;切换牌的选中状态&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> card_num <span class=\"keyword\">in</span> <span class=\"variable language_\">self</span>.selected_cards:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.selected_cards.remove(card_num)</span><br><span class=\"line\">            button.config(relief=tk.RAISED, bg=<span class=\"string\">&quot;lightgray&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.selected_cards.append(card_num)</span><br><span class=\"line\">            button.config(relief=tk.SUNKEN, bg=<span class=\"string\">&quot;yellow&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 更新当前选中牌显示</span></span><br><span class=\"line\">        selected_names = <span class=\"built_in\">list</span>(<span class=\"built_in\">filter</span>(<span class=\"literal\">None</span>, (<span class=\"built_in\">list</span>(<span class=\"built_in\">map</span>(<span class=\"variable language_\">self</span>.map_card, <span class=\"built_in\">sorted</span>(<span class=\"variable language_\">self</span>.selected_cards))))))</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.current_cards_label.config(text=<span class=\"string\">f&quot;选中的牌: <span class=\"subst\">&#123;<span class=\"string\">&#x27;, &#x27;</span>.join(selected_names) <span class=\"keyword\">if</span> selected_names <span class=\"keyword\">else</span> <span class=\"string\">&#x27;无&#x27;</span>&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">play_cards</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;出牌&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"variable language_\">self</span>.selected_cards:</span><br><span class=\"line\">            messagebox.showwarning(<span class=\"string\">&quot;出牌错误&quot;</span>, <span class=\"string\">&quot;请先选择要出的牌&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 验证出牌是否符合规则</span></span><br><span class=\"line\">        is_valid, message = <span class=\"variable language_\">self</span>.is_valid_play(</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.selected_cards,</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.required_type,</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.required_value,</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.required_count</span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> is_valid:</span><br><span class=\"line\">            messagebox.showwarning(<span class=\"string\">&quot;出牌错误&quot;</span>, message)</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 分析当前出牌的牌型</span></span><br><span class=\"line\">        card_type, card_value, card_count = <span class=\"variable language_\">self</span>.parse_cards_type(<span class=\"variable language_\">self</span>.selected_cards)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 构造JSON消息</span></span><br><span class=\"line\">        json_data = &#123;</span><br><span class=\"line\">            <span class=\"string\">&#x27;Status&#x27;</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;Operation&#x27;</span>: <span class=\"string\">&#x27;AnsTurn&#x27;</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;type&#x27;</span>: card_type,</span><br><span class=\"line\">            <span class=\"string\">&#x27;seq_num&#x27;</span>: card_count,  <span class=\"comment\"># 对于顺子等牌型，这个表示牌的数量</span></span><br><span class=\"line\">            <span class=\"string\">&#x27;message&#x27;</span>: <span class=\"variable language_\">self</span>.selected_cards,</span><br><span class=\"line\">            <span class=\"string\">&#x27;value&#x27;</span>: card_value</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.s.sendall(<span class=\"built_in\">str</span>.encode(<span class=\"built_in\">str</span>(json_data)))</span><br><span class=\"line\">            <span class=\"comment\"># 从手牌中移除已出的牌</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> card <span class=\"keyword\">in</span> <span class=\"variable language_\">self</span>.selected_cards:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> card <span class=\"keyword\">in</span> <span class=\"variable language_\">self</span>.CARD:</span><br><span class=\"line\">                    <span class=\"variable language_\">self</span>.CARD.remove(card)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.Card_num -= <span class=\"built_in\">len</span>(<span class=\"variable language_\">self</span>.selected_cards)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># 检查是否出完所有牌</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"variable language_\">self</span>.Card_num == <span class=\"number\">0</span>:</span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.game_over = <span class=\"literal\">True</span></span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.add_message(<span class=\"string\">&quot;恭喜你出完所有牌！&quot;</span>)</span><br><span class=\"line\">                <span class=\"comment\"># 禁用按钮</span></span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.play_button.config(state=tk.DISABLED)</span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.pass_button.config(state=tk.DISABLED)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.selected_cards = []</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.show_hand()</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.current_cards_label.config(text=<span class=\"string\">&quot;选中的牌: 无&quot;</span>)</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.play_button.config(state=tk.DISABLED)</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.pass_button.config(state=tk.DISABLED)</span><br><span class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">            messagebox.showerror(<span class=\"string\">&quot;出牌错误&quot;</span>, <span class=\"string\">f&quot;出牌失败: <span class=\"subst\">&#123;<span class=\"built_in\">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">pass_turn</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;跳过出牌&quot;&quot;&quot;</span></span><br><span class=\"line\">        json_data = &#123;</span><br><span class=\"line\">            <span class=\"string\">&#x27;Status&#x27;</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;Operation&#x27;</span>: <span class=\"string\">&#x27;AnsTurn&#x27;</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;type&#x27;</span>: <span class=\"string\">&#x27;Jump&#x27;</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;seq_num&#x27;</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;message&#x27;</span>: [],</span><br><span class=\"line\">            <span class=\"string\">&#x27;value&#x27;</span>: <span class=\"number\">0</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.s.sendall(<span class=\"built_in\">str</span>.encode(<span class=\"built_in\">str</span>(json_data)))</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.selected_cards = []</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.current_cards_label.config(text=<span class=\"string\">&quot;选中的牌: 无&quot;</span>)</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.play_button.config(state=tk.DISABLED)</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.pass_button.config(state=tk.DISABLED)</span><br><span class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">            messagebox.showerror(<span class=\"string\">&quot;操作错误&quot;</span>, <span class=\"string\">f&quot;跳过出牌失败: <span class=\"subst\">&#123;<span class=\"built_in\">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">ask_king</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;询问是否抢地主&quot;&quot;&quot;</span></span><br><span class=\"line\">        result = messagebox.askyesno(<span class=\"string\">&quot;抢地主&quot;</span>, <span class=\"string\">&quot;是否抢地主?&quot;</span>)</span><br><span class=\"line\">        json_data = &#123;</span><br><span class=\"line\">            <span class=\"string\">&#x27;Status&#x27;</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;Operation&#x27;</span>: <span class=\"string\">&#x27;AnsS&#x27;</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;message&#x27;</span>: <span class=\"number\">1</span> <span class=\"keyword\">if</span> result <span class=\"keyword\">else</span> <span class=\"number\">0</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.s.sendall(<span class=\"built_in\">str</span>.encode(<span class=\"built_in\">str</span>(json_data)))</span><br><span class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">            messagebox.showerror(<span class=\"string\">&quot;操作错误&quot;</span>, <span class=\"string\">f&quot;抢地主选择发送失败: <span class=\"subst\">&#123;<span class=\"built_in\">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">add_message</span>(<span class=\"params\">self, message</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;添加消息到消息框&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.message_text.insert(tk.END, <span class=\"string\">f&quot;[<span class=\"subst\">&#123;time.strftime(<span class=\"string\">&#x27;%H:%M:%S&#x27;</span>)&#125;</span>] <span class=\"subst\">&#123;message&#125;</span>\\n&quot;</span>)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.message_text.see(tk.END)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    root = tk.Tk()</span><br><span class=\"line\">    app = DouDiZhuGUI(root)</span><br><span class=\"line\">    root.mainloop()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<ul>\n<li>简易gui斗地主摸鱼小游戏；启动服务端和三个客户端即可使用</li>\n</ul>\n<h1 id=\"服务端\"><a href=\"#服务端\" class=\"headerlink\" title=\"服务端\"></a>服务端</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># 文件名：server.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\">Client_Number = <span class=\"number\">0</span>  <span class=\"comment\"># 客户端数</span></span><br><span class=\"line\">FLAG = <span class=\"number\">0</span></span><br><span class=\"line\">FLAG1 = <span class=\"number\">0</span></span><br><span class=\"line\">FLAG2 = <span class=\"number\">0</span>  <span class=\"comment\"># 抢地主判定符</span></span><br><span class=\"line\"><span class=\"comment\"># 牌型全局</span></span><br><span class=\"line\"><span class=\"built_in\">type</span> = <span class=\"string\">&#x27;init&#x27;</span></span><br><span class=\"line\">value = <span class=\"number\">0</span></span><br><span class=\"line\">seq_num = <span class=\"number\">0</span></span><br><span class=\"line\">jumpCounter = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">POKER = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">54</span>)]</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">55</span>):</span><br><span class=\"line\">    POKER[i - <span class=\"number\">1</span>] = i</span><br><span class=\"line\">random.shuffle(POKER)  <span class=\"comment\"># 洗牌</span></span><br><span class=\"line\"><span class=\"comment\"># print(POKER)</span></span><br><span class=\"line\">s = socket.socket()  <span class=\"comment\"># 创建 socket 对象</span></span><br><span class=\"line\"><span class=\"comment\">#host = socket.gethostname()  # 获取本地主机名</span></span><br><span class=\"line\">host = <span class=\"string\">&#x27;0.0.0.0&#x27;</span></span><br><span class=\"line\">port = <span class=\"number\">12345</span>  <span class=\"comment\"># 设置端口</span></span><br><span class=\"line\">s.bind((host, port))  <span class=\"comment\"># 绑定端口</span></span><br><span class=\"line\">s.listen(<span class=\"number\">3</span>)  <span class=\"comment\"># 等待客户端连接</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">Turner</span>(<span class=\"params\">num</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> num == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> num == <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> num == <span class=\"number\">2</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">send_message</span>(<span class=\"params\">socket, string</span>):</span><br><span class=\"line\">    json = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;status&#x27;</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;Operation&#x27;</span>: <span class=\"string\">&#x27;message&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;Card&#x27;</span>: [<span class=\"number\">0</span>],</span><br><span class=\"line\">        <span class=\"string\">&#x27;message&#x27;</span>: <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    json[<span class=\"string\">&#x27;message&#x27;</span>] = string</span><br><span class=\"line\">    socket.sendall(<span class=\"built_in\">str</span>.encode(<span class=\"built_in\">str</span>(json)))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">ask_select</span>(<span class=\"params\">socket, socket1, socket2</span>):</span><br><span class=\"line\">    json = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;Status&#x27;</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;Operation&#x27;</span>: <span class=\"string\">&#x27;AskS&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    socket.sendall(<span class=\"built_in\">str</span>.encode(<span class=\"built_in\">str</span>(json)))</span><br><span class=\"line\">    socket1.sendall(<span class=\"built_in\">str</span>.encode(<span class=\"built_in\">str</span>(json)))</span><br><span class=\"line\">    socket2.sendall(<span class=\"built_in\">str</span>.encode(<span class=\"built_in\">str</span>(json)))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">set_turn</span>(<span class=\"params\">socket, <span class=\"type\">Type</span>, value, seq_num</span>):</span><br><span class=\"line\">    json = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;Status&#x27;</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;Operation&#x27;</span>: <span class=\"string\">&#x27;SetTurn&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;type&#x27;</span>: <span class=\"type\">Type</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;value&#x27;</span>: value</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;sent:type=&#x27;</span>, <span class=\"type\">Type</span>, <span class=\"string\">&#x27; value=&#x27;</span>, value, <span class=\"string\">&#x27; seq_num=&#x27;</span>, seq_num)</span><br><span class=\"line\">    socket.sendall(<span class=\"built_in\">str</span>.encode(<span class=\"built_in\">str</span>(json)))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">json_prase</span>(<span class=\"params\">js, socket=s, socket1=s, socket2=s</span>):</span><br><span class=\"line\">    recjs = <span class=\"built_in\">eval</span>(js)</span><br><span class=\"line\">    <span class=\"keyword\">global</span> <span class=\"built_in\">type</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> value</span><br><span class=\"line\">    <span class=\"keyword\">global</span> seq_num</span><br><span class=\"line\">    <span class=\"keyword\">global</span> jumpCounter</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> recjs[<span class=\"string\">&#x27;Operation&#x27;</span>] == <span class=\"string\">&#x27;AnsS&#x27;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> recjs[<span class=\"string\">&#x27;message&#x27;</span>]</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> recjs[<span class=\"string\">&#x27;Operation&#x27;</span>] == <span class=\"string\">&#x27;AnsTurn&#x27;</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(recjs)</span><br><span class=\"line\">        <span class=\"comment\"># 这里会收到回牌</span></span><br><span class=\"line\">        json = &#123;</span><br><span class=\"line\">            <span class=\"string\">&#x27;Status&#x27;</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;Operation&#x27;</span>: <span class=\"string\">&#x27;Announce&#x27;</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;message&#x27;</span>: recjs[<span class=\"string\">&#x27;message&#x27;</span>]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        socket.sendall(<span class=\"built_in\">str</span>.encode(<span class=\"built_in\">str</span>(json)))</span><br><span class=\"line\">        socket1.sendall(<span class=\"built_in\">str</span>.encode(<span class=\"built_in\">str</span>(json)))</span><br><span class=\"line\">        socket2.sendall(<span class=\"built_in\">str</span>.encode(<span class=\"built_in\">str</span>(json)))</span><br><span class=\"line\">        <span class=\"keyword\">if</span> recjs[<span class=\"string\">&#x27;type&#x27;</span>] == <span class=\"string\">&#x27;Jump&#x27;</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> jumpCounter == <span class=\"number\">1</span>:</span><br><span class=\"line\">                <span class=\"built_in\">type</span> = <span class=\"string\">&#x27;init&#x27;</span></span><br><span class=\"line\">                value = <span class=\"number\">0</span></span><br><span class=\"line\">                seq_num = <span class=\"number\">0</span></span><br><span class=\"line\">                jumpCounter = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                jumpCounter += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            jumpCounter = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"built_in\">type</span> = recjs[<span class=\"string\">&#x27;type&#x27;</span>]</span><br><span class=\"line\">            value = recjs[<span class=\"string\">&#x27;value&#x27;</span>]</span><br><span class=\"line\">            seq_num = recjs[<span class=\"string\">&#x27;seq_num&#x27;</span>]</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;JC=&#x27;</span>, jumpCounter)</span><br><span class=\"line\">        time.sleep(<span class=\"number\">0.5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> recjs[<span class=\"string\">&#x27;Operation&#x27;</span>] == <span class=\"string\">&#x27;Clear&#x27;</span>:</span><br><span class=\"line\">        send_message(socket, <span class=\"string\">&#x27;Game Over!&#x27;</span>)</span><br><span class=\"line\">        send_message(socket1, <span class=\"string\">&#x27;Game Over!&#x27;</span>)</span><br><span class=\"line\">        send_message(socket2, <span class=\"string\">&#x27;Game Over!&#x27;</span>)</span><br><span class=\"line\">        socket.close()</span><br><span class=\"line\">        socket1.close()</span><br><span class=\"line\">        socket2.close()</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Unknown json&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">send_card</span>(<span class=\"params\">socket</span>):</span><br><span class=\"line\">    ADD = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">3</span>)]</span><br><span class=\"line\">    ADD[<span class=\"number\">0</span>] = POKER[<span class=\"number\">53</span>]</span><br><span class=\"line\">    ADD[<span class=\"number\">1</span>] = POKER[<span class=\"number\">52</span>]</span><br><span class=\"line\">    ADD[<span class=\"number\">2</span>] = POKER[<span class=\"number\">51</span>]</span><br><span class=\"line\">    json = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;status&#x27;</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;Operation&#x27;</span>: <span class=\"string\">&#x27;Add&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;message&#x27;</span>: <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    json[<span class=\"string\">&#x27;message&#x27;</span>] = ADD</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(json)</span><br><span class=\"line\">    socket.sendall(<span class=\"built_in\">str</span>.encode(<span class=\"built_in\">str</span>(json)))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">init_card</span>(<span class=\"params\">socket, socket1, socket2</span>):</span><br><span class=\"line\">    SET = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">20</span>)]</span><br><span class=\"line\">    SET1 = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">20</span>)]</span><br><span class=\"line\">    SET2 = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">20</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"number\">17</span>):</span><br><span class=\"line\">        SET[i] = POKER[i]  <span class=\"comment\"># poker的0到16号</span></span><br><span class=\"line\">        SET1[i] = POKER[i + <span class=\"number\">17</span>]  <span class=\"comment\"># poker的17到34</span></span><br><span class=\"line\">        SET2[i] = POKER[i + <span class=\"number\">34</span>]  <span class=\"comment\"># poker的34到51</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;SET:&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">sorted</span>(SET))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;SET1&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">sorted</span>(SET1))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;SET2&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">sorted</span>(SET2))</span><br><span class=\"line\">    json = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;status&#x27;</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;Operation&#x27;</span>: <span class=\"string\">&#x27;init&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;Card&#x27;</span>: [<span class=\"number\">0</span>],</span><br><span class=\"line\">        <span class=\"string\">&#x27;message&#x27;</span>: SET</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    json1 = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;status&#x27;</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;Operation&#x27;</span>: <span class=\"string\">&#x27;init&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;Card&#x27;</span>: [<span class=\"number\">0</span>],</span><br><span class=\"line\">        <span class=\"string\">&#x27;message&#x27;</span>: SET1</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    json2 = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;status&#x27;</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;Operation&#x27;</span>: <span class=\"string\">&#x27;init&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;Card&#x27;</span>: [<span class=\"number\">0</span>],</span><br><span class=\"line\">        <span class=\"string\">&#x27;message&#x27;</span>: SET2</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    socket.sendall(<span class=\"built_in\">str</span>.encode(<span class=\"built_in\">str</span>(json)))</span><br><span class=\"line\">    socket1.sendall(<span class=\"built_in\">str</span>.encode(<span class=\"built_in\">str</span>(json1)))</span><br><span class=\"line\">    socket2.sendall(<span class=\"built_in\">str</span>.encode(<span class=\"built_in\">str</span>(json2)))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># def receive_card(socket,socket1,socket2):</span></span><br><span class=\"line\"><span class=\"comment\"># START REGISTERRING</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> Client_Number == <span class=\"number\">9</span>:  <span class=\"comment\"># 暂存</span></span><br><span class=\"line\"></span><br><span class=\"line\">        c, addr = s.accept()  <span class=\"comment\"># 建立客户端连接。 c是本连接的socket</span></span><br><span class=\"line\">        Client_Number = Client_Number + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Connected by&#x27;</span>, addr)  <span class=\"comment\"># 输出客户端的IP地址</span></span><br><span class=\"line\">        data = c.recv(<span class=\"number\">1024</span>)  <span class=\"comment\"># 把接收的数据实例化</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(data.strip()) == <span class=\"number\">0</span>:</span><br><span class=\"line\">            c.sendall(<span class=\"string\">b&quot;Done&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            recData = <span class=\"built_in\">eval</span>(data)  <span class=\"comment\"># str 转 Dict</span></span><br><span class=\"line\">            string = <span class=\"built_in\">bytes</span>.decode(data)  <span class=\"comment\"># byte to str</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(string)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(recData[<span class=\"string\">&#x27;massage&#x27;</span>])</span><br><span class=\"line\">        c.sendall(<span class=\"string\">b&#x27;successfully connected&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> Client_Number == <span class=\"number\">0</span>:</span><br><span class=\"line\">        c, addr = s.accept()</span><br><span class=\"line\">        Client_Number = Client_Number + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Connected by&#x27;</span>, addr)</span><br><span class=\"line\">        <span class=\"comment\"># c.sendall(str.encode(&#x27;successfully connected from&#x27;+addr.__str__()))</span></span><br><span class=\"line\">        send_message(c, <span class=\"string\">&#x27;hello!&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> Client_Number == <span class=\"number\">1</span>:</span><br><span class=\"line\">        c1, addr1 = s.accept()</span><br><span class=\"line\">        Client_Number = Client_Number + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Connected by&#x27;</span>, addr1)</span><br><span class=\"line\">        <span class=\"comment\"># c1.sendall(str.encode(&#x27;successfully connected from&#x27;+addr1.__str__()))</span></span><br><span class=\"line\">        send_message(c1, <span class=\"string\">&#x27;hello!&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        c2, addr2 = s.accept()</span><br><span class=\"line\">        Client_Number = Client_Number + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Connected By&#x27;</span>, addr2)</span><br><span class=\"line\">        <span class=\"comment\"># c2.sendall(str.encode(&#x27;successfully connected from&#x27;+addr1.__str__()))</span></span><br><span class=\"line\">        send_message(c2, <span class=\"string\">&#x27;hello!&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> Client_Number == <span class=\"number\">3</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Players all connected&#x27;</span>)</span><br><span class=\"line\">        time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">        send_message(c, <span class=\"string\">&#x27;Players all connected&#x27;</span>)</span><br><span class=\"line\">        send_message(c1, <span class=\"string\">&#x27;Players all connected&#x27;</span>)</span><br><span class=\"line\">        send_message(c2, <span class=\"string\">&#x27;Players all connected&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"comment\"># START PLAYING</span></span><br><span class=\"line\">time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">init_card(c, c1, c2)  <span class=\"comment\"># 发牌</span></span><br><span class=\"line\"><span class=\"comment\"># START APPLICATING</span></span><br><span class=\"line\">TURN = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    ask_select(c, c1, c2)  <span class=\"comment\"># 要求客户端回复抢地主结果</span></span><br><span class=\"line\">    Client_Number = <span class=\"number\">0</span>  <span class=\"comment\">##收到回应数</span></span><br><span class=\"line\">    time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"comment\"># Waiting for Client 0</span></span><br><span class=\"line\">    receive = c.recv(<span class=\"number\">1024</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(receive.strip()) == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">continue</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        FLAG = json_prase(receive)</span><br><span class=\"line\">        Client_Number = Client_Number + <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"comment\"># Waiting for Client 1</span></span><br><span class=\"line\">    time.sleep(<span class=\"number\">1</span>)  <span class=\"comment\"># 等待buffer</span></span><br><span class=\"line\">    receive1 = c1.recv(<span class=\"number\">1024</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(receive1.strip()) == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">continue</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        FLAG1 = json_prase(receive1)</span><br><span class=\"line\">        Client_Number = Client_Number + <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"comment\"># Waiting for Client 2</span></span><br><span class=\"line\">    time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\">    receive2 = c2.recv(<span class=\"number\">1024</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(receive.strip()) == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">continue</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        FLAG2 = json_prase(receive2)</span><br><span class=\"line\">        Client_Number = Client_Number + <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> Client_Number == <span class=\"number\">3</span>:</span><br><span class=\"line\">        <span class=\"comment\"># print(&#x27;FLAG=&#x27;,FLAG)</span></span><br><span class=\"line\">        <span class=\"comment\"># print(&#x27;FLAG1=&#x27;,FLAG1)</span></span><br><span class=\"line\">        <span class=\"comment\"># print(&#x27;FLAG2=&#x27;,FLAG2)</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> FLAG + FLAG1 + FLAG2 == <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> FLAG + FLAG1 + FLAG2 != <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>  <span class=\"comment\"># 这里之后要有个加倍积分的函数</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> FLAG == <span class=\"number\">1</span>:</span><br><span class=\"line\">                send_message(c, <span class=\"string\">&#x27;You are the king!&#x27;</span>)</span><br><span class=\"line\">                send_message(c1, <span class=\"string\">&#x27;Player0 is the king!&#x27;</span>)</span><br><span class=\"line\">                send_message(c2, <span class=\"string\">&#x27;Player0 is the king!&#x27;</span>)</span><br><span class=\"line\">                time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">                send_card(c)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> FLAG1 == <span class=\"number\">1</span>:</span><br><span class=\"line\">                send_message(c1, <span class=\"string\">&#x27;You are the king!&#x27;</span>)</span><br><span class=\"line\">                send_message(c, <span class=\"string\">&#x27;Player1 is the king!&#x27;</span>)</span><br><span class=\"line\">                send_message(c2, <span class=\"string\">&#x27;Player1 is the king!&#x27;</span>)</span><br><span class=\"line\">                time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">                send_card(c1)</span><br><span class=\"line\">                TURN = <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> FLAG2 == <span class=\"number\">1</span>:</span><br><span class=\"line\">                send_message(c2, <span class=\"string\">&#x27;You are the king!&#x27;</span>)</span><br><span class=\"line\">                send_message(c, <span class=\"string\">&#x27;Player2 is the king!&#x27;</span>)</span><br><span class=\"line\">                send_message(c1, <span class=\"string\">&#x27;Player2 is the king!&#x27;</span>)</span><br><span class=\"line\">                time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">                send_card(c2)</span><br><span class=\"line\">                TURN = <span class=\"number\">2</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\"><span class=\"comment\"># GAME START!</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> TURN == <span class=\"number\">0</span>:</span><br><span class=\"line\">        set_turn(c, <span class=\"built_in\">type</span>, value, seq_num)</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            time.sleep(<span class=\"number\">0.1</span>)</span><br><span class=\"line\">            receive = c.recv(<span class=\"number\">1024</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(receive.strip()) == <span class=\"number\">0</span>:</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                json_prase(receive, c, c1, c2)</span><br><span class=\"line\">                TURN = Turner(TURN)</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> TURN == <span class=\"number\">1</span>:</span><br><span class=\"line\">        set_turn(c1, <span class=\"built_in\">type</span>, value, seq_num)</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            time.sleep(<span class=\"number\">0.1</span>)</span><br><span class=\"line\">            receive = c1.recv(<span class=\"number\">1024</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(receive.strip()) == <span class=\"number\">0</span>:</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                json_prase(receive, c, c1, c2)</span><br><span class=\"line\">                TURN = Turner(TURN)</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> TURN == <span class=\"number\">2</span>:</span><br><span class=\"line\">        set_turn(c2, <span class=\"built_in\">type</span>, value, seq_num)</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            time.sleep(<span class=\"number\">0.1</span>)</span><br><span class=\"line\">            receive = c2.recv(<span class=\"number\">1024</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(receive.strip()) == <span class=\"number\">0</span>:</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                json_prase(receive, c, c1, c2)</span><br><span class=\"line\">                TURN = Turner(TURN)</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Shutting down server...&#x27;</span>)</span><br><span class=\"line\">c.close()</span><br><span class=\"line\">c1.close()</span><br><span class=\"line\">c2.close()</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br><span class=\"line\">449</span><br><span class=\"line\">450</span><br><span class=\"line\">451</span><br><span class=\"line\">452</span><br><span class=\"line\">453</span><br><span class=\"line\">454</span><br><span class=\"line\">455</span><br><span class=\"line\">456</span><br><span class=\"line\">457</span><br><span class=\"line\">458</span><br><span class=\"line\">459</span><br><span class=\"line\">460</span><br><span class=\"line\">461</span><br><span class=\"line\">462</span><br><span class=\"line\">463</span><br><span class=\"line\">464</span><br><span class=\"line\">465</span><br><span class=\"line\">466</span><br><span class=\"line\">467</span><br><span class=\"line\">468</span><br><span class=\"line\">469</span><br><span class=\"line\">470</span><br><span class=\"line\">471</span><br><span class=\"line\">472</span><br><span class=\"line\">473</span><br><span class=\"line\">474</span><br><span class=\"line\">475</span><br><span class=\"line\">476</span><br><span class=\"line\">477</span><br><span class=\"line\">478</span><br><span class=\"line\">479</span><br><span class=\"line\">480</span><br><span class=\"line\">481</span><br><span class=\"line\">482</span><br><span class=\"line\">483</span><br><span class=\"line\">484</span><br><span class=\"line\">485</span><br><span class=\"line\">486</span><br><span class=\"line\">487</span><br><span class=\"line\">488</span><br><span class=\"line\">489</span><br><span class=\"line\">490</span><br><span class=\"line\">491</span><br><span class=\"line\">492</span><br><span class=\"line\">493</span><br><span class=\"line\">494</span><br><span class=\"line\">495</span><br><span class=\"line\">496</span><br><span class=\"line\">497</span><br><span class=\"line\">498</span><br><span class=\"line\">499</span><br><span class=\"line\">500</span><br><span class=\"line\">501</span><br><span class=\"line\">502</span><br><span class=\"line\">503</span><br><span class=\"line\">504</span><br><span class=\"line\">505</span><br><span class=\"line\">506</span><br><span class=\"line\">507</span><br><span class=\"line\">508</span><br><span class=\"line\">509</span><br><span class=\"line\">510</span><br><span class=\"line\">511</span><br><span class=\"line\">512</span><br><span class=\"line\">513</span><br><span class=\"line\">514</span><br><span class=\"line\">515</span><br><span class=\"line\">516</span><br><span class=\"line\">517</span><br><span class=\"line\">518</span><br><span class=\"line\">519</span><br><span class=\"line\">520</span><br><span class=\"line\">521</span><br><span class=\"line\">522</span><br><span class=\"line\">523</span><br><span class=\"line\">524</span><br><span class=\"line\">525</span><br><span class=\"line\">526</span><br><span class=\"line\">527</span><br><span class=\"line\">528</span><br><span class=\"line\">529</span><br><span class=\"line\">530</span><br><span class=\"line\">531</span><br><span class=\"line\">532</span><br><span class=\"line\">533</span><br><span class=\"line\">534</span><br><span class=\"line\">535</span><br><span class=\"line\">536</span><br><span class=\"line\">537</span><br><span class=\"line\">538</span><br><span class=\"line\">539</span><br><span class=\"line\">540</span><br><span class=\"line\">541</span><br><span class=\"line\">542</span><br><span class=\"line\">543</span><br><span class=\"line\">544</span><br><span class=\"line\">545</span><br><span class=\"line\">546</span><br><span class=\"line\">547</span><br><span class=\"line\">548</span><br><span class=\"line\">549</span><br><span class=\"line\">550</span><br><span class=\"line\">551</span><br><span class=\"line\">552</span><br><span class=\"line\">553</span><br><span class=\"line\">554</span><br><span class=\"line\">555</span><br><span class=\"line\">556</span><br><span class=\"line\">557</span><br><span class=\"line\">558</span><br><span class=\"line\">559</span><br><span class=\"line\">560</span><br><span class=\"line\">561</span><br><span class=\"line\">562</span><br><span class=\"line\">563</span><br><span class=\"line\">564</span><br><span class=\"line\">565</span><br><span class=\"line\">566</span><br><span class=\"line\">567</span><br><span class=\"line\">568</span><br><span class=\"line\">569</span><br><span class=\"line\">570</span><br><span class=\"line\">571</span><br><span class=\"line\">572</span><br><span class=\"line\">573</span><br><span class=\"line\">574</span><br><span class=\"line\">575</span><br><span class=\"line\">576</span><br><span class=\"line\">577</span><br><span class=\"line\">578</span><br><span class=\"line\">579</span><br><span class=\"line\">580</span><br><span class=\"line\">581</span><br><span class=\"line\">582</span><br><span class=\"line\">583</span><br><span class=\"line\">584</span><br><span class=\"line\">585</span><br><span class=\"line\">586</span><br><span class=\"line\">587</span><br><span class=\"line\">588</span><br><span class=\"line\">589</span><br><span class=\"line\">590</span><br><span class=\"line\">591</span><br><span class=\"line\">592</span><br><span class=\"line\">593</span><br><span class=\"line\">594</span><br><span class=\"line\">595</span><br><span class=\"line\">596</span><br><span class=\"line\">597</span><br><span class=\"line\">598</span><br><span class=\"line\">599</span><br><span class=\"line\">600</span><br><span class=\"line\">601</span><br><span class=\"line\">602</span><br><span class=\"line\">603</span><br><span class=\"line\">604</span><br><span class=\"line\">605</span><br><span class=\"line\">606</span><br><span class=\"line\">607</span><br><span class=\"line\">608</span><br><span class=\"line\">609</span><br><span class=\"line\">610</span><br><span class=\"line\">611</span><br><span class=\"line\">612</span><br><span class=\"line\">613</span><br><span class=\"line\">614</span><br><span class=\"line\">615</span><br><span class=\"line\">616</span><br><span class=\"line\">617</span><br><span class=\"line\">618</span><br><span class=\"line\">619</span><br><span class=\"line\">620</span><br><span class=\"line\">621</span><br><span class=\"line\">622</span><br><span class=\"line\">623</span><br><span class=\"line\">624</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> tkinter <span class=\"keyword\">as</span> tk</span><br><span class=\"line\"><span class=\"keyword\">from</span> tkinter <span class=\"keyword\">import</span> ttk, messagebox</span><br><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DouDiZhuGUI</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, root</span>):</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.root = root</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.root.title(<span class=\"string\">&quot;斗地主游戏&quot;</span>)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.root.geometry(<span class=\"string\">&quot;800x600&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 游戏状态变量</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.CARD = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">20</span>)]</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.Card_num = <span class=\"number\">17</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.CURRENT = []</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.selected_cards = []  <span class=\"comment\"># 当前选中的牌</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 当前牌型要求</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.required_type = <span class=\"string\">&#x27;init&#x27;</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.required_value = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.required_count = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 玩家信息</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.player_id = <span class=\"number\">0</span>  <span class=\"comment\"># 默认玩家ID</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.current_player = <span class=\"number\">0</span>  <span class=\"comment\"># 当前出牌玩家</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.landlord = -<span class=\"number\">1</span>  <span class=\"comment\"># 地主玩家ID</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 游戏状态</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.game_over = <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Socket连接</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.s = <span class=\"literal\">None</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.connected = <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 扑克牌映射</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.A = [<span class=\"string\">&#x27;红桃&#x27;</span>, <span class=\"string\">&#x27;黑桃&#x27;</span>, <span class=\"string\">&#x27;方片&#x27;</span>, <span class=\"string\">&#x27;梅花&#x27;</span>]</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.B = [<span class=\"string\">&#x27;3&#x27;</span>, <span class=\"string\">&#x27;4&#x27;</span>, <span class=\"string\">&#x27;5&#x27;</span>, <span class=\"string\">&#x27;6&#x27;</span>, <span class=\"string\">&#x27;7&#x27;</span>, <span class=\"string\">&#x27;8&#x27;</span>, <span class=\"string\">&#x27;9&#x27;</span>, <span class=\"string\">&#x27;10&#x27;</span>, <span class=\"string\">&#x27;J&#x27;</span>, <span class=\"string\">&#x27;Q&#x27;</span>, <span class=\"string\">&#x27;K&#x27;</span>, <span class=\"string\">&#x27;A&#x27;</span>, <span class=\"string\">&#x27;2&#x27;</span>]</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.POKERS = []</span><br><span class=\"line\">        n = <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"variable language_\">self</span>.A:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"variable language_\">self</span>.B:</span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.POKERS.append(((i + j + <span class=\"string\">&#x27;(&#x27;</span> + <span class=\"built_in\">str</span>(n) + <span class=\"string\">&#x27;)&#x27;</span>)))</span><br><span class=\"line\">                n += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.POKERS.append(<span class=\"string\">&#x27;小王(53)&#x27;</span>)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.POKERS.append(<span class=\"string\">&#x27;大王(54)&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 创建UI界面</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.create_widgets()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 启动接收消息的线程</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.receive_thread = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">map_card</span>(<span class=\"params\">self, Cno</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;将牌编号映射为牌面&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> Cno == <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"variable language_\">self</span>.POKERS[Cno - <span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get_card_color</span>(<span class=\"params\">self, card_num</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;获取牌的颜色&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> card_num &gt;= <span class=\"number\">1</span> <span class=\"keyword\">and</span> card_num &lt;= <span class=\"number\">13</span>:  <span class=\"comment\"># 红桃</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;red&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> card_num &gt;= <span class=\"number\">14</span> <span class=\"keyword\">and</span> card_num &lt;= <span class=\"number\">26</span>:  <span class=\"comment\"># 黑桃</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;black&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> card_num &gt;= <span class=\"number\">27</span> <span class=\"keyword\">and</span> card_num &lt;= <span class=\"number\">39</span>:  <span class=\"comment\"># 方片</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;red&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> card_num &gt;= <span class=\"number\">40</span> <span class=\"keyword\">and</span> card_num &lt;= <span class=\"number\">52</span>:  <span class=\"comment\"># 梅花</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;black&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:  <span class=\"comment\"># 王</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;gold&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get_card_display_info</span>(<span class=\"params\">self, card_num</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;获取牌的显示信息（文本和颜色）&quot;&quot;&quot;</span></span><br><span class=\"line\">        card_text = <span class=\"variable language_\">self</span>.map_card(card_num)</span><br><span class=\"line\">        card_color = <span class=\"variable language_\">self</span>.get_card_color(card_num)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> card_text, card_color</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">sort_cards_for_display</span>(<span class=\"params\">self, cards</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;按牌面大小排序，相同大小的牌放在一起&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> cards:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> []</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 按照牌面值分组</span></span><br><span class=\"line\">        card_groups = &#123;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> card <span class=\"keyword\">in</span> cards:</span><br><span class=\"line\">            card_value = <span class=\"variable language_\">self</span>.get_card_value(card)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> card_value <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> card_groups:</span><br><span class=\"line\">                card_groups[card_value] = []</span><br><span class=\"line\">            card_groups[card_value].append(card)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 对组进行排序（按牌值大小）</span></span><br><span class=\"line\">        sorted_groups = <span class=\"built_in\">sorted</span>(card_groups.items(), key=<span class=\"keyword\">lambda</span> x: x[<span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 合并排序后的牌</span></span><br><span class=\"line\">        sorted_cards = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> value, group <span class=\"keyword\">in</span> sorted_groups:</span><br><span class=\"line\">            <span class=\"comment\"># 组内按花色排序</span></span><br><span class=\"line\">            group.sort()</span><br><span class=\"line\">            sorted_cards.extend(group)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> sorted_cards</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get_card_value</span>(<span class=\"params\">self, card_num</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;获取牌的数值用于比较大小&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> card_num == <span class=\"number\">53</span>:  <span class=\"comment\"># 小王</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">16</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> card_num == <span class=\"number\">54</span>:  <span class=\"comment\"># 大王</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">17</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (card_num - <span class=\"number\">1</span>) % <span class=\"number\">13</span> + <span class=\"number\">3</span>  <span class=\"comment\"># 3到17的值，其中3最小，2最大（15）</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">parse_cards_type</span>(<span class=\"params\">self, cards</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;分析牌型&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> cards:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">None</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">        sorted_cards = <span class=\"built_in\">sorted</span>(cards)</span><br><span class=\"line\">        card_values = [<span class=\"variable language_\">self</span>.get_card_value(card) <span class=\"keyword\">for</span> card <span class=\"keyword\">in</span> sorted_cards]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 特殊牌型：王炸</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> sorted_cards == [<span class=\"number\">53</span>, <span class=\"number\">54</span>]:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&#x27;DualKing&#x27;</span>, <span class=\"number\">17</span>, <span class=\"number\">2</span>  <span class=\"comment\"># 王炸是最大的牌型</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 获取牌的点数分布</span></span><br><span class=\"line\">        value_counts = &#123;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> value <span class=\"keyword\">in</span> card_values:</span><br><span class=\"line\">            value_counts[value] = value_counts.get(value, <span class=\"number\">0</span>) + <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        unique_values = <span class=\"built_in\">sorted</span>(value_counts.keys())</span><br><span class=\"line\">        counts = <span class=\"built_in\">sorted</span>(value_counts.values(), reverse=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        card_count = <span class=\"built_in\">len</span>(cards)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 分析牌型</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> card_count == <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 单张</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Single&#x27;</span>, card_values[<span class=\"number\">0</span>], <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> card_count == <span class=\"number\">2</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(value_counts) == <span class=\"number\">1</span>:</span><br><span class=\"line\">                <span class=\"comment\"># 对子</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Dual&#x27;</span>, card_values[<span class=\"number\">0</span>], <span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> card_count == <span class=\"number\">3</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(value_counts) == <span class=\"number\">1</span>:</span><br><span class=\"line\">                <span class=\"comment\"># 三张</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Tri&#x27;</span>, card_values[<span class=\"number\">0</span>], <span class=\"number\">3</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> card_count == <span class=\"number\">4</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(value_counts) == <span class=\"number\">1</span>:</span><br><span class=\"line\">                <span class=\"comment\"># 炸弹</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Quad&#x27;</span>, card_values[<span class=\"number\">0</span>], <span class=\"number\">4</span></span><br><span class=\"line\">            <span class=\"keyword\">elif</span> <span class=\"built_in\">len</span>(value_counts) == <span class=\"number\">2</span> <span class=\"keyword\">and</span> <span class=\"number\">3</span> <span class=\"keyword\">in</span> counts:</span><br><span class=\"line\">                <span class=\"comment\"># 三带一</span></span><br><span class=\"line\">                tri_value = [v <span class=\"keyword\">for</span> v, c <span class=\"keyword\">in</span> value_counts.items() <span class=\"keyword\">if</span> c == <span class=\"number\">3</span>][<span class=\"number\">0</span>]</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">&#x27;3+1&#x27;</span>, tri_value, <span class=\"number\">4</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> card_count == <span class=\"number\">5</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(value_counts) == <span class=\"number\">2</span> <span class=\"keyword\">and</span> <span class=\"number\">3</span> <span class=\"keyword\">in</span> counts:</span><br><span class=\"line\">                <span class=\"comment\"># 三带二</span></span><br><span class=\"line\">                tri_value = [v <span class=\"keyword\">for</span> v, c <span class=\"keyword\">in</span> value_counts.items() <span class=\"keyword\">if</span> c == <span class=\"number\">3</span>][<span class=\"number\">0</span>]</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">&#x27;3+2&#x27;</span>, tri_value, <span class=\"number\">5</span></span><br><span class=\"line\">            <span class=\"keyword\">elif</span> <span class=\"built_in\">len</span>(value_counts) == <span class=\"number\">5</span>:</span><br><span class=\"line\">                <span class=\"comment\"># 顺子（5张）</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> unique_values[-<span class=\"number\">1</span>] - unique_values[<span class=\"number\">0</span>] == <span class=\"number\">4</span> <span class=\"keyword\">and</span> <span class=\"built_in\">len</span>(unique_values) == <span class=\"number\">5</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Sequ&#x27;</span>, unique_values[<span class=\"number\">0</span>], <span class=\"number\">5</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> card_count &gt;= <span class=\"number\">5</span> <span class=\"keyword\">and</span> <span class=\"built_in\">len</span>(value_counts) == card_count:</span><br><span class=\"line\">            <span class=\"comment\"># 检查是否为顺子（所有牌点数连续，且无重复）</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> unique_values[-<span class=\"number\">1</span>] - unique_values[<span class=\"number\">0</span>] == card_count - <span class=\"number\">1</span>:</span><br><span class=\"line\">                <span class=\"comment\"># 还需要检查不能包含2（除非是最后一张）</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> <span class=\"number\">15</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> unique_values <span class=\"keyword\">or</span> unique_values[-<span class=\"number\">1</span>] == <span class=\"number\">15</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Sequ&#x27;</span>, unique_values[<span class=\"number\">0</span>], card_count</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> card_count % <span class=\"number\">2</span> == <span class=\"number\">0</span> <span class=\"keyword\">and</span> card_count &gt;= <span class=\"number\">6</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 双顺子检查</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"variable language_\">self</span>._is_double_sequence(value_counts):</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">&#x27;doubleSequ&#x27;</span>, unique_values[<span class=\"number\">0</span>], card_count</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> card_count % <span class=\"number\">3</span> == <span class=\"number\">0</span> <span class=\"keyword\">and</span> card_count &gt;= <span class=\"number\">6</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 三顺子检查</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"variable language_\">self</span>._is_triple_sequence(value_counts):</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">&#x27;triSequ&#x27;</span>, unique_values[<span class=\"number\">0</span>], card_count</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 其他牌型</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">None</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">_is_double_sequence</span>(<span class=\"params\">self, value_counts</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;检查是否为双顺子&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"comment\"># 每个点数都必须出现2次，且点数连续</span></span><br><span class=\"line\">        values = <span class=\"built_in\">sorted</span>(value_counts.keys())</span><br><span class=\"line\">        counts = [value_counts[v] <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> values]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 检查每个点数是否都出现2次</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"built_in\">all</span>(c == <span class=\"number\">2</span> <span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> counts):</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 检查点数是否连续（不能包含2）</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"number\">15</span> <span class=\"keyword\">in</span> values:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 检查是否连续</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"built_in\">len</span>(values)):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> values[i] - values[i - <span class=\"number\">1</span>] != <span class=\"number\">1</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">_is_triple_sequence</span>(<span class=\"params\">self, value_counts</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;检查是否为三顺子&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"comment\"># 每个点数都必须出现3次，且点数连续</span></span><br><span class=\"line\">        values = <span class=\"built_in\">sorted</span>(value_counts.keys())</span><br><span class=\"line\">        counts = [value_counts[v] <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> values]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 检查每个点数是否都出现3次</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"built_in\">all</span>(c == <span class=\"number\">3</span> <span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> counts):</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 检查点数是否连续（不能包含2）</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"number\">15</span> <span class=\"keyword\">in</span> values:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 检查是否连续</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"built_in\">len</span>(values)):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> values[i] - values[i - <span class=\"number\">1</span>] != <span class=\"number\">1</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">is_valid_play</span>(<span class=\"params\">self, selected_cards, required_type, required_value, required_count</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;验证出牌是否符合规则&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> selected_cards:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span>, <span class=\"string\">&quot;没有选择牌&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 分析当前出牌的牌型</span></span><br><span class=\"line\">        card_type, card_value, card_count = <span class=\"variable language_\">self</span>.parse_cards_type(selected_cards)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> card_type <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span>, <span class=\"string\">&quot;无效的牌型&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 如果是跳过，直接返回True</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> card_type == <span class=\"string\">&#x27;Jump&#x27;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">True</span>, <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 如果是初始出牌（required_type为&#x27;init&#x27;），则不需要匹配牌型</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> required_type == <span class=\"string\">&#x27;init&#x27;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">True</span>, <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 检查牌数是否匹配</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> required_count &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> card_count != required_count <span class=\"keyword\">and</span> card_type <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> [<span class=\"string\">&#x27;Quad&#x27;</span>, <span class=\"string\">&#x27;DualKing&#x27;</span>]:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span>, <span class=\"string\">f&quot;牌数不匹配，需要<span class=\"subst\">&#123;required_count&#125;</span>张&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 特殊牌型可以直接压制任何非特殊牌型</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> card_type == <span class=\"string\">&#x27;Quad&#x27;</span>:  <span class=\"comment\"># 炸弹可以压制非炸弹</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">True</span>, <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> card_type == <span class=\"string\">&#x27;DualKing&#x27;</span>:  <span class=\"comment\"># 王炸是最大的</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">True</span>, <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 如果上家是特殊牌型，当前牌必须也是特殊牌型且能压制</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> required_type == <span class=\"string\">&#x27;Quad&#x27;</span> <span class=\"keyword\">and</span> card_type != <span class=\"string\">&#x27;Quad&#x27;</span> <span class=\"keyword\">and</span> card_type != <span class=\"string\">&#x27;DualKing&#x27;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span>, <span class=\"string\">&quot;只能用炸弹或王炸压制炸弹&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> required_type == <span class=\"string\">&#x27;DualKing&#x27;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span>, <span class=\"string\">&quot;王炸无法被压制&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 检查牌型是否匹配</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> card_type != required_type:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span>, <span class=\"string\">f&quot;牌型不匹配，需要<span class=\"subst\">&#123;required_type&#125;</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 检查牌力是否足够大</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> required_value &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> card_value &lt;= required_value:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span>, <span class=\"string\">f&quot;牌力不够大，需要大于<span class=\"subst\">&#123;required_value&#125;</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span>, <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">create_widgets</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;创建GUI界面&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"comment\"># 顶部信息栏</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.info_frame = ttk.Frame(<span class=\"variable language_\">self</span>.root)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.info_frame.pack(fill=tk.X, padx=<span class=\"number\">10</span>, pady=<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.info_label = ttk.Label(<span class=\"variable language_\">self</span>.info_frame, text=<span class=\"string\">&quot;欢迎来到斗地主游戏！&quot;</span>)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.info_label.pack(side=tk.LEFT)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 玩家信息标签</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.player_info_label = ttk.Label(<span class=\"variable language_\">self</span>.info_frame, text=<span class=\"string\">&quot;玩家ID: 0&quot;</span>)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.player_info_label.pack(side=tk.LEFT, padx=<span class=\"number\">10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 当前玩家标签</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.current_player_label = ttk.Label(<span class=\"variable language_\">self</span>.info_frame, text=<span class=\"string\">&quot;当前玩家: 0&quot;</span>)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.current_player_label.pack(side=tk.LEFT, padx=<span class=\"number\">10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 地主标识标签</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.landlord_label = ttk.Label(<span class=\"variable language_\">self</span>.info_frame, text=<span class=\"string\">&quot;地主: 未确定&quot;</span>)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.landlord_label.pack(side=tk.LEFT, padx=<span class=\"number\">10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 连接按钮</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.connect_button = ttk.Button(<span class=\"variable language_\">self</span>.info_frame, text=<span class=\"string\">&quot;连接服务器&quot;</span>, command=<span class=\"variable language_\">self</span>.connect_to_server)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.connect_button.pack(side=tk.RIGHT)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 中间游戏区域</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.game_frame = ttk.Frame(<span class=\"variable language_\">self</span>.root)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.game_frame.pack(fill=tk.BOTH, expand=<span class=\"literal\">True</span>, padx=<span class=\"number\">10</span>, pady=<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 手牌显示区域</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.hand_frame = ttk.LabelFrame(<span class=\"variable language_\">self</span>.game_frame, text=<span class=\"string\">&quot;我的手牌&quot;</span>)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.hand_frame.pack(fill=tk.BOTH, expand=<span class=\"literal\">True</span>, pady=<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 手牌画布和滚动条</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.hand_canvas = tk.Canvas(<span class=\"variable language_\">self</span>.hand_frame, height=<span class=\"number\">150</span>)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.hand_scrollbar = ttk.Scrollbar(<span class=\"variable language_\">self</span>.hand_frame, orient=<span class=\"string\">&quot;horizontal&quot;</span>, command=<span class=\"variable language_\">self</span>.hand_canvas.xview)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.hand_scrollable_frame = ttk.Frame(<span class=\"variable language_\">self</span>.hand_canvas)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.hand_scrollable_frame.bind(</span><br><span class=\"line\">            <span class=\"string\">&quot;&lt;Configure&gt;&quot;</span>,</span><br><span class=\"line\">            <span class=\"keyword\">lambda</span> e: <span class=\"variable language_\">self</span>.hand_canvas.configure(</span><br><span class=\"line\">                scrollregion=<span class=\"variable language_\">self</span>.hand_canvas.bbox(<span class=\"string\">&quot;all&quot;</span>)</span><br><span class=\"line\">            )</span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.hand_canvas.create_window((<span class=\"number\">0</span>, <span class=\"number\">0</span>), window=<span class=\"variable language_\">self</span>.hand_scrollable_frame, anchor=<span class=\"string\">&quot;nw&quot;</span>)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.hand_canvas.configure(xscrollcommand=<span class=\"variable language_\">self</span>.hand_scrollbar.<span class=\"built_in\">set</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.hand_canvas.pack(side=<span class=\"string\">&quot;top&quot;</span>, fill=<span class=\"string\">&quot;both&quot;</span>, expand=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.hand_scrollbar.pack(side=<span class=\"string\">&quot;bottom&quot;</span>, fill=<span class=\"string\">&quot;x&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 出牌信息区域</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.play_info_frame = ttk.Frame(<span class=\"variable language_\">self</span>.game_frame)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.play_info_frame.pack(fill=tk.X, pady=<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.current_type_label = ttk.Label(<span class=\"variable language_\">self</span>.play_info_frame, text=<span class=\"string\">&quot;当前牌型: 无&quot;</span>)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.current_type_label.pack(side=tk.LEFT)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.current_cards_label = ttk.Label(<span class=\"variable language_\">self</span>.play_info_frame, text=<span class=\"string\">&quot;当前出牌: 无&quot;</span>)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.current_cards_label.pack(side=tk.RIGHT)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 操作按钮区域</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.button_frame = ttk.Frame(<span class=\"variable language_\">self</span>.root)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.button_frame.pack(fill=tk.X, padx=<span class=\"number\">10</span>, pady=<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.play_button = ttk.Button(<span class=\"variable language_\">self</span>.button_frame, text=<span class=\"string\">&quot;出牌&quot;</span>, command=<span class=\"variable language_\">self</span>.play_cards, state=tk.DISABLED)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.play_button.pack(side=tk.LEFT, padx=<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.pass_button = ttk.Button(<span class=\"variable language_\">self</span>.button_frame, text=<span class=\"string\">&quot;不出&quot;</span>, command=<span class=\"variable language_\">self</span>.pass_turn, state=tk.DISABLED)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.pass_button.pack(side=tk.LEFT, padx=<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.show_hand_button = ttk.Button(<span class=\"variable language_\">self</span>.button_frame, text=<span class=\"string\">&quot;刷新手牌&quot;</span>, command=<span class=\"variable language_\">self</span>.show_hand)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.show_hand_button.pack(side=tk.LEFT, padx=<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 消息显示区域</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.message_frame = ttk.LabelFrame(<span class=\"variable language_\">self</span>.root, text=<span class=\"string\">&quot;游戏消息&quot;</span>)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.message_frame.pack(fill=tk.BOTH, expand=<span class=\"literal\">True</span>, padx=<span class=\"number\">10</span>, pady=<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.message_text = tk.Text(<span class=\"variable language_\">self</span>.message_frame, height=<span class=\"number\">8</span>)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.message_scrollbar = ttk.Scrollbar(<span class=\"variable language_\">self</span>.message_frame, orient=<span class=\"string\">&quot;vertical&quot;</span>, command=<span class=\"variable language_\">self</span>.message_text.yview)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.message_text.configure(yscrollcommand=<span class=\"variable language_\">self</span>.message_scrollbar.<span class=\"built_in\">set</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.message_text.pack(side=<span class=\"string\">&quot;left&quot;</span>, fill=<span class=\"string\">&quot;both&quot;</span>, expand=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.message_scrollbar.pack(side=<span class=\"string\">&quot;right&quot;</span>, fill=<span class=\"string\">&quot;y&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 底部状态栏</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.status_frame = ttk.Frame(<span class=\"variable language_\">self</span>.root)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.status_frame.pack(fill=tk.X, padx=<span class=\"number\">10</span>, pady=<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.status_label = ttk.Label(<span class=\"variable language_\">self</span>.status_frame, text=<span class=\"string\">&quot;未连接&quot;</span>)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.status_label.pack()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">connect_to_server</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;连接到游戏服务器&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"variable language_\">self</span>.connected:</span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.s = socket.socket()</span><br><span class=\"line\">                <span class=\"comment\"># host = &#x27;1.1.1.1&#x27;</span></span><br><span class=\"line\">                host = socket.gethostname()</span><br><span class=\"line\">                port = <span class=\"number\">12345</span></span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.s.connect((host, port))</span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.connected = <span class=\"literal\">True</span></span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.connect_button.config(text=<span class=\"string\">&quot;断开连接&quot;</span>)</span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.add_message(<span class=\"string\">&quot;成功连接到服务器&quot;</span>)</span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.status_label.config(text=<span class=\"string\">&quot;已连接&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\"># 启动接收消息线程</span></span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.receive_thread = threading.Thread(target=<span class=\"variable language_\">self</span>.receive_messages, daemon=<span class=\"literal\">True</span>)</span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.receive_thread.start()</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"comment\"># 断开连接</span></span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.connected = <span class=\"literal\">False</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> <span class=\"variable language_\">self</span>.s:</span><br><span class=\"line\">                    <span class=\"variable language_\">self</span>.s.close()</span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.connect_button.config(text=<span class=\"string\">&quot;连接服务器&quot;</span>)</span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.add_message(<span class=\"string\">&quot;已断开服务器连接&quot;</span>)</span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.status_label.config(text=<span class=\"string\">&quot;未连接&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">            messagebox.showerror(<span class=\"string\">&quot;连接错误&quot;</span>, <span class=\"string\">f&quot;无法连接到服务器: <span class=\"subst\">&#123;<span class=\"built_in\">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">receive_messages</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;接收服务器消息的线程函数&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"variable language_\">self</span>.connected:</span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                receive = <span class=\"variable language_\">self</span>.s.recv(<span class=\"number\">1024</span>)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(receive.strip()) == <span class=\"number\">0</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span></span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    <span class=\"variable language_\">self</span>.root.after(<span class=\"number\">0</span>, <span class=\"variable language_\">self</span>.json_parse, receive)</span><br><span class=\"line\">            <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> <span class=\"variable language_\">self</span>.connected:</span><br><span class=\"line\">                    <span class=\"variable language_\">self</span>.root.after(<span class=\"number\">0</span>, <span class=\"variable language_\">self</span>.handle_receive_error, <span class=\"built_in\">str</span>(e))</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">handle_receive_error</span>(<span class=\"params\">self, error</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;处理接收消息错误&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.add_message(<span class=\"string\">f&quot;接收消息错误: <span class=\"subst\">&#123;error&#125;</span>&quot;</span>)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.connected = <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.connect_button.config(text=<span class=\"string\">&quot;连接服务器&quot;</span>)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.status_label.config(text=<span class=\"string\">&quot;连接已断开&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">json_parse</span>(<span class=\"params\">self, js</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;解析服务器消息&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            recjs = <span class=\"built_in\">eval</span>(js)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> recjs[<span class=\"string\">&#x27;Operation&#x27;</span>] == <span class=\"string\">&#x27;message&#x27;</span>:</span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.add_message(recjs[<span class=\"string\">&#x27;message&#x27;</span>])</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> recjs[<span class=\"string\">&#x27;Operation&#x27;</span>] == <span class=\"string\">&#x27;init&#x27;</span>:</span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.CARD = recjs[<span class=\"string\">&#x27;message&#x27;</span>]</span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.show_hand()</span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.add_message(<span class=\"string\">&quot;游戏开始，手牌已发放&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> recjs[<span class=\"string\">&#x27;Operation&#x27;</span>] == <span class=\"string\">&#x27;AskS&#x27;</span>:</span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.ask_king()</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> recjs[<span class=\"string\">&#x27;Operation&#x27;</span>] == <span class=\"string\">&#x27;Add&#x27;</span>:</span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.Card_num = <span class=\"number\">20</span></span><br><span class=\"line\">                EX_CARD = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">3</span>)]</span><br><span class=\"line\">                <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"number\">3</span>):</span><br><span class=\"line\">                    EX_CARD[i] = recjs[<span class=\"string\">&#x27;message&#x27;</span>][i]</span><br><span class=\"line\">                    <span class=\"comment\"># 将底牌添加到手牌中</span></span><br><span class=\"line\">                    <span class=\"variable language_\">self</span>.CARD.append(recjs[<span class=\"string\">&#x27;message&#x27;</span>][i])</span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.add_message(<span class=\"string\">f&quot;你获得了底牌: <span class=\"subst\">&#123;<span class=\"string\">&#x27;, &#x27;</span>.join(<span class=\"built_in\">filter</span>(<span class=\"literal\">None</span>, (<span class=\"built_in\">list</span>(<span class=\"built_in\">map</span>(self.map_card, EX_CARD)))))&#125;</span>&quot;</span>)</span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.show_hand()</span><br><span class=\"line\">                <span class=\"comment\"># 更新地主标识</span></span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.landlord = <span class=\"variable language_\">self</span>.player_id</span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.landlord_label.config(text=<span class=\"string\">f&quot;地主: <span class=\"subst\">&#123;self.landlord&#125;</span>&quot;</span>)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> <span class=\"variable language_\">self</span>.landlord == <span class=\"variable language_\">self</span>.player_id:</span><br><span class=\"line\">                    <span class=\"variable language_\">self</span>.info_label.config(text=<span class=\"string\">&quot;你是地主！&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> recjs[<span class=\"string\">&#x27;Operation&#x27;</span>] == <span class=\"string\">&#x27;SetTurn&#x27;</span>:</span><br><span class=\"line\">                <span class=\"comment\"># 保存当前牌型要求</span></span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.required_type = recjs.get(<span class=\"string\">&#x27;type&#x27;</span>, <span class=\"string\">&#x27;init&#x27;</span>)</span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.required_value = recjs.get(<span class=\"string\">&#x27;value&#x27;</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.required_count = recjs.get(<span class=\"string\">&#x27;seq_num&#x27;</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\"># 更新当前玩家信息</span></span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.current_player = recjs.get(<span class=\"string\">&#x27;player&#x27;</span>, <span class=\"number\">0</span>)  <span class=\"comment\"># 假设服务器会发送player字段</span></span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.current_player_label.config(text=<span class=\"string\">f&quot;当前玩家: <span class=\"subst\">&#123;self.current_player&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\"># 启用出牌按钮</span></span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.play_button.config(state=tk.NORMAL)</span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.pass_button.config(state=tk.NORMAL)</span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.add_message(<span class=\"string\">&quot;轮到你出牌了&quot;</span>)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> <span class=\"variable language_\">self</span>.required_type != <span class=\"string\">&#x27;init&#x27;</span>:</span><br><span class=\"line\">                    <span class=\"variable language_\">self</span>.current_type_label.config(</span><br><span class=\"line\">                        text=<span class=\"string\">f&quot;当前牌型: <span class=\"subst\">&#123;self.required_type&#125;</span> (需要大于<span class=\"subst\">&#123;self.required_value&#125;</span>)&quot;</span>)</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    <span class=\"variable language_\">self</span>.current_type_label.config(text=<span class=\"string\">&quot;当前牌型: 无限制&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> recjs[<span class=\"string\">&#x27;Operation&#x27;</span>] == <span class=\"string\">&#x27;Announce&#x27;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> recjs[<span class=\"string\">&#x27;message&#x27;</span>] == []:</span><br><span class=\"line\">                    <span class=\"variable language_\">self</span>.add_message(<span class=\"string\">&#x27;上家选择跳过&#x27;</span>)</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    played_cards = <span class=\"built_in\">list</span>(<span class=\"built_in\">filter</span>(<span class=\"literal\">None</span>, (<span class=\"built_in\">list</span>(<span class=\"built_in\">map</span>(<span class=\"variable language_\">self</span>.map_card, <span class=\"built_in\">sorted</span>(recjs[<span class=\"string\">&#x27;message&#x27;</span>]))))))</span><br><span class=\"line\">                    <span class=\"variable language_\">self</span>.add_message(<span class=\"string\">f&quot;上家打出了: <span class=\"subst\">&#123;<span class=\"string\">&#x27;, &#x27;</span>.join(played_cards)&#125;</span>&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> recjs[<span class=\"string\">&#x27;Operation&#x27;</span>] == <span class=\"string\">&#x27;GameOver&#x27;</span>:</span><br><span class=\"line\">                winner = recjs.get(<span class=\"string\">&#x27;winner&#x27;</span>, <span class=\"string\">&#x27;未知&#x27;</span>)</span><br><span class=\"line\">                role = recjs.get(<span class=\"string\">&#x27;role&#x27;</span>, <span class=\"string\">&#x27;未知&#x27;</span>)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> winner == <span class=\"variable language_\">self</span>.player_id:</span><br><span class=\"line\">                    messagebox.showinfo(<span class=\"string\">&quot;游戏结束&quot;</span>, <span class=\"string\">f&quot;恭喜你赢了！你的角色是<span class=\"subst\">&#123;role&#125;</span>&quot;</span>)</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    messagebox.showinfo(<span class=\"string\">&quot;游戏结束&quot;</span>, <span class=\"string\">f&quot;游戏结束！获胜方是玩家<span class=\"subst\">&#123;winner&#125;</span>，角色是<span class=\"subst\">&#123;role&#125;</span>&quot;</span>)</span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.game_over = <span class=\"literal\">True</span></span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.play_button.config(state=tk.DISABLED)</span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.pass_button.config(state=tk.DISABLED)</span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.add_message(<span class=\"string\">f&quot;游戏结束！获胜方是玩家<span class=\"subst\">&#123;winner&#125;</span>，角色是<span class=\"subst\">&#123;role&#125;</span>&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.add_message(<span class=\"string\">&#x27;未知消息类型&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.add_message(<span class=\"string\">f&quot;消息解析错误: <span class=\"subst\">&#123;<span class=\"built_in\">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">show_hand</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;显示手牌&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"comment\"># 清空当前手牌显示</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> widget <span class=\"keyword\">in</span> <span class=\"variable language_\">self</span>.hand_scrollable_frame.winfo_children():</span><br><span class=\"line\">            widget.destroy()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 显示手牌</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.selected_cards = []  <span class=\"comment\"># 清空选中状态</span></span><br><span class=\"line\">        sorted_cards = <span class=\"variable language_\">self</span>.sort_cards_for_display(<span class=\"variable language_\">self</span>.CARD)</span><br><span class=\"line\">        filtered_cards = <span class=\"built_in\">list</span>(<span class=\"built_in\">filter</span>(<span class=\"literal\">None</span>, sorted_cards))  <span class=\"comment\"># 过滤掉0</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i, card_num <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(filtered_cards):</span><br><span class=\"line\">            card_text, card_color = <span class=\"variable language_\">self</span>.get_card_display_info(card_num)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> card_text:</span><br><span class=\"line\">                <span class=\"comment\"># 创建牌按钮</span></span><br><span class=\"line\">                card_button = tk.Button(</span><br><span class=\"line\">                    <span class=\"variable language_\">self</span>.hand_scrollable_frame,</span><br><span class=\"line\">                    text=card_text,</span><br><span class=\"line\">                    width=<span class=\"number\">12</span>,</span><br><span class=\"line\">                    height=<span class=\"number\">4</span>,</span><br><span class=\"line\">                    fg=card_color,  <span class=\"comment\"># 设置文字颜色</span></span><br><span class=\"line\">                    font=(<span class=\"string\">&#x27;Arial&#x27;</span>, <span class=\"number\">8</span>),</span><br><span class=\"line\">                    command=<span class=\"keyword\">lambda</span> idx=i, num=card_num: <span class=\"variable language_\">self</span>.toggle_card_selection(idx, num, card_button)</span><br><span class=\"line\">                )</span><br><span class=\"line\">                card_button.pack(side=tk.LEFT, padx=<span class=\"number\">2</span>, pady=<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">toggle_card_selection</span>(<span class=\"params\">self, idx, card_num, button</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;切换牌的选中状态&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> card_num <span class=\"keyword\">in</span> <span class=\"variable language_\">self</span>.selected_cards:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.selected_cards.remove(card_num)</span><br><span class=\"line\">            button.config(relief=tk.RAISED, bg=<span class=\"string\">&quot;lightgray&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.selected_cards.append(card_num)</span><br><span class=\"line\">            button.config(relief=tk.SUNKEN, bg=<span class=\"string\">&quot;yellow&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 更新当前选中牌显示</span></span><br><span class=\"line\">        selected_names = <span class=\"built_in\">list</span>(<span class=\"built_in\">filter</span>(<span class=\"literal\">None</span>, (<span class=\"built_in\">list</span>(<span class=\"built_in\">map</span>(<span class=\"variable language_\">self</span>.map_card, <span class=\"built_in\">sorted</span>(<span class=\"variable language_\">self</span>.selected_cards))))))</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.current_cards_label.config(text=<span class=\"string\">f&quot;选中的牌: <span class=\"subst\">&#123;<span class=\"string\">&#x27;, &#x27;</span>.join(selected_names) <span class=\"keyword\">if</span> selected_names <span class=\"keyword\">else</span> <span class=\"string\">&#x27;无&#x27;</span>&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">play_cards</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;出牌&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"variable language_\">self</span>.selected_cards:</span><br><span class=\"line\">            messagebox.showwarning(<span class=\"string\">&quot;出牌错误&quot;</span>, <span class=\"string\">&quot;请先选择要出的牌&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 验证出牌是否符合规则</span></span><br><span class=\"line\">        is_valid, message = <span class=\"variable language_\">self</span>.is_valid_play(</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.selected_cards,</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.required_type,</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.required_value,</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.required_count</span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> is_valid:</span><br><span class=\"line\">            messagebox.showwarning(<span class=\"string\">&quot;出牌错误&quot;</span>, message)</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 分析当前出牌的牌型</span></span><br><span class=\"line\">        card_type, card_value, card_count = <span class=\"variable language_\">self</span>.parse_cards_type(<span class=\"variable language_\">self</span>.selected_cards)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 构造JSON消息</span></span><br><span class=\"line\">        json_data = &#123;</span><br><span class=\"line\">            <span class=\"string\">&#x27;Status&#x27;</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;Operation&#x27;</span>: <span class=\"string\">&#x27;AnsTurn&#x27;</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;type&#x27;</span>: card_type,</span><br><span class=\"line\">            <span class=\"string\">&#x27;seq_num&#x27;</span>: card_count,  <span class=\"comment\"># 对于顺子等牌型，这个表示牌的数量</span></span><br><span class=\"line\">            <span class=\"string\">&#x27;message&#x27;</span>: <span class=\"variable language_\">self</span>.selected_cards,</span><br><span class=\"line\">            <span class=\"string\">&#x27;value&#x27;</span>: card_value</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.s.sendall(<span class=\"built_in\">str</span>.encode(<span class=\"built_in\">str</span>(json_data)))</span><br><span class=\"line\">            <span class=\"comment\"># 从手牌中移除已出的牌</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> card <span class=\"keyword\">in</span> <span class=\"variable language_\">self</span>.selected_cards:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> card <span class=\"keyword\">in</span> <span class=\"variable language_\">self</span>.CARD:</span><br><span class=\"line\">                    <span class=\"variable language_\">self</span>.CARD.remove(card)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.Card_num -= <span class=\"built_in\">len</span>(<span class=\"variable language_\">self</span>.selected_cards)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># 检查是否出完所有牌</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"variable language_\">self</span>.Card_num == <span class=\"number\">0</span>:</span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.game_over = <span class=\"literal\">True</span></span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.add_message(<span class=\"string\">&quot;恭喜你出完所有牌！&quot;</span>)</span><br><span class=\"line\">                <span class=\"comment\"># 禁用按钮</span></span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.play_button.config(state=tk.DISABLED)</span><br><span class=\"line\">                <span class=\"variable language_\">self</span>.pass_button.config(state=tk.DISABLED)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.selected_cards = []</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.show_hand()</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.current_cards_label.config(text=<span class=\"string\">&quot;选中的牌: 无&quot;</span>)</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.play_button.config(state=tk.DISABLED)</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.pass_button.config(state=tk.DISABLED)</span><br><span class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">            messagebox.showerror(<span class=\"string\">&quot;出牌错误&quot;</span>, <span class=\"string\">f&quot;出牌失败: <span class=\"subst\">&#123;<span class=\"built_in\">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">pass_turn</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;跳过出牌&quot;&quot;&quot;</span></span><br><span class=\"line\">        json_data = &#123;</span><br><span class=\"line\">            <span class=\"string\">&#x27;Status&#x27;</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;Operation&#x27;</span>: <span class=\"string\">&#x27;AnsTurn&#x27;</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;type&#x27;</span>: <span class=\"string\">&#x27;Jump&#x27;</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;seq_num&#x27;</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;message&#x27;</span>: [],</span><br><span class=\"line\">            <span class=\"string\">&#x27;value&#x27;</span>: <span class=\"number\">0</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.s.sendall(<span class=\"built_in\">str</span>.encode(<span class=\"built_in\">str</span>(json_data)))</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.selected_cards = []</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.current_cards_label.config(text=<span class=\"string\">&quot;选中的牌: 无&quot;</span>)</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.play_button.config(state=tk.DISABLED)</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.pass_button.config(state=tk.DISABLED)</span><br><span class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">            messagebox.showerror(<span class=\"string\">&quot;操作错误&quot;</span>, <span class=\"string\">f&quot;跳过出牌失败: <span class=\"subst\">&#123;<span class=\"built_in\">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">ask_king</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;询问是否抢地主&quot;&quot;&quot;</span></span><br><span class=\"line\">        result = messagebox.askyesno(<span class=\"string\">&quot;抢地主&quot;</span>, <span class=\"string\">&quot;是否抢地主?&quot;</span>)</span><br><span class=\"line\">        json_data = &#123;</span><br><span class=\"line\">            <span class=\"string\">&#x27;Status&#x27;</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;Operation&#x27;</span>: <span class=\"string\">&#x27;AnsS&#x27;</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;message&#x27;</span>: <span class=\"number\">1</span> <span class=\"keyword\">if</span> result <span class=\"keyword\">else</span> <span class=\"number\">0</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.s.sendall(<span class=\"built_in\">str</span>.encode(<span class=\"built_in\">str</span>(json_data)))</span><br><span class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">            messagebox.showerror(<span class=\"string\">&quot;操作错误&quot;</span>, <span class=\"string\">f&quot;抢地主选择发送失败: <span class=\"subst\">&#123;<span class=\"built_in\">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">add_message</span>(<span class=\"params\">self, message</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;添加消息到消息框&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.message_text.insert(tk.END, <span class=\"string\">f&quot;[<span class=\"subst\">&#123;time.strftime(<span class=\"string\">&#x27;%H:%M:%S&#x27;</span>)&#125;</span>] <span class=\"subst\">&#123;message&#125;</span>\\n&quot;</span>)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.message_text.see(tk.END)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    root = tk.Tk()</span><br><span class=\"line\">    app = DouDiZhuGUI(root)</span><br><span class=\"line\">    root.mainloop()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n"},{"title":"部署本地大模型","date":"2025-05-12T03:13:37.000Z","_content":"# 模型框架\n>1. 企业级服务，SGLang 是不二之选：凭借卓越的性能，其吞吐量和结构化输出能力堪称行业翘楚，为企业级应用筑牢根基。<br>\nhttps://docs.sglang.ai/start/install.html<br>\nhttps://github.com/sgl-project/sglang<br>\n>2. 在线高并发场景，VLLM 独占鳌头：凭借动态批处理和先进的内存管理技术，确保服务在高并发压力下依然稳定高效，保障业务流畅运行。<br>\nhttps://docs.vllm.com.cn/en/latest/getting_started/installation/gpu.html<br>\nhttps://github.com/vllm-project/vllm<br>\n>3. 个人开发领域，Ollama 崭露头角：简单易用，跨平台支持搭配丰富的模型库，让创意灵感瞬间触手可及，助力个人开发者快速实现想法。<br>\nhttps://github.com/ollama/ollama?tab=readme-ov-file\n\n# LLM webui\n>1. Dify：适合企业开发复杂 AI 应用，如智能客服、合同处理系统等，支持多模型协作和业务流程自动化。\nhttps://dify.ai/zh<br>\nhttps://github.com/langgenius/dify/blob/main/README_CN.md<br>\n>2. Open-WebUI：适合个人开发者快速测试本地模型（如 Ollama 部署的 Llama3），或作为 ChatGPT 替代品进行日常交互。<br>\nhttps://docs.openwebui.com/<br>\n>3. Chatbox：面向非技术用户，提供无需代码的对话界面，支持快速体验多模型（如 GPT、Claude）的聊天能力。<br>\nhttps://chatboxai.app/zh<br>\nhttps://github.com/chatboxai/chatbox\n\n# 部署\n* 由于vllm和sglang需要资源较多，我们这里采用ollama + openwebui + deepseek\n* 前提条件服务器已经配置了驱动和cuda nvidia-smi（驱动命令）nvcc（cuda命令）\n* https://www.nvidia.cn/drivers/lookup/ 显卡下载run脚本运行\n* https://developer.nvidia.com/cuda-toolkit-archive cuda下载\n\n## 安装ollama\n```shell\n#https://github.com/ollama/ollama/tree/main/docs\n#OLLAMA_MODELS 模型下载位置默认/usr/share/ollama/.ollama/models\n#OLLAMA_HOST 监控地址默认127.0.0.1\ncurl -fsSL https://ollama.com/install.sh | sh\nsed -i '/^Environment=\"PATH=/a Environment=\"OLLAMA_HOST=0.0.0.0\"' /etc/systemd/system/ollama.service\nsystemctl daemon-reload\nsystemctl restart ollama.service\nollama run deepseek-r1\n```\n## 安装docker和nvidia-container-toolkit\n```shell\n#添加Docker软件包源\n#添加Docker软件包源\nsudo wget -O /etc/yum.repos.d/docker-ce.repo http://mirrors.cloud.aliyuncs.com/docker-ce/linux/centos/docker-ce.repo\nsudo sed -i 's|https://mirrors.aliyun.com|http://mirrors.cloud.aliyuncs.com|g' /etc/yum.repos.d/docker-ce.repo\n#安装Docker社区版本，容器运行时containerd.io，以及Docker构建和Compose插件\nsudo yum -y install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n#启动Docker\nsudo systemctl start docker\n#设置Docker守护进程在系统启动时自动启动\nsudo systemctl enable docker\n#配置生产存储库\ncurl -s -L https://nvidia.github.io/libnvidia-container/stable/rpm/nvidia-container-toolkit.repo | \\\n  sudo tee /etc/yum.repos.d/nvidia-container-toolkit.repo\n#安装 NVIDIA Container Toolkit 软件包\nsudo yum install -y nvidia-container-toolkit\n#重启docker\nsudo systemctl restart docker\n```\n## 安装webui\n```shell\n#可以通过-e OLLAMA_BASE_URL 配置ollama地址,进入web界面也可以配置,镜像差不多9G,在国外需要配置加速源\ndocker run -d -p 3000:8080 --gpus all -v open-webui:/app/backend/data --name open-webui ghcr.io/open-webui/open-webui:cuda\n```\n\n# 额外\n* dify功能比Open-WebUI更强大，支持agent和工作流和很多插件，如果不想只单独通过webui来交互建议使用dify\n```shell\ncurl -SL https://github.com/docker/compose/releases/download/v2.30.3/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose\n#将可执行权限赋予安装目标路径中的独立二进制文件\nsudo chmod +x /usr/local/bin/docker-compose\nsudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose\ngit clone https://github.com/langgenius/dify.git\ncd dify\ncd docker\ncp .env.example .env\ndocker compose up -d\n```\n","source":"_posts/部署本地大模型.md","raw":"---\ntitle: 部署本地大模型\ndate: 2025-05-12 11:13:37\ntags: llm\n---\n# 模型框架\n>1. 企业级服务，SGLang 是不二之选：凭借卓越的性能，其吞吐量和结构化输出能力堪称行业翘楚，为企业级应用筑牢根基。<br>\nhttps://docs.sglang.ai/start/install.html<br>\nhttps://github.com/sgl-project/sglang<br>\n>2. 在线高并发场景，VLLM 独占鳌头：凭借动态批处理和先进的内存管理技术，确保服务在高并发压力下依然稳定高效，保障业务流畅运行。<br>\nhttps://docs.vllm.com.cn/en/latest/getting_started/installation/gpu.html<br>\nhttps://github.com/vllm-project/vllm<br>\n>3. 个人开发领域，Ollama 崭露头角：简单易用，跨平台支持搭配丰富的模型库，让创意灵感瞬间触手可及，助力个人开发者快速实现想法。<br>\nhttps://github.com/ollama/ollama?tab=readme-ov-file\n\n# LLM webui\n>1. Dify：适合企业开发复杂 AI 应用，如智能客服、合同处理系统等，支持多模型协作和业务流程自动化。\nhttps://dify.ai/zh<br>\nhttps://github.com/langgenius/dify/blob/main/README_CN.md<br>\n>2. Open-WebUI：适合个人开发者快速测试本地模型（如 Ollama 部署的 Llama3），或作为 ChatGPT 替代品进行日常交互。<br>\nhttps://docs.openwebui.com/<br>\n>3. Chatbox：面向非技术用户，提供无需代码的对话界面，支持快速体验多模型（如 GPT、Claude）的聊天能力。<br>\nhttps://chatboxai.app/zh<br>\nhttps://github.com/chatboxai/chatbox\n\n# 部署\n* 由于vllm和sglang需要资源较多，我们这里采用ollama + openwebui + deepseek\n* 前提条件服务器已经配置了驱动和cuda nvidia-smi（驱动命令）nvcc（cuda命令）\n* https://www.nvidia.cn/drivers/lookup/ 显卡下载run脚本运行\n* https://developer.nvidia.com/cuda-toolkit-archive cuda下载\n\n## 安装ollama\n```shell\n#https://github.com/ollama/ollama/tree/main/docs\n#OLLAMA_MODELS 模型下载位置默认/usr/share/ollama/.ollama/models\n#OLLAMA_HOST 监控地址默认127.0.0.1\ncurl -fsSL https://ollama.com/install.sh | sh\nsed -i '/^Environment=\"PATH=/a Environment=\"OLLAMA_HOST=0.0.0.0\"' /etc/systemd/system/ollama.service\nsystemctl daemon-reload\nsystemctl restart ollama.service\nollama run deepseek-r1\n```\n## 安装docker和nvidia-container-toolkit\n```shell\n#添加Docker软件包源\n#添加Docker软件包源\nsudo wget -O /etc/yum.repos.d/docker-ce.repo http://mirrors.cloud.aliyuncs.com/docker-ce/linux/centos/docker-ce.repo\nsudo sed -i 's|https://mirrors.aliyun.com|http://mirrors.cloud.aliyuncs.com|g' /etc/yum.repos.d/docker-ce.repo\n#安装Docker社区版本，容器运行时containerd.io，以及Docker构建和Compose插件\nsudo yum -y install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n#启动Docker\nsudo systemctl start docker\n#设置Docker守护进程在系统启动时自动启动\nsudo systemctl enable docker\n#配置生产存储库\ncurl -s -L https://nvidia.github.io/libnvidia-container/stable/rpm/nvidia-container-toolkit.repo | \\\n  sudo tee /etc/yum.repos.d/nvidia-container-toolkit.repo\n#安装 NVIDIA Container Toolkit 软件包\nsudo yum install -y nvidia-container-toolkit\n#重启docker\nsudo systemctl restart docker\n```\n## 安装webui\n```shell\n#可以通过-e OLLAMA_BASE_URL 配置ollama地址,进入web界面也可以配置,镜像差不多9G,在国外需要配置加速源\ndocker run -d -p 3000:8080 --gpus all -v open-webui:/app/backend/data --name open-webui ghcr.io/open-webui/open-webui:cuda\n```\n\n# 额外\n* dify功能比Open-WebUI更强大，支持agent和工作流和很多插件，如果不想只单独通过webui来交互建议使用dify\n```shell\ncurl -SL https://github.com/docker/compose/releases/download/v2.30.3/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose\n#将可执行权限赋予安装目标路径中的独立二进制文件\nsudo chmod +x /usr/local/bin/docker-compose\nsudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose\ngit clone https://github.com/langgenius/dify.git\ncd dify\ncd docker\ncp .env.example .env\ndocker compose up -d\n```\n","slug":"部署本地大模型","published":1,"updated":"2025-08-28T06:39:18.237Z","comments":1,"layout":"post","photos":[],"_id":"cmev1ggdm001uhllz8tzrfqbo","content":"<h1 id=\"模型框架\"><a href=\"#模型框架\" class=\"headerlink\" title=\"模型框架\"></a>模型框架</h1><blockquote>\n<ol>\n<li>企业级服务，SGLang 是不二之选：凭借卓越的性能，其吞吐量和结构化输出能力堪称行业翘楚，为企业级应用筑牢根基。<br><br><a href=\"https://docs.sglang.ai/start/install.html\">https://docs.sglang.ai/start/install.html</a><br><br><a href=\"https://github.com/sgl-project/sglang\">https://github.com/sgl-project/sglang</a><br></li>\n<li>在线高并发场景，VLLM 独占鳌头：凭借动态批处理和先进的内存管理技术，确保服务在高并发压力下依然稳定高效，保障业务流畅运行。<br><br><a href=\"https://docs.vllm.com.cn/en/latest/getting_started/installation/gpu.html\">https://docs.vllm.com.cn/en/latest/getting_started/installation/gpu.html</a><br><br><a href=\"https://github.com/vllm-project/vllm\">https://github.com/vllm-project/vllm</a><br></li>\n<li>个人开发领域，Ollama 崭露头角：简单易用，跨平台支持搭配丰富的模型库，让创意灵感瞬间触手可及，助力个人开发者快速实现想法。<br><br><a href=\"https://github.com/ollama/ollama?tab=readme-ov-file\">https://github.com/ollama/ollama?tab=readme-ov-file</a></li>\n</ol>\n</blockquote>\n<h1 id=\"LLM-webui\"><a href=\"#LLM-webui\" class=\"headerlink\" title=\"LLM webui\"></a>LLM webui</h1><blockquote>\n<ol>\n<li>Dify：适合企业开发复杂 AI 应用，如智能客服、合同处理系统等，支持多模型协作和业务流程自动化。<br><a href=\"https://dify.ai/zh\">https://dify.ai/zh</a><br><br><a href=\"https://github.com/langgenius/dify/blob/main/README_CN.md\">https://github.com/langgenius/dify/blob/main/README_CN.md</a><br></li>\n<li>Open-WebUI：适合个人开发者快速测试本地模型（如 Ollama 部署的 Llama3），或作为 ChatGPT 替代品进行日常交互。<br><br><a href=\"https://docs.openwebui.com/\">https://docs.openwebui.com/</a><br></li>\n<li>Chatbox：面向非技术用户，提供无需代码的对话界面，支持快速体验多模型（如 GPT、Claude）的聊天能力。<br><br><a href=\"https://chatboxai.app/zh\">https://chatboxai.app/zh</a><br><br><a href=\"https://github.com/chatboxai/chatbox\">https://github.com/chatboxai/chatbox</a></li>\n</ol>\n</blockquote>\n<h1 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h1><ul>\n<li>由于vllm和sglang需要资源较多，我们这里采用ollama + openwebui + deepseek</li>\n<li>前提条件服务器已经配置了驱动和cuda nvidia-smi（驱动命令）nvcc（cuda命令）</li>\n<li><a href=\"https://www.nvidia.cn/drivers/lookup/\">https://www.nvidia.cn/drivers/lookup/</a> 显卡下载run脚本运行</li>\n<li><a href=\"https://developer.nvidia.com/cuda-toolkit-archive\">https://developer.nvidia.com/cuda-toolkit-archive</a> cuda下载</li>\n</ul>\n<h2 id=\"安装ollama\"><a href=\"#安装ollama\" class=\"headerlink\" title=\"安装ollama\"></a>安装ollama</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">https://github.com/ollama/ollama/tree/main/docs</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">OLLAMA_MODELS 模型下载位置默认/usr/share/ollama/.ollama/models</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">OLLAMA_HOST 监控地址默认127.0.0.1</span></span><br><span class=\"line\">curl -fsSL https://ollama.com/install.sh | sh</span><br><span class=\"line\">sed -i &#x27;/^Environment=&quot;PATH=/a Environment=&quot;OLLAMA_HOST=0.0.0.0&quot;&#x27; /etc/systemd/system/ollama.service</span><br><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">systemctl restart ollama.service</span><br><span class=\"line\">ollama run deepseek-r1</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装docker和nvidia-container-toolkit\"><a href=\"#安装docker和nvidia-container-toolkit\" class=\"headerlink\" title=\"安装docker和nvidia-container-toolkit\"></a>安装docker和nvidia-container-toolkit</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">添加Docker软件包源</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">添加Docker软件包源</span></span><br><span class=\"line\">sudo wget -O /etc/yum.repos.d/docker-ce.repo http://mirrors.cloud.aliyuncs.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class=\"line\">sudo sed -i &#x27;s|https://mirrors.aliyun.com|http://mirrors.cloud.aliyuncs.com|g&#x27; /etc/yum.repos.d/docker-ce.repo</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">安装Docker社区版本，容器运行时containerd.io，以及Docker构建和Compose插件</span></span><br><span class=\"line\">sudo yum -y install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">启动Docker</span></span><br><span class=\"line\">sudo systemctl start docker</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">设置Docker守护进程在系统启动时自动启动</span></span><br><span class=\"line\">sudo systemctl enable docker</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">配置生产存储库</span></span><br><span class=\"line\">curl -s -L https://nvidia.github.io/libnvidia-container/stable/rpm/nvidia-container-toolkit.repo | \\</span><br><span class=\"line\">  sudo tee /etc/yum.repos.d/nvidia-container-toolkit.repo</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">安装 NVIDIA Container Toolkit 软件包</span></span><br><span class=\"line\">sudo yum install -y nvidia-container-toolkit</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">重启docker</span></span><br><span class=\"line\">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装webui\"><a href=\"#安装webui\" class=\"headerlink\" title=\"安装webui\"></a>安装webui</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">可以通过-e OLLAMA_BASE_URL 配置ollama地址,进入web界面也可以配置,镜像差不多9G,在国外需要配置加速源</span></span><br><span class=\"line\">docker run -d -p 3000:8080 --gpus all -v open-webui:/app/backend/data --name open-webui ghcr.io/open-webui/open-webui:cuda</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"额外\"><a href=\"#额外\" class=\"headerlink\" title=\"额外\"></a>额外</h1><ul>\n<li>dify功能比Open-WebUI更强大，支持agent和工作流和很多插件，如果不想只单独通过webui来交互建议使用dify<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -SL https://github.com/docker/compose/releases/download/v2.30.3/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">将可执行权限赋予安装目标路径中的独立二进制文件</span></span><br><span class=\"line\">sudo chmod +x /usr/local/bin/docker-compose</span><br><span class=\"line\">sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose</span><br><span class=\"line\">git clone https://github.com/langgenius/dify.git</span><br><span class=\"line\">cd dify</span><br><span class=\"line\">cd docker</span><br><span class=\"line\">cp .env.example .env</span><br><span class=\"line\">docker compose up -d</span><br></pre></td></tr></table></figure></li>\n</ul>\n","excerpt":"","more":"<h1 id=\"模型框架\"><a href=\"#模型框架\" class=\"headerlink\" title=\"模型框架\"></a>模型框架</h1><blockquote>\n<ol>\n<li>企业级服务，SGLang 是不二之选：凭借卓越的性能，其吞吐量和结构化输出能力堪称行业翘楚，为企业级应用筑牢根基。<br><br><a href=\"https://docs.sglang.ai/start/install.html\">https://docs.sglang.ai/start/install.html</a><br><br><a href=\"https://github.com/sgl-project/sglang\">https://github.com/sgl-project/sglang</a><br></li>\n<li>在线高并发场景，VLLM 独占鳌头：凭借动态批处理和先进的内存管理技术，确保服务在高并发压力下依然稳定高效，保障业务流畅运行。<br><br><a href=\"https://docs.vllm.com.cn/en/latest/getting_started/installation/gpu.html\">https://docs.vllm.com.cn/en/latest/getting_started/installation/gpu.html</a><br><br><a href=\"https://github.com/vllm-project/vllm\">https://github.com/vllm-project/vllm</a><br></li>\n<li>个人开发领域，Ollama 崭露头角：简单易用，跨平台支持搭配丰富的模型库，让创意灵感瞬间触手可及，助力个人开发者快速实现想法。<br><br><a href=\"https://github.com/ollama/ollama?tab=readme-ov-file\">https://github.com/ollama/ollama?tab=readme-ov-file</a></li>\n</ol>\n</blockquote>\n<h1 id=\"LLM-webui\"><a href=\"#LLM-webui\" class=\"headerlink\" title=\"LLM webui\"></a>LLM webui</h1><blockquote>\n<ol>\n<li>Dify：适合企业开发复杂 AI 应用，如智能客服、合同处理系统等，支持多模型协作和业务流程自动化。<br><a href=\"https://dify.ai/zh\">https://dify.ai/zh</a><br><br><a href=\"https://github.com/langgenius/dify/blob/main/README_CN.md\">https://github.com/langgenius/dify/blob/main/README_CN.md</a><br></li>\n<li>Open-WebUI：适合个人开发者快速测试本地模型（如 Ollama 部署的 Llama3），或作为 ChatGPT 替代品进行日常交互。<br><br><a href=\"https://docs.openwebui.com/\">https://docs.openwebui.com/</a><br></li>\n<li>Chatbox：面向非技术用户，提供无需代码的对话界面，支持快速体验多模型（如 GPT、Claude）的聊天能力。<br><br><a href=\"https://chatboxai.app/zh\">https://chatboxai.app/zh</a><br><br><a href=\"https://github.com/chatboxai/chatbox\">https://github.com/chatboxai/chatbox</a></li>\n</ol>\n</blockquote>\n<h1 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h1><ul>\n<li>由于vllm和sglang需要资源较多，我们这里采用ollama + openwebui + deepseek</li>\n<li>前提条件服务器已经配置了驱动和cuda nvidia-smi（驱动命令）nvcc（cuda命令）</li>\n<li><a href=\"https://www.nvidia.cn/drivers/lookup/\">https://www.nvidia.cn/drivers/lookup/</a> 显卡下载run脚本运行</li>\n<li><a href=\"https://developer.nvidia.com/cuda-toolkit-archive\">https://developer.nvidia.com/cuda-toolkit-archive</a> cuda下载</li>\n</ul>\n<h2 id=\"安装ollama\"><a href=\"#安装ollama\" class=\"headerlink\" title=\"安装ollama\"></a>安装ollama</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">https://github.com/ollama/ollama/tree/main/docs</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">OLLAMA_MODELS 模型下载位置默认/usr/share/ollama/.ollama/models</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">OLLAMA_HOST 监控地址默认127.0.0.1</span></span><br><span class=\"line\">curl -fsSL https://ollama.com/install.sh | sh</span><br><span class=\"line\">sed -i &#x27;/^Environment=&quot;PATH=/a Environment=&quot;OLLAMA_HOST=0.0.0.0&quot;&#x27; /etc/systemd/system/ollama.service</span><br><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">systemctl restart ollama.service</span><br><span class=\"line\">ollama run deepseek-r1</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装docker和nvidia-container-toolkit\"><a href=\"#安装docker和nvidia-container-toolkit\" class=\"headerlink\" title=\"安装docker和nvidia-container-toolkit\"></a>安装docker和nvidia-container-toolkit</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">添加Docker软件包源</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">添加Docker软件包源</span></span><br><span class=\"line\">sudo wget -O /etc/yum.repos.d/docker-ce.repo http://mirrors.cloud.aliyuncs.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class=\"line\">sudo sed -i &#x27;s|https://mirrors.aliyun.com|http://mirrors.cloud.aliyuncs.com|g&#x27; /etc/yum.repos.d/docker-ce.repo</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">安装Docker社区版本，容器运行时containerd.io，以及Docker构建和Compose插件</span></span><br><span class=\"line\">sudo yum -y install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">启动Docker</span></span><br><span class=\"line\">sudo systemctl start docker</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">设置Docker守护进程在系统启动时自动启动</span></span><br><span class=\"line\">sudo systemctl enable docker</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">配置生产存储库</span></span><br><span class=\"line\">curl -s -L https://nvidia.github.io/libnvidia-container/stable/rpm/nvidia-container-toolkit.repo | \\</span><br><span class=\"line\">  sudo tee /etc/yum.repos.d/nvidia-container-toolkit.repo</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">安装 NVIDIA Container Toolkit 软件包</span></span><br><span class=\"line\">sudo yum install -y nvidia-container-toolkit</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">重启docker</span></span><br><span class=\"line\">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装webui\"><a href=\"#安装webui\" class=\"headerlink\" title=\"安装webui\"></a>安装webui</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">可以通过-e OLLAMA_BASE_URL 配置ollama地址,进入web界面也可以配置,镜像差不多9G,在国外需要配置加速源</span></span><br><span class=\"line\">docker run -d -p 3000:8080 --gpus all -v open-webui:/app/backend/data --name open-webui ghcr.io/open-webui/open-webui:cuda</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"额外\"><a href=\"#额外\" class=\"headerlink\" title=\"额外\"></a>额外</h1><ul>\n<li>dify功能比Open-WebUI更强大，支持agent和工作流和很多插件，如果不想只单独通过webui来交互建议使用dify<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -SL https://github.com/docker/compose/releases/download/v2.30.3/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">将可执行权限赋予安装目标路径中的独立二进制文件</span></span><br><span class=\"line\">sudo chmod +x /usr/local/bin/docker-compose</span><br><span class=\"line\">sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose</span><br><span class=\"line\">git clone https://github.com/langgenius/dify.git</span><br><span class=\"line\">cd dify</span><br><span class=\"line\">cd docker</span><br><span class=\"line\">cp .env.example .env</span><br><span class=\"line\">docker compose up -d</span><br></pre></td></tr></table></figure></li>\n</ul>\n"}],"PostAsset":[{"_id":"source/_posts/alertmanager/image.png","slug":"image.png","post":"cmev1gg9w0001hllzdqwf98ne","modified":0,"renderable":0},{"_id":"source/_posts/ftp/image-1.png","slug":"image-1.png","post":"cmev1ggb10009hllzc9me5z8z","modified":0,"renderable":0},{"_id":"source/_posts/ftp/image.png","slug":"image.png","post":"cmev1ggb10009hllzc9me5z8z","modified":0,"renderable":0},{"_id":"source/_posts/iptables防止ddos-cc/image-1.png","slug":"image-1.png","post":"cmev1ggb5000ahllzb7cc5wpf","modified":0,"renderable":0},{"_id":"source/_posts/iptables防止ddos-cc/image-2.png","slug":"image-2.png","post":"cmev1ggb5000ahllzb7cc5wpf","modified":0,"renderable":0},{"_id":"source/_posts/iptables防止ddos-cc/image.png","slug":"image.png","post":"cmev1ggb5000ahllzb7cc5wpf","modified":0,"renderable":0},{"_id":"source/_posts/openvpn/image-1.png","slug":"image-1.png","post":"cmev1ggbv000lhllz8y6q8uqb","modified":0,"renderable":0},{"_id":"source/_posts/openvpn/image-2.png","slug":"image-2.png","post":"cmev1ggbv000lhllz8y6q8uqb","modified":0,"renderable":0},{"_id":"source/_posts/openvpn/image-3.png","slug":"image-3.png","post":"cmev1ggbv000lhllz8y6q8uqb","modified":0,"renderable":0},{"_id":"source/_posts/openvpn/image.png","slug":"image.png","post":"cmev1ggbv000lhllz8y6q8uqb","modified":0,"renderable":0},{"_id":"source/_posts/prometheus/image-1.png","slug":"image-1.png","post":"cmev1ggc0000mhllzdwia1c7b","modified":0,"renderable":0},{"_id":"source/_posts/prometheus/image-10.png","slug":"image-10.png","post":"cmev1ggc0000mhllzdwia1c7b","modified":0,"renderable":0},{"_id":"source/_posts/prometheus/image-11.png","slug":"image-11.png","post":"cmev1ggc0000mhllzdwia1c7b","modified":0,"renderable":0},{"_id":"source/_posts/prometheus/image-12.png","slug":"image-12.png","post":"cmev1ggc0000mhllzdwia1c7b","modified":0,"renderable":0},{"_id":"source/_posts/prometheus/image-13.png","slug":"image-13.png","post":"cmev1ggc0000mhllzdwia1c7b","modified":0,"renderable":0},{"_id":"source/_posts/prometheus/image-14.png","slug":"image-14.png","post":"cmev1ggc0000mhllzdwia1c7b","modified":0,"renderable":0},{"_id":"source/_posts/prometheus/image-15.png","slug":"image-15.png","post":"cmev1ggc0000mhllzdwia1c7b","modified":0,"renderable":0},{"_id":"source/_posts/prometheus/image-16.png","slug":"image-16.png","post":"cmev1ggc0000mhllzdwia1c7b","modified":0,"renderable":0},{"_id":"source/_posts/prometheus/image-17.png","slug":"image-17.png","post":"cmev1ggc0000mhllzdwia1c7b","modified":0,"renderable":0},{"_id":"source/_posts/prometheus/image-18.png","slug":"image-18.png","post":"cmev1ggc0000mhllzdwia1c7b","modified":0,"renderable":0},{"_id":"source/_posts/prometheus/image-19.png","slug":"image-19.png","post":"cmev1ggc0000mhllzdwia1c7b","modified":0,"renderable":0},{"_id":"source/_posts/prometheus/image-2.png","slug":"image-2.png","post":"cmev1ggc0000mhllzdwia1c7b","modified":0,"renderable":0},{"_id":"source/_posts/prometheus/image-20.png","slug":"image-20.png","post":"cmev1ggc0000mhllzdwia1c7b","modified":0,"renderable":0},{"_id":"source/_posts/prometheus/image-21.png","slug":"image-21.png","post":"cmev1ggc0000mhllzdwia1c7b","modified":0,"renderable":0},{"_id":"source/_posts/prometheus/image-22.png","slug":"image-22.png","post":"cmev1ggc0000mhllzdwia1c7b","modified":0,"renderable":0},{"_id":"source/_posts/prometheus/image-23.png","slug":"image-23.png","post":"cmev1ggc0000mhllzdwia1c7b","modified":0,"renderable":0},{"_id":"source/_posts/prometheus/image-24.png","slug":"image-24.png","post":"cmev1ggc0000mhllzdwia1c7b","modified":0,"renderable":0},{"_id":"source/_posts/prometheus/image-3.png","slug":"image-3.png","post":"cmev1ggc0000mhllzdwia1c7b","modified":0,"renderable":0},{"_id":"source/_posts/prometheus/image-4.png","slug":"image-4.png","post":"cmev1ggc0000mhllzdwia1c7b","modified":0,"renderable":0},{"_id":"source/_posts/prometheus/image-5.png","slug":"image-5.png","post":"cmev1ggc0000mhllzdwia1c7b","modified":0,"renderable":0},{"_id":"source/_posts/prometheus/image-6.png","slug":"image-6.png","post":"cmev1ggc0000mhllzdwia1c7b","modified":0,"renderable":0},{"_id":"source/_posts/prometheus/image-7.png","slug":"image-7.png","post":"cmev1ggc0000mhllzdwia1c7b","modified":0,"renderable":0},{"_id":"source/_posts/prometheus/image-8.png","slug":"image-8.png","post":"cmev1ggc0000mhllzdwia1c7b","modified":0,"renderable":0},{"_id":"source/_posts/prometheus/image-9.png","slug":"image-9.png","post":"cmev1ggc0000mhllzdwia1c7b","modified":0,"renderable":0},{"_id":"source/_posts/prometheus/image.png","slug":"image.png","post":"cmev1ggc0000mhllzdwia1c7b","modified":0,"renderable":0},{"_id":"source/_posts/screen/image.png","slug":"image.png","post":"cmev1ggcl0015hllz44jygmoz","modified":0,"renderable":0},{"_id":"source/_posts/tcp/image.png","slug":"image.png","post":"cmev1ggco0018hllzajqwb9c8","modified":0,"renderable":0},{"_id":"source/_posts/使用kubekey快速安装k8s/image.png","slug":"image.png","post":"cmev1ggcu001dhllzdmsqdjr8","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cmev1gg9w0001hllzdqwf98ne","category_id":"cmev1ggag0004hllz24qufd0b","_id":"cmev1ggbf000fhllz3k77g555"},{"post_id":"cmev1gga80003hllzcnj315gd","category_id":"cmev1ggb7000bhllz19hzfzsh","_id":"cmev1ggbv000khllz3b9f8c35"},{"post_id":"cmev1ggbj000hhllz52i9cdri","category_id":"cmev1ggb7000bhllz19hzfzsh","_id":"cmev1ggc2000nhllz6lmr6hc5"},{"post_id":"cmev1ggaq0006hllz8ljvalov","category_id":"cmev1ggb7000bhllz19hzfzsh","_id":"cmev1ggc6000qhllzc0hh2z1w"},{"post_id":"cmev1ggbp000ihllz5543c2np","category_id":"cmev1ggb7000bhllz19hzfzsh","_id":"cmev1ggc9000thllzbehfhp29"},{"post_id":"cmev1ggbv000lhllz8y6q8uqb","category_id":"cmev1ggbt000jhllzgpb02b5v","_id":"cmev1ggcc000whllzb17yen52"},{"post_id":"cmev1ggb10009hllzc9me5z8z","category_id":"cmev1ggbt000jhllzgpb02b5v","_id":"cmev1ggcf000yhllz4quy2p5s"},{"post_id":"cmev1ggc0000mhllzdwia1c7b","category_id":"cmev1ggag0004hllz24qufd0b","_id":"cmev1ggci0012hllzb6ric4nz"},{"post_id":"cmev1ggc4000phllz1q8x7eke","category_id":"cmev1ggag0004hllz24qufd0b","_id":"cmev1ggck0014hllz95ev6fqs"},{"post_id":"cmev1ggb5000ahllzb7cc5wpf","category_id":"cmev1ggbt000jhllzgpb02b5v","_id":"cmev1ggcm0016hllz4njp971c"},{"post_id":"cmev1ggc7000shllz0yyd7e7n","category_id":"cmev1ggb7000bhllz19hzfzsh","_id":"cmev1ggcq0019hllzgfr61niv"},{"post_id":"cmev1ggb9000chllze97b02xj","category_id":"cmev1ggc9000uhllz7hlqdn1a","_id":"cmev1ggcs001bhllz5431ei8p"},{"post_id":"cmev1ggcj0013hllz0bpb9x3q","category_id":"cmev1ggbt000jhllzgpb02b5v","_id":"cmev1ggcw001ehllz1akygo8e"},{"post_id":"cmev1ggbc000ehllz8sc39ay4","category_id":"cmev1ggcf0010hllzgh161sqg","_id":"cmev1ggd4001hhllz6ar21xx2"},{"post_id":"cmev1ggcl0015hllz44jygmoz","category_id":"cmev1ggbt000jhllzgpb02b5v","_id":"cmev1ggd9001khllz6yaucdem"},{"post_id":"cmev1ggco0018hllzajqwb9c8","category_id":"cmev1ggbt000jhllzgpb02b5v","_id":"cmev1ggdd001nhllzddq6ctd4"},{"post_id":"cmev1ggcb000vhllz3btm5m9m","category_id":"cmev1ggcf0010hllzgh161sqg","_id":"cmev1ggdh001qhllz615ygwuu"},{"post_id":"cmev1ggcu001dhllzdmsqdjr8","category_id":"cmev1ggc9000uhllz7hlqdn1a","_id":"cmev1ggdk001shllzblrydq3t"},{"post_id":"cmev1ggcd000xhllz5x1se2wg","category_id":"cmev1ggcf0010hllzgh161sqg","_id":"cmev1ggdo001whllzakrf5s5u"},{"post_id":"cmev1ggd7001jhllze6st3wbu","category_id":"cmev1ggbt000jhllzgpb02b5v","_id":"cmev1ggdp001xhllzc3np51d1"},{"post_id":"cmev1ggch0011hllz3i8zfqvm","category_id":"cmev1ggcf0010hllzgh161sqg","_id":"cmev1ggdr001zhllzafzldatc"},{"post_id":"cmev1ggda001lhllz88gk3uuq","category_id":"cmev1ggbt000jhllzgpb02b5v","_id":"cmev1ggdr0020hllz44ze3e6c"},{"post_id":"cmev1ggdi001rhllz3zxe7dr3","category_id":"cmev1ggcf0010hllzgh161sqg","_id":"cmev1ggds0021hllz6mrp1uez"},{"post_id":"cmev1ggdf001phllzgs78fsdq","category_id":"cmev1ggdl001thllzehkb8cn8","_id":"cmev1ggds0023hllz082ueoj1"}],"PostTag":[{"post_id":"cmev1gga80003hllzcnj315gd","tag_id":"cmev1ggau0007hllz34uo7vgw","_id":"cmev1ggbc000dhllzbs9ecq63"},{"post_id":"cmev1ggc0000mhllzdwia1c7b","tag_id":"cmev1ggc6000rhllz3jrdf3k4","_id":"cmev1ggcf000zhllz5pb80wdx"},{"post_id":"cmev1ggcq001ahllz5pntbt6o","tag_id":"cmev1ggcw001fhllzdmnq5g1a","_id":"cmev1ggde001ohllzb1mp5sto"},{"post_id":"cmev1ggd1001ghllz1muah4z1","tag_id":"cmev1ggdc001mhllzh7uldwhg","_id":"cmev1ggdo001vhllz4m4rhwks"},{"post_id":"cmev1ggdm001uhllz8tzrfqbo","tag_id":"cmev1ggdq001yhllzaunxfa8z","_id":"cmev1ggds0022hllzdj5u4esy"}],"Tag":[{"name":"es","_id":"cmev1ggau0007hllz34uo7vgw"},{"name":"prometheus","_id":"cmev1ggc6000rhllz3jrdf3k4"},{"name":"websocket","_id":"cmev1ggcw001fhllzdmnq5g1a"},{"name":"maven","_id":"cmev1ggdc001mhllzh7uldwhg"},{"name":"llm","_id":"cmev1ggdq001yhllzaunxfa8z"}]}}