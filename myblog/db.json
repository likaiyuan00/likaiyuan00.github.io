{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/butterfly-icon.png","path":"img/butterfly-icon.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/error-page.png","path":"img/error-page.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/image-2.png","path":"img/image-2.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/image-3.png","path":"img/image-3.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/image-4.png","path":"img/image-4.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/img-4.png","path":"img/img-4.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/img.png","path":"img/img.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/404/index.md","hash":"f856d43418c22a2e0acda0dc8dfc338c5f591fb4","modified":1753864713280},{"_id":"source/_posts/alertmanager.md","hash":"e2c8f21409f203327d8587fc9b2f6cb145be8bfe","modified":1753864713280},{"_id":"source/_posts/elfk.md","hash":"23ce335111b14750cd562b15fe701ffdb78e6feb","modified":1753864713285},{"_id":"source/_posts/ftp.md","hash":"6cf9197da3fc6175c89b46cc111d4d0567a854b7","modified":1753864713286},{"_id":"source/_posts/iptables防止ddos-cc.md","hash":"7b84e1bac42476c8403b86438655f420d5340e79","modified":1753864713289},{"_id":"source/_posts/kubeclt-neat.md","hash":"a4f1f2a2ccd28027005905a7561bd5b1cf0d31ff","modified":1753864713299},{"_id":"source/_posts/miniconda3.md","hash":"f6bab37af7cad655e77e6b098841efd20c4951f2","modified":1753864713299},{"_id":"source/_posts/nginx-todo.md","hash":"2bf34ec669fb4d425a5f77e3940f0d5ec8907259","modified":1753864713299},{"_id":"source/_posts/openvpn.md","hash":"a2d6e9308d75e27add859822e1c1c9f168a575d1","modified":1753864713299},{"_id":"source/_posts/prometheus.md","hash":"e8cda8a9e903fedff83cd20234953f903ebd86ee","modified":1753864713312},{"_id":"source/_posts/screen.md","hash":"e2baf5041a5b30f6b8e8ec7b471ca28d2d5dc645","modified":1753864713408},{"_id":"source/_posts/tcp.md","hash":"0a3f414225c8c97a36d5569921e019c66d542ea8","modified":1753864713410},{"_id":"source/_posts/websocket.md","hash":"e1d710c4eedfc347b0bd403313f2d1a8006918e7","modified":1753864713412},{"_id":"source/_posts/使用kubekey快速安装k8s.md","hash":"b4014ed65fc3e17df272f03572308ac9ce03e10d","modified":1753864713412},{"_id":"source/_posts/使用maven打包.md","hash":"082a9e87896574707cbb062c94e7489425fe9ebf","modified":1753864713417},{"_id":"source/_posts/数据库.md","hash":"3b3c69ec30773746737841684c56f31f8cef1b46","modified":1753864898483},{"_id":"source/_posts/部署本地大模型.md","hash":"525506942408d420900d0c45771f252a1a977bc3","modified":1753864713417},{"_id":"source/about/index.md","hash":"c7d41c11262ac61fab6ea22bb517b656ffdf106a","modified":1753864713418},{"_id":"source/categories/index.md","hash":"99ca7b710d585ec269386c6fde64c1949ca40818","modified":1753864713418},{"_id":"source/tags/index.md","hash":"2b2f4683020428f3669fba0caacc383d9bbc91fe","modified":1753864713418},{"_id":"source/_posts/prometheus/image-6.png","hash":"d8e9764519615d8bcbf5a2d96877f799649e5f9b","modified":1753864713392},{"_id":"source/_posts/ftp/image.png","hash":"444173c3e2869a879a139d98e51bc620e50f07ee","modified":1753864713289},{"_id":"source/_posts/prometheus/image-19.png","hash":"67edf337abdf7bd80fb9c453dc00dc2f06c83cf3","modified":1753864713351},{"_id":"source/_posts/ftp/image-1.png","hash":"760884845aa748e8006cb69e10147dbace981bd4","modified":1753864713287},{"_id":"source/_posts/prometheus/image-24.png","hash":"2704542f9fedfc2f7bbb306459e44a1434b2795a","modified":1753864713374},{"_id":"source/_posts/screen/image.png","hash":"40e05211c71099fddaaa68dacb4754ad3fdb2f28","modified":1753864713410},{"_id":"source/_posts/prometheus/image-14.png","hash":"941b76bbc04ba0df5e3f977fded9e1c874f17a79","modified":1753864713333},{"_id":"source/_posts/prometheus/image-9.png","hash":"cab348483b2aca8fb4865c27d51372aaf094080a","modified":1753864713404},{"_id":"source/_posts/tcp/image.png","hash":"b1401eec5d15d0586b04f89c443e5b16ed15fea7","modified":1753864713412},{"_id":"node_modules/hexo-theme-butterfly/LICENSE","hash":"c8bc7df08db9dd3b39c2c2259a163a36cf2f6808","modified":1753864712822},{"_id":"node_modules/hexo-theme-butterfly/README.md","hash":"e1b9096ae0c4e5ef0a911aec05dbad4a3aae3173","modified":1753864712823},{"_id":"node_modules/hexo-theme-butterfly/README_CN.md","hash":"92e45255b8725f0a00450c88fcfd51ec61e1db67","modified":1753864712823},{"_id":"node_modules/hexo-theme-butterfly/package.json","hash":"0f469650107841dc1dc716aa94b3ca2bb0721762","modified":1753864712826},{"_id":"node_modules/hexo-theme-butterfly/.github/FUNDING.yml","hash":"da5e77f5e0cdb7e11b36546fb6796d10e3dfbe5d","modified":1753864712822},{"_id":"node_modules/hexo-theme-butterfly/plugins.yml","hash":"a2704f0406484fdae3410e9992cf996f9859356e","modified":1753864712826},{"_id":"node_modules/hexo-theme-butterfly/languages/default.yml","hash":"a2c938b1ef69195aec10c90dc7d1871953548e01","modified":1753864712823},{"_id":"node_modules/hexo-theme-butterfly/languages/en.yml","hash":"a2c938b1ef69195aec10c90dc7d1871953548e01","modified":1753864712823},{"_id":"node_modules/hexo-theme-butterfly/_config.yml","hash":"bebefb49322b1d6abb06a024b5fd5d01d6f37870","modified":1753864712823},{"_id":"node_modules/hexo-theme-butterfly/languages/ko.yml","hash":"c7d861c58f204f47a5b4d6e118e1f1e8fb8a852f","modified":1753864712823},{"_id":"node_modules/hexo-theme-butterfly/languages/ja.yml","hash":"a281d3cc3e117e90597b783dc5569dba3976d2eb","modified":1753864712823},{"_id":"node_modules/hexo-theme-butterfly/languages/zh-CN.yml","hash":"e0bf36edf18cf3380b900be7528b536252990c26","modified":1753864712823},{"_id":"node_modules/hexo-theme-butterfly/languages/zh-HK.yml","hash":"bac3063ad2892be232f7d91361c28585a3cc7eb5","modified":1753864712823},{"_id":"node_modules/hexo-theme-butterfly/layout/archive.pug","hash":"bc77220dfc269b8faad0930e1a4142ebf68165e5","modified":1753864712823},{"_id":"node_modules/hexo-theme-butterfly/languages/zh-TW.yml","hash":"bd7ee35aa30964493d2729ef105bb86331b096c3","modified":1753864712823},{"_id":"node_modules/hexo-theme-butterfly/layout/category.pug","hash":"a7e9805a781e34e38d27462e6ce2a5821c34bb9f","modified":1753864712823},{"_id":"node_modules/hexo-theme-butterfly/layout/index.pug","hash":"a93004cc8ec8050df603d32a6e6e02cd96fd9875","modified":1753864712826},{"_id":"node_modules/hexo-theme-butterfly/layout/post.pug","hash":"65c4a49c65c3fc4d9dc88b9791a75710c698c3a1","modified":1753864712826},{"_id":"node_modules/hexo-theme-butterfly/layout/page.pug","hash":"7ce2a49c6c41847de4ccea377ade116339984434","modified":1753864712826},{"_id":"node_modules/hexo-theme-butterfly/layout/tag.pug","hash":"ca5333bd262cb58c195c844b593a0eed0c721766","modified":1753864712826},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"63ad2249ad09fb3fe21bd5ff9adefb304a7ab24a","modified":1753864712822},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"6e0f9470b18bd37d4891282ac73d61676b040e8c","modified":1753864712822},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"10ce05c8dbde09f53bdabe40b5388de9ccc71a31","modified":1753864712822},{"_id":"node_modules/hexo-theme-butterfly/.github/workflows/stale.yml","hash":"4040c76547e270aaf184e9b219a44ca41bbb1b9f","modified":1753864712822},{"_id":"node_modules/hexo-theme-butterfly/.github/workflows/publish.yml","hash":"e320b40c051bae1549156cd5ea4a51383cf78598","modified":1753864712822},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/footer.pug","hash":"6bd41add3a45e55d5e51eab5285a2d1a909d37f3","modified":1753864712823},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/additional-js.pug","hash":"f9b02aac0dbbb2b71c037dd215e70c8b7ec7741c","modified":1753864712823},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/layout.pug","hash":"e5e6c05a621483b3542f2884e8ba45e84b1e973a","modified":1753864712824},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head.pug","hash":"1d11e334b22dbbedcb0f751f9ee9789d4416605e","modified":1753864712823},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/pagination.pug","hash":"bd45e6fa935ace9cb54499b0491dacfb78ccc354","modified":1753864712824},{"_id":"node_modules/hexo-theme-butterfly/scripts/common/postDesc.js","hash":"272613a71d16f0de6dac883be4839259f774be76","modified":1753864712826},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/sidebar.pug","hash":"3e65b7bf6bccccbba7e15349f0a44f15c64c5b5e","modified":1753864712824},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/404.js","hash":"039fc75f363d79669b0b2177d929cdff6f2ef7a4","modified":1753864712826},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/rightside.pug","hash":"43f951b639038f3bc01deea03368d8dcf492cbb0","modified":1753864712824},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/comment.js","hash":"7b1b16e1e8e08245a345764616956be50487eb53","modified":1753864712826},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/init.js","hash":"ce68e84a9ccfcf91100befbaa9afc392a0cd93bb","modified":1753864712826},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/stylus.js","hash":"bac639c404588ea62e601ef0bcd368c3bd0119af","modified":1753864712826},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/cdn.js","hash":"7864ba45716c51aef8d8b04fd4bc212e0008ce3b","modified":1753864712826},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/welcome.js","hash":"f59e10305fef59ea3e62a7395106c0927582879d","modified":1753864712826},{"_id":"node_modules/hexo-theme-butterfly/scripts/filters/post_lazyload.js","hash":"b23108d29fff3e32384d8689c8bcd2ab306a1ae7","modified":1753864712826},{"_id":"node_modules/hexo-theme-butterfly/scripts/filters/random_cover.js","hash":"20a6ebf63439501a4b3fc81e7a2a2ea5d103bace","modified":1753864712826},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/merge_config.js","hash":"10ffed853a935498f1f5da2c5b57200c957874a7","modified":1753864712826},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/aside_archives.js","hash":"3eb0bbb1288dc7b0ff82cc46ceb53bd666893416","modified":1753864712826},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/aside_categories.js","hash":"0cdf781a8c14d7b50d309e69f282ec7b178804bb","modified":1753864712826},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/getArchiveLength.js","hash":"bf77635e920eaf52bceebc95f87c7c87a7ca8038","modified":1753864712826},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/inject_head_js.js","hash":"00c5742ad1c75b3c5684d02ffc6a1921399e5376","modified":1753864712826},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/related_post.js","hash":"950b7d0966429bf0f9e6c5e1161e50e545e320b4","modified":1753864712827},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/page.js","hash":"a07b586b510aa2df953102d998e84207acc34f9b","modified":1753864712826},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/button.js","hash":"2f44e1b3ccd170b256eae178299d6fa933a8d490","modified":1753864712827},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/series.js","hash":"45367c4ce827329867dbcc750ec125da9ccb2cfd","modified":1753864712827},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/flink.js","hash":"25eefe10189caf3910a0e5d5b2f2043ae9255531","modified":1753864712827},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/chartjs.js","hash":"195ba802d7e8406c155124a9c939a2318f82938b","modified":1753864712827},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/inlineImg.js","hash":"89c6c78d2db43b190055d5690741a79bab4f3e7e","modified":1753864712827},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/hide.js","hash":"f02fb085a88a2c0c82aeffacc24e1b71c74bd7c0","modified":1753864712827},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/label.js","hash":"cf0bc17d0180231167cc6aa8a00fc64f198cb9f9","modified":1753864712827},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/mermaid.js","hash":"50d8d8fac5c5b6e26317028895d7d82a2cf46606","modified":1753864712827},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/note.js","hash":"e68d8d21f3a86e3646907a3685550ee20e8d4a9f","modified":1753864712827},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/score.js","hash":"f589fb6646bd17cf12d77a9b251dd614e1c8b899","modified":1753864712827},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/series.js","hash":"40bc9a065e3a1423e0e66f4911e00713ca9f5e9e","modified":1753864712827},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/tabs.js","hash":"3c486b149e28edd1a06843f05a5c355000991b82","modified":1753864712827},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/timeline.js","hash":"176804f07567aa80f1ed95897a968a996b155dec","modified":1753864712827},{"_id":"node_modules/hexo-theme-butterfly/source/css/index.styl","hash":"b13d96924a5534bff91d75566b196ac87b4fac22","modified":1753864712828},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/gallery.js","hash":"fa3d0a64f7fce4aff7928d4ddd95548978ba001c","modified":1753864712827},{"_id":"node_modules/hexo-theme-butterfly/source/css/var.styl","hash":"d1eec577074ab7b262182885576135bf1896e12c","modified":1753864712828},{"_id":"node_modules/hexo-theme-butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1753864712828},{"_id":"node_modules/hexo-theme-butterfly/source/img/favicon.ico","hash":"455ac256580bf31a45813dbbdb87219bfc8bfb04","modified":1753864712830},{"_id":"node_modules/hexo-theme-butterfly/source/img/error-page.png","hash":"d2519710498a871ca3e913c57e2ba20a805b6430","modified":1753864712830},{"_id":"node_modules/hexo-theme-butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1753864712831},{"_id":"node_modules/hexo-theme-butterfly/source/img/img.png","hash":"185ddc251df0cd80abd4f212b3213963f6561161","modified":1753864712839},{"_id":"node_modules/hexo-theme-butterfly/source/js/main.js","hash":"5a52047b8520f79864d5a4ee2379a29751aead23","modified":1753864712840},{"_id":"node_modules/hexo-theme-butterfly/source/js/tw_cn.js","hash":"fdb5482d04a75bd79946ad1ed291d281d0e9362d","modified":1753864712840},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/Open_Graph.pug","hash":"e93a36d3c29b5a02c7f26a23f96e1f84b063cbe8","modified":1753864712823},{"_id":"node_modules/hexo-theme-butterfly/source/js/utils.js","hash":"48637ad8e405306772b93837f33400bde1055819","modified":1753864712840},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/analytics.pug","hash":"e792a435afee1f9491095084a00dc77e3522c1fd","modified":1753864712823},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/config.pug","hash":"9ea75b06f19bf356f340f4a3fc1bdc0713cfe445","modified":1753864712823},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/google_adsense.pug","hash":"f29123e603cbbcc6ce277d4e8f600ba67498077c","modified":1753864712823},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/config_site.pug","hash":"56a3c32de1a15627ff38c67f1131cdd6ec5ac924","modified":1753864712823},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/preconnect.pug","hash":"1e1a69aa2cbda2e621c741b3802093244b3cc04e","modified":1753864712823},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/pwa.pug","hash":"83ed05ef1e39f2ee70c3fba2cf96e488d8ffec66","modified":1753864712823},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/site_verification.pug","hash":"5168caadc4cf541f5d6676a9c5e8ae47a948f9ad","modified":1753864712823},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/structured_data.pug","hash":"1b83ae33961528f128596753fd05067c672d6bff","modified":1753864712823},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/index.pug","hash":"44331c9db74b281b5c5c41439d3407a9076df1a1","modified":1753864712823},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/menu_item.pug","hash":"733184f88e3a586a5fcc9d193ad500556b6c8eed","modified":1753864712823},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/nav.pug","hash":"18b984ce184ea53d2dff5a03cc2d0d39d2ec3406","modified":1753864712823},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/social.pug","hash":"e2d31e0f450ad42c47f7ee96375799342bf2f19b","modified":1753864712824},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/post-info.pug","hash":"7d799c4694adb6e265e3f4b975d7f7f6a7021a17","modified":1753864712824},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/index.pug","hash":"d76ce71ba106e350670c021a3dcae57547d01830","modified":1753864712824},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/fullpage-loading.pug","hash":"a2f7d69ca7ec58f24fe7d4e04ae21d5b62b01567","modified":1753864712824},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/pace.pug","hash":"9d2d539555bab495959b9df734ed5c43a9f9e5a9","modified":1753864712824},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/mixins/article-sort.pug","hash":"ef7afe0df7a3746744ac8185da7163b7406120ca","modified":1753864712824},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/404.pug","hash":"15d32c511e4875066fcbe9cb84c3ada07b5a7c41","modified":1753864712824},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1753864712824},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/mixins/indexPostUI.pug","hash":"f3389fa9ae4fa32e3c16573286583bc3023e57ad","modified":1753864712824},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/default-page.pug","hash":"efb40388e37cca0b5e7c3c66e811a42f8d32c910","modified":1753864712824},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/flink.pug","hash":"6b0fa5f048aca8e9cbe56978301af918cf7ac34a","modified":1753864712824},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/tags.pug","hash":"79ad31eb72a9e14007770b18a426406a25315b38","modified":1753864712824},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/post/outdate-notice.pug","hash":"b7ce9484bc5c97ea6154f0b78fb9b8951fafedbd","modified":1753864712824},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/shuoshuo.pug","hash":"b2423cfc57a5e3a0e1112ff7c18d5c5c720d89d5","modified":1753864712824},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/post/post-copyright.pug","hash":"b96c232e5178d927987791d9ae386dd83679535a","modified":1753864712824},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/post/reward.pug","hash":"db92f25ff3fd061882f81bf74ca560ff66983a0c","modified":1753864712824},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/effect.pug","hash":"43014bfc63583d3ee8808d526dd165848c0ed52f","modified":1753864712825},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/aplayer.pug","hash":"ed79fef5b5025415ea12eaed970f3fe7f6ef9596","modified":1753864712824},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/pjax.pug","hash":"efe4f8019632b51c92c4f7628758538305e06e47","modified":1753864712825},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/prismjs.pug","hash":"88f979a0b1a19eeb0db229247833bf9c6865c3b9","modified":1753864712825},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/umami_analytics.pug","hash":"bc35a1552d26ecdeeadbf06300078dbb5128a6e5","modified":1753864712826},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/subtitle.pug","hash":"236c3ce26dd76e80b04d457789475c42da5ac0c8","modified":1753864712825},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_ad.pug","hash":"a8312b527493dabbadbb1280760168d3bc909a3b","modified":1753864712826},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_announcement.pug","hash":"21e019bdc3b1e796bb00976bb29af2d51f873624","modified":1753864712826},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_archives.pug","hash":"73d33b6930e7944187a4b3403daf25d27077a2dd","modified":1753864712826},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_author.pug","hash":"1aba8aa7cd767dc96879d13a13b4c8ceb9023233","modified":1753864712826},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_bottom_self.pug","hash":"1dba77d250eeebfb6e293d504352c7e9ea31980b","modified":1753864712826},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_categories.pug","hash":"66e383b4ef374951eb87dd1bf4cdb7a667193fb5","modified":1753864712826},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_newest_comment.pug","hash":"d8753772889b5d0f4d15639ed6af5e91e53b1d03","modified":1753864712826},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_post_series.pug","hash":"e0bb72fa0ce15964b11b8fe421cae3432394e35f","modified":1753864712826},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_post_toc.pug","hash":"1dd19a564320d248dbcee7f118a5b96c6466da65","modified":1753864712826},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_recent_post.pug","hash":"bb842d2aa6469d65bf06af1372f0a19a9e4ef44c","modified":1753864712826},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_tags.pug","hash":"842b772a387b576550fa127030e1c2e9bf65716d","modified":1753864712826},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_top_self.pug","hash":"7b5ae404a1205546b7de4be42291315cf918f2b3","modified":1753864712826},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_webinfo.pug","hash":"fcddd80cdeb6aa81f342cd9f0102302f6ba087a8","modified":1753864712826},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/index.pug","hash":"45f620cd87b9ef2aa9d1e024e697ed6b4eecff34","modified":1753864712826},{"_id":"node_modules/hexo-theme-butterfly/source/css/_global/function.styl","hash":"d12340a7df4601b9a23f070e16645861aeb3bb0a","modified":1753864712827},{"_id":"node_modules/hexo-theme-butterfly/source/css/_global/index.styl","hash":"4fcb8222b9548e22f7b76f12d33e3698240cbae0","modified":1753864712827},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight.styl","hash":"67062d597408068e4a59e95851e98fed34b745da","modified":1753864712827},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/theme.styl","hash":"a51edfd3e499e7d38c32241c40e8e4d371efca73","modified":1753864712827},{"_id":"node_modules/hexo-theme-butterfly/source/css/_mode/darkmode.styl","hash":"4c9849df9c68d892c7df0ca28123aeb0dc9dc424","modified":1753864712828},{"_id":"node_modules/hexo-theme-butterfly/source/css/_mode/readmode.styl","hash":"ad66212554468b7067590308ed4cf40524fea662","modified":1753864712828},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/chat.styl","hash":"4cc02bcbaa4a1933a82a9ea57a603fe2d059fc77","modified":1753864712827},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/aside.styl","hash":"ba174889e770ae9f6683379b9eae9d8c94253080","modified":1753864712827},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/comments.styl","hash":"fbfce4d67cacd1df22fb73d89d008693f59d9d91","modified":1753864712827},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/footer.styl","hash":"d7b988d8588207086670f39aa49fce442c429f7a","modified":1753864712827},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/loading.styl","hash":"f0b01bbf321c2c24fdccaee367dd9fd448031a72","modified":1753864712827},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/pagination.styl","hash":"7d7554573c005399bc8c2264a85896d2d51be1e1","modified":1753864712827},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/relatedposts.styl","hash":"ef8e8549fe7ad4b99793844a93b4a89f77f417d5","modified":1753864712827},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/head.styl","hash":"094108f2a4e351a2fa496d6bd3e2388151416b3f","modified":1753864712827},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/post.styl","hash":"543eaf9c7df7e0db841e5946ee5f9082c3c46290","modified":1753864712827},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/reward.styl","hash":"d9cdf564a822a585e67fd5bac8573ba87eeb3743","modified":1753864712828},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/rightside.styl","hash":"a0f5835f04358122e8b1d38dd3e8da09a1b5b431","modified":1753864712828},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/sidebar.styl","hash":"084dc4dfb41f55e237a9d6cf8c2f5dba729b83be","modified":1753864712828},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/404.styl","hash":"205ccc7d0ec6ce1193b46bc0c9ce0385594581fb","modified":1753864712828},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/archives.styl","hash":"5abe5480d83ff8b452a780a484d50a44091475bf","modified":1753864712828},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/third-party.styl","hash":"0af7c8754f04bdd9a02a14d880774753bd2e35ee","modified":1753864712828},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/categories.styl","hash":"c4cda7b0c99015df29ce00fdfddd2f7679653754","modified":1753864712828},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/common.styl","hash":"dcff804c4c237e1e908481b44c1ac4e39ac0da34","modified":1753864712828},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/flink.styl","hash":"1f8d715faf3b91b53426e38195c0920afb3bfa1c","modified":1753864712828},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/shuoshuo.styl","hash":"79bb1d9a27822ed5675d1e52f5dbd0e2f5d5010a","modified":1753864712828},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/tags.styl","hash":"7543bb688876a946538d66b991c71b94b5216277","modified":1753864712828},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/homepage.styl","hash":"992d192db7d1c96e995b85ed11c20c571d33fbad","modified":1753864712828},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/algolia.styl","hash":"d8a8275a68a1421c4c09b604cf78bea16c1d0463","modified":1753864712828},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/local-search.styl","hash":"1f2b86df86df81c3a59377b29102314ffc73dfa6","modified":1753864712828},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/button.styl","hash":"de8437a058a315d14d7e7034066f095b7b3ed4b4","modified":1753864712828},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/index.styl","hash":"6c4cbdadd9a49029fe0c59e29808d873e5b6b6ee","modified":1753864712828},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/hexo.styl","hash":"985b183db7b7bfd8f9bdb60494549fb7f850348b","modified":1753864712828},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/hide.styl","hash":"d27dbccaf3de1c9158d19e4fd49a25953cb5778d","modified":1753864712828},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/gallery.styl","hash":"30d1f809efd252ed0233d96d4374efd2b01d2292","modified":1753864712828},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/inlineImg.styl","hash":"3be8d0a75e7cc96548667cae0cb6a474279bd0b5","modified":1753864712828},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/label.styl","hash":"216f52fefc2274b542b549d8470503e6f1a308fb","modified":1753864712828},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/series.styl","hash":"0657169849bc4bf4d93b5492ade040c8f58c1901","modified":1753864712828},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/note.styl","hash":"4929382bd60788d34752a66e2fe764ef797a72a0","modified":1753864712828},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/tabs.styl","hash":"3a88eedcb694da79e92581ce50cb1a430b1fb615","modified":1753864712828},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/timeline.styl","hash":"e846ddaef494d46cdfa2379deacfe74fa1cc5264","modified":1753864712828},{"_id":"node_modules/hexo-theme-butterfly/source/css/_third-party/normalize.min.css","hash":"8549829fb7d3c21cd9e119884962e8c463a4a267","modified":1753864712828},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/algolia.js","hash":"7119f2f2943de71999d3dd6ba5c60cde846f114b","modified":1753864712840},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/abcjs/abcjs.pug","hash":"febff991595504d8e850ced0b9cc090f02ed97f0","modified":1753864712824},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/abcjs/index.pug","hash":"f0a90d8e39915a74b16ef22e851f179415cd7eaa","modified":1753864712824},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"b03ee8625149191f9d5d057bbc9824b68d8dd0c4","modified":1753864712824},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/local-search.js","hash":"a2b783230a9143de69004cfc914d9f55e6fc1660","modified":1753864712840},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d6fff5a7f84c8b09f282f9ddc0020a68a8aac9ea","modified":1753864712824},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"cbfbcf34a24d21ba2b21cf9eedb76f4c3c563c5a","modified":1753864712824},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"846cabae287ae31b3bbfac3da022475713dd5ecc","modified":1753864712824},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"b5db4203a1392385838c73549ddeae0a4be67eba","modified":1753864712824},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"716dc463fe4ef5112e7018ed60804125fdfa5cad","modified":1753864712824},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"7884883ec15792f7e54daacb3c62b851dde2b66a","modified":1753864712824},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"fd2320ee25507bb8ef49f932c2d170586b44ea4d","modified":1753864712824},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/chatra.pug","hash":"5b29badecbbe828112c001156023fc0566045cf6","modified":1753864712824},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/crisp.pug","hash":"24d094fd917947c0ca7492fa094328b1a183b873","modified":1753864712824},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/index.pug","hash":"e8438941085def0591a72fc9b0d705dbf107f54f","modified":1753864712824},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/tidio.pug","hash":"62466b251052cae609b6369d4cb4b6a85320757d","modified":1753864712824},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/artalk.pug","hash":"89c63a5f0c0ab6314de7158fbc8fcbc84997fc55","modified":1753864712824},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/disqus.pug","hash":"f2ea5249b3e6670f6c8c77868f4f42c502e43830","modified":1753864712824},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"c81fa7d8a5cb96d1ae07bfa8c46b84a58161add1","modified":1753864712825},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"8af585e6d6f73ee57114eefad574dc6e8ea9f570","modified":1753864712825},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"58914c58a190e3bc0aa37cb581e77e442b563501","modified":1753864712825},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/index.pug","hash":"db6713d2b90eb8183f86ac92c26761a8501c0ddb","modified":1753864712825},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/giscus.pug","hash":"592b2251db6c1abeb8b0eebe3b2e6d9aa0dec445","modified":1753864712825},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/js.pug","hash":"3abbaaa4ea575c45b3cebffd40bad1acc6ffce84","modified":1753864712825},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/livere.pug","hash":"7a80231fc71822e503879383a2d9611edf1d72dd","modified":1753864712825},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"53d99831f29aeb2e336ed1407d79590041f77002","modified":1753864712825},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/remark42.pug","hash":"84f7cfde00f929fa3dc40349bcab060ec68f1b9f","modified":1753864712825},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/utterances.pug","hash":"30a7d157890de69deab28baa47fb7bb28b040efd","modified":1753864712825},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/waline.pug","hash":"e2bf15357485cd502414b3b20f5b1f762a2fd014","modified":1753864712825},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/valine.pug","hash":"24f18b0c67803210d53abbf9c1d454c000b06eee","modified":1753864712825},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/chartjs.pug","hash":"732eb1118ea1a73aa5c164d639097c614f8e9953","modified":1753864712825},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/index.pug","hash":"af66d13204030d47537b9e31a6173e63589ce7ff","modified":1753864712825},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/katex.pug","hash":"b83db9fa64d42a0bfd97efb660e09be3f166a144","modified":1753864712825},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/mathjax.pug","hash":"db2f4fff80a1166476ea76ae004aa186df11bad3","modified":1753864712825},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/mermaid.pug","hash":"ca2fc5928ca292f29fd8333c73733344994096fb","modified":1753864712825},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"187302dbc916852ff2fdf47061e272c061611dda","modified":1753864712825},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"a7c07dbc1e970a5b247091458e1ee9b144a3366d","modified":1753864712825},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"72e2970b23570e308f8af5d8ba8e5e3321d01bbf","modified":1753864712825},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"34edfebf0cace0852806be774910ccb0e0914650","modified":1753864712825},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"d2e12a9fc302a4efe52c90d44896fbd73e193a1f","modified":1753864712825},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"d376ec17fb19fcdcf0d2ad71330190146d3af879","modified":1753864712825},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/algolia.pug","hash":"7f0ede1cd3fed2669c94a8e1b21bc0b183f310b8","modified":1753864712825},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"ec6c685080634ac46ffbea1b8f10313388888f43","modified":1753864712825},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/docsearch.pug","hash":"013756ff3363344987cc00fc9bd833baf193c341","modified":1753864712825},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/index.pug","hash":"f8557548d2ad8dd149c562193991c6c6cda02415","modified":1753864712825},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/local-search.pug","hash":"2622b4cf9189fa23e4a422aaf9ef272e4f2c6137","modified":1753864712825},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/addtoany.pug","hash":"f5ee1c9c8ffa4bca972d30f4de69268b8d47f052","modified":1753864712825},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/index.pug","hash":"e51e896ccb13900de38dc81cf44dc789e2418a12","modified":1753864712825},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"fa4b4194749d05f7249f365f2b89c0281057ce54","modified":1753864712825},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/share-js.pug","hash":"efef352c1d122409575386bf3894dce8e87032e2","modified":1753864712825},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight/diff.styl","hash":"9f02598b5e4296aec6470639d4bac4c9ac46392e","modified":1753864712827},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/diff.styl","hash":"077ec530831be1d80e93da380406b9f5abd0918a","modified":1753864712827},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/index.styl","hash":"1883c91d43bff10aae55122a21e0b064b6f5c9dd","modified":1753864712827},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight/index.styl","hash":"ef52ebf1e8e751a412f9456fdaeee7d88afd9a72","modified":1753864712827},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"de4bb5fc2dfca368b35e4c1109c92f7abc9e2245","modified":1753864712827},{"_id":"node_modules/hexo-theme-butterfly/source/img/image-2.png","hash":"3f1b29a9b21b73527afab229d327f0e52a7bfab3","modified":1753864712831},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/common.pug","hash":"27fa75affebc6e84a487c62bceff783bde595256","modified":1753864712825},{"_id":"node_modules/hexo-theme-butterfly/source/img/image-3.png","hash":"ccc5b72563b9731ac6f77bd61c94cd9ef033c9f8","modified":1753864712831},{"_id":"source/_posts/openvpn/image.png","hash":"de8f4ffa54004c36d88a54e32bf376e09fbe543d","modified":1753864713312},{"_id":"source/_posts/prometheus/image-11.png","hash":"305a988f655f2888e5b92fc8a2d7d03661fc7a68","modified":1753864713323},{"_id":"source/_posts/prometheus/image-17.png","hash":"4528330575961efd85d1364399af02b57b685c58","modified":1753864713346},{"_id":"source/_posts/iptables防止ddos-cc/image-2.png","hash":"979c71cf1f05cb7ad79ef16fe8295587fdbf3f85","modified":1753864713295},{"_id":"source/_posts/prometheus/image-10.png","hash":"5c3f654b55c451246b24cf0f9a813559fce5ba6f","modified":1753864713320},{"_id":"node_modules/hexo-theme-butterfly/source/img/butterfly-icon.png","hash":"f5dd732fed5c3bcd4aa76bac3441bac8485fb432","modified":1753864712830},{"_id":"source/_posts/openvpn/image-2.png","hash":"41657d6c3de1e0c3c7e2b830a2b67d38464b76bf","modified":1753864713306},{"_id":"source/_posts/prometheus/image-13.png","hash":"c1a565035062ef229f3c25143ec3d19e63a42547","modified":1753864713331},{"_id":"source/_posts/prometheus/image-16.png","hash":"d323cdda830c0b08502144608405b614b0f05057","modified":1753864713343},{"_id":"source/_posts/prometheus/image-20.png","hash":"10020604c51337024ddf6059eb2246ad08a636cb","modified":1753864713360},{"_id":"source/_posts/prometheus/image-22.png","hash":"916e40a625e46733c94949ba9d03c38e12b97d3e","modified":1753864713368},{"_id":"source/_posts/prometheus/image-18.png","hash":"569c140190b5e14042742d39499e0c6e8325c760","modified":1753864713350},{"_id":"source/_posts/prometheus/image.png","hash":"f8eea7cdc5be381d0a077c440e93976b98d68234","modified":1753864713408},{"_id":"source/_posts/iptables防止ddos-cc/image.png","hash":"cd9360694e9b8593d5859daae8411bf3a0d9241f","modified":1753864713299},{"_id":"source/_posts/prometheus/image-1.png","hash":"d0efacc51df380c64b7093b60292391763fc9518","modified":1753864713317},{"_id":"source/_posts/prometheus/image-21.png","hash":"b83bd7ceae3bd6f5f782689eda9eb2b67397554b","modified":1753864713364},{"_id":"source/_posts/openvpn/image-1.png","hash":"d7d58c339c2c1b467afe1b0b3fdf42a9f1e88b29","modified":1753864713303},{"_id":"source/_posts/prometheus/image-12.png","hash":"c29d63d28c0e12a61cb6543392c1743e6b3e10a0","modified":1753864713327},{"_id":"source/_posts/alertmanager/image.png","hash":"df66cc343743094c3cd72bcc20295194d4e74253","modified":1753864713285},{"_id":"source/_posts/prometheus/image-23.png","hash":"abcca34126a92233ebc44a1240a177fdf30e61b4","modified":1753864713373},{"_id":"source/_posts/openvpn/image-3.png","hash":"6a1c126be932c31ae58921006dc3b7b5135bd883","modified":1753864713310},{"_id":"source/_posts/prometheus/image-4.png","hash":"0c8126a6edf36927294024a8c777630756ad424f","modified":1753864713386},{"_id":"source/_posts/prometheus/image-7.png","hash":"543c3694932046264d0f499c41612eb38f560796","modified":1753864713397},{"_id":"source/_posts/prometheus/image-8.png","hash":"a0c677cb3c1a823b9bf8c2cd321541d92cd170f8","modified":1753864713402},{"_id":"source/_posts/使用kubekey快速安装k8s/image.png","hash":"19fb427077c2b8e532d98df8086b67c48b88d23f","modified":1753864713417},{"_id":"source/_posts/prometheus/image-2.png","hash":"81d6dd4e194e9741d2cbd0da19824bfa75ed6b94","modified":1753864713356},{"_id":"source/_posts/prometheus/image-5.png","hash":"d3e0cbd5bbf80d54ae281ab94ad32414001f8cf2","modified":1753864713392},{"_id":"source/_posts/iptables防止ddos-cc/image-1.png","hash":"77cb4b5ee2d44f18ff4c79207e61918bcd1c7606","modified":1753864713292},{"_id":"source/_posts/prometheus/image-3.png","hash":"56f3a0de7c38cdaace4b506df44f01316e1deb06","modified":1753864713380},{"_id":"node_modules/hexo-theme-butterfly/source/img/image-4.png","hash":"61753cd127b3a1cc66d49019e27b4c749987b74c","modified":1753864712833},{"_id":"source/_posts/prometheus/image-15.png","hash":"3e32a57c4be073c3f9de706f7c34ad5baf1dffec","modified":1753864713339},{"_id":"node_modules/hexo-theme-butterfly/source/img/img-4.png","hash":"ed2e6a5936b308caf72c51452a2bbf70e57b8f8a","modified":1753864712839},{"_id":"public/search.json","hash":"bc8484e02b12f5757a6814665f6cdc8cb0745070","modified":1753864912277},{"_id":"public/404.html","hash":"26d9fa30640eb7acb8c0ac91bf7d69ede97e9903","modified":1753864912277},{"_id":"public/404/index.html","hash":"506ec12e907c9c77e902f7d312bfc65ce91a6162","modified":1753864912277},{"_id":"public/about/index.html","hash":"242e9d9c8bf49d72b19039ebfff34429ddf35124","modified":1753864912277},{"_id":"public/categories/index.html","hash":"3a5da8808aade20d6cf385680d806dfbc75b5ec9","modified":1753864912277},{"_id":"public/tags/index.html","hash":"a84d7d55606c56023235ff5ac2b2ef2b421dbb38","modified":1753864912277},{"_id":"public/2025/04/18/elfk/index.html","hash":"7d8be71cf35c553dde02b7894a0d0d7fd554768f","modified":1753864912277},{"_id":"public/2025/04/18/prometheus/index.html","hash":"48445e166362d34dfb6c9a34d5820c7c07c02c26","modified":1753864912277},{"_id":"public/2025/04/21/miniconda3/index.html","hash":"7fa744c79aa2513b76de8367cd6de4765a32914b","modified":1753864912277},{"_id":"public/2025/04/21/iptables防止ddos-cc/index.html","hash":"8a5d98a877f3d0b93e7aa61a0e3d6ac40c3a1122","modified":1753864912277},{"_id":"public/2025/04/21/openvpn/index.html","hash":"7d12b4363310c715326c2291a429afc9650e929f","modified":1753864912277},{"_id":"public/2025/04/27/使用kubekey快速安装k8s/index.html","hash":"f036e1aab082a541c5d6a53ae22754580f1919cc","modified":1753864912277},{"_id":"public/2025/04/27/screen/index.html","hash":"8dce1e422206184fb11989fcbdaedff43e11a41c","modified":1753864912277},{"_id":"public/2025/04/27/alertmanager/index.html","hash":"81bb816a2b7b1eefb93df718c06e03663d8283e2","modified":1753864912277},{"_id":"public/2025/05/12/使用maven打包/index.html","hash":"89a541f7500661ea288bcd0d8307b1871d4cac4a","modified":1753864912277},{"_id":"public/2025/05/12/部署本地大模型/index.html","hash":"23692361a3b5681f278ed263986efad10e3a0ad1","modified":1753864912277},{"_id":"public/2025/05/28/websocket/index.html","hash":"6a169e2755bb6769037390a52c8f0f9ec82e5973","modified":1753864912277},{"_id":"public/2025/07/21/nginx-todo/index.html","hash":"81d2f272bd432a07e1dedc86579b4da7dedff798","modified":1753864912277},{"_id":"public/2025/07/24/kubeclt-neat/index.html","hash":"6be0c51bb5f55e46145303ac4fc112f27ea93087","modified":1753864912277},{"_id":"public/2025/07/24/数据库/index.html","hash":"afae199f99ce602ded4323e1b4c8c07394b45f97","modified":1753864912277},{"_id":"public/2025/07/25/tcp/index.html","hash":"b4672da1b97b9d25ed235e0fa6584ef884109dd8","modified":1753864912277},{"_id":"public/2025/07/25/ftp/index.html","hash":"8a6a4108427a5b42e8bc3024303a25d7335f4143","modified":1753864912277},{"_id":"public/archives/index.html","hash":"848ed1f7aaf3069d173fdd9913d3f41c6c5222ca","modified":1753864912277},{"_id":"public/archives/page/2/index.html","hash":"34e3fdec71a92105b1a23e3ba464ba722715ec53","modified":1753864912277},{"_id":"public/archives/2025/index.html","hash":"e6aee47197cb99da58f85db08b37d5a5bf654de7","modified":1753864912277},{"_id":"public/archives/2025/page/2/index.html","hash":"5eb84c7fe4ad298e0fc32f64bb208efcfd5416db","modified":1753864912277},{"_id":"public/archives/2025/04/index.html","hash":"5e0786dd197cd2c872cc4b4d669563e1df4b1ec6","modified":1753864912277},{"_id":"public/archives/2025/05/index.html","hash":"f1bf10f758043fae7dd4053cf2a746aa22067e9e","modified":1753864912277},{"_id":"public/archives/2025/07/index.html","hash":"70674fef1eee87901a375ab2262f882bc7f7ddd8","modified":1753864912277},{"_id":"public/categories/prometheus/index.html","hash":"374b956e39a70bd5772e8e350a38b9ae4e20f9e2","modified":1753864912277},{"_id":"public/categories/中间件/index.html","hash":"ed7dc6daa327e96b647ee92f68d764058cb320ab","modified":1753864912277},{"_id":"public/categories/linux/index.html","hash":"3c853c26737430f9c86f9599ccf8ff2def5e46b9","modified":1753864912277},{"_id":"public/categories/k8s/index.html","hash":"f5f86015ed031a8f267d1455728358644fd3ab2d","modified":1753864912277},{"_id":"public/categories/python/index.html","hash":"c670df13c0440d12779b7f4adfb7bcc53fb11d64","modified":1753864912277},{"_id":"public/categories/db/index.html","hash":"f0fd97498f8aba850643f201c6c44d666cf85857","modified":1753864912277},{"_id":"public/index.html","hash":"add0416766f289e2e428255d864b0ff2644cb8c7","modified":1753864912277},{"_id":"public/page/2/index.html","hash":"efa4d41e7a12437664db961067137c2da926e0a7","modified":1753864912277},{"_id":"public/tags/prometheus/index.html","hash":"761ddc909c999fa8601c9865c39ac5275bbb9418","modified":1753864912277},{"_id":"public/tags/websocket/index.html","hash":"4e8f3973f32a966d2ef5e4e223287216b667eaee","modified":1753864912277},{"_id":"public/tags/maven/index.html","hash":"98379cde0eec993848836aeb798c78942694e32a","modified":1753864912277},{"_id":"public/tags/llm/index.html","hash":"db2fe91d61eb84327adc556bf90c12da052264b2","modified":1753864912277},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1753864912277},{"_id":"public/img/error-page.png","hash":"d2519710498a871ca3e913c57e2ba20a805b6430","modified":1753864912277},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1753864912277},{"_id":"public/img/favicon.ico","hash":"455ac256580bf31a45813dbbdb87219bfc8bfb04","modified":1753864912277},{"_id":"public/img/img.png","hash":"185ddc251df0cd80abd4f212b3213963f6561161","modified":1753864912277},{"_id":"public/img/image-2.png","hash":"3f1b29a9b21b73527afab229d327f0e52a7bfab3","modified":1753864912277},{"_id":"public/2025/04/18/prometheus/image-6.png","hash":"d8e9764519615d8bcbf5a2d96877f799649e5f9b","modified":1753864912277},{"_id":"public/css/index.css","hash":"7d4c802f0efe0158be855e4751d5dc38bee6a56b","modified":1753864912277},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1753864912277},{"_id":"public/js/main.js","hash":"fb746a3e67d0373deea8481110dd436fea4ca38c","modified":1753864912277},{"_id":"public/js/tw_cn.js","hash":"7ef59df188ea523da89f4caf69c5c0f14e78da69","modified":1753864912277},{"_id":"public/js/search/algolia.js","hash":"e5821f78381af9f0f646952a7dd118daab2a79a6","modified":1753864912277},{"_id":"public/js/utils.js","hash":"fd3c26366c78dd82bc87d4ddebe76c582122e1b7","modified":1753864912277},{"_id":"public/js/search/local-search.js","hash":"4e11d033fb58563f5e1b497f1a6f1c62d3501ee6","modified":1753864912277},{"_id":"public/img/image-3.png","hash":"ccc5b72563b9731ac6f77bd61c94cd9ef033c9f8","modified":1753864912277},{"_id":"public/2025/07/25/ftp/image.png","hash":"444173c3e2869a879a139d98e51bc620e50f07ee","modified":1753864912277},{"_id":"public/2025/04/18/prometheus/image-19.png","hash":"67edf337abdf7bd80fb9c453dc00dc2f06c83cf3","modified":1753864912277},{"_id":"public/img/butterfly-icon.png","hash":"f5dd732fed5c3bcd4aa76bac3441bac8485fb432","modified":1753864912277},{"_id":"public/2025/07/25/ftp/image-1.png","hash":"760884845aa748e8006cb69e10147dbace981bd4","modified":1753864912277},{"_id":"public/2025/04/18/prometheus/image-24.png","hash":"2704542f9fedfc2f7bbb306459e44a1434b2795a","modified":1753864912277},{"_id":"public/2025/04/27/screen/image.png","hash":"40e05211c71099fddaaa68dacb4754ad3fdb2f28","modified":1753864912277},{"_id":"public/2025/04/18/prometheus/image-14.png","hash":"941b76bbc04ba0df5e3f977fded9e1c874f17a79","modified":1753864912277},{"_id":"public/2025/04/18/prometheus/image-9.png","hash":"cab348483b2aca8fb4865c27d51372aaf094080a","modified":1753864912277},{"_id":"public/2025/07/25/tcp/image.png","hash":"b1401eec5d15d0586b04f89c443e5b16ed15fea7","modified":1753864912277},{"_id":"public/2025/04/21/openvpn/image.png","hash":"de8f4ffa54004c36d88a54e32bf376e09fbe543d","modified":1753864912277},{"_id":"public/2025/04/18/prometheus/image-11.png","hash":"305a988f655f2888e5b92fc8a2d7d03661fc7a68","modified":1753864912277},{"_id":"public/2025/04/18/prometheus/image-17.png","hash":"4528330575961efd85d1364399af02b57b685c58","modified":1753864912277},{"_id":"public/2025/04/21/iptables防止ddos-cc/image-2.png","hash":"979c71cf1f05cb7ad79ef16fe8295587fdbf3f85","modified":1753864912277},{"_id":"public/2025/04/18/prometheus/image-10.png","hash":"5c3f654b55c451246b24cf0f9a813559fce5ba6f","modified":1753864912277},{"_id":"public/2025/04/21/openvpn/image-2.png","hash":"41657d6c3de1e0c3c7e2b830a2b67d38464b76bf","modified":1753864912277},{"_id":"public/2025/04/18/prometheus/image-13.png","hash":"c1a565035062ef229f3c25143ec3d19e63a42547","modified":1753864912277},{"_id":"public/2025/04/18/prometheus/image-16.png","hash":"d323cdda830c0b08502144608405b614b0f05057","modified":1753864912277},{"_id":"public/2025/04/18/prometheus/image-20.png","hash":"10020604c51337024ddf6059eb2246ad08a636cb","modified":1753864912277},{"_id":"public/2025/04/18/prometheus/image-22.png","hash":"916e40a625e46733c94949ba9d03c38e12b97d3e","modified":1753864912277},{"_id":"public/2025/04/18/prometheus/image-18.png","hash":"569c140190b5e14042742d39499e0c6e8325c760","modified":1753864912277},{"_id":"public/2025/04/18/prometheus/image.png","hash":"f8eea7cdc5be381d0a077c440e93976b98d68234","modified":1753864912277},{"_id":"public/2025/04/21/iptables防止ddos-cc/image.png","hash":"cd9360694e9b8593d5859daae8411bf3a0d9241f","modified":1753864912277},{"_id":"public/img/image-4.png","hash":"61753cd127b3a1cc66d49019e27b4c749987b74c","modified":1753864912277},{"_id":"public/2025/04/18/prometheus/image-1.png","hash":"d0efacc51df380c64b7093b60292391763fc9518","modified":1753864912277},{"_id":"public/2025/04/18/prometheus/image-21.png","hash":"b83bd7ceae3bd6f5f782689eda9eb2b67397554b","modified":1753864912277},{"_id":"public/2025/04/21/openvpn/image-1.png","hash":"d7d58c339c2c1b467afe1b0b3fdf42a9f1e88b29","modified":1753864912277},{"_id":"public/2025/04/18/prometheus/image-12.png","hash":"c29d63d28c0e12a61cb6543392c1743e6b3e10a0","modified":1753864912277},{"_id":"public/2025/04/27/alertmanager/image.png","hash":"df66cc343743094c3cd72bcc20295194d4e74253","modified":1753864912277},{"_id":"public/2025/04/18/prometheus/image-23.png","hash":"abcca34126a92233ebc44a1240a177fdf30e61b4","modified":1753864912277},{"_id":"public/2025/04/21/openvpn/image-3.png","hash":"6a1c126be932c31ae58921006dc3b7b5135bd883","modified":1753864912277},{"_id":"public/2025/04/18/prometheus/image-4.png","hash":"0c8126a6edf36927294024a8c777630756ad424f","modified":1753864912277},{"_id":"public/2025/04/18/prometheus/image-7.png","hash":"543c3694932046264d0f499c41612eb38f560796","modified":1753864912277},{"_id":"public/2025/04/18/prometheus/image-8.png","hash":"a0c677cb3c1a823b9bf8c2cd321541d92cd170f8","modified":1753864912277},{"_id":"public/2025/04/27/使用kubekey快速安装k8s/image.png","hash":"19fb427077c2b8e532d98df8086b67c48b88d23f","modified":1753864912277},{"_id":"public/img/img-4.png","hash":"ed2e6a5936b308caf72c51452a2bbf70e57b8f8a","modified":1753864912277},{"_id":"public/2025/04/18/prometheus/image-2.png","hash":"81d6dd4e194e9741d2cbd0da19824bfa75ed6b94","modified":1753864912277},{"_id":"public/2025/04/18/prometheus/image-5.png","hash":"d3e0cbd5bbf80d54ae281ab94ad32414001f8cf2","modified":1753864912277},{"_id":"public/2025/04/21/iptables防止ddos-cc/image-1.png","hash":"77cb4b5ee2d44f18ff4c79207e61918bcd1c7606","modified":1753864912277},{"_id":"public/2025/04/18/prometheus/image-3.png","hash":"56f3a0de7c38cdaace4b506df44f01316e1deb06","modified":1753864912277},{"_id":"public/2025/04/18/prometheus/image-15.png","hash":"3e32a57c4be073c3f9de706f7c34ad5baf1dffec","modified":1753864912277}],"Category":[{"name":"prometheus","_id":"cmdppvvvj0004lpod7svp6rkw"},{"name":"中间件","_id":"cmdppvvvp000alpode1zr31iw"},{"name":"linux","_id":"cmdppvvvr000elpodeou53jyy"},{"name":"k8s","_id":"cmdppvvvx000olpod6orh1piz"},{"name":"python","_id":"cmdppvvvz000ulpodco5vdcmb"},{"name":"db","_id":"cmdppvvw10011lpodct6k2ci5"}],"Data":[],"Page":[{"title":"404","date":"2018-09-30T09:25:30.000Z","type":"404","layout":"404","description":"Oops～，我崩溃了！找不到你想要的页面 :(","_content":"","source":"404/index.md","raw":"---\ntitle: 404\ndate: 2018-09-30 17:25:30\ntype: \"404\"\nlayout: \"404\"\ndescription: \"Oops～，我崩溃了！找不到你想要的页面 :(\"\n---\n","updated":"2025-07-30T08:38:33.280Z","path":"404/index.html","comments":1,"_id":"cmdppvvvb0000lpod2bu5cc1m","content":"","excerpt":"","more":""},{"title":"关于我","type":"about","date":"2025-04-14T07:39:26.000Z","_content":"**人生天地之间，若白驹之过隙，忽然而已。人终将会死去总想留下点什么痕迹，希望我的博客永存**<br>\n**地球很小 不要被人类所创造出来的规则消耗一生**<br> \n[宇宙居然如此浩荡！一个让你怀疑人生的视频！](https://www.bilibili.com/video/BV1Wx41147qg/)\n","source":"about/index.md","raw":"---\ntitle: 关于我\ntype: 'about'\ndate: 2025-04-14 15:39:26\n---\n**人生天地之间，若白驹之过隙，忽然而已。人终将会死去总想留下点什么痕迹，希望我的博客永存**<br>\n**地球很小 不要被人类所创造出来的规则消耗一生**<br> \n[宇宙居然如此浩荡！一个让你怀疑人生的视频！](https://www.bilibili.com/video/BV1Wx41147qg/)\n","updated":"2025-07-30T08:38:33.418Z","path":"about/index.html","comments":1,"layout":"page","_id":"cmdppvvvh0002lpod3u0i33n9","content":"<p><strong>人生天地之间，若白驹之过隙，忽然而已。人终将会死去总想留下点什么痕迹，希望我的博客永存</strong><br><br><strong>地球很小 不要被人类所创造出来的规则消耗一生</strong><br><br><a href=\"https://www.bilibili.com/video/BV1Wx41147qg/\">宇宙居然如此浩荡！一个让你怀疑人生的视频！</a></p>\n","excerpt":"","more":"<p><strong>人生天地之间，若白驹之过隙，忽然而已。人终将会死去总想留下点什么痕迹，希望我的博客永存</strong><br><br><strong>地球很小 不要被人类所创造出来的规则消耗一生</strong><br><br><a href=\"https://www.bilibili.com/video/BV1Wx41147qg/\">宇宙居然如此浩荡！一个让你怀疑人生的视频！</a></p>\n"},{"title":"分类","date":"2025-04-14T06:03:07.000Z","type":"categories","limit":{"value":2},"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2025-04-14 14:03:07\ntype: \"categories\"\nlimit:\n  value: 2\n---\n","updated":"2025-07-30T08:38:33.418Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cmdppvvvl0005lpod1h4bdq09","content":"","excerpt":"","more":""},{"title":"tags","type":"tags","date":"2025-04-14T07:39:26.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ntype: 'tags'\ndate: 2025-04-14 15:39:26\n---\n","updated":"2025-07-30T08:38:33.418Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cmdppvvvn0007lpod28azc0i7","content":"","excerpt":"","more":""}],"Post":[{"title":"alertmanager","date":"2025-04-27T08:06:39.000Z","_content":"# 安装\n```shell\ncurl -SL https://github.com/docker/compose/releases/download/v2.30.3/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose\n#将可执行权限赋予安装目标路径中的独立二进制文件\nsudo chmod +x /usr/local/bin/docker-compose\nsudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose\n\nversion: '3'\nservices:\n  alertmanager:\n    image: registry.cn-hangzhou.aliyuncs.com/lky-deploy/alertmanager:v0.28.1\n    ports:\n      - \"9093:9093\"\n      - \"9094:9094\"\n    volumes:\n      - ./config:/etc/alertmanager\n      - alertmanager_data:/alertmanager\n    command:\n      - '--config.file=/etc/alertmanager/alertmanager.yml'\n      - '--storage.path=/alertmanager'\n      - '--cluster.advertise-address=alertmanager:9094'\n    networks:\n      - monitoring-net\n\nvolumes:\n  alertmanager_data:\n\nnetworks:\n  monitoring-net:\n    driver: bridge\n\n```\n# 配置文件解读\n\n```\nglobal: # 即为全局设置,在Alertmanager配置文件中,只要全局设置配置了的选项,全部为公共设置,可以让其他设置继承,作为默认值,可以子参数中覆盖其设置。\n  resolve_timeout: 1m # 用于设置处理超时时间,也是生命警报状态为解决的时间,这个时间会直接影响到警报恢复的通知时间,需要自行结合实际生产场景来设置主机的恢复时间,默认是5分钟。\n  # 整合邮件\n  smtp_smarthost: 'smtp.qq.com:465' # 邮箱smtp服务器\n  smtp_from: '1451578387@qq.com' # 发件用的邮箱地址\n  smtp_auth_username: '1451578387@qq.com' # 发件人账号\n  smtp_auth_password: 'dkuuifhdskaduasdsb' # 发件人邮箱密码\n  smtp_require_tls: false # 不进行tls验证\nroute: # 路由分组\n  group_by: ['alertname'] # 报警分组\n  group_wait: 10s # 组内等待时间,同一分组内收到第一个告警等待多久开始发送,目标是为了同组消息同时发送,不占用告警信息,默认30s。\n  group_interval: 10s # 当组内已经发送过一个告警,组内若有新增告警需要等待的时间,默认为5m,这条要确定组内信息是影响同一业务才能设置,若分组不合理,可能导致告警延迟,造成影响。\n  repeat_interval: 1h # 告警已经发送,且无新增告警,若重复告警需要间隔多久,默认4h,属于重复告警,时间间隔应根据告警的严重程度来设置。\n  receiver: 'webhook' # 告警的接收者,需要和 receivers[n].name 的值一致。\n  # 上面所有的属性都由所有子路由继承,并且可以在每个子路由上进行覆盖。\n  # 当报警信息中标签匹配到team:node时会使用email发送报警,否则使用webhook。\n templates:\n- '/etc/alertmanager/config/*.tmpl'\n# route根路由,该模块用于该根路由下的节点及子路由routes的定义,子树节点如果不对相关配置进行配置,则默认会从父路由树继承该配置选项。每一条告警都要进入route,即要求配置选项group_by的值能够匹配到每一条告警的至少一个labelkey(即通过POST请求向altermanager服务接口所发送告警的labels项所携带的<labelname>),告警进入到route后,将会根据子路由routes节点中的配置项match_re或者match来确定能进入该子路由节点的告警(由在match_re或者match下配置的labelkey:labelvalue是否为告警labels的子集决定,是的话则会进入该子路由节点,否则不能接收进入该子路由节点)。\nroute:\n  # 例如所有labelkey:labelvalue含cluster=A及altertname=LatencyHigh的labelkey的告警都会被归入单一组中\n  group_by: ['job', 'altername', 'cluster', 'service','severity']\n  # 若一组新的告警产生,则会等group_wait后再发送通知,该功能主要用于当告警在很短时间内接连产生时,在group_wait内合并为单一的告警后再发送\n  group_wait: 30s\n  # 再次告警时间间隔\n  group_interval: 5m\n  # 如果一条告警通知已成功发送,且在间隔repeat_interval后,该告警仍然未被设置为resolved,则会再次发送该告警通知\n  repeat_interval: 12h\n  # 默认告警通知接收者,凡未被匹配进入各子路由节点的告警均被发送到此接收者\n  receiver: 'wechat'\n  # 上述route的配置会被传递给子路由节点,子路由节点进行重新配置才会被覆盖\n  # 子路由树\n  routes:\n  # 该配置选项使用正则表达式来匹配告警的labels,以确定能否进入该子路由树\n  # match_re和match均用于匹配labelkey为service,labelvalue分别为指定值的告警,被匹配到的告警会将通知发送到对应的receiver\n  - match_re:\n      service: ^(foo1|foo2|baz)$\n    receiver: 'wechat'\n    # 在带有service标签的告警同时有severity标签时,他可以有自己的子路由,同时具有severity != critical的告警则被发送给接收者team-ops-mails,对severity == critical的告警则被发送到对应的接收者即team-ops-pager\n    routes:\n    - match:\n        severity: critical\n      receiver: 'wechat'\n  # 比如关于数据库服务的告警,如果子路由没有匹配到相应的owner标签,则都默认由team-DB-pager接收\n  - match:\n      service: database\n    receiver: 'wechat'\n  # 我们也可以先根据标签service:database将数据库服务告警过滤出来,然后进一步将所有同时带labelkey为database\n  - match:\n      severity: critical\n    receiver: 'wechat'\n# 抑制规则,当出现critical(关键的)告警时忽略warning。\n# 下面的这段配置是指如果出现标签为severity=critical的告警,则抑制severity=warning的告警\ninhibit_rules:\n- source_match:\n    severity: 'critical'\n  target_match:\n    severity: 'warning'\n  # 如果警报名称相同,则应用抑制。\n  # alertname、cluster和service对应的标签值需要相等\n  equal: ['alertname', 'cluster', 'service']\n# 收件人配置\nreceivers:\n- name: 'team-ops-mails'\n  email_configs:\n  - to: 'dukuan@xxx.com'\n- name: 'team-X-pager'\n  email_configs:\n  - to: 'team-X+alerts-critical@example.org'\n  pagerduty_configs:\n  - service_key: <team-X-key>\n- name: 'team-Y-mails'\n  email_configs:\n  - to: 'team-Y+alerts@example.org'\n- name: 'webhook'\n  webhook_configs:\n  - url: http://127.0.0.1:8060/dingtalk/webhook1/send\n    send_resolved: true\n```\n## 分组和路由\n>1. **路由**<br>\nmatch（精确匹配）match_re（正则表达式匹配）\n>每一个告警都会从配置文件中顶级的route进入路由树，需要注意的是顶级的route必须匹配所有告警(即不能有任何的匹配设置match和match_re)，每一个路由都可以定义自己的接受人以及匹配规则。默认情况下，告警进入到顶级route后会遍历所有的子节点，直到找到最深的匹配route，并将告警发送到该route定义的receiver中。但如果route中设置continue的值为false，那么告警在匹配到第一个子节点之后就直接停止。如果continue为true，报警则会继续进行后续子节点的匹配。如果当前告警匹配不到任何的子节点，那该告警将会基于当前路由节点的接收器配置方式进行处理\n>2. **分组**<br>\n>告警通知进行分组，将多条告警合合并为一个通知。这里我们可以使用group_by来定义分组规则。基于告警中包含的标签，如果满足group_by中定义标签名称，那么这些告警将会合并为一个通知发送给接收器。\n有的时候为了能够一次性收集和发送更多的相关信息时，可以通过group_wait参数设置等待时间，如果在等待时间内当前group接收到了新的告警，这些告警将会合并为一个通知向receiver发送\n\n```\nroute:\n  group_by: ['alertname','team']   #在这里添加team匹配的标签\n  group_wait: 5s\n  group_interval: 5s\n  repeat_interval: 5m\n  # 默认发给\"sre_system\"组用户\n  receiver: 'sre_system'\n  continue: false\n  # 配置子路由\n  routes:\n    - receiver: 'sre_dba'\n      match_re:\n        job: test\n      # 建议将continue的值设置为true，表示当前的条件是否匹配，都将继续向下匹配规则\n      # 这样做的目的是将消息发给最后的系统组(sre_system)\n      continue: true\n==================================================================\n#rule.yml\n- name: grafana\n  rules:\n  - alert: node           #这个相当于alertname的值,与之前匹配的相同\n    expr: up{job=\"grafana\"} == 0\n    for: 10s                  \n    labels:                   \n      severity: 1 \n      job: test  # 对应上面的 match_re\n      team: grafana        #这里标签设置不同的一会用\n    annotations:              \n      summary: \"{{ \\$labels.instance }} 已停止运行超过 15s\"\n      description: hello world\n\n \nalertname 等于 node 如果相同报警会一起发送\nteam 等于 grafana \n```\n## 抑制规则\n```\ninhibit_rules:\n  - source_match:\n      severity: '告警'\n    target_match:\n      severity: '提示'\n    #equal: ['type','test'] 要求 type 和 test签均相同\n     equal: ['type']type的值必须一样\n当匹配到 告警 时就会抑制提示的告警通知并检查他们是否来自于同个\nssl（即ssl标签的值相同抑制才会生效）\n当子路由匹配到不同的 severity 时就会将消息发往不同的 receiver，当子路由无法匹配到时，消息会默认发往根路由的 receiver，因此，无论是否匹配到子路由规则，消息都会发往根路由的 receiver\n对应报警规则配置为\ngroups:\n- name: node-alerts\n  rules:\n  - alert: HighNodeCPU\n    expr: (1 - avg(rate(node_cpu_seconds_total{mode=\"idle\"}[5m])) by (instance)) * 100 > 80\n    for: 5m\n    labels:\n      severity: \"告警\"\n      type: ssl\n    annotations:\n      summary: \"高节点CPU使用率 ({{ $labels.instance }})\"\n      description: \"节点 {{ $labels.instance }} CPU 使用率超过 80% 已持续 5 分钟\"\n\n- name: cluster-alerts\n  rules:\n  - alert: ClusterWideCPUProblem\n    expr: |\n      sum( (1 - avg(rate(node_cpu_seconds_total{mode=\"idle\"}[5m])) by (instance)) * 100 > 80 )\n      /\n      count( (1 - avg(rate(node_cpu_seconds_total{mode=\"idle\"}[5m])) by (instance)) )\n      * 100 > 50\n    for: 10m\n    labels:\n      severity: \"提示\"\n      type: ssl\n    annotations:\n      summary: \"集群级CPU问题\"\n      description: \"超过 50% 的节点持续高CPU使用率达 10 分钟\"\n```\n\n# alertmanager集成三方告警\n>原生alertmanager只有邮件和webhook告警；Alertmanager 的原生 Webhook 告警是一种通过 HTTP POST 请求将告警信息发送到自定义接口（Webhook 接收端）的机制；所以要对接需要开发者自行开发，这里推荐两个现成的工具来对接\n\n## PrometheusAlert使用\n>Prometheus Alert 是开源的运维告警中心消息转发系统，支持主流的监控系统 Prometheus，日志系统 Graylog 和数据可视化系统 Grafana 发出的预警消息。通知渠道支持钉钉、微信、华为云短信、腾讯云短信、腾讯云电话、阿里云短信、阿里云电话等等\n```shell\nwget https://github.com/feiyu563/PrometheusAlert/releases/download/v4.8.1/linux.zip\nchmod +x PrometheusAlert\n启动 nohup ./PrometheusAlert & 后台运行\n\n#alertmanager.yml配置集成PrometheusAlert；格式可以登录PrometheusAlert查看\nreceivers:\n- name: 'web.hook.prometheusalert'\n  webhook_configs:\n  - url: 'http://192.168.197.142:8080/prometheusalert?type=wx&tpl=prometheus-wx&wxurl=https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=53fdb356-4446-42e5-b8bd-f7da63bcfe76'\n```\n![alt text](image.png)\n\n\n## prometheus-webhook-dingtalk使用\n>Prometheus 的Alertmanager自身不支持钉钉报警，需要通过插件的方式来达到报警条件\n### 安装\n```shell\nwget https://github.com/timonwong/prometheus-webhook-dingtalk/releases/download/v2.1.0/prometheus-webhook-dingtalk-2.1.0.linux-amd64.tar.gz\n\ntar zxf prometheus-webhook-dingtalk-2.1.0.linux-amd64.tar.gz \nmv prometheus-webhook-dingtalk-2.1.0.linux-amd64 /usr/local/prometheus-webhook-dingtalk\ncat > /usr/lib/systemd/system/webhook-dingtalk.service << EOF\n[Unit]\nDescription=prometheus-webhook-dingtalk\nDocumentation=https://github.com/timonwong/prometheus-webhook-dingtalk\nAfter=network.target\n\n[Service]\nUser=root\nGroup=root\nExecStart=/usr/local/prometheus-webhook-dingtalk/prometheus-webhook-dingtalk  --config.file=/usr/local/prometheus-webhook-dingtalk/config.yml\nExecReload=/bin/kill -HUP $MAINPID\nKillMode=process\nRestart=on-failure\n\n[Install]\nWantedBy=multi-user.target\nEOF\n#集成模版/usr/local/prometheus-webhook-dingtalk/config.yml\ntemplates:\n    - /usr/local/prometheus/webhook-dingtalk/template.tmpl\ntargets:\n  webhook1:\n    url: https://oapi.dingtalk.com/robot/send?access_token=9ac4354ab7c8\n\n#alertmanager配置发送给dingtalk插件\nreceivers:\n  - name: 'email'\n    email_configs:\n      - to: 'xxxxx@163.com' #指定发送给谁\n  - name: 'webhook1'\n    webhook_configs:\n      - send_resolved: false\n        url: http://localhost:8060/dingtalk/webhook1/send\n```\n\n### 报警内容模版\n```config\nvim /usr/local/prometheus/webhook-dingtalk/template.tmpl\n\n{{ define \"__subject\" }}\n[{{ .Status | toUpper }}{{ if eq .Status \"firing\" }}:{{ .Alerts.Firing | len }}{{ end }}]\n{{ end }}\n \n \n{{ define \"__alert_list\" }}{{ range . }}\n---\n{{ if .Labels.owner }}@{{ .Labels.owner }}{{ end }}\n \n**告警主题**: {{ .Annotations.summary }}\n\n**告警类型**: {{ .Labels.alertname }}\n \n**告警级别**: {{ .Labels.severity }} \n \n**告警主机**: {{ .Labels.instance }} \n \n**告警信息**: {{ index .Annotations \"description\" }}\n \n**告警时间**: {{ dateInZone \"2006.01.02 15:04:05\" (.StartsAt) \"Asia/Shanghai\" }}\n{{ end }}{{ end }}\n \n{{ define \"__resolved_list\" }}{{ range . }}\n---\n{{ if .Labels.owner }}@{{ .Labels.owner }}{{ end }}\n\n**告警主题**: {{ .Annotations.summary }}\n\n**告警类型**: {{ .Labels.alertname }} \n \n**告警级别**: {{ .Labels.severity }}\n \n**告警主机**: {{ .Labels.instance }}\n \n**告警信息**: {{ index .Annotations \"description\" }}\n \n**告警时间**: {{ dateInZone \"2006.01.02 15:04:05\" (.StartsAt) \"Asia/Shanghai\" }}\n \n**恢复时间**: {{ dateInZone \"2006.01.02 15:04:05\" (.EndsAt) \"Asia/Shanghai\" }}\n{{ end }}{{ end }}\n \n \n{{ define \"default.title\" }}\n{{ template \"__subject\" . }}\n{{ end }}\n \n{{ define \"default.content\" }}\n{{ if gt (len .Alerts.Firing) 0 }}\n**====侦测到{{ .Alerts.Firing | len  }}个故障====**\n{{ template \"__alert_list\" .Alerts.Firing }}\n---\n{{ end }}\n \n{{ if gt (len .Alerts.Resolved) 0 }}\n**====恢复{{ .Alerts.Resolved | len  }}个故障====**\n{{ template \"__resolved_list\" .Alerts.Resolved }}\n{{ end }}\n{{ end }}\n \n \n{{ define \"ding.link.title\" }}{{ template \"default.title\" . }}{{ end }}\n{{ define \"ding.link.content\" }}{{ template \"default.content\" . }}{{ end }}\n{{ template \"default.title\" . }}\n{{ template \"default.content\" . }}\n```\n### 报警规则示例\n```config\nmkdir /usr/local/prometheus/prometheus/rule\nvim /usr/local/prometheus/prometheus/rule/node_exporter.yml\n\ngroups:\n- name: 服务器资源监控\n  rules:\n  - alert: 内存使用率过高\n    expr: 100 - (node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes) * 100 > 80\n    for: 3m \n    labels:\n      severity: 严重告警\n    annotations:\n      summary: \"{{ $labels.instance }} 内存使用率过高, 请尽快处理！\"\n      description: \"{{ $labels.instance }}内存使用率超过80%,当前使用率{{ $value }}%.\"\n          \n  - alert: 服务器宕机\n    expr: up == 0\n    for: 1s\n    labels:\n      severity: 严重告警\n    annotations:\n      summary: \"{{$labels.instance}} 服务器宕机, 请尽快处理!\"\n      description: \"{{$labels.instance}} 服务器延时超过3分钟,当前状态{{ $value }}. \"\n \n  - alert: CPU高负荷\n    expr: 100 - (avg by (instance,job)(irate(node_cpu_seconds_total{mode=\"idle\"}[5m])) * 100) > 90\n    for: 5m\n    labels:\n      severity: 严重告警\n    annotations:\n      summary: \"{{$labels.instance}} CPU使用率过高,请尽快处理！\"\n      description: \"{{$labels.instance}} CPU使用大于90%,当前使用率{{ $value }}%. \"\n      \n  - alert: 磁盘IO性能\n    expr: avg(irate(node_disk_io_time_seconds_total[1m])) by(instance,job)* 100 > 90\n    for: 5m\n    labels:\n      severity: 严重告警\n    annotations:\n      summary: \"{{$labels.instance}} 流入磁盘IO使用率过高,请尽快处理！\"\n      description: \"{{$labels.instance}} 流入磁盘IO大于90%,当前使用率{{ $value }}%.\"\n \n \n  - alert: 网络流入\n    expr: ((sum(rate (node_network_receive_bytes_total{device!~'tap.*|veth.*|br.*|docker.*|virbr*|lo*'}[5m])) by (instance,job)) / 100) > 102400\n    for: 5m\n    labels:\n      severity: 严重告警\n    annotations:\n      summary: \"{{$labels.instance}} 流入网络带宽过高，请尽快处理！\"\n      description: \"{{$labels.instance}} 流入网络带宽持续5分钟高于100M. RX带宽使用量{{$value}}.\"\n \n  - alert: 网络流出\n    expr: ((sum(rate (node_network_transmit_bytes_total{device!~'tap.*|veth.*|br.*|docker.*|virbr*|lo*'}[5m])) by (instance,job)) / 100) > 102400\n    for: 5m\n    labels:\n      severity: 严重告警\n    annotations:\n      summary: \"{{$labels.instance}} 流出网络带宽过高,请尽快处理！\"\n      description: \"{{$labels.instance}} 流出网络带宽持续5分钟高于100M. RX带宽使用量{$value}}.\"\n  \n  - alert: TCP连接数\n    expr: node_netstat_Tcp_CurrEstab > 10000\n    for: 2m\n    labels:\n      severity: 严重告警\n    annotations:\n      summary: \" TCP_ESTABLISHED过高！\"\n      description: \"{{$labels.instance}} TCP_ESTABLISHED大于100%,当前使用率{{ $value }}%.\"\n \n  - alert: 磁盘容量\n    expr: 100-(node_filesystem_free_bytes{fstype=~\"ext4|xfs\"}/node_filesystem_size_bytes {fstype=~\"ext4|xfs\"}*100) > 90\n    for: 1m\n    labels:\n      severity: 严重告警\n    annotations:\n      summary: \"{{$labels.mountpoint}} 磁盘分区使用率过高，请尽快处理！\"\n      description: \"{{$labels.instance}} 磁盘分区使用大于90%，当前使用率{{ $value }}%.\"\n```\n","source":"_posts/alertmanager.md","raw":"---\ntitle: alertmanager\ndate: 2025-04-27 16:06:39\ntags:\ncategories: prometheus\n---\n# 安装\n```shell\ncurl -SL https://github.com/docker/compose/releases/download/v2.30.3/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose\n#将可执行权限赋予安装目标路径中的独立二进制文件\nsudo chmod +x /usr/local/bin/docker-compose\nsudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose\n\nversion: '3'\nservices:\n  alertmanager:\n    image: registry.cn-hangzhou.aliyuncs.com/lky-deploy/alertmanager:v0.28.1\n    ports:\n      - \"9093:9093\"\n      - \"9094:9094\"\n    volumes:\n      - ./config:/etc/alertmanager\n      - alertmanager_data:/alertmanager\n    command:\n      - '--config.file=/etc/alertmanager/alertmanager.yml'\n      - '--storage.path=/alertmanager'\n      - '--cluster.advertise-address=alertmanager:9094'\n    networks:\n      - monitoring-net\n\nvolumes:\n  alertmanager_data:\n\nnetworks:\n  monitoring-net:\n    driver: bridge\n\n```\n# 配置文件解读\n\n```\nglobal: # 即为全局设置,在Alertmanager配置文件中,只要全局设置配置了的选项,全部为公共设置,可以让其他设置继承,作为默认值,可以子参数中覆盖其设置。\n  resolve_timeout: 1m # 用于设置处理超时时间,也是生命警报状态为解决的时间,这个时间会直接影响到警报恢复的通知时间,需要自行结合实际生产场景来设置主机的恢复时间,默认是5分钟。\n  # 整合邮件\n  smtp_smarthost: 'smtp.qq.com:465' # 邮箱smtp服务器\n  smtp_from: '1451578387@qq.com' # 发件用的邮箱地址\n  smtp_auth_username: '1451578387@qq.com' # 发件人账号\n  smtp_auth_password: 'dkuuifhdskaduasdsb' # 发件人邮箱密码\n  smtp_require_tls: false # 不进行tls验证\nroute: # 路由分组\n  group_by: ['alertname'] # 报警分组\n  group_wait: 10s # 组内等待时间,同一分组内收到第一个告警等待多久开始发送,目标是为了同组消息同时发送,不占用告警信息,默认30s。\n  group_interval: 10s # 当组内已经发送过一个告警,组内若有新增告警需要等待的时间,默认为5m,这条要确定组内信息是影响同一业务才能设置,若分组不合理,可能导致告警延迟,造成影响。\n  repeat_interval: 1h # 告警已经发送,且无新增告警,若重复告警需要间隔多久,默认4h,属于重复告警,时间间隔应根据告警的严重程度来设置。\n  receiver: 'webhook' # 告警的接收者,需要和 receivers[n].name 的值一致。\n  # 上面所有的属性都由所有子路由继承,并且可以在每个子路由上进行覆盖。\n  # 当报警信息中标签匹配到team:node时会使用email发送报警,否则使用webhook。\n templates:\n- '/etc/alertmanager/config/*.tmpl'\n# route根路由,该模块用于该根路由下的节点及子路由routes的定义,子树节点如果不对相关配置进行配置,则默认会从父路由树继承该配置选项。每一条告警都要进入route,即要求配置选项group_by的值能够匹配到每一条告警的至少一个labelkey(即通过POST请求向altermanager服务接口所发送告警的labels项所携带的<labelname>),告警进入到route后,将会根据子路由routes节点中的配置项match_re或者match来确定能进入该子路由节点的告警(由在match_re或者match下配置的labelkey:labelvalue是否为告警labels的子集决定,是的话则会进入该子路由节点,否则不能接收进入该子路由节点)。\nroute:\n  # 例如所有labelkey:labelvalue含cluster=A及altertname=LatencyHigh的labelkey的告警都会被归入单一组中\n  group_by: ['job', 'altername', 'cluster', 'service','severity']\n  # 若一组新的告警产生,则会等group_wait后再发送通知,该功能主要用于当告警在很短时间内接连产生时,在group_wait内合并为单一的告警后再发送\n  group_wait: 30s\n  # 再次告警时间间隔\n  group_interval: 5m\n  # 如果一条告警通知已成功发送,且在间隔repeat_interval后,该告警仍然未被设置为resolved,则会再次发送该告警通知\n  repeat_interval: 12h\n  # 默认告警通知接收者,凡未被匹配进入各子路由节点的告警均被发送到此接收者\n  receiver: 'wechat'\n  # 上述route的配置会被传递给子路由节点,子路由节点进行重新配置才会被覆盖\n  # 子路由树\n  routes:\n  # 该配置选项使用正则表达式来匹配告警的labels,以确定能否进入该子路由树\n  # match_re和match均用于匹配labelkey为service,labelvalue分别为指定值的告警,被匹配到的告警会将通知发送到对应的receiver\n  - match_re:\n      service: ^(foo1|foo2|baz)$\n    receiver: 'wechat'\n    # 在带有service标签的告警同时有severity标签时,他可以有自己的子路由,同时具有severity != critical的告警则被发送给接收者team-ops-mails,对severity == critical的告警则被发送到对应的接收者即team-ops-pager\n    routes:\n    - match:\n        severity: critical\n      receiver: 'wechat'\n  # 比如关于数据库服务的告警,如果子路由没有匹配到相应的owner标签,则都默认由team-DB-pager接收\n  - match:\n      service: database\n    receiver: 'wechat'\n  # 我们也可以先根据标签service:database将数据库服务告警过滤出来,然后进一步将所有同时带labelkey为database\n  - match:\n      severity: critical\n    receiver: 'wechat'\n# 抑制规则,当出现critical(关键的)告警时忽略warning。\n# 下面的这段配置是指如果出现标签为severity=critical的告警,则抑制severity=warning的告警\ninhibit_rules:\n- source_match:\n    severity: 'critical'\n  target_match:\n    severity: 'warning'\n  # 如果警报名称相同,则应用抑制。\n  # alertname、cluster和service对应的标签值需要相等\n  equal: ['alertname', 'cluster', 'service']\n# 收件人配置\nreceivers:\n- name: 'team-ops-mails'\n  email_configs:\n  - to: 'dukuan@xxx.com'\n- name: 'team-X-pager'\n  email_configs:\n  - to: 'team-X+alerts-critical@example.org'\n  pagerduty_configs:\n  - service_key: <team-X-key>\n- name: 'team-Y-mails'\n  email_configs:\n  - to: 'team-Y+alerts@example.org'\n- name: 'webhook'\n  webhook_configs:\n  - url: http://127.0.0.1:8060/dingtalk/webhook1/send\n    send_resolved: true\n```\n## 分组和路由\n>1. **路由**<br>\nmatch（精确匹配）match_re（正则表达式匹配）\n>每一个告警都会从配置文件中顶级的route进入路由树，需要注意的是顶级的route必须匹配所有告警(即不能有任何的匹配设置match和match_re)，每一个路由都可以定义自己的接受人以及匹配规则。默认情况下，告警进入到顶级route后会遍历所有的子节点，直到找到最深的匹配route，并将告警发送到该route定义的receiver中。但如果route中设置continue的值为false，那么告警在匹配到第一个子节点之后就直接停止。如果continue为true，报警则会继续进行后续子节点的匹配。如果当前告警匹配不到任何的子节点，那该告警将会基于当前路由节点的接收器配置方式进行处理\n>2. **分组**<br>\n>告警通知进行分组，将多条告警合合并为一个通知。这里我们可以使用group_by来定义分组规则。基于告警中包含的标签，如果满足group_by中定义标签名称，那么这些告警将会合并为一个通知发送给接收器。\n有的时候为了能够一次性收集和发送更多的相关信息时，可以通过group_wait参数设置等待时间，如果在等待时间内当前group接收到了新的告警，这些告警将会合并为一个通知向receiver发送\n\n```\nroute:\n  group_by: ['alertname','team']   #在这里添加team匹配的标签\n  group_wait: 5s\n  group_interval: 5s\n  repeat_interval: 5m\n  # 默认发给\"sre_system\"组用户\n  receiver: 'sre_system'\n  continue: false\n  # 配置子路由\n  routes:\n    - receiver: 'sre_dba'\n      match_re:\n        job: test\n      # 建议将continue的值设置为true，表示当前的条件是否匹配，都将继续向下匹配规则\n      # 这样做的目的是将消息发给最后的系统组(sre_system)\n      continue: true\n==================================================================\n#rule.yml\n- name: grafana\n  rules:\n  - alert: node           #这个相当于alertname的值,与之前匹配的相同\n    expr: up{job=\"grafana\"} == 0\n    for: 10s                  \n    labels:                   \n      severity: 1 \n      job: test  # 对应上面的 match_re\n      team: grafana        #这里标签设置不同的一会用\n    annotations:              \n      summary: \"{{ \\$labels.instance }} 已停止运行超过 15s\"\n      description: hello world\n\n \nalertname 等于 node 如果相同报警会一起发送\nteam 等于 grafana \n```\n## 抑制规则\n```\ninhibit_rules:\n  - source_match:\n      severity: '告警'\n    target_match:\n      severity: '提示'\n    #equal: ['type','test'] 要求 type 和 test签均相同\n     equal: ['type']type的值必须一样\n当匹配到 告警 时就会抑制提示的告警通知并检查他们是否来自于同个\nssl（即ssl标签的值相同抑制才会生效）\n当子路由匹配到不同的 severity 时就会将消息发往不同的 receiver，当子路由无法匹配到时，消息会默认发往根路由的 receiver，因此，无论是否匹配到子路由规则，消息都会发往根路由的 receiver\n对应报警规则配置为\ngroups:\n- name: node-alerts\n  rules:\n  - alert: HighNodeCPU\n    expr: (1 - avg(rate(node_cpu_seconds_total{mode=\"idle\"}[5m])) by (instance)) * 100 > 80\n    for: 5m\n    labels:\n      severity: \"告警\"\n      type: ssl\n    annotations:\n      summary: \"高节点CPU使用率 ({{ $labels.instance }})\"\n      description: \"节点 {{ $labels.instance }} CPU 使用率超过 80% 已持续 5 分钟\"\n\n- name: cluster-alerts\n  rules:\n  - alert: ClusterWideCPUProblem\n    expr: |\n      sum( (1 - avg(rate(node_cpu_seconds_total{mode=\"idle\"}[5m])) by (instance)) * 100 > 80 )\n      /\n      count( (1 - avg(rate(node_cpu_seconds_total{mode=\"idle\"}[5m])) by (instance)) )\n      * 100 > 50\n    for: 10m\n    labels:\n      severity: \"提示\"\n      type: ssl\n    annotations:\n      summary: \"集群级CPU问题\"\n      description: \"超过 50% 的节点持续高CPU使用率达 10 分钟\"\n```\n\n# alertmanager集成三方告警\n>原生alertmanager只有邮件和webhook告警；Alertmanager 的原生 Webhook 告警是一种通过 HTTP POST 请求将告警信息发送到自定义接口（Webhook 接收端）的机制；所以要对接需要开发者自行开发，这里推荐两个现成的工具来对接\n\n## PrometheusAlert使用\n>Prometheus Alert 是开源的运维告警中心消息转发系统，支持主流的监控系统 Prometheus，日志系统 Graylog 和数据可视化系统 Grafana 发出的预警消息。通知渠道支持钉钉、微信、华为云短信、腾讯云短信、腾讯云电话、阿里云短信、阿里云电话等等\n```shell\nwget https://github.com/feiyu563/PrometheusAlert/releases/download/v4.8.1/linux.zip\nchmod +x PrometheusAlert\n启动 nohup ./PrometheusAlert & 后台运行\n\n#alertmanager.yml配置集成PrometheusAlert；格式可以登录PrometheusAlert查看\nreceivers:\n- name: 'web.hook.prometheusalert'\n  webhook_configs:\n  - url: 'http://192.168.197.142:8080/prometheusalert?type=wx&tpl=prometheus-wx&wxurl=https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=53fdb356-4446-42e5-b8bd-f7da63bcfe76'\n```\n![alt text](image.png)\n\n\n## prometheus-webhook-dingtalk使用\n>Prometheus 的Alertmanager自身不支持钉钉报警，需要通过插件的方式来达到报警条件\n### 安装\n```shell\nwget https://github.com/timonwong/prometheus-webhook-dingtalk/releases/download/v2.1.0/prometheus-webhook-dingtalk-2.1.0.linux-amd64.tar.gz\n\ntar zxf prometheus-webhook-dingtalk-2.1.0.linux-amd64.tar.gz \nmv prometheus-webhook-dingtalk-2.1.0.linux-amd64 /usr/local/prometheus-webhook-dingtalk\ncat > /usr/lib/systemd/system/webhook-dingtalk.service << EOF\n[Unit]\nDescription=prometheus-webhook-dingtalk\nDocumentation=https://github.com/timonwong/prometheus-webhook-dingtalk\nAfter=network.target\n\n[Service]\nUser=root\nGroup=root\nExecStart=/usr/local/prometheus-webhook-dingtalk/prometheus-webhook-dingtalk  --config.file=/usr/local/prometheus-webhook-dingtalk/config.yml\nExecReload=/bin/kill -HUP $MAINPID\nKillMode=process\nRestart=on-failure\n\n[Install]\nWantedBy=multi-user.target\nEOF\n#集成模版/usr/local/prometheus-webhook-dingtalk/config.yml\ntemplates:\n    - /usr/local/prometheus/webhook-dingtalk/template.tmpl\ntargets:\n  webhook1:\n    url: https://oapi.dingtalk.com/robot/send?access_token=9ac4354ab7c8\n\n#alertmanager配置发送给dingtalk插件\nreceivers:\n  - name: 'email'\n    email_configs:\n      - to: 'xxxxx@163.com' #指定发送给谁\n  - name: 'webhook1'\n    webhook_configs:\n      - send_resolved: false\n        url: http://localhost:8060/dingtalk/webhook1/send\n```\n\n### 报警内容模版\n```config\nvim /usr/local/prometheus/webhook-dingtalk/template.tmpl\n\n{{ define \"__subject\" }}\n[{{ .Status | toUpper }}{{ if eq .Status \"firing\" }}:{{ .Alerts.Firing | len }}{{ end }}]\n{{ end }}\n \n \n{{ define \"__alert_list\" }}{{ range . }}\n---\n{{ if .Labels.owner }}@{{ .Labels.owner }}{{ end }}\n \n**告警主题**: {{ .Annotations.summary }}\n\n**告警类型**: {{ .Labels.alertname }}\n \n**告警级别**: {{ .Labels.severity }} \n \n**告警主机**: {{ .Labels.instance }} \n \n**告警信息**: {{ index .Annotations \"description\" }}\n \n**告警时间**: {{ dateInZone \"2006.01.02 15:04:05\" (.StartsAt) \"Asia/Shanghai\" }}\n{{ end }}{{ end }}\n \n{{ define \"__resolved_list\" }}{{ range . }}\n---\n{{ if .Labels.owner }}@{{ .Labels.owner }}{{ end }}\n\n**告警主题**: {{ .Annotations.summary }}\n\n**告警类型**: {{ .Labels.alertname }} \n \n**告警级别**: {{ .Labels.severity }}\n \n**告警主机**: {{ .Labels.instance }}\n \n**告警信息**: {{ index .Annotations \"description\" }}\n \n**告警时间**: {{ dateInZone \"2006.01.02 15:04:05\" (.StartsAt) \"Asia/Shanghai\" }}\n \n**恢复时间**: {{ dateInZone \"2006.01.02 15:04:05\" (.EndsAt) \"Asia/Shanghai\" }}\n{{ end }}{{ end }}\n \n \n{{ define \"default.title\" }}\n{{ template \"__subject\" . }}\n{{ end }}\n \n{{ define \"default.content\" }}\n{{ if gt (len .Alerts.Firing) 0 }}\n**====侦测到{{ .Alerts.Firing | len  }}个故障====**\n{{ template \"__alert_list\" .Alerts.Firing }}\n---\n{{ end }}\n \n{{ if gt (len .Alerts.Resolved) 0 }}\n**====恢复{{ .Alerts.Resolved | len  }}个故障====**\n{{ template \"__resolved_list\" .Alerts.Resolved }}\n{{ end }}\n{{ end }}\n \n \n{{ define \"ding.link.title\" }}{{ template \"default.title\" . }}{{ end }}\n{{ define \"ding.link.content\" }}{{ template \"default.content\" . }}{{ end }}\n{{ template \"default.title\" . }}\n{{ template \"default.content\" . }}\n```\n### 报警规则示例\n```config\nmkdir /usr/local/prometheus/prometheus/rule\nvim /usr/local/prometheus/prometheus/rule/node_exporter.yml\n\ngroups:\n- name: 服务器资源监控\n  rules:\n  - alert: 内存使用率过高\n    expr: 100 - (node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes) * 100 > 80\n    for: 3m \n    labels:\n      severity: 严重告警\n    annotations:\n      summary: \"{{ $labels.instance }} 内存使用率过高, 请尽快处理！\"\n      description: \"{{ $labels.instance }}内存使用率超过80%,当前使用率{{ $value }}%.\"\n          \n  - alert: 服务器宕机\n    expr: up == 0\n    for: 1s\n    labels:\n      severity: 严重告警\n    annotations:\n      summary: \"{{$labels.instance}} 服务器宕机, 请尽快处理!\"\n      description: \"{{$labels.instance}} 服务器延时超过3分钟,当前状态{{ $value }}. \"\n \n  - alert: CPU高负荷\n    expr: 100 - (avg by (instance,job)(irate(node_cpu_seconds_total{mode=\"idle\"}[5m])) * 100) > 90\n    for: 5m\n    labels:\n      severity: 严重告警\n    annotations:\n      summary: \"{{$labels.instance}} CPU使用率过高,请尽快处理！\"\n      description: \"{{$labels.instance}} CPU使用大于90%,当前使用率{{ $value }}%. \"\n      \n  - alert: 磁盘IO性能\n    expr: avg(irate(node_disk_io_time_seconds_total[1m])) by(instance,job)* 100 > 90\n    for: 5m\n    labels:\n      severity: 严重告警\n    annotations:\n      summary: \"{{$labels.instance}} 流入磁盘IO使用率过高,请尽快处理！\"\n      description: \"{{$labels.instance}} 流入磁盘IO大于90%,当前使用率{{ $value }}%.\"\n \n \n  - alert: 网络流入\n    expr: ((sum(rate (node_network_receive_bytes_total{device!~'tap.*|veth.*|br.*|docker.*|virbr*|lo*'}[5m])) by (instance,job)) / 100) > 102400\n    for: 5m\n    labels:\n      severity: 严重告警\n    annotations:\n      summary: \"{{$labels.instance}} 流入网络带宽过高，请尽快处理！\"\n      description: \"{{$labels.instance}} 流入网络带宽持续5分钟高于100M. RX带宽使用量{{$value}}.\"\n \n  - alert: 网络流出\n    expr: ((sum(rate (node_network_transmit_bytes_total{device!~'tap.*|veth.*|br.*|docker.*|virbr*|lo*'}[5m])) by (instance,job)) / 100) > 102400\n    for: 5m\n    labels:\n      severity: 严重告警\n    annotations:\n      summary: \"{{$labels.instance}} 流出网络带宽过高,请尽快处理！\"\n      description: \"{{$labels.instance}} 流出网络带宽持续5分钟高于100M. RX带宽使用量{$value}}.\"\n  \n  - alert: TCP连接数\n    expr: node_netstat_Tcp_CurrEstab > 10000\n    for: 2m\n    labels:\n      severity: 严重告警\n    annotations:\n      summary: \" TCP_ESTABLISHED过高！\"\n      description: \"{{$labels.instance}} TCP_ESTABLISHED大于100%,当前使用率{{ $value }}%.\"\n \n  - alert: 磁盘容量\n    expr: 100-(node_filesystem_free_bytes{fstype=~\"ext4|xfs\"}/node_filesystem_size_bytes {fstype=~\"ext4|xfs\"}*100) > 90\n    for: 1m\n    labels:\n      severity: 严重告警\n    annotations:\n      summary: \"{{$labels.mountpoint}} 磁盘分区使用率过高，请尽快处理！\"\n      description: \"{{$labels.instance}} 磁盘分区使用大于90%，当前使用率{{ $value }}%.\"\n```\n","slug":"alertmanager","published":1,"updated":"2025-07-30T08:38:33.280Z","comments":1,"layout":"post","photos":[],"_id":"cmdppvvve0001lpodb82v5cme","content":"<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -SL https://github.com/docker/compose/releases/download/v2.30.3/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">将可执行权限赋予安装目标路径中的独立二进制文件</span></span><br><span class=\"line\">sudo chmod +x /usr/local/bin/docker-compose</span><br><span class=\"line\">sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose</span><br><span class=\"line\"></span><br><span class=\"line\">version: &#x27;3&#x27;</span><br><span class=\"line\">services:</span><br><span class=\"line\">  alertmanager:</span><br><span class=\"line\">    image: registry.cn-hangzhou.aliyuncs.com/lky-deploy/alertmanager:v0.28.1</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - &quot;9093:9093&quot;</span><br><span class=\"line\">      - &quot;9094:9094&quot;</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - ./config:/etc/alertmanager</span><br><span class=\"line\">      - alertmanager_data:/alertmanager</span><br><span class=\"line\">    command:</span><br><span class=\"line\">      - &#x27;--config.file=/etc/alertmanager/alertmanager.yml&#x27;</span><br><span class=\"line\">      - &#x27;--storage.path=/alertmanager&#x27;</span><br><span class=\"line\">      - &#x27;--cluster.advertise-address=alertmanager:9094&#x27;</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - monitoring-net</span><br><span class=\"line\"></span><br><span class=\"line\">volumes:</span><br><span class=\"line\">  alertmanager_data:</span><br><span class=\"line\"></span><br><span class=\"line\">networks:</span><br><span class=\"line\">  monitoring-net:</span><br><span class=\"line\">    driver: bridge</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"配置文件解读\"><a href=\"#配置文件解读\" class=\"headerlink\" title=\"配置文件解读\"></a>配置文件解读</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">global: # 即为全局设置,在Alertmanager配置文件中,只要全局设置配置了的选项,全部为公共设置,可以让其他设置继承,作为默认值,可以子参数中覆盖其设置。</span><br><span class=\"line\">  resolve_timeout: 1m # 用于设置处理超时时间,也是生命警报状态为解决的时间,这个时间会直接影响到警报恢复的通知时间,需要自行结合实际生产场景来设置主机的恢复时间,默认是5分钟。</span><br><span class=\"line\">  # 整合邮件</span><br><span class=\"line\">  smtp_smarthost: &#x27;smtp.qq.com:465&#x27; # 邮箱smtp服务器</span><br><span class=\"line\">  smtp_from: &#x27;1451578387@qq.com&#x27; # 发件用的邮箱地址</span><br><span class=\"line\">  smtp_auth_username: &#x27;1451578387@qq.com&#x27; # 发件人账号</span><br><span class=\"line\">  smtp_auth_password: &#x27;dkuuifhdskaduasdsb&#x27; # 发件人邮箱密码</span><br><span class=\"line\">  smtp_require_tls: false # 不进行tls验证</span><br><span class=\"line\">route: # 路由分组</span><br><span class=\"line\">  group_by: [&#x27;alertname&#x27;] # 报警分组</span><br><span class=\"line\">  group_wait: 10s # 组内等待时间,同一分组内收到第一个告警等待多久开始发送,目标是为了同组消息同时发送,不占用告警信息,默认30s。</span><br><span class=\"line\">  group_interval: 10s # 当组内已经发送过一个告警,组内若有新增告警需要等待的时间,默认为5m,这条要确定组内信息是影响同一业务才能设置,若分组不合理,可能导致告警延迟,造成影响。</span><br><span class=\"line\">  repeat_interval: 1h # 告警已经发送,且无新增告警,若重复告警需要间隔多久,默认4h,属于重复告警,时间间隔应根据告警的严重程度来设置。</span><br><span class=\"line\">  receiver: &#x27;webhook&#x27; # 告警的接收者,需要和 receivers[n].name 的值一致。</span><br><span class=\"line\">  # 上面所有的属性都由所有子路由继承,并且可以在每个子路由上进行覆盖。</span><br><span class=\"line\">  # 当报警信息中标签匹配到team:node时会使用email发送报警,否则使用webhook。</span><br><span class=\"line\"> templates:</span><br><span class=\"line\">- &#x27;/etc/alertmanager/config/*.tmpl&#x27;</span><br><span class=\"line\"># route根路由,该模块用于该根路由下的节点及子路由routes的定义,子树节点如果不对相关配置进行配置,则默认会从父路由树继承该配置选项。每一条告警都要进入route,即要求配置选项group_by的值能够匹配到每一条告警的至少一个labelkey(即通过POST请求向altermanager服务接口所发送告警的labels项所携带的&lt;labelname&gt;),告警进入到route后,将会根据子路由routes节点中的配置项match_re或者match来确定能进入该子路由节点的告警(由在match_re或者match下配置的labelkey:labelvalue是否为告警labels的子集决定,是的话则会进入该子路由节点,否则不能接收进入该子路由节点)。</span><br><span class=\"line\">route:</span><br><span class=\"line\">  # 例如所有labelkey:labelvalue含cluster=A及altertname=LatencyHigh的labelkey的告警都会被归入单一组中</span><br><span class=\"line\">  group_by: [&#x27;job&#x27;, &#x27;altername&#x27;, &#x27;cluster&#x27;, &#x27;service&#x27;,&#x27;severity&#x27;]</span><br><span class=\"line\">  # 若一组新的告警产生,则会等group_wait后再发送通知,该功能主要用于当告警在很短时间内接连产生时,在group_wait内合并为单一的告警后再发送</span><br><span class=\"line\">  group_wait: 30s</span><br><span class=\"line\">  # 再次告警时间间隔</span><br><span class=\"line\">  group_interval: 5m</span><br><span class=\"line\">  # 如果一条告警通知已成功发送,且在间隔repeat_interval后,该告警仍然未被设置为resolved,则会再次发送该告警通知</span><br><span class=\"line\">  repeat_interval: 12h</span><br><span class=\"line\">  # 默认告警通知接收者,凡未被匹配进入各子路由节点的告警均被发送到此接收者</span><br><span class=\"line\">  receiver: &#x27;wechat&#x27;</span><br><span class=\"line\">  # 上述route的配置会被传递给子路由节点,子路由节点进行重新配置才会被覆盖</span><br><span class=\"line\">  # 子路由树</span><br><span class=\"line\">  routes:</span><br><span class=\"line\">  # 该配置选项使用正则表达式来匹配告警的labels,以确定能否进入该子路由树</span><br><span class=\"line\">  # match_re和match均用于匹配labelkey为service,labelvalue分别为指定值的告警,被匹配到的告警会将通知发送到对应的receiver</span><br><span class=\"line\">  - match_re:</span><br><span class=\"line\">      service: ^(foo1|foo2|baz)$</span><br><span class=\"line\">    receiver: &#x27;wechat&#x27;</span><br><span class=\"line\">    # 在带有service标签的告警同时有severity标签时,他可以有自己的子路由,同时具有severity != critical的告警则被发送给接收者team-ops-mails,对severity == critical的告警则被发送到对应的接收者即team-ops-pager</span><br><span class=\"line\">    routes:</span><br><span class=\"line\">    - match:</span><br><span class=\"line\">        severity: critical</span><br><span class=\"line\">      receiver: &#x27;wechat&#x27;</span><br><span class=\"line\">  # 比如关于数据库服务的告警,如果子路由没有匹配到相应的owner标签,则都默认由team-DB-pager接收</span><br><span class=\"line\">  - match:</span><br><span class=\"line\">      service: database</span><br><span class=\"line\">    receiver: &#x27;wechat&#x27;</span><br><span class=\"line\">  # 我们也可以先根据标签service:database将数据库服务告警过滤出来,然后进一步将所有同时带labelkey为database</span><br><span class=\"line\">  - match:</span><br><span class=\"line\">      severity: critical</span><br><span class=\"line\">    receiver: &#x27;wechat&#x27;</span><br><span class=\"line\"># 抑制规则,当出现critical(关键的)告警时忽略warning。</span><br><span class=\"line\"># 下面的这段配置是指如果出现标签为severity=critical的告警,则抑制severity=warning的告警</span><br><span class=\"line\">inhibit_rules:</span><br><span class=\"line\">- source_match:</span><br><span class=\"line\">    severity: &#x27;critical&#x27;</span><br><span class=\"line\">  target_match:</span><br><span class=\"line\">    severity: &#x27;warning&#x27;</span><br><span class=\"line\">  # 如果警报名称相同,则应用抑制。</span><br><span class=\"line\">  # alertname、cluster和service对应的标签值需要相等</span><br><span class=\"line\">  equal: [&#x27;alertname&#x27;, &#x27;cluster&#x27;, &#x27;service&#x27;]</span><br><span class=\"line\"># 收件人配置</span><br><span class=\"line\">receivers:</span><br><span class=\"line\">- name: &#x27;team-ops-mails&#x27;</span><br><span class=\"line\">  email_configs:</span><br><span class=\"line\">  - to: &#x27;dukuan@xxx.com&#x27;</span><br><span class=\"line\">- name: &#x27;team-X-pager&#x27;</span><br><span class=\"line\">  email_configs:</span><br><span class=\"line\">  - to: &#x27;team-X+alerts-critical@example.org&#x27;</span><br><span class=\"line\">  pagerduty_configs:</span><br><span class=\"line\">  - service_key: &lt;team-X-key&gt;</span><br><span class=\"line\">- name: &#x27;team-Y-mails&#x27;</span><br><span class=\"line\">  email_configs:</span><br><span class=\"line\">  - to: &#x27;team-Y+alerts@example.org&#x27;</span><br><span class=\"line\">- name: &#x27;webhook&#x27;</span><br><span class=\"line\">  webhook_configs:</span><br><span class=\"line\">  - url: http://127.0.0.1:8060/dingtalk/webhook1/send</span><br><span class=\"line\">    send_resolved: true</span><br></pre></td></tr></table></figure>\n<h2 id=\"分组和路由\"><a href=\"#分组和路由\" class=\"headerlink\" title=\"分组和路由\"></a>分组和路由</h2><blockquote>\n<ol>\n<li><strong>路由</strong><br><br>match（精确匹配）match_re（正则表达式匹配）<br>每一个告警都会从配置文件中顶级的route进入路由树，需要注意的是顶级的route必须匹配所有告警(即不能有任何的匹配设置match和match_re)，每一个路由都可以定义自己的接受人以及匹配规则。默认情况下，告警进入到顶级route后会遍历所有的子节点，直到找到最深的匹配route，并将告警发送到该route定义的receiver中。但如果route中设置continue的值为false，那么告警在匹配到第一个子节点之后就直接停止。如果continue为true，报警则会继续进行后续子节点的匹配。如果当前告警匹配不到任何的子节点，那该告警将会基于当前路由节点的接收器配置方式进行处理</li>\n<li><strong>分组</strong><br><br>告警通知进行分组，将多条告警合合并为一个通知。这里我们可以使用group_by来定义分组规则。基于告警中包含的标签，如果满足group_by中定义标签名称，那么这些告警将会合并为一个通知发送给接收器。<br>有的时候为了能够一次性收集和发送更多的相关信息时，可以通过group_wait参数设置等待时间，如果在等待时间内当前group接收到了新的告警，这些告警将会合并为一个通知向receiver发送</li>\n</ol>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">route:</span><br><span class=\"line\">  group_by: [&#x27;alertname&#x27;,&#x27;team&#x27;]   #在这里添加team匹配的标签</span><br><span class=\"line\">  group_wait: 5s</span><br><span class=\"line\">  group_interval: 5s</span><br><span class=\"line\">  repeat_interval: 5m</span><br><span class=\"line\">  # 默认发给&quot;sre_system&quot;组用户</span><br><span class=\"line\">  receiver: &#x27;sre_system&#x27;</span><br><span class=\"line\">  continue: false</span><br><span class=\"line\">  # 配置子路由</span><br><span class=\"line\">  routes:</span><br><span class=\"line\">    - receiver: &#x27;sre_dba&#x27;</span><br><span class=\"line\">      match_re:</span><br><span class=\"line\">        job: test</span><br><span class=\"line\">      # 建议将continue的值设置为true，表示当前的条件是否匹配，都将继续向下匹配规则</span><br><span class=\"line\">      # 这样做的目的是将消息发给最后的系统组(sre_system)</span><br><span class=\"line\">      continue: true</span><br><span class=\"line\">==================================================================</span><br><span class=\"line\">#rule.yml</span><br><span class=\"line\">- name: grafana</span><br><span class=\"line\">  rules:</span><br><span class=\"line\">  - alert: node           #这个相当于alertname的值,与之前匹配的相同</span><br><span class=\"line\">    expr: up&#123;job=&quot;grafana&quot;&#125; == 0</span><br><span class=\"line\">    for: 10s                  </span><br><span class=\"line\">    labels:                   </span><br><span class=\"line\">      severity: 1 </span><br><span class=\"line\">      job: test  # 对应上面的 match_re</span><br><span class=\"line\">      team: grafana        #这里标签设置不同的一会用</span><br><span class=\"line\">    annotations:              </span><br><span class=\"line\">      summary: &quot;&#123;&#123; \\$labels.instance &#125;&#125; 已停止运行超过 15s&quot;</span><br><span class=\"line\">      description: hello world</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\">alertname 等于 node 如果相同报警会一起发送</span><br><span class=\"line\">team 等于 grafana </span><br></pre></td></tr></table></figure>\n<h2 id=\"抑制规则\"><a href=\"#抑制规则\" class=\"headerlink\" title=\"抑制规则\"></a>抑制规则</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">inhibit_rules:</span><br><span class=\"line\">  - source_match:</span><br><span class=\"line\">      severity: &#x27;告警&#x27;</span><br><span class=\"line\">    target_match:</span><br><span class=\"line\">      severity: &#x27;提示&#x27;</span><br><span class=\"line\">    #equal: [&#x27;type&#x27;,&#x27;test&#x27;] 要求 type 和 test签均相同</span><br><span class=\"line\">     equal: [&#x27;type&#x27;]type的值必须一样</span><br><span class=\"line\">当匹配到 告警 时就会抑制提示的告警通知并检查他们是否来自于同个</span><br><span class=\"line\">ssl（即ssl标签的值相同抑制才会生效）</span><br><span class=\"line\">当子路由匹配到不同的 severity 时就会将消息发往不同的 receiver，当子路由无法匹配到时，消息会默认发往根路由的 receiver，因此，无论是否匹配到子路由规则，消息都会发往根路由的 receiver</span><br><span class=\"line\">对应报警规则配置为</span><br><span class=\"line\">groups:</span><br><span class=\"line\">- name: node-alerts</span><br><span class=\"line\">  rules:</span><br><span class=\"line\">  - alert: HighNodeCPU</span><br><span class=\"line\">    expr: (1 - avg(rate(node_cpu_seconds_total&#123;mode=&quot;idle&quot;&#125;[5m])) by (instance)) * 100 &gt; 80</span><br><span class=\"line\">    for: 5m</span><br><span class=\"line\">    labels:</span><br><span class=\"line\">      severity: &quot;告警&quot;</span><br><span class=\"line\">      type: ssl</span><br><span class=\"line\">    annotations:</span><br><span class=\"line\">      summary: &quot;高节点CPU使用率 (&#123;&#123; $labels.instance &#125;&#125;)&quot;</span><br><span class=\"line\">      description: &quot;节点 &#123;&#123; $labels.instance &#125;&#125; CPU 使用率超过 80% 已持续 5 分钟&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">- name: cluster-alerts</span><br><span class=\"line\">  rules:</span><br><span class=\"line\">  - alert: ClusterWideCPUProblem</span><br><span class=\"line\">    expr: |</span><br><span class=\"line\">      sum( (1 - avg(rate(node_cpu_seconds_total&#123;mode=&quot;idle&quot;&#125;[5m])) by (instance)) * 100 &gt; 80 )</span><br><span class=\"line\">      /</span><br><span class=\"line\">      count( (1 - avg(rate(node_cpu_seconds_total&#123;mode=&quot;idle&quot;&#125;[5m])) by (instance)) )</span><br><span class=\"line\">      * 100 &gt; 50</span><br><span class=\"line\">    for: 10m</span><br><span class=\"line\">    labels:</span><br><span class=\"line\">      severity: &quot;提示&quot;</span><br><span class=\"line\">      type: ssl</span><br><span class=\"line\">    annotations:</span><br><span class=\"line\">      summary: &quot;集群级CPU问题&quot;</span><br><span class=\"line\">      description: &quot;超过 50% 的节点持续高CPU使用率达 10 分钟&quot;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"alertmanager集成三方告警\"><a href=\"#alertmanager集成三方告警\" class=\"headerlink\" title=\"alertmanager集成三方告警\"></a>alertmanager集成三方告警</h1><blockquote>\n<p>原生alertmanager只有邮件和webhook告警；Alertmanager 的原生 Webhook 告警是一种通过 HTTP POST 请求将告警信息发送到自定义接口（Webhook 接收端）的机制；所以要对接需要开发者自行开发，这里推荐两个现成的工具来对接</p>\n</blockquote>\n<h2 id=\"PrometheusAlert使用\"><a href=\"#PrometheusAlert使用\" class=\"headerlink\" title=\"PrometheusAlert使用\"></a>PrometheusAlert使用</h2><blockquote>\n<p>Prometheus Alert 是开源的运维告警中心消息转发系统，支持主流的监控系统 Prometheus，日志系统 Graylog 和数据可视化系统 Grafana 发出的预警消息。通知渠道支持钉钉、微信、华为云短信、腾讯云短信、腾讯云电话、阿里云短信、阿里云电话等等</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/feiyu563/PrometheusAlert/releases/download/v4.8.1/linux.zip</span><br><span class=\"line\">chmod +x PrometheusAlert</span><br><span class=\"line\">启动 nohup ./PrometheusAlert &amp; 后台运行</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">alertmanager.yml配置集成PrometheusAlert；格式可以登录PrometheusAlert查看</span></span><br><span class=\"line\">receivers:</span><br><span class=\"line\">- name: &#x27;web.hook.prometheusalert&#x27;</span><br><span class=\"line\">  webhook_configs:</span><br><span class=\"line\">  - url: &#x27;http://192.168.197.142:8080/prometheusalert?type=wx&amp;tpl=prometheus-wx&amp;wxurl=https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=53fdb356-4446-42e5-b8bd-f7da63bcfe76&#x27;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2025/04/27/alertmanager/image.png\" alt=\"alt text\"></p>\n<h2 id=\"prometheus-webhook-dingtalk使用\"><a href=\"#prometheus-webhook-dingtalk使用\" class=\"headerlink\" title=\"prometheus-webhook-dingtalk使用\"></a>prometheus-webhook-dingtalk使用</h2><blockquote>\n<p>Prometheus 的Alertmanager自身不支持钉钉报警，需要通过插件的方式来达到报警条件</p>\n</blockquote>\n<h3 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/timonwong/prometheus-webhook-dingtalk/releases/download/v2.1.0/prometheus-webhook-dingtalk-2.1.0.linux-amd64.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">tar zxf prometheus-webhook-dingtalk-2.1.0.linux-amd64.tar.gz </span><br><span class=\"line\">mv prometheus-webhook-dingtalk-2.1.0.linux-amd64 /usr/local/prometheus-webhook-dingtalk</span><br><span class=\"line\">cat &gt; /usr/lib/systemd/system/webhook-dingtalk.service &lt;&lt; EOF</span><br><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=prometheus-webhook-dingtalk</span><br><span class=\"line\">Documentation=https://github.com/timonwong/prometheus-webhook-dingtalk</span><br><span class=\"line\">After=network.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">User=root</span><br><span class=\"line\">Group=root</span><br><span class=\"line\">ExecStart=/usr/local/prometheus-webhook-dingtalk/prometheus-webhook-dingtalk  --config.file=/usr/local/prometheus-webhook-dingtalk/config.yml</span><br><span class=\"line\">ExecReload=/bin/kill -HUP $MAINPID</span><br><span class=\"line\">KillMode=process</span><br><span class=\"line\">Restart=on-failure</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">集成模版/usr/local/prometheus-webhook-dingtalk/config.yml</span></span><br><span class=\"line\">templates:</span><br><span class=\"line\">    - /usr/local/prometheus/webhook-dingtalk/template.tmpl</span><br><span class=\"line\">targets:</span><br><span class=\"line\">  webhook1:</span><br><span class=\"line\">    url: https://oapi.dingtalk.com/robot/send?access_token=9ac4354ab7c8</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">alertmanager配置发送给dingtalk插件</span></span><br><span class=\"line\">receivers:</span><br><span class=\"line\">  - name: &#x27;email&#x27;</span><br><span class=\"line\">    email_configs:</span><br><span class=\"line\">      - to: &#x27;xxxxx@163.com&#x27; #指定发送给谁</span><br><span class=\"line\">  - name: &#x27;webhook1&#x27;</span><br><span class=\"line\">    webhook_configs:</span><br><span class=\"line\">      - send_resolved: false</span><br><span class=\"line\">        url: http://localhost:8060/dingtalk/webhook1/send</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"报警内容模版\"><a href=\"#报警内容模版\" class=\"headerlink\" title=\"报警内容模版\"></a>报警内容模版</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /usr/local/prometheus/webhook-dingtalk/template.tmpl</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; define &quot;__subject&quot; &#125;&#125;</span><br><span class=\"line\">[&#123;&#123; .Status | toUpper &#125;&#125;&#123;&#123; if eq .Status &quot;firing&quot; &#125;&#125;:&#123;&#123; .Alerts.Firing | len &#125;&#125;&#123;&#123; end &#125;&#125;]</span><br><span class=\"line\">&#123;&#123; end &#125;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">&#123;&#123; define &quot;__alert_list&quot; &#125;&#125;&#123;&#123; range . &#125;&#125;</span><br><span class=\"line\">---</span><br><span class=\"line\">&#123;&#123; if .Labels.owner &#125;&#125;@&#123;&#123; .Labels.owner &#125;&#125;&#123;&#123; end &#125;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">**告警主题**: &#123;&#123; .Annotations.summary &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">**告警类型**: &#123;&#123; .Labels.alertname &#125;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">**告警级别**: &#123;&#123; .Labels.severity &#125;&#125; </span><br><span class=\"line\"> </span><br><span class=\"line\">**告警主机**: &#123;&#123; .Labels.instance &#125;&#125; </span><br><span class=\"line\"> </span><br><span class=\"line\">**告警信息**: &#123;&#123; index .Annotations &quot;description&quot; &#125;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">**告警时间**: &#123;&#123; dateInZone &quot;2006.01.02 15:04:05&quot; (.StartsAt) &quot;Asia/Shanghai&quot; &#125;&#125;</span><br><span class=\"line\">&#123;&#123; end &#125;&#125;&#123;&#123; end &#125;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#123;&#123; define &quot;__resolved_list&quot; &#125;&#125;&#123;&#123; range . &#125;&#125;</span><br><span class=\"line\">---</span><br><span class=\"line\">&#123;&#123; if .Labels.owner &#125;&#125;@&#123;&#123; .Labels.owner &#125;&#125;&#123;&#123; end &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">**告警主题**: &#123;&#123; .Annotations.summary &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">**告警类型**: &#123;&#123; .Labels.alertname &#125;&#125; </span><br><span class=\"line\"> </span><br><span class=\"line\">**告警级别**: &#123;&#123; .Labels.severity &#125;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">**告警主机**: &#123;&#123; .Labels.instance &#125;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">**告警信息**: &#123;&#123; index .Annotations &quot;description&quot; &#125;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">**告警时间**: &#123;&#123; dateInZone &quot;2006.01.02 15:04:05&quot; (.StartsAt) &quot;Asia/Shanghai&quot; &#125;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">**恢复时间**: &#123;&#123; dateInZone &quot;2006.01.02 15:04:05&quot; (.EndsAt) &quot;Asia/Shanghai&quot; &#125;&#125;</span><br><span class=\"line\">&#123;&#123; end &#125;&#125;&#123;&#123; end &#125;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">&#123;&#123; define &quot;default.title&quot; &#125;&#125;</span><br><span class=\"line\">&#123;&#123; template &quot;__subject&quot; . &#125;&#125;</span><br><span class=\"line\">&#123;&#123; end &#125;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#123;&#123; define &quot;default.content&quot; &#125;&#125;</span><br><span class=\"line\">&#123;&#123; if gt (len .Alerts.Firing) 0 &#125;&#125;</span><br><span class=\"line\">**====侦测到&#123;&#123; .Alerts.Firing | len  &#125;&#125;个故障====**</span><br><span class=\"line\">&#123;&#123; template &quot;__alert_list&quot; .Alerts.Firing &#125;&#125;</span><br><span class=\"line\">---</span><br><span class=\"line\">&#123;&#123; end &#125;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#123;&#123; if gt (len .Alerts.Resolved) 0 &#125;&#125;</span><br><span class=\"line\">**====恢复&#123;&#123; .Alerts.Resolved | len  &#125;&#125;个故障====**</span><br><span class=\"line\">&#123;&#123; template &quot;__resolved_list&quot; .Alerts.Resolved &#125;&#125;</span><br><span class=\"line\">&#123;&#123; end &#125;&#125;</span><br><span class=\"line\">&#123;&#123; end &#125;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">&#123;&#123; define &quot;ding.link.title&quot; &#125;&#125;&#123;&#123; template &quot;default.title&quot; . &#125;&#125;&#123;&#123; end &#125;&#125;</span><br><span class=\"line\">&#123;&#123; define &quot;ding.link.content&quot; &#125;&#125;&#123;&#123; template &quot;default.content&quot; . &#125;&#125;&#123;&#123; end &#125;&#125;</span><br><span class=\"line\">&#123;&#123; template &quot;default.title&quot; . &#125;&#125;</span><br><span class=\"line\">&#123;&#123; template &quot;default.content&quot; . &#125;&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"报警规则示例\"><a href=\"#报警规则示例\" class=\"headerlink\" title=\"报警规则示例\"></a>报警规则示例</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /usr/local/prometheus/prometheus/rule</span><br><span class=\"line\">vim /usr/local/prometheus/prometheus/rule/node_exporter.yml</span><br><span class=\"line\"></span><br><span class=\"line\">groups:</span><br><span class=\"line\">- name: 服务器资源监控</span><br><span class=\"line\">  rules:</span><br><span class=\"line\">  - alert: 内存使用率过高</span><br><span class=\"line\">    expr: 100 - (node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes) * 100 &gt; 80</span><br><span class=\"line\">    for: 3m </span><br><span class=\"line\">    labels:</span><br><span class=\"line\">      severity: 严重告警</span><br><span class=\"line\">    annotations:</span><br><span class=\"line\">      summary: &quot;&#123;&#123; $labels.instance &#125;&#125; 内存使用率过高, 请尽快处理！&quot;</span><br><span class=\"line\">      description: &quot;&#123;&#123; $labels.instance &#125;&#125;内存使用率超过80%,当前使用率&#123;&#123; $value &#125;&#125;%.&quot;</span><br><span class=\"line\">          </span><br><span class=\"line\">  - alert: 服务器宕机</span><br><span class=\"line\">    expr: up == 0</span><br><span class=\"line\">    for: 1s</span><br><span class=\"line\">    labels:</span><br><span class=\"line\">      severity: 严重告警</span><br><span class=\"line\">    annotations:</span><br><span class=\"line\">      summary: &quot;&#123;&#123;$labels.instance&#125;&#125; 服务器宕机, 请尽快处理!&quot;</span><br><span class=\"line\">      description: &quot;&#123;&#123;$labels.instance&#125;&#125; 服务器延时超过3分钟,当前状态&#123;&#123; $value &#125;&#125;. &quot;</span><br><span class=\"line\"> </span><br><span class=\"line\">  - alert: CPU高负荷</span><br><span class=\"line\">    expr: 100 - (avg by (instance,job)(irate(node_cpu_seconds_total&#123;mode=&quot;idle&quot;&#125;[5m])) * 100) &gt; 90</span><br><span class=\"line\">    for: 5m</span><br><span class=\"line\">    labels:</span><br><span class=\"line\">      severity: 严重告警</span><br><span class=\"line\">    annotations:</span><br><span class=\"line\">      summary: &quot;&#123;&#123;$labels.instance&#125;&#125; CPU使用率过高,请尽快处理！&quot;</span><br><span class=\"line\">      description: &quot;&#123;&#123;$labels.instance&#125;&#125; CPU使用大于90%,当前使用率&#123;&#123; $value &#125;&#125;%. &quot;</span><br><span class=\"line\">      </span><br><span class=\"line\">  - alert: 磁盘IO性能</span><br><span class=\"line\">    expr: avg(irate(node_disk_io_time_seconds_total[1m])) by(instance,job)* 100 &gt; 90</span><br><span class=\"line\">    for: 5m</span><br><span class=\"line\">    labels:</span><br><span class=\"line\">      severity: 严重告警</span><br><span class=\"line\">    annotations:</span><br><span class=\"line\">      summary: &quot;&#123;&#123;$labels.instance&#125;&#125; 流入磁盘IO使用率过高,请尽快处理！&quot;</span><br><span class=\"line\">      description: &quot;&#123;&#123;$labels.instance&#125;&#125; 流入磁盘IO大于90%,当前使用率&#123;&#123; $value &#125;&#125;%.&quot;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">  - alert: 网络流入</span><br><span class=\"line\">    expr: ((sum(rate (node_network_receive_bytes_total&#123;device!~&#x27;tap.*|veth.*|br.*|docker.*|virbr*|lo*&#x27;&#125;[5m])) by (instance,job)) / 100) &gt; 102400</span><br><span class=\"line\">    for: 5m</span><br><span class=\"line\">    labels:</span><br><span class=\"line\">      severity: 严重告警</span><br><span class=\"line\">    annotations:</span><br><span class=\"line\">      summary: &quot;&#123;&#123;$labels.instance&#125;&#125; 流入网络带宽过高，请尽快处理！&quot;</span><br><span class=\"line\">      description: &quot;&#123;&#123;$labels.instance&#125;&#125; 流入网络带宽持续5分钟高于100M. RX带宽使用量&#123;&#123;$value&#125;&#125;.&quot;</span><br><span class=\"line\"> </span><br><span class=\"line\">  - alert: 网络流出</span><br><span class=\"line\">    expr: ((sum(rate (node_network_transmit_bytes_total&#123;device!~&#x27;tap.*|veth.*|br.*|docker.*|virbr*|lo*&#x27;&#125;[5m])) by (instance,job)) / 100) &gt; 102400</span><br><span class=\"line\">    for: 5m</span><br><span class=\"line\">    labels:</span><br><span class=\"line\">      severity: 严重告警</span><br><span class=\"line\">    annotations:</span><br><span class=\"line\">      summary: &quot;&#123;&#123;$labels.instance&#125;&#125; 流出网络带宽过高,请尽快处理！&quot;</span><br><span class=\"line\">      description: &quot;&#123;&#123;$labels.instance&#125;&#125; 流出网络带宽持续5分钟高于100M. RX带宽使用量&#123;$value&#125;&#125;.&quot;</span><br><span class=\"line\">  </span><br><span class=\"line\">  - alert: TCP连接数</span><br><span class=\"line\">    expr: node_netstat_Tcp_CurrEstab &gt; 10000</span><br><span class=\"line\">    for: 2m</span><br><span class=\"line\">    labels:</span><br><span class=\"line\">      severity: 严重告警</span><br><span class=\"line\">    annotations:</span><br><span class=\"line\">      summary: &quot; TCP_ESTABLISHED过高！&quot;</span><br><span class=\"line\">      description: &quot;&#123;&#123;$labels.instance&#125;&#125; TCP_ESTABLISHED大于100%,当前使用率&#123;&#123; $value &#125;&#125;%.&quot;</span><br><span class=\"line\"> </span><br><span class=\"line\">  - alert: 磁盘容量</span><br><span class=\"line\">    expr: 100-(node_filesystem_free_bytes&#123;fstype=~&quot;ext4|xfs&quot;&#125;/node_filesystem_size_bytes &#123;fstype=~&quot;ext4|xfs&quot;&#125;*100) &gt; 90</span><br><span class=\"line\">    for: 1m</span><br><span class=\"line\">    labels:</span><br><span class=\"line\">      severity: 严重告警</span><br><span class=\"line\">    annotations:</span><br><span class=\"line\">      summary: &quot;&#123;&#123;$labels.mountpoint&#125;&#125; 磁盘分区使用率过高，请尽快处理！&quot;</span><br><span class=\"line\">      description: &quot;&#123;&#123;$labels.instance&#125;&#125; 磁盘分区使用大于90%，当前使用率&#123;&#123; $value &#125;&#125;%.&quot;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -SL https://github.com/docker/compose/releases/download/v2.30.3/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">将可执行权限赋予安装目标路径中的独立二进制文件</span></span><br><span class=\"line\">sudo chmod +x /usr/local/bin/docker-compose</span><br><span class=\"line\">sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose</span><br><span class=\"line\"></span><br><span class=\"line\">version: &#x27;3&#x27;</span><br><span class=\"line\">services:</span><br><span class=\"line\">  alertmanager:</span><br><span class=\"line\">    image: registry.cn-hangzhou.aliyuncs.com/lky-deploy/alertmanager:v0.28.1</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - &quot;9093:9093&quot;</span><br><span class=\"line\">      - &quot;9094:9094&quot;</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - ./config:/etc/alertmanager</span><br><span class=\"line\">      - alertmanager_data:/alertmanager</span><br><span class=\"line\">    command:</span><br><span class=\"line\">      - &#x27;--config.file=/etc/alertmanager/alertmanager.yml&#x27;</span><br><span class=\"line\">      - &#x27;--storage.path=/alertmanager&#x27;</span><br><span class=\"line\">      - &#x27;--cluster.advertise-address=alertmanager:9094&#x27;</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - monitoring-net</span><br><span class=\"line\"></span><br><span class=\"line\">volumes:</span><br><span class=\"line\">  alertmanager_data:</span><br><span class=\"line\"></span><br><span class=\"line\">networks:</span><br><span class=\"line\">  monitoring-net:</span><br><span class=\"line\">    driver: bridge</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"配置文件解读\"><a href=\"#配置文件解读\" class=\"headerlink\" title=\"配置文件解读\"></a>配置文件解读</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">global: # 即为全局设置,在Alertmanager配置文件中,只要全局设置配置了的选项,全部为公共设置,可以让其他设置继承,作为默认值,可以子参数中覆盖其设置。</span><br><span class=\"line\">  resolve_timeout: 1m # 用于设置处理超时时间,也是生命警报状态为解决的时间,这个时间会直接影响到警报恢复的通知时间,需要自行结合实际生产场景来设置主机的恢复时间,默认是5分钟。</span><br><span class=\"line\">  # 整合邮件</span><br><span class=\"line\">  smtp_smarthost: &#x27;smtp.qq.com:465&#x27; # 邮箱smtp服务器</span><br><span class=\"line\">  smtp_from: &#x27;1451578387@qq.com&#x27; # 发件用的邮箱地址</span><br><span class=\"line\">  smtp_auth_username: &#x27;1451578387@qq.com&#x27; # 发件人账号</span><br><span class=\"line\">  smtp_auth_password: &#x27;dkuuifhdskaduasdsb&#x27; # 发件人邮箱密码</span><br><span class=\"line\">  smtp_require_tls: false # 不进行tls验证</span><br><span class=\"line\">route: # 路由分组</span><br><span class=\"line\">  group_by: [&#x27;alertname&#x27;] # 报警分组</span><br><span class=\"line\">  group_wait: 10s # 组内等待时间,同一分组内收到第一个告警等待多久开始发送,目标是为了同组消息同时发送,不占用告警信息,默认30s。</span><br><span class=\"line\">  group_interval: 10s # 当组内已经发送过一个告警,组内若有新增告警需要等待的时间,默认为5m,这条要确定组内信息是影响同一业务才能设置,若分组不合理,可能导致告警延迟,造成影响。</span><br><span class=\"line\">  repeat_interval: 1h # 告警已经发送,且无新增告警,若重复告警需要间隔多久,默认4h,属于重复告警,时间间隔应根据告警的严重程度来设置。</span><br><span class=\"line\">  receiver: &#x27;webhook&#x27; # 告警的接收者,需要和 receivers[n].name 的值一致。</span><br><span class=\"line\">  # 上面所有的属性都由所有子路由继承,并且可以在每个子路由上进行覆盖。</span><br><span class=\"line\">  # 当报警信息中标签匹配到team:node时会使用email发送报警,否则使用webhook。</span><br><span class=\"line\"> templates:</span><br><span class=\"line\">- &#x27;/etc/alertmanager/config/*.tmpl&#x27;</span><br><span class=\"line\"># route根路由,该模块用于该根路由下的节点及子路由routes的定义,子树节点如果不对相关配置进行配置,则默认会从父路由树继承该配置选项。每一条告警都要进入route,即要求配置选项group_by的值能够匹配到每一条告警的至少一个labelkey(即通过POST请求向altermanager服务接口所发送告警的labels项所携带的&lt;labelname&gt;),告警进入到route后,将会根据子路由routes节点中的配置项match_re或者match来确定能进入该子路由节点的告警(由在match_re或者match下配置的labelkey:labelvalue是否为告警labels的子集决定,是的话则会进入该子路由节点,否则不能接收进入该子路由节点)。</span><br><span class=\"line\">route:</span><br><span class=\"line\">  # 例如所有labelkey:labelvalue含cluster=A及altertname=LatencyHigh的labelkey的告警都会被归入单一组中</span><br><span class=\"line\">  group_by: [&#x27;job&#x27;, &#x27;altername&#x27;, &#x27;cluster&#x27;, &#x27;service&#x27;,&#x27;severity&#x27;]</span><br><span class=\"line\">  # 若一组新的告警产生,则会等group_wait后再发送通知,该功能主要用于当告警在很短时间内接连产生时,在group_wait内合并为单一的告警后再发送</span><br><span class=\"line\">  group_wait: 30s</span><br><span class=\"line\">  # 再次告警时间间隔</span><br><span class=\"line\">  group_interval: 5m</span><br><span class=\"line\">  # 如果一条告警通知已成功发送,且在间隔repeat_interval后,该告警仍然未被设置为resolved,则会再次发送该告警通知</span><br><span class=\"line\">  repeat_interval: 12h</span><br><span class=\"line\">  # 默认告警通知接收者,凡未被匹配进入各子路由节点的告警均被发送到此接收者</span><br><span class=\"line\">  receiver: &#x27;wechat&#x27;</span><br><span class=\"line\">  # 上述route的配置会被传递给子路由节点,子路由节点进行重新配置才会被覆盖</span><br><span class=\"line\">  # 子路由树</span><br><span class=\"line\">  routes:</span><br><span class=\"line\">  # 该配置选项使用正则表达式来匹配告警的labels,以确定能否进入该子路由树</span><br><span class=\"line\">  # match_re和match均用于匹配labelkey为service,labelvalue分别为指定值的告警,被匹配到的告警会将通知发送到对应的receiver</span><br><span class=\"line\">  - match_re:</span><br><span class=\"line\">      service: ^(foo1|foo2|baz)$</span><br><span class=\"line\">    receiver: &#x27;wechat&#x27;</span><br><span class=\"line\">    # 在带有service标签的告警同时有severity标签时,他可以有自己的子路由,同时具有severity != critical的告警则被发送给接收者team-ops-mails,对severity == critical的告警则被发送到对应的接收者即team-ops-pager</span><br><span class=\"line\">    routes:</span><br><span class=\"line\">    - match:</span><br><span class=\"line\">        severity: critical</span><br><span class=\"line\">      receiver: &#x27;wechat&#x27;</span><br><span class=\"line\">  # 比如关于数据库服务的告警,如果子路由没有匹配到相应的owner标签,则都默认由team-DB-pager接收</span><br><span class=\"line\">  - match:</span><br><span class=\"line\">      service: database</span><br><span class=\"line\">    receiver: &#x27;wechat&#x27;</span><br><span class=\"line\">  # 我们也可以先根据标签service:database将数据库服务告警过滤出来,然后进一步将所有同时带labelkey为database</span><br><span class=\"line\">  - match:</span><br><span class=\"line\">      severity: critical</span><br><span class=\"line\">    receiver: &#x27;wechat&#x27;</span><br><span class=\"line\"># 抑制规则,当出现critical(关键的)告警时忽略warning。</span><br><span class=\"line\"># 下面的这段配置是指如果出现标签为severity=critical的告警,则抑制severity=warning的告警</span><br><span class=\"line\">inhibit_rules:</span><br><span class=\"line\">- source_match:</span><br><span class=\"line\">    severity: &#x27;critical&#x27;</span><br><span class=\"line\">  target_match:</span><br><span class=\"line\">    severity: &#x27;warning&#x27;</span><br><span class=\"line\">  # 如果警报名称相同,则应用抑制。</span><br><span class=\"line\">  # alertname、cluster和service对应的标签值需要相等</span><br><span class=\"line\">  equal: [&#x27;alertname&#x27;, &#x27;cluster&#x27;, &#x27;service&#x27;]</span><br><span class=\"line\"># 收件人配置</span><br><span class=\"line\">receivers:</span><br><span class=\"line\">- name: &#x27;team-ops-mails&#x27;</span><br><span class=\"line\">  email_configs:</span><br><span class=\"line\">  - to: &#x27;dukuan@xxx.com&#x27;</span><br><span class=\"line\">- name: &#x27;team-X-pager&#x27;</span><br><span class=\"line\">  email_configs:</span><br><span class=\"line\">  - to: &#x27;team-X+alerts-critical@example.org&#x27;</span><br><span class=\"line\">  pagerduty_configs:</span><br><span class=\"line\">  - service_key: &lt;team-X-key&gt;</span><br><span class=\"line\">- name: &#x27;team-Y-mails&#x27;</span><br><span class=\"line\">  email_configs:</span><br><span class=\"line\">  - to: &#x27;team-Y+alerts@example.org&#x27;</span><br><span class=\"line\">- name: &#x27;webhook&#x27;</span><br><span class=\"line\">  webhook_configs:</span><br><span class=\"line\">  - url: http://127.0.0.1:8060/dingtalk/webhook1/send</span><br><span class=\"line\">    send_resolved: true</span><br></pre></td></tr></table></figure>\n<h2 id=\"分组和路由\"><a href=\"#分组和路由\" class=\"headerlink\" title=\"分组和路由\"></a>分组和路由</h2><blockquote>\n<ol>\n<li><strong>路由</strong><br><br>match（精确匹配）match_re（正则表达式匹配）<br>每一个告警都会从配置文件中顶级的route进入路由树，需要注意的是顶级的route必须匹配所有告警(即不能有任何的匹配设置match和match_re)，每一个路由都可以定义自己的接受人以及匹配规则。默认情况下，告警进入到顶级route后会遍历所有的子节点，直到找到最深的匹配route，并将告警发送到该route定义的receiver中。但如果route中设置continue的值为false，那么告警在匹配到第一个子节点之后就直接停止。如果continue为true，报警则会继续进行后续子节点的匹配。如果当前告警匹配不到任何的子节点，那该告警将会基于当前路由节点的接收器配置方式进行处理</li>\n<li><strong>分组</strong><br><br>告警通知进行分组，将多条告警合合并为一个通知。这里我们可以使用group_by来定义分组规则。基于告警中包含的标签，如果满足group_by中定义标签名称，那么这些告警将会合并为一个通知发送给接收器。<br>有的时候为了能够一次性收集和发送更多的相关信息时，可以通过group_wait参数设置等待时间，如果在等待时间内当前group接收到了新的告警，这些告警将会合并为一个通知向receiver发送</li>\n</ol>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">route:</span><br><span class=\"line\">  group_by: [&#x27;alertname&#x27;,&#x27;team&#x27;]   #在这里添加team匹配的标签</span><br><span class=\"line\">  group_wait: 5s</span><br><span class=\"line\">  group_interval: 5s</span><br><span class=\"line\">  repeat_interval: 5m</span><br><span class=\"line\">  # 默认发给&quot;sre_system&quot;组用户</span><br><span class=\"line\">  receiver: &#x27;sre_system&#x27;</span><br><span class=\"line\">  continue: false</span><br><span class=\"line\">  # 配置子路由</span><br><span class=\"line\">  routes:</span><br><span class=\"line\">    - receiver: &#x27;sre_dba&#x27;</span><br><span class=\"line\">      match_re:</span><br><span class=\"line\">        job: test</span><br><span class=\"line\">      # 建议将continue的值设置为true，表示当前的条件是否匹配，都将继续向下匹配规则</span><br><span class=\"line\">      # 这样做的目的是将消息发给最后的系统组(sre_system)</span><br><span class=\"line\">      continue: true</span><br><span class=\"line\">==================================================================</span><br><span class=\"line\">#rule.yml</span><br><span class=\"line\">- name: grafana</span><br><span class=\"line\">  rules:</span><br><span class=\"line\">  - alert: node           #这个相当于alertname的值,与之前匹配的相同</span><br><span class=\"line\">    expr: up&#123;job=&quot;grafana&quot;&#125; == 0</span><br><span class=\"line\">    for: 10s                  </span><br><span class=\"line\">    labels:                   </span><br><span class=\"line\">      severity: 1 </span><br><span class=\"line\">      job: test  # 对应上面的 match_re</span><br><span class=\"line\">      team: grafana        #这里标签设置不同的一会用</span><br><span class=\"line\">    annotations:              </span><br><span class=\"line\">      summary: &quot;&#123;&#123; \\$labels.instance &#125;&#125; 已停止运行超过 15s&quot;</span><br><span class=\"line\">      description: hello world</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\">alertname 等于 node 如果相同报警会一起发送</span><br><span class=\"line\">team 等于 grafana </span><br></pre></td></tr></table></figure>\n<h2 id=\"抑制规则\"><a href=\"#抑制规则\" class=\"headerlink\" title=\"抑制规则\"></a>抑制规则</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">inhibit_rules:</span><br><span class=\"line\">  - source_match:</span><br><span class=\"line\">      severity: &#x27;告警&#x27;</span><br><span class=\"line\">    target_match:</span><br><span class=\"line\">      severity: &#x27;提示&#x27;</span><br><span class=\"line\">    #equal: [&#x27;type&#x27;,&#x27;test&#x27;] 要求 type 和 test签均相同</span><br><span class=\"line\">     equal: [&#x27;type&#x27;]type的值必须一样</span><br><span class=\"line\">当匹配到 告警 时就会抑制提示的告警通知并检查他们是否来自于同个</span><br><span class=\"line\">ssl（即ssl标签的值相同抑制才会生效）</span><br><span class=\"line\">当子路由匹配到不同的 severity 时就会将消息发往不同的 receiver，当子路由无法匹配到时，消息会默认发往根路由的 receiver，因此，无论是否匹配到子路由规则，消息都会发往根路由的 receiver</span><br><span class=\"line\">对应报警规则配置为</span><br><span class=\"line\">groups:</span><br><span class=\"line\">- name: node-alerts</span><br><span class=\"line\">  rules:</span><br><span class=\"line\">  - alert: HighNodeCPU</span><br><span class=\"line\">    expr: (1 - avg(rate(node_cpu_seconds_total&#123;mode=&quot;idle&quot;&#125;[5m])) by (instance)) * 100 &gt; 80</span><br><span class=\"line\">    for: 5m</span><br><span class=\"line\">    labels:</span><br><span class=\"line\">      severity: &quot;告警&quot;</span><br><span class=\"line\">      type: ssl</span><br><span class=\"line\">    annotations:</span><br><span class=\"line\">      summary: &quot;高节点CPU使用率 (&#123;&#123; $labels.instance &#125;&#125;)&quot;</span><br><span class=\"line\">      description: &quot;节点 &#123;&#123; $labels.instance &#125;&#125; CPU 使用率超过 80% 已持续 5 分钟&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">- name: cluster-alerts</span><br><span class=\"line\">  rules:</span><br><span class=\"line\">  - alert: ClusterWideCPUProblem</span><br><span class=\"line\">    expr: |</span><br><span class=\"line\">      sum( (1 - avg(rate(node_cpu_seconds_total&#123;mode=&quot;idle&quot;&#125;[5m])) by (instance)) * 100 &gt; 80 )</span><br><span class=\"line\">      /</span><br><span class=\"line\">      count( (1 - avg(rate(node_cpu_seconds_total&#123;mode=&quot;idle&quot;&#125;[5m])) by (instance)) )</span><br><span class=\"line\">      * 100 &gt; 50</span><br><span class=\"line\">    for: 10m</span><br><span class=\"line\">    labels:</span><br><span class=\"line\">      severity: &quot;提示&quot;</span><br><span class=\"line\">      type: ssl</span><br><span class=\"line\">    annotations:</span><br><span class=\"line\">      summary: &quot;集群级CPU问题&quot;</span><br><span class=\"line\">      description: &quot;超过 50% 的节点持续高CPU使用率达 10 分钟&quot;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"alertmanager集成三方告警\"><a href=\"#alertmanager集成三方告警\" class=\"headerlink\" title=\"alertmanager集成三方告警\"></a>alertmanager集成三方告警</h1><blockquote>\n<p>原生alertmanager只有邮件和webhook告警；Alertmanager 的原生 Webhook 告警是一种通过 HTTP POST 请求将告警信息发送到自定义接口（Webhook 接收端）的机制；所以要对接需要开发者自行开发，这里推荐两个现成的工具来对接</p>\n</blockquote>\n<h2 id=\"PrometheusAlert使用\"><a href=\"#PrometheusAlert使用\" class=\"headerlink\" title=\"PrometheusAlert使用\"></a>PrometheusAlert使用</h2><blockquote>\n<p>Prometheus Alert 是开源的运维告警中心消息转发系统，支持主流的监控系统 Prometheus，日志系统 Graylog 和数据可视化系统 Grafana 发出的预警消息。通知渠道支持钉钉、微信、华为云短信、腾讯云短信、腾讯云电话、阿里云短信、阿里云电话等等</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/feiyu563/PrometheusAlert/releases/download/v4.8.1/linux.zip</span><br><span class=\"line\">chmod +x PrometheusAlert</span><br><span class=\"line\">启动 nohup ./PrometheusAlert &amp; 后台运行</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">alertmanager.yml配置集成PrometheusAlert；格式可以登录PrometheusAlert查看</span></span><br><span class=\"line\">receivers:</span><br><span class=\"line\">- name: &#x27;web.hook.prometheusalert&#x27;</span><br><span class=\"line\">  webhook_configs:</span><br><span class=\"line\">  - url: &#x27;http://192.168.197.142:8080/prometheusalert?type=wx&amp;tpl=prometheus-wx&amp;wxurl=https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=53fdb356-4446-42e5-b8bd-f7da63bcfe76&#x27;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2025/04/27/alertmanager/image.png\" alt=\"alt text\"></p>\n<h2 id=\"prometheus-webhook-dingtalk使用\"><a href=\"#prometheus-webhook-dingtalk使用\" class=\"headerlink\" title=\"prometheus-webhook-dingtalk使用\"></a>prometheus-webhook-dingtalk使用</h2><blockquote>\n<p>Prometheus 的Alertmanager自身不支持钉钉报警，需要通过插件的方式来达到报警条件</p>\n</blockquote>\n<h3 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/timonwong/prometheus-webhook-dingtalk/releases/download/v2.1.0/prometheus-webhook-dingtalk-2.1.0.linux-amd64.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">tar zxf prometheus-webhook-dingtalk-2.1.0.linux-amd64.tar.gz </span><br><span class=\"line\">mv prometheus-webhook-dingtalk-2.1.0.linux-amd64 /usr/local/prometheus-webhook-dingtalk</span><br><span class=\"line\">cat &gt; /usr/lib/systemd/system/webhook-dingtalk.service &lt;&lt; EOF</span><br><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=prometheus-webhook-dingtalk</span><br><span class=\"line\">Documentation=https://github.com/timonwong/prometheus-webhook-dingtalk</span><br><span class=\"line\">After=network.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">User=root</span><br><span class=\"line\">Group=root</span><br><span class=\"line\">ExecStart=/usr/local/prometheus-webhook-dingtalk/prometheus-webhook-dingtalk  --config.file=/usr/local/prometheus-webhook-dingtalk/config.yml</span><br><span class=\"line\">ExecReload=/bin/kill -HUP $MAINPID</span><br><span class=\"line\">KillMode=process</span><br><span class=\"line\">Restart=on-failure</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">集成模版/usr/local/prometheus-webhook-dingtalk/config.yml</span></span><br><span class=\"line\">templates:</span><br><span class=\"line\">    - /usr/local/prometheus/webhook-dingtalk/template.tmpl</span><br><span class=\"line\">targets:</span><br><span class=\"line\">  webhook1:</span><br><span class=\"line\">    url: https://oapi.dingtalk.com/robot/send?access_token=9ac4354ab7c8</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">alertmanager配置发送给dingtalk插件</span></span><br><span class=\"line\">receivers:</span><br><span class=\"line\">  - name: &#x27;email&#x27;</span><br><span class=\"line\">    email_configs:</span><br><span class=\"line\">      - to: &#x27;xxxxx@163.com&#x27; #指定发送给谁</span><br><span class=\"line\">  - name: &#x27;webhook1&#x27;</span><br><span class=\"line\">    webhook_configs:</span><br><span class=\"line\">      - send_resolved: false</span><br><span class=\"line\">        url: http://localhost:8060/dingtalk/webhook1/send</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"报警内容模版\"><a href=\"#报警内容模版\" class=\"headerlink\" title=\"报警内容模版\"></a>报警内容模版</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /usr/local/prometheus/webhook-dingtalk/template.tmpl</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; define &quot;__subject&quot; &#125;&#125;</span><br><span class=\"line\">[&#123;&#123; .Status | toUpper &#125;&#125;&#123;&#123; if eq .Status &quot;firing&quot; &#125;&#125;:&#123;&#123; .Alerts.Firing | len &#125;&#125;&#123;&#123; end &#125;&#125;]</span><br><span class=\"line\">&#123;&#123; end &#125;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">&#123;&#123; define &quot;__alert_list&quot; &#125;&#125;&#123;&#123; range . &#125;&#125;</span><br><span class=\"line\">---</span><br><span class=\"line\">&#123;&#123; if .Labels.owner &#125;&#125;@&#123;&#123; .Labels.owner &#125;&#125;&#123;&#123; end &#125;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">**告警主题**: &#123;&#123; .Annotations.summary &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">**告警类型**: &#123;&#123; .Labels.alertname &#125;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">**告警级别**: &#123;&#123; .Labels.severity &#125;&#125; </span><br><span class=\"line\"> </span><br><span class=\"line\">**告警主机**: &#123;&#123; .Labels.instance &#125;&#125; </span><br><span class=\"line\"> </span><br><span class=\"line\">**告警信息**: &#123;&#123; index .Annotations &quot;description&quot; &#125;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">**告警时间**: &#123;&#123; dateInZone &quot;2006.01.02 15:04:05&quot; (.StartsAt) &quot;Asia/Shanghai&quot; &#125;&#125;</span><br><span class=\"line\">&#123;&#123; end &#125;&#125;&#123;&#123; end &#125;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#123;&#123; define &quot;__resolved_list&quot; &#125;&#125;&#123;&#123; range . &#125;&#125;</span><br><span class=\"line\">---</span><br><span class=\"line\">&#123;&#123; if .Labels.owner &#125;&#125;@&#123;&#123; .Labels.owner &#125;&#125;&#123;&#123; end &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">**告警主题**: &#123;&#123; .Annotations.summary &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">**告警类型**: &#123;&#123; .Labels.alertname &#125;&#125; </span><br><span class=\"line\"> </span><br><span class=\"line\">**告警级别**: &#123;&#123; .Labels.severity &#125;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">**告警主机**: &#123;&#123; .Labels.instance &#125;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">**告警信息**: &#123;&#123; index .Annotations &quot;description&quot; &#125;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">**告警时间**: &#123;&#123; dateInZone &quot;2006.01.02 15:04:05&quot; (.StartsAt) &quot;Asia/Shanghai&quot; &#125;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">**恢复时间**: &#123;&#123; dateInZone &quot;2006.01.02 15:04:05&quot; (.EndsAt) &quot;Asia/Shanghai&quot; &#125;&#125;</span><br><span class=\"line\">&#123;&#123; end &#125;&#125;&#123;&#123; end &#125;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">&#123;&#123; define &quot;default.title&quot; &#125;&#125;</span><br><span class=\"line\">&#123;&#123; template &quot;__subject&quot; . &#125;&#125;</span><br><span class=\"line\">&#123;&#123; end &#125;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#123;&#123; define &quot;default.content&quot; &#125;&#125;</span><br><span class=\"line\">&#123;&#123; if gt (len .Alerts.Firing) 0 &#125;&#125;</span><br><span class=\"line\">**====侦测到&#123;&#123; .Alerts.Firing | len  &#125;&#125;个故障====**</span><br><span class=\"line\">&#123;&#123; template &quot;__alert_list&quot; .Alerts.Firing &#125;&#125;</span><br><span class=\"line\">---</span><br><span class=\"line\">&#123;&#123; end &#125;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#123;&#123; if gt (len .Alerts.Resolved) 0 &#125;&#125;</span><br><span class=\"line\">**====恢复&#123;&#123; .Alerts.Resolved | len  &#125;&#125;个故障====**</span><br><span class=\"line\">&#123;&#123; template &quot;__resolved_list&quot; .Alerts.Resolved &#125;&#125;</span><br><span class=\"line\">&#123;&#123; end &#125;&#125;</span><br><span class=\"line\">&#123;&#123; end &#125;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">&#123;&#123; define &quot;ding.link.title&quot; &#125;&#125;&#123;&#123; template &quot;default.title&quot; . &#125;&#125;&#123;&#123; end &#125;&#125;</span><br><span class=\"line\">&#123;&#123; define &quot;ding.link.content&quot; &#125;&#125;&#123;&#123; template &quot;default.content&quot; . &#125;&#125;&#123;&#123; end &#125;&#125;</span><br><span class=\"line\">&#123;&#123; template &quot;default.title&quot; . &#125;&#125;</span><br><span class=\"line\">&#123;&#123; template &quot;default.content&quot; . &#125;&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"报警规则示例\"><a href=\"#报警规则示例\" class=\"headerlink\" title=\"报警规则示例\"></a>报警规则示例</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /usr/local/prometheus/prometheus/rule</span><br><span class=\"line\">vim /usr/local/prometheus/prometheus/rule/node_exporter.yml</span><br><span class=\"line\"></span><br><span class=\"line\">groups:</span><br><span class=\"line\">- name: 服务器资源监控</span><br><span class=\"line\">  rules:</span><br><span class=\"line\">  - alert: 内存使用率过高</span><br><span class=\"line\">    expr: 100 - (node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes) * 100 &gt; 80</span><br><span class=\"line\">    for: 3m </span><br><span class=\"line\">    labels:</span><br><span class=\"line\">      severity: 严重告警</span><br><span class=\"line\">    annotations:</span><br><span class=\"line\">      summary: &quot;&#123;&#123; $labels.instance &#125;&#125; 内存使用率过高, 请尽快处理！&quot;</span><br><span class=\"line\">      description: &quot;&#123;&#123; $labels.instance &#125;&#125;内存使用率超过80%,当前使用率&#123;&#123; $value &#125;&#125;%.&quot;</span><br><span class=\"line\">          </span><br><span class=\"line\">  - alert: 服务器宕机</span><br><span class=\"line\">    expr: up == 0</span><br><span class=\"line\">    for: 1s</span><br><span class=\"line\">    labels:</span><br><span class=\"line\">      severity: 严重告警</span><br><span class=\"line\">    annotations:</span><br><span class=\"line\">      summary: &quot;&#123;&#123;$labels.instance&#125;&#125; 服务器宕机, 请尽快处理!&quot;</span><br><span class=\"line\">      description: &quot;&#123;&#123;$labels.instance&#125;&#125; 服务器延时超过3分钟,当前状态&#123;&#123; $value &#125;&#125;. &quot;</span><br><span class=\"line\"> </span><br><span class=\"line\">  - alert: CPU高负荷</span><br><span class=\"line\">    expr: 100 - (avg by (instance,job)(irate(node_cpu_seconds_total&#123;mode=&quot;idle&quot;&#125;[5m])) * 100) &gt; 90</span><br><span class=\"line\">    for: 5m</span><br><span class=\"line\">    labels:</span><br><span class=\"line\">      severity: 严重告警</span><br><span class=\"line\">    annotations:</span><br><span class=\"line\">      summary: &quot;&#123;&#123;$labels.instance&#125;&#125; CPU使用率过高,请尽快处理！&quot;</span><br><span class=\"line\">      description: &quot;&#123;&#123;$labels.instance&#125;&#125; CPU使用大于90%,当前使用率&#123;&#123; $value &#125;&#125;%. &quot;</span><br><span class=\"line\">      </span><br><span class=\"line\">  - alert: 磁盘IO性能</span><br><span class=\"line\">    expr: avg(irate(node_disk_io_time_seconds_total[1m])) by(instance,job)* 100 &gt; 90</span><br><span class=\"line\">    for: 5m</span><br><span class=\"line\">    labels:</span><br><span class=\"line\">      severity: 严重告警</span><br><span class=\"line\">    annotations:</span><br><span class=\"line\">      summary: &quot;&#123;&#123;$labels.instance&#125;&#125; 流入磁盘IO使用率过高,请尽快处理！&quot;</span><br><span class=\"line\">      description: &quot;&#123;&#123;$labels.instance&#125;&#125; 流入磁盘IO大于90%,当前使用率&#123;&#123; $value &#125;&#125;%.&quot;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">  - alert: 网络流入</span><br><span class=\"line\">    expr: ((sum(rate (node_network_receive_bytes_total&#123;device!~&#x27;tap.*|veth.*|br.*|docker.*|virbr*|lo*&#x27;&#125;[5m])) by (instance,job)) / 100) &gt; 102400</span><br><span class=\"line\">    for: 5m</span><br><span class=\"line\">    labels:</span><br><span class=\"line\">      severity: 严重告警</span><br><span class=\"line\">    annotations:</span><br><span class=\"line\">      summary: &quot;&#123;&#123;$labels.instance&#125;&#125; 流入网络带宽过高，请尽快处理！&quot;</span><br><span class=\"line\">      description: &quot;&#123;&#123;$labels.instance&#125;&#125; 流入网络带宽持续5分钟高于100M. RX带宽使用量&#123;&#123;$value&#125;&#125;.&quot;</span><br><span class=\"line\"> </span><br><span class=\"line\">  - alert: 网络流出</span><br><span class=\"line\">    expr: ((sum(rate (node_network_transmit_bytes_total&#123;device!~&#x27;tap.*|veth.*|br.*|docker.*|virbr*|lo*&#x27;&#125;[5m])) by (instance,job)) / 100) &gt; 102400</span><br><span class=\"line\">    for: 5m</span><br><span class=\"line\">    labels:</span><br><span class=\"line\">      severity: 严重告警</span><br><span class=\"line\">    annotations:</span><br><span class=\"line\">      summary: &quot;&#123;&#123;$labels.instance&#125;&#125; 流出网络带宽过高,请尽快处理！&quot;</span><br><span class=\"line\">      description: &quot;&#123;&#123;$labels.instance&#125;&#125; 流出网络带宽持续5分钟高于100M. RX带宽使用量&#123;$value&#125;&#125;.&quot;</span><br><span class=\"line\">  </span><br><span class=\"line\">  - alert: TCP连接数</span><br><span class=\"line\">    expr: node_netstat_Tcp_CurrEstab &gt; 10000</span><br><span class=\"line\">    for: 2m</span><br><span class=\"line\">    labels:</span><br><span class=\"line\">      severity: 严重告警</span><br><span class=\"line\">    annotations:</span><br><span class=\"line\">      summary: &quot; TCP_ESTABLISHED过高！&quot;</span><br><span class=\"line\">      description: &quot;&#123;&#123;$labels.instance&#125;&#125; TCP_ESTABLISHED大于100%,当前使用率&#123;&#123; $value &#125;&#125;%.&quot;</span><br><span class=\"line\"> </span><br><span class=\"line\">  - alert: 磁盘容量</span><br><span class=\"line\">    expr: 100-(node_filesystem_free_bytes&#123;fstype=~&quot;ext4|xfs&quot;&#125;/node_filesystem_size_bytes &#123;fstype=~&quot;ext4|xfs&quot;&#125;*100) &gt; 90</span><br><span class=\"line\">    for: 1m</span><br><span class=\"line\">    labels:</span><br><span class=\"line\">      severity: 严重告警</span><br><span class=\"line\">    annotations:</span><br><span class=\"line\">      summary: &quot;&#123;&#123;$labels.mountpoint&#125;&#125; 磁盘分区使用率过高，请尽快处理！&quot;</span><br><span class=\"line\">      description: &quot;&#123;&#123;$labels.instance&#125;&#125; 磁盘分区使用大于90%，当前使用率&#123;&#123; $value &#125;&#125;%.&quot;</span><br></pre></td></tr></table></figure>\n"},{"title":"elfk部署使用","date":"2025-04-18T01:56:59.000Z","_content":"\n>filebeat不建议容器启动，适合放到每个节点采集日志统一发给logstash；如果全部输出到elasticsearch会导致负载比较高；不建议每个节点用logstash采集因为比较重，filebeat比较轻量级\n\n# 安装elfk\n```shell\ncurl -SL https://github.com/docker/compose/releases/download/v2.30.3/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose\n#将可执行权限赋予安装目标路径中的独立二进制文件\nsudo chmod +x /usr/local/bin/docker-compose\nsudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose\n\nyum install -y https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-6.3.2-x86_64.rpm\n\ncat >> ./elk.yml << EOF\nversion: '3.8'\nservices:\n  elasticsearch:\n    image: registry.cn-hangzhou.aliyuncs.com/lky-deploy/elasticsearch:7.14.0\n    container_name: elasticsearch\n    environment:\n      - discovery.type=single-node  # 单节点模式\n      - ES_JAVA_OPTS=-Xms512m -Xmx512m  # JVM 堆内存限制\n      - ELASTIC_PASSWORD=Ytest@123  # 设置 Elasticsearch 密码\n    volumes:\n      - ./elasticsearch/data:/usr/share/elasticsearch/data  # 数据持久化\n#      - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml  # 自定义配置（可选）\n    ports:\n      - \"9200:9200\"  # REST API\n      - \"9300:9300\"  # 集群通信\n    networks:\n      - elk\n  logstash:\n    image: registry.cn-hangzhou.aliyuncs.com/lky-deploy/logstash:7.14.0\n    container_name: logstash\n    volumes:\n      - ./logstash/config/logstash.conf:/usr/share/logstash/pipeline/logstash.conf  # 自定义 Logstash 管道配置\n      - ./logstash/logs:/usr/share/logstash/logs  # 日志持久化\n    environment:\n      - LS_JAVA_OPTS=-Xms512m -Xmx512m  # JVM 堆内存限制\n    ports:\n      - \"5044:5044\"  # Beats 输入端口（如 Filebeat）\n      - \"5000:5000/tcp\"  # TCP 输入\n      - \"5000:5000/udp\"  # UDP 输入\n    depends_on:\n      - elasticsearch\n    networks:\n      - elk\n  kibana:\n    image: registry.cn-hangzhou.aliyuncs.com/lky-deploy/kibana:7.14.0\n    container_name: kibana\n    environment:\n      - I18N_LOCALE=zh-CN\n      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200  # 指向 Elasticsearch 服务\n      - ELASTICSEARCH_USERNAME=elastic  # 默认用户名\n      - ELASTICSEARCH_PASSWORD=Ytest@123  # 与 Elasticsearch 密码一致\n    ports:\n      - \"5601:5601\"  # Kibana Web 界面\n    depends_on:\n      - elasticsearch\n    networks:\n      - elk\nnetworks:\n  elk:\n    driver: bridge\nEOF\nmkdir ./logstash/config -p\ncat >> ./logstash/config/logstash.conf << EOF\n# ./logstash/config/logstash.conf\ninput {\n  tcp {\n    port => 5000  # 监听 TCP 日志\n  }\n  beats {\n    port => 5044  # 接收 Filebeat 输入\n  }\n}\nfilter {\n  grok {\n    match => { \"message\" => \"%{COMBINEDAPACHELOG}\" }  # 解析 Apache 日志\n  }\n  date {\n    match => [ \"timestamp\", \"dd/MMM/yyyy:HH:mm:ss Z\" ]  # 时间解析\n  }\n}\noutput {\n  elasticsearch {\n    hosts => [\"elasticsearch:9200\"]\n    user => \"elastic\"\n    password => \"Ytest@123\"\n    index => \"logs-%{+YYYY.MM.dd}\"  # 按日期创建索引\n  }\n}\nEOF\nchmod 777 elasticsearch/data\n```\n# filebeat\n**根据不同tag写入不同的logstash后续分割和输出建立索引好区分**\n```\nfilebeat.inputs: # filebeat input输入\n- type: log    # 标准输入\n  enabled: true  # 启用标准输入\n  paths:\n    - /var/log/*\n  tags: [\"system\"]\n  #  fields:\n  #    type: \"system_log\"\n- type: filestream\n  paths:\n    - \"/var/log/nginx/*.log\"\n  tags: [\"nginx\"]   # 标记为 nginx 日志\n#output.console:\n# enabled: true               # 启用控制台输出\n  #  pretty: true                # 美化 JSON 格式\n  # codec.json:\n  #   pretty: true\n  # escape_html: false        # 不转义 HTML 符号（保持原始格式）\n \n# 输出到 Logstash - 用于生产数据处理\noutput.logstash:\n  enabled: true               # 启用 Logstash 输出\n  #  when:\n  #    equals:\n  #      fields.type: \"system_log\"\n  hosts: [\"127.0.0.1:5044\"]  # Logstash 的地址和端口（支持多个主机负载均衡）\n  when.contains:\n      tags: \"system\"  # 匹配 tags 包含 \"system\"\n  hosts: [\"127.0.0.1:5045\"]\n  enabled: true\n  when.contains:\n    tags: \"nginx\"  # 匹配 tags 包含 \"nginx\"\n```\n# logstash\n**根据不同type进行过滤和输出索引**\n```\nLogstash Reference [7.10] | Elastic\n\ninput {\n  tcp {\n    port => 5000  # 监听 TCP 日志\n  }\n  beats {\n    port => 5044  # 接收 Filebeat 输入\n    type => \"system\"\n  }\n  beats {\n    port => 5045  # 接收 Filebeat 输入\n    type => \"nginx\"\n  }\n}\n  \n \nfilter {\n  date {\n    match => [ \"timestamp\", \"dd/MMM/yyyy:HH:mm:ss Z\" ]  # 时间解析\n  }\n \n  if[type] == \"nginx\" {\n    grok {\n      match => { \"message\" => \"%{HTTPD_COMMONLOG}\" }  # 解析 nginx 日志,如果不区分；system类型是解析不了的，会直接报错\n      remove_field => [\"@version\"]\n     }\n  }\n  #对于system类型可以再写个if来单独过滤\n  if[type] == \"system\" {\n    grok {\n      match =>  {\"message\" => \"%{IPV4:ip}\"}  \n      remove_field => [\"@version\"]\n     }\n    mutate {  #这里过滤器乱写的，需要根据自身的业务配置\n        remove_field => [\"timestamp\"]\n        gsub => [\"message\",\"\\s\",\"| \"]\n        split => [\"message\",\"|\"]\n        replace => { \"timenew\" =>  \"%{+yyyy-MM-dd}\" }\n        add_field => {\n         \"year\" => \"%{+yyyy}\"\n         \"month\" => \"%{+MM}\"\n         \"day\" => \"%{+dd}\"\n         \"status\" => \"%{[message][1]}\"\n         \"code\" => \"%{[message][2]}\"\n        }\n    }\n  }\n \n  \n}\n#必须通过type指定不同输出创建不同的index =>,否则index的字段不一样，当第一个index结构确定后，第二个输入无法输出到第一个index，因为字段不一样\noutput {\n  if \"system\" in [tags] {\n    elasticsearch {\n      hosts => [\"elasticsearch:9200\"]\n      user => \"elastic\"\n      password => \"Ytest@123\"\n      index => \"filebeat-system-logs-%{+YYYY.MM.dd}\"  # 按日期创建索引\n    }\n  }  \n  if \"nginx\" in [tags] {\n    elasticsearch {\n      hosts => [\"elasticsearch:9200\"]\n      user => \"elastic\"\n      password => \"Ytest@123\"\n      index => \"filebeat-nginx-logs-%{+YYYY.MM.dd}\"  # 按日期创建索引\n    }\n  }  \n}\n```\n# elasticsearch\n>常用语法\n>>/_cat <br>\n/_cat/master?help<br>\n/_cat/indices?v  显示title<br>\n/_cat/indices<br>\nlogs-2025.03.24 为索引名称<br>\n/logs-2025.03.24/_search 查看文档<br>\n/logs-2025.03.24/ 查看索引结构<br>\n/logs-2025.03.24/_doc/_search?q=message:test\n","source":"_posts/elfk.md","raw":"---\ntitle: elfk部署使用\ndate: 2025-04-18 09:56:59\ntags:\ncategories: 中间件\n---\n\n>filebeat不建议容器启动，适合放到每个节点采集日志统一发给logstash；如果全部输出到elasticsearch会导致负载比较高；不建议每个节点用logstash采集因为比较重，filebeat比较轻量级\n\n# 安装elfk\n```shell\ncurl -SL https://github.com/docker/compose/releases/download/v2.30.3/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose\n#将可执行权限赋予安装目标路径中的独立二进制文件\nsudo chmod +x /usr/local/bin/docker-compose\nsudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose\n\nyum install -y https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-6.3.2-x86_64.rpm\n\ncat >> ./elk.yml << EOF\nversion: '3.8'\nservices:\n  elasticsearch:\n    image: registry.cn-hangzhou.aliyuncs.com/lky-deploy/elasticsearch:7.14.0\n    container_name: elasticsearch\n    environment:\n      - discovery.type=single-node  # 单节点模式\n      - ES_JAVA_OPTS=-Xms512m -Xmx512m  # JVM 堆内存限制\n      - ELASTIC_PASSWORD=Ytest@123  # 设置 Elasticsearch 密码\n    volumes:\n      - ./elasticsearch/data:/usr/share/elasticsearch/data  # 数据持久化\n#      - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml  # 自定义配置（可选）\n    ports:\n      - \"9200:9200\"  # REST API\n      - \"9300:9300\"  # 集群通信\n    networks:\n      - elk\n  logstash:\n    image: registry.cn-hangzhou.aliyuncs.com/lky-deploy/logstash:7.14.0\n    container_name: logstash\n    volumes:\n      - ./logstash/config/logstash.conf:/usr/share/logstash/pipeline/logstash.conf  # 自定义 Logstash 管道配置\n      - ./logstash/logs:/usr/share/logstash/logs  # 日志持久化\n    environment:\n      - LS_JAVA_OPTS=-Xms512m -Xmx512m  # JVM 堆内存限制\n    ports:\n      - \"5044:5044\"  # Beats 输入端口（如 Filebeat）\n      - \"5000:5000/tcp\"  # TCP 输入\n      - \"5000:5000/udp\"  # UDP 输入\n    depends_on:\n      - elasticsearch\n    networks:\n      - elk\n  kibana:\n    image: registry.cn-hangzhou.aliyuncs.com/lky-deploy/kibana:7.14.0\n    container_name: kibana\n    environment:\n      - I18N_LOCALE=zh-CN\n      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200  # 指向 Elasticsearch 服务\n      - ELASTICSEARCH_USERNAME=elastic  # 默认用户名\n      - ELASTICSEARCH_PASSWORD=Ytest@123  # 与 Elasticsearch 密码一致\n    ports:\n      - \"5601:5601\"  # Kibana Web 界面\n    depends_on:\n      - elasticsearch\n    networks:\n      - elk\nnetworks:\n  elk:\n    driver: bridge\nEOF\nmkdir ./logstash/config -p\ncat >> ./logstash/config/logstash.conf << EOF\n# ./logstash/config/logstash.conf\ninput {\n  tcp {\n    port => 5000  # 监听 TCP 日志\n  }\n  beats {\n    port => 5044  # 接收 Filebeat 输入\n  }\n}\nfilter {\n  grok {\n    match => { \"message\" => \"%{COMBINEDAPACHELOG}\" }  # 解析 Apache 日志\n  }\n  date {\n    match => [ \"timestamp\", \"dd/MMM/yyyy:HH:mm:ss Z\" ]  # 时间解析\n  }\n}\noutput {\n  elasticsearch {\n    hosts => [\"elasticsearch:9200\"]\n    user => \"elastic\"\n    password => \"Ytest@123\"\n    index => \"logs-%{+YYYY.MM.dd}\"  # 按日期创建索引\n  }\n}\nEOF\nchmod 777 elasticsearch/data\n```\n# filebeat\n**根据不同tag写入不同的logstash后续分割和输出建立索引好区分**\n```\nfilebeat.inputs: # filebeat input输入\n- type: log    # 标准输入\n  enabled: true  # 启用标准输入\n  paths:\n    - /var/log/*\n  tags: [\"system\"]\n  #  fields:\n  #    type: \"system_log\"\n- type: filestream\n  paths:\n    - \"/var/log/nginx/*.log\"\n  tags: [\"nginx\"]   # 标记为 nginx 日志\n#output.console:\n# enabled: true               # 启用控制台输出\n  #  pretty: true                # 美化 JSON 格式\n  # codec.json:\n  #   pretty: true\n  # escape_html: false        # 不转义 HTML 符号（保持原始格式）\n \n# 输出到 Logstash - 用于生产数据处理\noutput.logstash:\n  enabled: true               # 启用 Logstash 输出\n  #  when:\n  #    equals:\n  #      fields.type: \"system_log\"\n  hosts: [\"127.0.0.1:5044\"]  # Logstash 的地址和端口（支持多个主机负载均衡）\n  when.contains:\n      tags: \"system\"  # 匹配 tags 包含 \"system\"\n  hosts: [\"127.0.0.1:5045\"]\n  enabled: true\n  when.contains:\n    tags: \"nginx\"  # 匹配 tags 包含 \"nginx\"\n```\n# logstash\n**根据不同type进行过滤和输出索引**\n```\nLogstash Reference [7.10] | Elastic\n\ninput {\n  tcp {\n    port => 5000  # 监听 TCP 日志\n  }\n  beats {\n    port => 5044  # 接收 Filebeat 输入\n    type => \"system\"\n  }\n  beats {\n    port => 5045  # 接收 Filebeat 输入\n    type => \"nginx\"\n  }\n}\n  \n \nfilter {\n  date {\n    match => [ \"timestamp\", \"dd/MMM/yyyy:HH:mm:ss Z\" ]  # 时间解析\n  }\n \n  if[type] == \"nginx\" {\n    grok {\n      match => { \"message\" => \"%{HTTPD_COMMONLOG}\" }  # 解析 nginx 日志,如果不区分；system类型是解析不了的，会直接报错\n      remove_field => [\"@version\"]\n     }\n  }\n  #对于system类型可以再写个if来单独过滤\n  if[type] == \"system\" {\n    grok {\n      match =>  {\"message\" => \"%{IPV4:ip}\"}  \n      remove_field => [\"@version\"]\n     }\n    mutate {  #这里过滤器乱写的，需要根据自身的业务配置\n        remove_field => [\"timestamp\"]\n        gsub => [\"message\",\"\\s\",\"| \"]\n        split => [\"message\",\"|\"]\n        replace => { \"timenew\" =>  \"%{+yyyy-MM-dd}\" }\n        add_field => {\n         \"year\" => \"%{+yyyy}\"\n         \"month\" => \"%{+MM}\"\n         \"day\" => \"%{+dd}\"\n         \"status\" => \"%{[message][1]}\"\n         \"code\" => \"%{[message][2]}\"\n        }\n    }\n  }\n \n  \n}\n#必须通过type指定不同输出创建不同的index =>,否则index的字段不一样，当第一个index结构确定后，第二个输入无法输出到第一个index，因为字段不一样\noutput {\n  if \"system\" in [tags] {\n    elasticsearch {\n      hosts => [\"elasticsearch:9200\"]\n      user => \"elastic\"\n      password => \"Ytest@123\"\n      index => \"filebeat-system-logs-%{+YYYY.MM.dd}\"  # 按日期创建索引\n    }\n  }  \n  if \"nginx\" in [tags] {\n    elasticsearch {\n      hosts => [\"elasticsearch:9200\"]\n      user => \"elastic\"\n      password => \"Ytest@123\"\n      index => \"filebeat-nginx-logs-%{+YYYY.MM.dd}\"  # 按日期创建索引\n    }\n  }  \n}\n```\n# elasticsearch\n>常用语法\n>>/_cat <br>\n/_cat/master?help<br>\n/_cat/indices?v  显示title<br>\n/_cat/indices<br>\nlogs-2025.03.24 为索引名称<br>\n/logs-2025.03.24/_search 查看文档<br>\n/logs-2025.03.24/ 查看索引结构<br>\n/logs-2025.03.24/_doc/_search?q=message:test\n","slug":"elfk","published":1,"updated":"2025-07-30T08:38:33.285Z","comments":1,"layout":"post","photos":[],"_id":"cmdppvvvi0003lpodewydh19a","content":"<blockquote>\n<p>filebeat不建议容器启动，适合放到每个节点采集日志统一发给logstash；如果全部输出到elasticsearch会导致负载比较高；不建议每个节点用logstash采集因为比较重，filebeat比较轻量级</p>\n</blockquote>\n<h1 id=\"安装elfk\"><a href=\"#安装elfk\" class=\"headerlink\" title=\"安装elfk\"></a>安装elfk</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -SL https://github.com/docker/compose/releases/download/v2.30.3/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">将可执行权限赋予安装目标路径中的独立二进制文件</span></span><br><span class=\"line\">sudo chmod +x /usr/local/bin/docker-compose</span><br><span class=\"line\">sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose</span><br><span class=\"line\"></span><br><span class=\"line\">yum install -y https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-6.3.2-x86_64.rpm</span><br><span class=\"line\"></span><br><span class=\"line\">cat &gt;&gt; ./elk.yml &lt;&lt; EOF</span><br><span class=\"line\">version: &#x27;3.8&#x27;</span><br><span class=\"line\">services:</span><br><span class=\"line\">  elasticsearch:</span><br><span class=\"line\">    image: registry.cn-hangzhou.aliyuncs.com/lky-deploy/elasticsearch:7.14.0</span><br><span class=\"line\">    container_name: elasticsearch</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      - discovery.type=single-node  # 单节点模式</span><br><span class=\"line\">      - ES_JAVA_OPTS=-Xms512m -Xmx512m  # JVM 堆内存限制</span><br><span class=\"line\">      - ELASTIC_PASSWORD=Ytest@123  # 设置 Elasticsearch 密码</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - ./elasticsearch/data:/usr/share/elasticsearch/data  # 数据持久化</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">     - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml  <span class=\"comment\"># 自定义配置（可选）</span></span></span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - &quot;9200:9200&quot;  # REST API</span><br><span class=\"line\">      - &quot;9300:9300&quot;  # 集群通信</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - elk</span><br><span class=\"line\">  logstash:</span><br><span class=\"line\">    image: registry.cn-hangzhou.aliyuncs.com/lky-deploy/logstash:7.14.0</span><br><span class=\"line\">    container_name: logstash</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - ./logstash/config/logstash.conf:/usr/share/logstash/pipeline/logstash.conf  # 自定义 Logstash 管道配置</span><br><span class=\"line\">      - ./logstash/logs:/usr/share/logstash/logs  # 日志持久化</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      - LS_JAVA_OPTS=-Xms512m -Xmx512m  # JVM 堆内存限制</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - &quot;5044:5044&quot;  # Beats 输入端口（如 Filebeat）</span><br><span class=\"line\">      - &quot;5000:5000/tcp&quot;  # TCP 输入</span><br><span class=\"line\">      - &quot;5000:5000/udp&quot;  # UDP 输入</span><br><span class=\"line\">    depends_on:</span><br><span class=\"line\">      - elasticsearch</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - elk</span><br><span class=\"line\">  kibana:</span><br><span class=\"line\">    image: registry.cn-hangzhou.aliyuncs.com/lky-deploy/kibana:7.14.0</span><br><span class=\"line\">    container_name: kibana</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      - I18N_LOCALE=zh-CN</span><br><span class=\"line\">      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200  # 指向 Elasticsearch 服务</span><br><span class=\"line\">      - ELASTICSEARCH_USERNAME=elastic  # 默认用户名</span><br><span class=\"line\">      - ELASTICSEARCH_PASSWORD=Ytest@123  # 与 Elasticsearch 密码一致</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - &quot;5601:5601&quot;  # Kibana Web 界面</span><br><span class=\"line\">    depends_on:</span><br><span class=\"line\">      - elasticsearch</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - elk</span><br><span class=\"line\">networks:</span><br><span class=\"line\">  elk:</span><br><span class=\"line\">    driver: bridge</span><br><span class=\"line\">EOF</span><br><span class=\"line\">mkdir ./logstash/config -p</span><br><span class=\"line\">cat &gt;&gt; ./logstash/config/logstash.conf &lt;&lt; EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">./logstash/config/logstash.conf</span></span><br><span class=\"line\">input &#123;</span><br><span class=\"line\">  tcp &#123;</span><br><span class=\"line\">    port =&gt; 5000  # 监听 TCP 日志</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  beats &#123;</span><br><span class=\"line\">    port =&gt; 5044  # 接收 Filebeat 输入</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">filter &#123;</span><br><span class=\"line\">  grok &#123;</span><br><span class=\"line\">    match =&gt; &#123; &quot;message&quot; =&gt; &quot;%&#123;COMBINEDAPACHELOG&#125;&quot; &#125;  # 解析 Apache 日志</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  date &#123;</span><br><span class=\"line\">    match =&gt; [ &quot;timestamp&quot;, &quot;dd/MMM/yyyy:HH:mm:ss Z&quot; ]  # 时间解析</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">output &#123;</span><br><span class=\"line\">  elasticsearch &#123;</span><br><span class=\"line\">    hosts =&gt; [&quot;elasticsearch:9200&quot;]</span><br><span class=\"line\">    user =&gt; &quot;elastic&quot;</span><br><span class=\"line\">    password =&gt; &quot;Ytest@123&quot;</span><br><span class=\"line\">    index =&gt; &quot;logs-%&#123;+YYYY.MM.dd&#125;&quot;  # 按日期创建索引</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\">chmod 777 elasticsearch/data</span><br></pre></td></tr></table></figure>\n<h1 id=\"filebeat\"><a href=\"#filebeat\" class=\"headerlink\" title=\"filebeat\"></a>filebeat</h1><p><strong>根据不同tag写入不同的logstash后续分割和输出建立索引好区分</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">filebeat.inputs: # filebeat input输入</span><br><span class=\"line\">- type: log    # 标准输入</span><br><span class=\"line\">  enabled: true  # 启用标准输入</span><br><span class=\"line\">  paths:</span><br><span class=\"line\">    - /var/log/*</span><br><span class=\"line\">  tags: [&quot;system&quot;]</span><br><span class=\"line\">  #  fields:</span><br><span class=\"line\">  #    type: &quot;system_log&quot;</span><br><span class=\"line\">- type: filestream</span><br><span class=\"line\">  paths:</span><br><span class=\"line\">    - &quot;/var/log/nginx/*.log&quot;</span><br><span class=\"line\">  tags: [&quot;nginx&quot;]   # 标记为 nginx 日志</span><br><span class=\"line\">#output.console:</span><br><span class=\"line\"># enabled: true               # 启用控制台输出</span><br><span class=\"line\">  #  pretty: true                # 美化 JSON 格式</span><br><span class=\"line\">  # codec.json:</span><br><span class=\"line\">  #   pretty: true</span><br><span class=\"line\">  # escape_html: false        # 不转义 HTML 符号（保持原始格式）</span><br><span class=\"line\"> </span><br><span class=\"line\"># 输出到 Logstash - 用于生产数据处理</span><br><span class=\"line\">output.logstash:</span><br><span class=\"line\">  enabled: true               # 启用 Logstash 输出</span><br><span class=\"line\">  #  when:</span><br><span class=\"line\">  #    equals:</span><br><span class=\"line\">  #      fields.type: &quot;system_log&quot;</span><br><span class=\"line\">  hosts: [&quot;127.0.0.1:5044&quot;]  # Logstash 的地址和端口（支持多个主机负载均衡）</span><br><span class=\"line\">  when.contains:</span><br><span class=\"line\">      tags: &quot;system&quot;  # 匹配 tags 包含 &quot;system&quot;</span><br><span class=\"line\">  hosts: [&quot;127.0.0.1:5045&quot;]</span><br><span class=\"line\">  enabled: true</span><br><span class=\"line\">  when.contains:</span><br><span class=\"line\">    tags: &quot;nginx&quot;  # 匹配 tags 包含 &quot;nginx&quot;</span><br></pre></td></tr></table></figure>\n<h1 id=\"logstash\"><a href=\"#logstash\" class=\"headerlink\" title=\"logstash\"></a>logstash</h1><p><strong>根据不同type进行过滤和输出索引</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Logstash Reference [7.10] | Elastic</span><br><span class=\"line\"></span><br><span class=\"line\">input &#123;</span><br><span class=\"line\">  tcp &#123;</span><br><span class=\"line\">    port =&gt; 5000  # 监听 TCP 日志</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  beats &#123;</span><br><span class=\"line\">    port =&gt; 5044  # 接收 Filebeat 输入</span><br><span class=\"line\">    type =&gt; &quot;system&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  beats &#123;</span><br><span class=\"line\">    port =&gt; 5045  # 接收 Filebeat 输入</span><br><span class=\"line\">    type =&gt; &quot;nginx&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\"> </span><br><span class=\"line\">filter &#123;</span><br><span class=\"line\">  date &#123;</span><br><span class=\"line\">    match =&gt; [ &quot;timestamp&quot;, &quot;dd/MMM/yyyy:HH:mm:ss Z&quot; ]  # 时间解析</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  if[type] == &quot;nginx&quot; &#123;</span><br><span class=\"line\">    grok &#123;</span><br><span class=\"line\">      match =&gt; &#123; &quot;message&quot; =&gt; &quot;%&#123;HTTPD_COMMONLOG&#125;&quot; &#125;  # 解析 nginx 日志,如果不区分；system类型是解析不了的，会直接报错</span><br><span class=\"line\">      remove_field =&gt; [&quot;@version&quot;]</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  #对于system类型可以再写个if来单独过滤</span><br><span class=\"line\">  if[type] == &quot;system&quot; &#123;</span><br><span class=\"line\">    grok &#123;</span><br><span class=\"line\">      match =&gt;  &#123;&quot;message&quot; =&gt; &quot;%&#123;IPV4:ip&#125;&quot;&#125;  </span><br><span class=\"line\">      remove_field =&gt; [&quot;@version&quot;]</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    mutate &#123;  #这里过滤器乱写的，需要根据自身的业务配置</span><br><span class=\"line\">        remove_field =&gt; [&quot;timestamp&quot;]</span><br><span class=\"line\">        gsub =&gt; [&quot;message&quot;,&quot;\\s&quot;,&quot;| &quot;]</span><br><span class=\"line\">        split =&gt; [&quot;message&quot;,&quot;|&quot;]</span><br><span class=\"line\">        replace =&gt; &#123; &quot;timenew&quot; =&gt;  &quot;%&#123;+yyyy-MM-dd&#125;&quot; &#125;</span><br><span class=\"line\">        add_field =&gt; &#123;</span><br><span class=\"line\">         &quot;year&quot; =&gt; &quot;%&#123;+yyyy&#125;&quot;</span><br><span class=\"line\">         &quot;month&quot; =&gt; &quot;%&#123;+MM&#125;&quot;</span><br><span class=\"line\">         &quot;day&quot; =&gt; &quot;%&#123;+dd&#125;&quot;</span><br><span class=\"line\">         &quot;status&quot; =&gt; &quot;%&#123;[message][1]&#125;&quot;</span><br><span class=\"line\">         &quot;code&quot; =&gt; &quot;%&#123;[message][2]&#125;&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#必须通过type指定不同输出创建不同的index =&gt;,否则index的字段不一样，当第一个index结构确定后，第二个输入无法输出到第一个index，因为字段不一样</span><br><span class=\"line\">output &#123;</span><br><span class=\"line\">  if &quot;system&quot; in [tags] &#123;</span><br><span class=\"line\">    elasticsearch &#123;</span><br><span class=\"line\">      hosts =&gt; [&quot;elasticsearch:9200&quot;]</span><br><span class=\"line\">      user =&gt; &quot;elastic&quot;</span><br><span class=\"line\">      password =&gt; &quot;Ytest@123&quot;</span><br><span class=\"line\">      index =&gt; &quot;filebeat-system-logs-%&#123;+YYYY.MM.dd&#125;&quot;  # 按日期创建索引</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">  if &quot;nginx&quot; in [tags] &#123;</span><br><span class=\"line\">    elasticsearch &#123;</span><br><span class=\"line\">      hosts =&gt; [&quot;elasticsearch:9200&quot;]</span><br><span class=\"line\">      user =&gt; &quot;elastic&quot;</span><br><span class=\"line\">      password =&gt; &quot;Ytest@123&quot;</span><br><span class=\"line\">      index =&gt; &quot;filebeat-nginx-logs-%&#123;+YYYY.MM.dd&#125;&quot;  # 按日期创建索引</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"elasticsearch\"><a href=\"#elasticsearch\" class=\"headerlink\" title=\"elasticsearch\"></a>elasticsearch</h1><blockquote>\n<p>常用语法</p>\n<blockquote>\n<p>&#x2F;_cat <br><br>&#x2F;_cat&#x2F;master?help<br><br>&#x2F;_cat&#x2F;indices?v  显示title<br><br>&#x2F;_cat&#x2F;indices<br><br>logs-2025.03.24 为索引名称<br><br>&#x2F;logs-2025.03.24&#x2F;_search 查看文档<br><br>&#x2F;logs-2025.03.24&#x2F; 查看索引结构<br><br>&#x2F;logs-2025.03.24&#x2F;_doc&#x2F;_search?q&#x3D;message:test</p>\n</blockquote>\n</blockquote>\n","excerpt":"","more":"<blockquote>\n<p>filebeat不建议容器启动，适合放到每个节点采集日志统一发给logstash；如果全部输出到elasticsearch会导致负载比较高；不建议每个节点用logstash采集因为比较重，filebeat比较轻量级</p>\n</blockquote>\n<h1 id=\"安装elfk\"><a href=\"#安装elfk\" class=\"headerlink\" title=\"安装elfk\"></a>安装elfk</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -SL https://github.com/docker/compose/releases/download/v2.30.3/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">将可执行权限赋予安装目标路径中的独立二进制文件</span></span><br><span class=\"line\">sudo chmod +x /usr/local/bin/docker-compose</span><br><span class=\"line\">sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose</span><br><span class=\"line\"></span><br><span class=\"line\">yum install -y https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-6.3.2-x86_64.rpm</span><br><span class=\"line\"></span><br><span class=\"line\">cat &gt;&gt; ./elk.yml &lt;&lt; EOF</span><br><span class=\"line\">version: &#x27;3.8&#x27;</span><br><span class=\"line\">services:</span><br><span class=\"line\">  elasticsearch:</span><br><span class=\"line\">    image: registry.cn-hangzhou.aliyuncs.com/lky-deploy/elasticsearch:7.14.0</span><br><span class=\"line\">    container_name: elasticsearch</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      - discovery.type=single-node  # 单节点模式</span><br><span class=\"line\">      - ES_JAVA_OPTS=-Xms512m -Xmx512m  # JVM 堆内存限制</span><br><span class=\"line\">      - ELASTIC_PASSWORD=Ytest@123  # 设置 Elasticsearch 密码</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - ./elasticsearch/data:/usr/share/elasticsearch/data  # 数据持久化</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">     - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml  <span class=\"comment\"># 自定义配置（可选）</span></span></span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - &quot;9200:9200&quot;  # REST API</span><br><span class=\"line\">      - &quot;9300:9300&quot;  # 集群通信</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - elk</span><br><span class=\"line\">  logstash:</span><br><span class=\"line\">    image: registry.cn-hangzhou.aliyuncs.com/lky-deploy/logstash:7.14.0</span><br><span class=\"line\">    container_name: logstash</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - ./logstash/config/logstash.conf:/usr/share/logstash/pipeline/logstash.conf  # 自定义 Logstash 管道配置</span><br><span class=\"line\">      - ./logstash/logs:/usr/share/logstash/logs  # 日志持久化</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      - LS_JAVA_OPTS=-Xms512m -Xmx512m  # JVM 堆内存限制</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - &quot;5044:5044&quot;  # Beats 输入端口（如 Filebeat）</span><br><span class=\"line\">      - &quot;5000:5000/tcp&quot;  # TCP 输入</span><br><span class=\"line\">      - &quot;5000:5000/udp&quot;  # UDP 输入</span><br><span class=\"line\">    depends_on:</span><br><span class=\"line\">      - elasticsearch</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - elk</span><br><span class=\"line\">  kibana:</span><br><span class=\"line\">    image: registry.cn-hangzhou.aliyuncs.com/lky-deploy/kibana:7.14.0</span><br><span class=\"line\">    container_name: kibana</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      - I18N_LOCALE=zh-CN</span><br><span class=\"line\">      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200  # 指向 Elasticsearch 服务</span><br><span class=\"line\">      - ELASTICSEARCH_USERNAME=elastic  # 默认用户名</span><br><span class=\"line\">      - ELASTICSEARCH_PASSWORD=Ytest@123  # 与 Elasticsearch 密码一致</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - &quot;5601:5601&quot;  # Kibana Web 界面</span><br><span class=\"line\">    depends_on:</span><br><span class=\"line\">      - elasticsearch</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - elk</span><br><span class=\"line\">networks:</span><br><span class=\"line\">  elk:</span><br><span class=\"line\">    driver: bridge</span><br><span class=\"line\">EOF</span><br><span class=\"line\">mkdir ./logstash/config -p</span><br><span class=\"line\">cat &gt;&gt; ./logstash/config/logstash.conf &lt;&lt; EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">./logstash/config/logstash.conf</span></span><br><span class=\"line\">input &#123;</span><br><span class=\"line\">  tcp &#123;</span><br><span class=\"line\">    port =&gt; 5000  # 监听 TCP 日志</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  beats &#123;</span><br><span class=\"line\">    port =&gt; 5044  # 接收 Filebeat 输入</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">filter &#123;</span><br><span class=\"line\">  grok &#123;</span><br><span class=\"line\">    match =&gt; &#123; &quot;message&quot; =&gt; &quot;%&#123;COMBINEDAPACHELOG&#125;&quot; &#125;  # 解析 Apache 日志</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  date &#123;</span><br><span class=\"line\">    match =&gt; [ &quot;timestamp&quot;, &quot;dd/MMM/yyyy:HH:mm:ss Z&quot; ]  # 时间解析</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">output &#123;</span><br><span class=\"line\">  elasticsearch &#123;</span><br><span class=\"line\">    hosts =&gt; [&quot;elasticsearch:9200&quot;]</span><br><span class=\"line\">    user =&gt; &quot;elastic&quot;</span><br><span class=\"line\">    password =&gt; &quot;Ytest@123&quot;</span><br><span class=\"line\">    index =&gt; &quot;logs-%&#123;+YYYY.MM.dd&#125;&quot;  # 按日期创建索引</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\">chmod 777 elasticsearch/data</span><br></pre></td></tr></table></figure>\n<h1 id=\"filebeat\"><a href=\"#filebeat\" class=\"headerlink\" title=\"filebeat\"></a>filebeat</h1><p><strong>根据不同tag写入不同的logstash后续分割和输出建立索引好区分</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">filebeat.inputs: # filebeat input输入</span><br><span class=\"line\">- type: log    # 标准输入</span><br><span class=\"line\">  enabled: true  # 启用标准输入</span><br><span class=\"line\">  paths:</span><br><span class=\"line\">    - /var/log/*</span><br><span class=\"line\">  tags: [&quot;system&quot;]</span><br><span class=\"line\">  #  fields:</span><br><span class=\"line\">  #    type: &quot;system_log&quot;</span><br><span class=\"line\">- type: filestream</span><br><span class=\"line\">  paths:</span><br><span class=\"line\">    - &quot;/var/log/nginx/*.log&quot;</span><br><span class=\"line\">  tags: [&quot;nginx&quot;]   # 标记为 nginx 日志</span><br><span class=\"line\">#output.console:</span><br><span class=\"line\"># enabled: true               # 启用控制台输出</span><br><span class=\"line\">  #  pretty: true                # 美化 JSON 格式</span><br><span class=\"line\">  # codec.json:</span><br><span class=\"line\">  #   pretty: true</span><br><span class=\"line\">  # escape_html: false        # 不转义 HTML 符号（保持原始格式）</span><br><span class=\"line\"> </span><br><span class=\"line\"># 输出到 Logstash - 用于生产数据处理</span><br><span class=\"line\">output.logstash:</span><br><span class=\"line\">  enabled: true               # 启用 Logstash 输出</span><br><span class=\"line\">  #  when:</span><br><span class=\"line\">  #    equals:</span><br><span class=\"line\">  #      fields.type: &quot;system_log&quot;</span><br><span class=\"line\">  hosts: [&quot;127.0.0.1:5044&quot;]  # Logstash 的地址和端口（支持多个主机负载均衡）</span><br><span class=\"line\">  when.contains:</span><br><span class=\"line\">      tags: &quot;system&quot;  # 匹配 tags 包含 &quot;system&quot;</span><br><span class=\"line\">  hosts: [&quot;127.0.0.1:5045&quot;]</span><br><span class=\"line\">  enabled: true</span><br><span class=\"line\">  when.contains:</span><br><span class=\"line\">    tags: &quot;nginx&quot;  # 匹配 tags 包含 &quot;nginx&quot;</span><br></pre></td></tr></table></figure>\n<h1 id=\"logstash\"><a href=\"#logstash\" class=\"headerlink\" title=\"logstash\"></a>logstash</h1><p><strong>根据不同type进行过滤和输出索引</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Logstash Reference [7.10] | Elastic</span><br><span class=\"line\"></span><br><span class=\"line\">input &#123;</span><br><span class=\"line\">  tcp &#123;</span><br><span class=\"line\">    port =&gt; 5000  # 监听 TCP 日志</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  beats &#123;</span><br><span class=\"line\">    port =&gt; 5044  # 接收 Filebeat 输入</span><br><span class=\"line\">    type =&gt; &quot;system&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  beats &#123;</span><br><span class=\"line\">    port =&gt; 5045  # 接收 Filebeat 输入</span><br><span class=\"line\">    type =&gt; &quot;nginx&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\"> </span><br><span class=\"line\">filter &#123;</span><br><span class=\"line\">  date &#123;</span><br><span class=\"line\">    match =&gt; [ &quot;timestamp&quot;, &quot;dd/MMM/yyyy:HH:mm:ss Z&quot; ]  # 时间解析</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  if[type] == &quot;nginx&quot; &#123;</span><br><span class=\"line\">    grok &#123;</span><br><span class=\"line\">      match =&gt; &#123; &quot;message&quot; =&gt; &quot;%&#123;HTTPD_COMMONLOG&#125;&quot; &#125;  # 解析 nginx 日志,如果不区分；system类型是解析不了的，会直接报错</span><br><span class=\"line\">      remove_field =&gt; [&quot;@version&quot;]</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  #对于system类型可以再写个if来单独过滤</span><br><span class=\"line\">  if[type] == &quot;system&quot; &#123;</span><br><span class=\"line\">    grok &#123;</span><br><span class=\"line\">      match =&gt;  &#123;&quot;message&quot; =&gt; &quot;%&#123;IPV4:ip&#125;&quot;&#125;  </span><br><span class=\"line\">      remove_field =&gt; [&quot;@version&quot;]</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    mutate &#123;  #这里过滤器乱写的，需要根据自身的业务配置</span><br><span class=\"line\">        remove_field =&gt; [&quot;timestamp&quot;]</span><br><span class=\"line\">        gsub =&gt; [&quot;message&quot;,&quot;\\s&quot;,&quot;| &quot;]</span><br><span class=\"line\">        split =&gt; [&quot;message&quot;,&quot;|&quot;]</span><br><span class=\"line\">        replace =&gt; &#123; &quot;timenew&quot; =&gt;  &quot;%&#123;+yyyy-MM-dd&#125;&quot; &#125;</span><br><span class=\"line\">        add_field =&gt; &#123;</span><br><span class=\"line\">         &quot;year&quot; =&gt; &quot;%&#123;+yyyy&#125;&quot;</span><br><span class=\"line\">         &quot;month&quot; =&gt; &quot;%&#123;+MM&#125;&quot;</span><br><span class=\"line\">         &quot;day&quot; =&gt; &quot;%&#123;+dd&#125;&quot;</span><br><span class=\"line\">         &quot;status&quot; =&gt; &quot;%&#123;[message][1]&#125;&quot;</span><br><span class=\"line\">         &quot;code&quot; =&gt; &quot;%&#123;[message][2]&#125;&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#必须通过type指定不同输出创建不同的index =&gt;,否则index的字段不一样，当第一个index结构确定后，第二个输入无法输出到第一个index，因为字段不一样</span><br><span class=\"line\">output &#123;</span><br><span class=\"line\">  if &quot;system&quot; in [tags] &#123;</span><br><span class=\"line\">    elasticsearch &#123;</span><br><span class=\"line\">      hosts =&gt; [&quot;elasticsearch:9200&quot;]</span><br><span class=\"line\">      user =&gt; &quot;elastic&quot;</span><br><span class=\"line\">      password =&gt; &quot;Ytest@123&quot;</span><br><span class=\"line\">      index =&gt; &quot;filebeat-system-logs-%&#123;+YYYY.MM.dd&#125;&quot;  # 按日期创建索引</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">  if &quot;nginx&quot; in [tags] &#123;</span><br><span class=\"line\">    elasticsearch &#123;</span><br><span class=\"line\">      hosts =&gt; [&quot;elasticsearch:9200&quot;]</span><br><span class=\"line\">      user =&gt; &quot;elastic&quot;</span><br><span class=\"line\">      password =&gt; &quot;Ytest@123&quot;</span><br><span class=\"line\">      index =&gt; &quot;filebeat-nginx-logs-%&#123;+YYYY.MM.dd&#125;&quot;  # 按日期创建索引</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"elasticsearch\"><a href=\"#elasticsearch\" class=\"headerlink\" title=\"elasticsearch\"></a>elasticsearch</h1><blockquote>\n<p>常用语法</p>\n<blockquote>\n<p>&#x2F;_cat <br><br>&#x2F;_cat&#x2F;master?help<br><br>&#x2F;_cat&#x2F;indices?v  显示title<br><br>&#x2F;_cat&#x2F;indices<br><br>logs-2025.03.24 为索引名称<br><br>&#x2F;logs-2025.03.24&#x2F;_search 查看文档<br><br>&#x2F;logs-2025.03.24&#x2F; 查看索引结构<br><br>&#x2F;logs-2025.03.24&#x2F;_doc&#x2F;_search?q&#x3D;message:test</p>\n</blockquote>\n</blockquote>\n"},{"title":"ftp","date":"2025-07-25T07:43:41.000Z","_content":"# 主动模式\nPORT中文称为主动模式，工作的原理： FTP客户端连接到FTP服务器的21端口，发送用户名和密码登录，登录成功后要list列表或者读取数据时，客户端随机开放一个端口（1024以上），发送 PORT命令到FTP服务器，告诉服务器客户端采用主动模式并开放端口；FTP服务器收到PORT主动模式命令和端口号后，通过服务器的20端口和客户端开放的端口连接，发送数据，原理如下图\n![alt text](image.png)\n\n# 被动模式\nPASV是Passive的缩写，中文成为被动模式，工作原理：FTP客户端连接到FTP服务器的21端口，发送用户名和密码登录，登录成功后要list列表或者读取数据时，发送PASV命令到FTP服务器， 服务器在本地随机开放一个端口（1024以上），然后把开放的端口告诉客户端， 客户端再连接到服务器开放的端口进行数据传输，原理如下图\n![alt text](image-1.png)\n\n从上面的运行原来看到，主动模式和被动模式的不同简单概述为： 主动模式传送数据时是“服务器”连接到“客户端”的端口；被动模式传送数据是“客户端”连接到“服务器”的端口。\n主动模式需要客户端必须开放端口给服务器，很多客户端都是在防火墙内，开放端口给FTP服务器访问比较困难。\n被动模式只需要服务器端开放端口给客户端连接就行了,所以推荐被动模式，主动模式可能会被客户端拦截\n","source":"_posts/ftp.md","raw":"---\ntitle: ftp\ndate: 2025-07-25 15:43:41\ntags:\ncategories: linux\n---\n# 主动模式\nPORT中文称为主动模式，工作的原理： FTP客户端连接到FTP服务器的21端口，发送用户名和密码登录，登录成功后要list列表或者读取数据时，客户端随机开放一个端口（1024以上），发送 PORT命令到FTP服务器，告诉服务器客户端采用主动模式并开放端口；FTP服务器收到PORT主动模式命令和端口号后，通过服务器的20端口和客户端开放的端口连接，发送数据，原理如下图\n![alt text](image.png)\n\n# 被动模式\nPASV是Passive的缩写，中文成为被动模式，工作原理：FTP客户端连接到FTP服务器的21端口，发送用户名和密码登录，登录成功后要list列表或者读取数据时，发送PASV命令到FTP服务器， 服务器在本地随机开放一个端口（1024以上），然后把开放的端口告诉客户端， 客户端再连接到服务器开放的端口进行数据传输，原理如下图\n![alt text](image-1.png)\n\n从上面的运行原来看到，主动模式和被动模式的不同简单概述为： 主动模式传送数据时是“服务器”连接到“客户端”的端口；被动模式传送数据是“客户端”连接到“服务器”的端口。\n主动模式需要客户端必须开放端口给服务器，很多客户端都是在防火墙内，开放端口给FTP服务器访问比较困难。\n被动模式只需要服务器端开放端口给客户端连接就行了,所以推荐被动模式，主动模式可能会被客户端拦截\n","slug":"ftp","published":1,"updated":"2025-07-30T08:38:33.286Z","comments":1,"layout":"post","photos":[],"_id":"cmdppvvvm0006lpodbv1z61jd","content":"<h1 id=\"主动模式\"><a href=\"#主动模式\" class=\"headerlink\" title=\"主动模式\"></a>主动模式</h1><p>PORT中文称为主动模式，工作的原理： FTP客户端连接到FTP服务器的21端口，发送用户名和密码登录，登录成功后要list列表或者读取数据时，客户端随机开放一个端口（1024以上），发送 PORT命令到FTP服务器，告诉服务器客户端采用主动模式并开放端口；FTP服务器收到PORT主动模式命令和端口号后，通过服务器的20端口和客户端开放的端口连接，发送数据，原理如下图<br><img src=\"/2025/07/25/ftp/image.png\" alt=\"alt text\"></p>\n<h1 id=\"被动模式\"><a href=\"#被动模式\" class=\"headerlink\" title=\"被动模式\"></a>被动模式</h1><p>PASV是Passive的缩写，中文成为被动模式，工作原理：FTP客户端连接到FTP服务器的21端口，发送用户名和密码登录，登录成功后要list列表或者读取数据时，发送PASV命令到FTP服务器， 服务器在本地随机开放一个端口（1024以上），然后把开放的端口告诉客户端， 客户端再连接到服务器开放的端口进行数据传输，原理如下图<br><img src=\"/2025/07/25/ftp/image-1.png\" alt=\"alt text\"></p>\n<p>从上面的运行原来看到，主动模式和被动模式的不同简单概述为： 主动模式传送数据时是“服务器”连接到“客户端”的端口；被动模式传送数据是“客户端”连接到“服务器”的端口。<br>主动模式需要客户端必须开放端口给服务器，很多客户端都是在防火墙内，开放端口给FTP服务器访问比较困难。<br>被动模式只需要服务器端开放端口给客户端连接就行了,所以推荐被动模式，主动模式可能会被客户端拦截</p>\n","excerpt":"","more":"<h1 id=\"主动模式\"><a href=\"#主动模式\" class=\"headerlink\" title=\"主动模式\"></a>主动模式</h1><p>PORT中文称为主动模式，工作的原理： FTP客户端连接到FTP服务器的21端口，发送用户名和密码登录，登录成功后要list列表或者读取数据时，客户端随机开放一个端口（1024以上），发送 PORT命令到FTP服务器，告诉服务器客户端采用主动模式并开放端口；FTP服务器收到PORT主动模式命令和端口号后，通过服务器的20端口和客户端开放的端口连接，发送数据，原理如下图<br><img src=\"/2025/07/25/ftp/image.png\" alt=\"alt text\"></p>\n<h1 id=\"被动模式\"><a href=\"#被动模式\" class=\"headerlink\" title=\"被动模式\"></a>被动模式</h1><p>PASV是Passive的缩写，中文成为被动模式，工作原理：FTP客户端连接到FTP服务器的21端口，发送用户名和密码登录，登录成功后要list列表或者读取数据时，发送PASV命令到FTP服务器， 服务器在本地随机开放一个端口（1024以上），然后把开放的端口告诉客户端， 客户端再连接到服务器开放的端口进行数据传输，原理如下图<br><img src=\"/2025/07/25/ftp/image-1.png\" alt=\"alt text\"></p>\n<p>从上面的运行原来看到，主动模式和被动模式的不同简单概述为： 主动模式传送数据时是“服务器”连接到“客户端”的端口；被动模式传送数据是“客户端”连接到“服务器”的端口。<br>主动模式需要客户端必须开放端口给服务器，很多客户端都是在防火墙内，开放端口给FTP服务器访问比较困难。<br>被动模式只需要服务器端开放端口给客户端连接就行了,所以推荐被动模式，主动模式可能会被客户端拦截</p>\n"},{"title":"iptables防止ddos(cc)","date":"2025-04-21T11:17:48.000Z","_content":"> 基本上发行版都是自带的，轻量级，不需要额外下载\nFail2Ban也可以但是需要额外下载\n\n# 如何配置使用\n```shell\niptables -I INPUT -p tcp --dport 80 -m state --state NEW -m recent --set\n\n参数    作用\n-I INPUT    将规则插入到 INPUT 链的最前面\n-p tcp --dport 80    匹配目标端口为 80 的 TCP 流量\n-m state --state NEW    仅匹配 新建连接（如 TCP 的 SYN 包）\n-m recent --set    将来源 IP 记录到 recent 模块的默认列表（/proc/net/xt_recent/DEFAULT）\n\niptables -I INPUT -p tcp --dport 80 -m state --state NEW -m recent --update --seconds 60 --hitcount 100 -j DROP\n\n参数    作用\n-m recent --update --seconds 60 --hitcount 100    检查 IP 在 60 秒内是否发起超过 100 次新连接\n-j DROP    若超限，直接丢弃数据包\n```\n\n## 效果图，到指定次数自动丢弃数据包，端口不通，到达指定时间自动恢复\n\n![alt text](image.png)\n![alt text](image-1.png)\n\n\n\n## 经过测试 --hitcount 大于20 会报错\n![alt text](image-2.png)\n\n### 解决办法 \n```shell\necho options xt_recent ip_pkt_list_tot=200 > /etc/modprobe.d/xt.conf\n\nmodprobe -r xt_recent && modprobe xt_recent 重新加载\n\n查看 lsmod |grep xt  ；cat /sys/module/xt_recent/parameters/ip_pkt_list_tot 对应 xt.conf\n```\n# 额外补充\n\n若其他规则也使用 recent 默认列表，可能导致误判，可以通过--name 指定名称分类\n\niptables -I INPUT -p tcp --dport 80 -m state --state NEW -m recent --set --name HTTP_CC\n\niptables -I INPUT -p tcp --dport 80 -m state --state NEW -m recent --update --seconds 60 --hitcount 200 --name HTTP_CC -j DROP\n\n则 /proc/net/xt_recent/HTTP_CC 叫 HTTP_CC\n\n","source":"_posts/iptables防止ddos-cc.md","raw":"---\ntitle: iptables防止ddos(cc)\ndate: 2025-04-21 19:17:48\ntags:\ncategories: linux\n---\n> 基本上发行版都是自带的，轻量级，不需要额外下载\nFail2Ban也可以但是需要额外下载\n\n# 如何配置使用\n```shell\niptables -I INPUT -p tcp --dport 80 -m state --state NEW -m recent --set\n\n参数    作用\n-I INPUT    将规则插入到 INPUT 链的最前面\n-p tcp --dport 80    匹配目标端口为 80 的 TCP 流量\n-m state --state NEW    仅匹配 新建连接（如 TCP 的 SYN 包）\n-m recent --set    将来源 IP 记录到 recent 模块的默认列表（/proc/net/xt_recent/DEFAULT）\n\niptables -I INPUT -p tcp --dport 80 -m state --state NEW -m recent --update --seconds 60 --hitcount 100 -j DROP\n\n参数    作用\n-m recent --update --seconds 60 --hitcount 100    检查 IP 在 60 秒内是否发起超过 100 次新连接\n-j DROP    若超限，直接丢弃数据包\n```\n\n## 效果图，到指定次数自动丢弃数据包，端口不通，到达指定时间自动恢复\n\n![alt text](image.png)\n![alt text](image-1.png)\n\n\n\n## 经过测试 --hitcount 大于20 会报错\n![alt text](image-2.png)\n\n### 解决办法 \n```shell\necho options xt_recent ip_pkt_list_tot=200 > /etc/modprobe.d/xt.conf\n\nmodprobe -r xt_recent && modprobe xt_recent 重新加载\n\n查看 lsmod |grep xt  ；cat /sys/module/xt_recent/parameters/ip_pkt_list_tot 对应 xt.conf\n```\n# 额外补充\n\n若其他规则也使用 recent 默认列表，可能导致误判，可以通过--name 指定名称分类\n\niptables -I INPUT -p tcp --dport 80 -m state --state NEW -m recent --set --name HTTP_CC\n\niptables -I INPUT -p tcp --dport 80 -m state --state NEW -m recent --update --seconds 60 --hitcount 200 --name HTTP_CC -j DROP\n\n则 /proc/net/xt_recent/HTTP_CC 叫 HTTP_CC\n\n","slug":"iptables防止ddos-cc","published":1,"updated":"2025-07-30T08:38:33.289Z","comments":1,"layout":"post","photos":[],"_id":"cmdppvvvn0008lpod0qp2aerk","content":"<blockquote>\n<p>基本上发行版都是自带的，轻量级，不需要额外下载<br>Fail2Ban也可以但是需要额外下载</p>\n</blockquote>\n<h1 id=\"如何配置使用\"><a href=\"#如何配置使用\" class=\"headerlink\" title=\"如何配置使用\"></a>如何配置使用</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -I INPUT -p tcp --dport 80 -m state --state NEW -m recent --set</span><br><span class=\"line\"></span><br><span class=\"line\">参数    作用</span><br><span class=\"line\">-I INPUT    将规则插入到 INPUT 链的最前面</span><br><span class=\"line\">-p tcp --dport 80    匹配目标端口为 80 的 TCP 流量</span><br><span class=\"line\">-m state --state NEW    仅匹配 新建连接（如 TCP 的 SYN 包）</span><br><span class=\"line\">-m recent --set    将来源 IP 记录到 recent 模块的默认列表（/proc/net/xt_recent/DEFAULT）</span><br><span class=\"line\"></span><br><span class=\"line\">iptables -I INPUT -p tcp --dport 80 -m state --state NEW -m recent --update --seconds 60 --hitcount 100 -j DROP</span><br><span class=\"line\"></span><br><span class=\"line\">参数    作用</span><br><span class=\"line\">-m recent --update --seconds 60 --hitcount 100    检查 IP 在 60 秒内是否发起超过 100 次新连接</span><br><span class=\"line\">-j DROP    若超限，直接丢弃数据包</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"效果图，到指定次数自动丢弃数据包，端口不通，到达指定时间自动恢复\"><a href=\"#效果图，到指定次数自动丢弃数据包，端口不通，到达指定时间自动恢复\" class=\"headerlink\" title=\"效果图，到指定次数自动丢弃数据包，端口不通，到达指定时间自动恢复\"></a>效果图，到指定次数自动丢弃数据包，端口不通，到达指定时间自动恢复</h2><p><img src=\"/2025/04/21/iptables%E9%98%B2%E6%AD%A2ddos-cc/image.png\" alt=\"alt text\"><br><img src=\"/2025/04/21/iptables%E9%98%B2%E6%AD%A2ddos-cc/image-1.png\" alt=\"alt text\"></p>\n<h2 id=\"经过测试-–hitcount-大于20-会报错\"><a href=\"#经过测试-–hitcount-大于20-会报错\" class=\"headerlink\" title=\"经过测试 –hitcount 大于20 会报错\"></a>经过测试 –hitcount 大于20 会报错</h2><p><img src=\"/2025/04/21/iptables%E9%98%B2%E6%AD%A2ddos-cc/image-2.png\" alt=\"alt text\"></p>\n<h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo options xt_recent ip_pkt_list_tot=200 &gt; /etc/modprobe.d/xt.conf</span><br><span class=\"line\"></span><br><span class=\"line\">modprobe -r xt_recent &amp;&amp; modprobe xt_recent 重新加载</span><br><span class=\"line\"></span><br><span class=\"line\">查看 lsmod |grep xt  ；cat /sys/module/xt_recent/parameters/ip_pkt_list_tot 对应 xt.conf</span><br></pre></td></tr></table></figure>\n<h1 id=\"额外补充\"><a href=\"#额外补充\" class=\"headerlink\" title=\"额外补充\"></a>额外补充</h1><p>若其他规则也使用 recent 默认列表，可能导致误判，可以通过–name 指定名称分类</p>\n<p>iptables -I INPUT -p tcp –dport 80 -m state –state NEW -m recent –set –name HTTP_CC</p>\n<p>iptables -I INPUT -p tcp –dport 80 -m state –state NEW -m recent –update –seconds 60 –hitcount 200 –name HTTP_CC -j DROP</p>\n<p>则 &#x2F;proc&#x2F;net&#x2F;xt_recent&#x2F;HTTP_CC 叫 HTTP_CC</p>\n","excerpt":"","more":"<blockquote>\n<p>基本上发行版都是自带的，轻量级，不需要额外下载<br>Fail2Ban也可以但是需要额外下载</p>\n</blockquote>\n<h1 id=\"如何配置使用\"><a href=\"#如何配置使用\" class=\"headerlink\" title=\"如何配置使用\"></a>如何配置使用</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -I INPUT -p tcp --dport 80 -m state --state NEW -m recent --set</span><br><span class=\"line\"></span><br><span class=\"line\">参数    作用</span><br><span class=\"line\">-I INPUT    将规则插入到 INPUT 链的最前面</span><br><span class=\"line\">-p tcp --dport 80    匹配目标端口为 80 的 TCP 流量</span><br><span class=\"line\">-m state --state NEW    仅匹配 新建连接（如 TCP 的 SYN 包）</span><br><span class=\"line\">-m recent --set    将来源 IP 记录到 recent 模块的默认列表（/proc/net/xt_recent/DEFAULT）</span><br><span class=\"line\"></span><br><span class=\"line\">iptables -I INPUT -p tcp --dport 80 -m state --state NEW -m recent --update --seconds 60 --hitcount 100 -j DROP</span><br><span class=\"line\"></span><br><span class=\"line\">参数    作用</span><br><span class=\"line\">-m recent --update --seconds 60 --hitcount 100    检查 IP 在 60 秒内是否发起超过 100 次新连接</span><br><span class=\"line\">-j DROP    若超限，直接丢弃数据包</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"效果图，到指定次数自动丢弃数据包，端口不通，到达指定时间自动恢复\"><a href=\"#效果图，到指定次数自动丢弃数据包，端口不通，到达指定时间自动恢复\" class=\"headerlink\" title=\"效果图，到指定次数自动丢弃数据包，端口不通，到达指定时间自动恢复\"></a>效果图，到指定次数自动丢弃数据包，端口不通，到达指定时间自动恢复</h2><p><img src=\"/2025/04/21/iptables%E9%98%B2%E6%AD%A2ddos-cc/image.png\" alt=\"alt text\"><br><img src=\"/2025/04/21/iptables%E9%98%B2%E6%AD%A2ddos-cc/image-1.png\" alt=\"alt text\"></p>\n<h2 id=\"经过测试-–hitcount-大于20-会报错\"><a href=\"#经过测试-–hitcount-大于20-会报错\" class=\"headerlink\" title=\"经过测试 –hitcount 大于20 会报错\"></a>经过测试 –hitcount 大于20 会报错</h2><p><img src=\"/2025/04/21/iptables%E9%98%B2%E6%AD%A2ddos-cc/image-2.png\" alt=\"alt text\"></p>\n<h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo options xt_recent ip_pkt_list_tot=200 &gt; /etc/modprobe.d/xt.conf</span><br><span class=\"line\"></span><br><span class=\"line\">modprobe -r xt_recent &amp;&amp; modprobe xt_recent 重新加载</span><br><span class=\"line\"></span><br><span class=\"line\">查看 lsmod |grep xt  ；cat /sys/module/xt_recent/parameters/ip_pkt_list_tot 对应 xt.conf</span><br></pre></td></tr></table></figure>\n<h1 id=\"额外补充\"><a href=\"#额外补充\" class=\"headerlink\" title=\"额外补充\"></a>额外补充</h1><p>若其他规则也使用 recent 默认列表，可能导致误判，可以通过–name 指定名称分类</p>\n<p>iptables -I INPUT -p tcp –dport 80 -m state –state NEW -m recent –set –name HTTP_CC</p>\n<p>iptables -I INPUT -p tcp –dport 80 -m state –state NEW -m recent –update –seconds 60 –hitcount 200 –name HTTP_CC -j DROP</p>\n<p>则 &#x2F;proc&#x2F;net&#x2F;xt_recent&#x2F;HTTP_CC 叫 HTTP_CC</p>\n"},{"title":"kubeclt-neat","date":"2025-07-24T06:23:29.000Z","_content":"# kubeclt-neat使用\n* 如果部署的yaml丢失，可以使用kubeclt-neat精简后直接使用导入新的环境，默认的文件有多余的信息是不能直接使用的\n```shell\nyum -y install bash-completion\nsource /usr/share/bash-completion/bash_completion\nsource <(kubectl completion bash)\necho \"source <(kubectl completion bash)\" >> ~/.bashrc\nwget https://github.com/itaysk/kubectl-neat/releases/download/v2.0.3/kubectl-neat_linux_amd64.tar.gz\ntar -zxvf kubectl-neat_linux_amd64.tar.gz\nmv kubectl-neat /usr/local/bin/\nkubectl get deploy my-deployment -o yaml | kubectl neat > current-config.yaml\nkubectl apply -f current-config.yaml\ndiff current-config.yaml new-config.yaml\n```\n","source":"_posts/kubeclt-neat.md","raw":"---\ntitle: kubeclt-neat\ndate: 2025-07-24 14:23:29\ntags:\ncategories: k8s\n---\n# kubeclt-neat使用\n* 如果部署的yaml丢失，可以使用kubeclt-neat精简后直接使用导入新的环境，默认的文件有多余的信息是不能直接使用的\n```shell\nyum -y install bash-completion\nsource /usr/share/bash-completion/bash_completion\nsource <(kubectl completion bash)\necho \"source <(kubectl completion bash)\" >> ~/.bashrc\nwget https://github.com/itaysk/kubectl-neat/releases/download/v2.0.3/kubectl-neat_linux_amd64.tar.gz\ntar -zxvf kubectl-neat_linux_amd64.tar.gz\nmv kubectl-neat /usr/local/bin/\nkubectl get deploy my-deployment -o yaml | kubectl neat > current-config.yaml\nkubectl apply -f current-config.yaml\ndiff current-config.yaml new-config.yaml\n```\n","slug":"kubeclt-neat","published":1,"updated":"2025-07-30T08:38:33.299Z","comments":1,"layout":"post","photos":[],"_id":"cmdppvvvo0009lpod36389tz6","content":"<h1 id=\"kubeclt-neat使用\"><a href=\"#kubeclt-neat使用\" class=\"headerlink\" title=\"kubeclt-neat使用\"></a>kubeclt-neat使用</h1><ul>\n<li>如果部署的yaml丢失，可以使用kubeclt-neat精简后直接使用导入新的环境，默认的文件有多余的信息是不能直接使用的<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install bash-completion</span><br><span class=\"line\">source /usr/share/bash-completion/bash_completion</span><br><span class=\"line\">source &lt;(kubectl completion bash)</span><br><span class=\"line\">echo &quot;source &lt;(kubectl completion bash)&quot; &gt;&gt; ~/.bashrc</span><br><span class=\"line\">wget https://github.com/itaysk/kubectl-neat/releases/download/v2.0.3/kubectl-neat_linux_amd64.tar.gz</span><br><span class=\"line\">tar -zxvf kubectl-neat_linux_amd64.tar.gz</span><br><span class=\"line\">mv kubectl-neat /usr/local/bin/</span><br><span class=\"line\">kubectl get deploy my-deployment -o yaml | kubectl neat &gt; current-config.yaml</span><br><span class=\"line\">kubectl apply -f current-config.yaml</span><br><span class=\"line\">diff current-config.yaml new-config.yaml</span><br></pre></td></tr></table></figure></li>\n</ul>\n","excerpt":"","more":"<h1 id=\"kubeclt-neat使用\"><a href=\"#kubeclt-neat使用\" class=\"headerlink\" title=\"kubeclt-neat使用\"></a>kubeclt-neat使用</h1><ul>\n<li>如果部署的yaml丢失，可以使用kubeclt-neat精简后直接使用导入新的环境，默认的文件有多余的信息是不能直接使用的<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install bash-completion</span><br><span class=\"line\">source /usr/share/bash-completion/bash_completion</span><br><span class=\"line\">source &lt;(kubectl completion bash)</span><br><span class=\"line\">echo &quot;source &lt;(kubectl completion bash)&quot; &gt;&gt; ~/.bashrc</span><br><span class=\"line\">wget https://github.com/itaysk/kubectl-neat/releases/download/v2.0.3/kubectl-neat_linux_amd64.tar.gz</span><br><span class=\"line\">tar -zxvf kubectl-neat_linux_amd64.tar.gz</span><br><span class=\"line\">mv kubectl-neat /usr/local/bin/</span><br><span class=\"line\">kubectl get deploy my-deployment -o yaml | kubectl neat &gt; current-config.yaml</span><br><span class=\"line\">kubectl apply -f current-config.yaml</span><br><span class=\"line\">diff current-config.yaml new-config.yaml</span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"miniconda3","date":"2025-04-21T10:40:55.000Z","_content":"> conda是一个包和环境管理工具，用于创建、管理和切换Python的虚拟环境\n\n# 安装\n```shell\nmkdir -p ~/miniconda3\nwget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda3/miniconda.sh\nbash ~/miniconda3/miniconda.sh -b -u -p ~/miniconda3\nrm ~/miniconda3/miniconda.sh\nsource ~/miniconda3/bin/activate\n```\n# 使用\n```shell\n1. conda --version #查看conda版本，验证是否安装\n2. conda update conda #更新至最新版本，也会更新其它相关包\n3. conda update --all #更新所有包\n4. conda update package_name #更新指定的包\n5. conda create -n env_name package_name #创建名为env_name的新环境，并在该环境下安装名为package_name 的包，可以指定新环境的版本号，例如：conda create -n python2 python=python2.7 numpy pandas，创建了python2环境，python版本为2.7，同时还安装了numpy pandas包\n6. source activate env_name #切换至env_name环境\n7. source deactivate #退出环境\n8. conda info -e #显示所有已经创建的环境\n9. conda create --name new_env_name --clone old_env_name #复制old_env_name为new_env_name\n10. conda remove --name env_name –all #删除环境\n11. conda list #查看所有已经安装的包\n12. conda install package_name #在当前环境中安装包\n13. conda install --name env_name package_name #在指定环境中安装包\n14. conda remove -- name env_name package #删除指定环境中的包\n15. conda remove package #删除当前环境中的包\n16. conda env remove -n env_name #采用第10条的方法删除环境失败时，可采用这种方法\n```\n\n\n\n两个环境，一个有request一个没有，隔离作用\n\n\n# 镜像源\n```shell\n# 查看镜像源\nconda config --show-sources\n# 添加镜像源\nconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/\nconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main\n# 从镜像源中安装包时显示来源\nconda config --set show_channel_urls yes\n# 删除镜像源\nconda config --remove channels https://XXX\n# 删除配置的镜像源，使用默认镜像源\nconda config --remove-key channels\n```\n\n# 打包运行环境\n```shell\npip install conda-pack\nconda pack -n my_env_name -o out_name.tar.gz\ntar -zxvf 2.7.tar.gz -C 2.7\nconda info -e\nsource activate my_env_name\n```\n\n","source":"_posts/miniconda3.md","raw":"---\ntitle: miniconda3\ndate: 2025-04-21 18:40:55\ntags:\ncategories: python\n---\n> conda是一个包和环境管理工具，用于创建、管理和切换Python的虚拟环境\n\n# 安装\n```shell\nmkdir -p ~/miniconda3\nwget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda3/miniconda.sh\nbash ~/miniconda3/miniconda.sh -b -u -p ~/miniconda3\nrm ~/miniconda3/miniconda.sh\nsource ~/miniconda3/bin/activate\n```\n# 使用\n```shell\n1. conda --version #查看conda版本，验证是否安装\n2. conda update conda #更新至最新版本，也会更新其它相关包\n3. conda update --all #更新所有包\n4. conda update package_name #更新指定的包\n5. conda create -n env_name package_name #创建名为env_name的新环境，并在该环境下安装名为package_name 的包，可以指定新环境的版本号，例如：conda create -n python2 python=python2.7 numpy pandas，创建了python2环境，python版本为2.7，同时还安装了numpy pandas包\n6. source activate env_name #切换至env_name环境\n7. source deactivate #退出环境\n8. conda info -e #显示所有已经创建的环境\n9. conda create --name new_env_name --clone old_env_name #复制old_env_name为new_env_name\n10. conda remove --name env_name –all #删除环境\n11. conda list #查看所有已经安装的包\n12. conda install package_name #在当前环境中安装包\n13. conda install --name env_name package_name #在指定环境中安装包\n14. conda remove -- name env_name package #删除指定环境中的包\n15. conda remove package #删除当前环境中的包\n16. conda env remove -n env_name #采用第10条的方法删除环境失败时，可采用这种方法\n```\n\n\n\n两个环境，一个有request一个没有，隔离作用\n\n\n# 镜像源\n```shell\n# 查看镜像源\nconda config --show-sources\n# 添加镜像源\nconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/\nconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main\n# 从镜像源中安装包时显示来源\nconda config --set show_channel_urls yes\n# 删除镜像源\nconda config --remove channels https://XXX\n# 删除配置的镜像源，使用默认镜像源\nconda config --remove-key channels\n```\n\n# 打包运行环境\n```shell\npip install conda-pack\nconda pack -n my_env_name -o out_name.tar.gz\ntar -zxvf 2.7.tar.gz -C 2.7\nconda info -e\nsource activate my_env_name\n```\n\n","slug":"miniconda3","published":1,"updated":"2025-07-30T08:38:33.299Z","comments":1,"layout":"post","photos":[],"_id":"cmdppvvvq000blpod115e8in1","content":"<blockquote>\n<p>conda是一个包和环境管理工具，用于创建、管理和切换Python的虚拟环境</p>\n</blockquote>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p ~/miniconda3</span><br><span class=\"line\">wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda3/miniconda.sh</span><br><span class=\"line\">bash ~/miniconda3/miniconda.sh -b -u -p ~/miniconda3</span><br><span class=\"line\">rm ~/miniconda3/miniconda.sh</span><br><span class=\"line\">source ~/miniconda3/bin/activate</span><br></pre></td></tr></table></figure>\n<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. conda --version #查看conda版本，验证是否安装</span><br><span class=\"line\">2. conda update conda #更新至最新版本，也会更新其它相关包</span><br><span class=\"line\">3. conda update --all #更新所有包</span><br><span class=\"line\">4. conda update package_name #更新指定的包</span><br><span class=\"line\">5. conda create -n env_name package_name #创建名为env_name的新环境，并在该环境下安装名为package_name 的包，可以指定新环境的版本号，例如：conda create -n python2 python=python2.7 numpy pandas，创建了python2环境，python版本为2.7，同时还安装了numpy pandas包</span><br><span class=\"line\">6. source activate env_name #切换至env_name环境</span><br><span class=\"line\">7. source deactivate #退出环境</span><br><span class=\"line\">8. conda info -e #显示所有已经创建的环境</span><br><span class=\"line\">9. conda create --name new_env_name --clone old_env_name #复制old_env_name为new_env_name</span><br><span class=\"line\">10. conda remove --name env_name –all #删除环境</span><br><span class=\"line\">11. conda list #查看所有已经安装的包</span><br><span class=\"line\">12. conda install package_name #在当前环境中安装包</span><br><span class=\"line\">13. conda install --name env_name package_name #在指定环境中安装包</span><br><span class=\"line\">14. conda remove -- name env_name package #删除指定环境中的包</span><br><span class=\"line\">15. conda remove package #删除当前环境中的包</span><br><span class=\"line\">16. conda env remove -n env_name #采用第10条的方法删除环境失败时，可采用这种方法</span><br></pre></td></tr></table></figure>\n\n\n\n<p>两个环境，一个有request一个没有，隔离作用</p>\n<h1 id=\"镜像源\"><a href=\"#镜像源\" class=\"headerlink\" title=\"镜像源\"></a>镜像源</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看镜像源</span></span><br><span class=\"line\">conda config --show-sources</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">添加镜像源</span></span><br><span class=\"line\">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class=\"line\">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">从镜像源中安装包时显示来源</span></span><br><span class=\"line\">conda config --set show_channel_urls yes</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除镜像源</span></span><br><span class=\"line\">conda config --remove channels https://XXX</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除配置的镜像源，使用默认镜像源</span></span><br><span class=\"line\">conda config --remove-key channels</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"打包运行环境\"><a href=\"#打包运行环境\" class=\"headerlink\" title=\"打包运行环境\"></a>打包运行环境</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install conda-pack</span><br><span class=\"line\">conda pack -n my_env_name -o out_name.tar.gz</span><br><span class=\"line\">tar -zxvf 2.7.tar.gz -C 2.7</span><br><span class=\"line\">conda info -e</span><br><span class=\"line\">source activate my_env_name</span><br></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<blockquote>\n<p>conda是一个包和环境管理工具，用于创建、管理和切换Python的虚拟环境</p>\n</blockquote>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p ~/miniconda3</span><br><span class=\"line\">wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda3/miniconda.sh</span><br><span class=\"line\">bash ~/miniconda3/miniconda.sh -b -u -p ~/miniconda3</span><br><span class=\"line\">rm ~/miniconda3/miniconda.sh</span><br><span class=\"line\">source ~/miniconda3/bin/activate</span><br></pre></td></tr></table></figure>\n<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. conda --version #查看conda版本，验证是否安装</span><br><span class=\"line\">2. conda update conda #更新至最新版本，也会更新其它相关包</span><br><span class=\"line\">3. conda update --all #更新所有包</span><br><span class=\"line\">4. conda update package_name #更新指定的包</span><br><span class=\"line\">5. conda create -n env_name package_name #创建名为env_name的新环境，并在该环境下安装名为package_name 的包，可以指定新环境的版本号，例如：conda create -n python2 python=python2.7 numpy pandas，创建了python2环境，python版本为2.7，同时还安装了numpy pandas包</span><br><span class=\"line\">6. source activate env_name #切换至env_name环境</span><br><span class=\"line\">7. source deactivate #退出环境</span><br><span class=\"line\">8. conda info -e #显示所有已经创建的环境</span><br><span class=\"line\">9. conda create --name new_env_name --clone old_env_name #复制old_env_name为new_env_name</span><br><span class=\"line\">10. conda remove --name env_name –all #删除环境</span><br><span class=\"line\">11. conda list #查看所有已经安装的包</span><br><span class=\"line\">12. conda install package_name #在当前环境中安装包</span><br><span class=\"line\">13. conda install --name env_name package_name #在指定环境中安装包</span><br><span class=\"line\">14. conda remove -- name env_name package #删除指定环境中的包</span><br><span class=\"line\">15. conda remove package #删除当前环境中的包</span><br><span class=\"line\">16. conda env remove -n env_name #采用第10条的方法删除环境失败时，可采用这种方法</span><br></pre></td></tr></table></figure>\n\n\n\n<p>两个环境，一个有request一个没有，隔离作用</p>\n<h1 id=\"镜像源\"><a href=\"#镜像源\" class=\"headerlink\" title=\"镜像源\"></a>镜像源</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看镜像源</span></span><br><span class=\"line\">conda config --show-sources</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">添加镜像源</span></span><br><span class=\"line\">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class=\"line\">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">从镜像源中安装包时显示来源</span></span><br><span class=\"line\">conda config --set show_channel_urls yes</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除镜像源</span></span><br><span class=\"line\">conda config --remove channels https://XXX</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除配置的镜像源，使用默认镜像源</span></span><br><span class=\"line\">conda config --remove-key channels</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"打包运行环境\"><a href=\"#打包运行环境\" class=\"headerlink\" title=\"打包运行环境\"></a>打包运行环境</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install conda-pack</span><br><span class=\"line\">conda pack -n my_env_name -o out_name.tar.gz</span><br><span class=\"line\">tar -zxvf 2.7.tar.gz -C 2.7</span><br><span class=\"line\">conda info -e</span><br><span class=\"line\">source activate my_env_name</span><br></pre></td></tr></table></figure>\n\n"},{"title":"nginx_todo","date":"2025-07-21T06:19:19.000Z","_content":"# proxy_pass转发策略\n## 请求url和转发一致\n```\n后端服务实际处理路径为 /api/upload，与客户端请求路径一致。\nNginx配置：\n\n\nlocation /api/ {         # 匹配客户端请求中的 /api/ 前缀\n    proxy_pass http://backend;  # 不改变路径，直接转发 /api/xxx 到后端\n}\n\n转发效果：\n客户端请求 → /api/upload\nNginx转发 → http://backend/api/upload\n```\n\n## 后端服务需要基础路径（去掉/api/前缀）\n```\n后端路由示例：\n后端服务处理根路径 /upload，不需要 /api/ 前缀。\nNginx配置：\nnginx\n\n\nlocation /api/ {\n    # 通过 rewrite 移除 /api/ 前缀\n    rewrite ^/api/(.*) /$1 break;  \n    proxy_pass http://backend;  \n}\n或\n\nlocation /api/ {\n    # 直接在 proxy_pass 中追加路径\n    proxy_pass http://backend/;  # 注意结尾的斜杠\n}\n● 转发效果：\n客户端请求 → /api/upload\nNginx转发 → http://backend/upload\n```\n\n## 转发加url注意点\n```\ncurl http://127.0.0.1/api/client-test\nlocation /api/ {\n    proxy_pass http://backend/test/;  # 结尾必须加斜杠\n}\n127.0.0.1- - [21/Jul/2025:14:32:45 +0800] \"GET /test/client-test HTTP/1.0\" 404 178 \"-\" \"curl/7.58.0\" \"-\"Proxy: http://-\n127.0.0.1- - [21/Jul/2025:14:32:45 +0800] \"GET /api/client-test HTTP/1.1\" 404 178 \"-\" \"curl/7.58.0\" \"-\"Proxy: http://127.0.0.1\n客户端请求 /api/client-test → 后端路径 /test/client-test\n\n\n\ncurl http://127.0.0.1/api-test/client-test\nlocation /api-test/ {\n    proxy_pass http://backend/test;  # 无斜杠 → 路径合并\n}\n127.0.0.1- - [21/Jul/2025:14:32:28 +0800] \"GET /testclient-test HTTP/1.0\" 404 178 \"-\" \"curl/7.58.0\" \"-\"Proxy: http://-\n127.0.0.1- - [21/Jul/2025:14:32:28 +0800] \"GET /api-test/client-test HTTP/1.1\" 404 178 \"-\" \"curl/7.58.0\" \"-\"Proxy: http://127.0.0.1\n\n客户端请求: http://example.com/api-test/client-test\n实际转发路径: http://backend/testclient-test\n\n```\n\n# 日志记录\n## 常用内置变量\n```\n$http_ 变量可以自定义比如$http_lky 请求头里面有lky:value则$http_lky等于value\n$args ： #这个变量等于请求行中的参数，同$query_string\n$content_length ： # 请求头中的Content-length字段。\n$content_type ： # 请求头中的Content-Type字段。\n$document_root ： # 当前请求在root指令中指定的值。\n$host ： # 请求主机头字段，否则为服务器名称。\n$http_user_agent ：#  客户端agent信息\n$http_cookie ： # 客户端cookie信息\n$limit_rate ： # 这个变量可以限制连接速率。\n$status  # 请求状态\n$body_bytes_sent # 发送字节\n$request_method ： # 客户端请求的动作，通常为GET或POST。\n$remote_addr ： # 客户端的IP地址。\n$remote_port ： # 客户端的端口。\n$remote_user ： # 已经经过Auth Basic Module验证的用户名。\n$request_filename ： # 当前请求的文件路径，由root或alias指令与URI请求生成。\n$scheme ： # HTTP方法（如http，https）。\n$server_protocol ： # 请求使用的协议，通常是HTTP/1.0或HTTP/1.1。\n$server_addr ： # 服务器地址，在完成一次系统调用后可以确定这个值。\n$server_name ： # 服务器名称。\n$server_port ： # 请求到达服务器的端口号。\n$request_uri ： # 包含请求参数的原始URI，不包含主机名，如：”/foo/bar.php?arg=baz”。\n$uri ： # 不带请求参数的当前URI，$uri不包含主机名，如”/foo/bar.html”。\n$document_uri ： # 与$uri相同。\n\n```\n## 日志配置变量\n```\nlocation / {\n      proxy_pass [$Domain]; #必须\n      index index.html index.htm index.jsp index.shtml;\n      proxy_redirect off;\n      proxy_set_header Host $host;\n      proxy_set_header Lky $remote_addr;\n      proxy_set_header REMOTE-HOST $remote_addr;\n      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n      proxy_set_header X-My-Header \"My Value\";\n      #在日志中使用$http_x_my_header就可以获取到值，可以写死也可以用内置变量比如set自定义\n      经测试 proxy_set_header 第一个字母必须大写，只能用-不能用_\n      log_format 日志格式必须是$http开头-需要换成_而且必须全部小写\n    }\n\nlog_format custom '$remote_addr [$time_local] \"$request\" '\n                  'Lky:$http_lky' ;\naccess_log /var/log/nginx/access.log custom;\n\n#如果是  proxy_pass http://127.0.0.1:83 第一跳记录上游日志包含真实ip，第二条是客户端访问的不包含Lky，一个请求有两个日志输出\n#127.0.0.1 - - [23/May/2025:16:31:41 +0800] \"GET / HTTP/1.0\" 200 4833 \"-\" \"curl/7.60.0\" \"10.0.1.100\" 10.0.1.100Lky:\"10.0.1.100\"\n#这里的日志可以通过proxy_set_header自定义，比如获取客户端真实IP\n\n#10.0.1.100 - - [23/May/2025:16:31:41 +0800] \"GET / HTTP/1.1\" 200 4833 \"-\" \"curl/7.60.0\" \"-\" 10.0.1.100:83Lky:\"-\"\n#这个则是客户端直接请求的日志，因为$remote_addr为空\n\n#测试响应头\nadd_header Lky $remote_addr always;\nGET / HTTP/1.1\nHost: example.com\nUser-Agent: Mozilla/5.0\nLky: 192.168.1.100\n```\n\n","source":"_posts/nginx-todo.md","raw":"---\ntitle: nginx_todo\ndate: 2025-07-21 14:19:19\ntags: \ncategories: 中间件\n---\n# proxy_pass转发策略\n## 请求url和转发一致\n```\n后端服务实际处理路径为 /api/upload，与客户端请求路径一致。\nNginx配置：\n\n\nlocation /api/ {         # 匹配客户端请求中的 /api/ 前缀\n    proxy_pass http://backend;  # 不改变路径，直接转发 /api/xxx 到后端\n}\n\n转发效果：\n客户端请求 → /api/upload\nNginx转发 → http://backend/api/upload\n```\n\n## 后端服务需要基础路径（去掉/api/前缀）\n```\n后端路由示例：\n后端服务处理根路径 /upload，不需要 /api/ 前缀。\nNginx配置：\nnginx\n\n\nlocation /api/ {\n    # 通过 rewrite 移除 /api/ 前缀\n    rewrite ^/api/(.*) /$1 break;  \n    proxy_pass http://backend;  \n}\n或\n\nlocation /api/ {\n    # 直接在 proxy_pass 中追加路径\n    proxy_pass http://backend/;  # 注意结尾的斜杠\n}\n● 转发效果：\n客户端请求 → /api/upload\nNginx转发 → http://backend/upload\n```\n\n## 转发加url注意点\n```\ncurl http://127.0.0.1/api/client-test\nlocation /api/ {\n    proxy_pass http://backend/test/;  # 结尾必须加斜杠\n}\n127.0.0.1- - [21/Jul/2025:14:32:45 +0800] \"GET /test/client-test HTTP/1.0\" 404 178 \"-\" \"curl/7.58.0\" \"-\"Proxy: http://-\n127.0.0.1- - [21/Jul/2025:14:32:45 +0800] \"GET /api/client-test HTTP/1.1\" 404 178 \"-\" \"curl/7.58.0\" \"-\"Proxy: http://127.0.0.1\n客户端请求 /api/client-test → 后端路径 /test/client-test\n\n\n\ncurl http://127.0.0.1/api-test/client-test\nlocation /api-test/ {\n    proxy_pass http://backend/test;  # 无斜杠 → 路径合并\n}\n127.0.0.1- - [21/Jul/2025:14:32:28 +0800] \"GET /testclient-test HTTP/1.0\" 404 178 \"-\" \"curl/7.58.0\" \"-\"Proxy: http://-\n127.0.0.1- - [21/Jul/2025:14:32:28 +0800] \"GET /api-test/client-test HTTP/1.1\" 404 178 \"-\" \"curl/7.58.0\" \"-\"Proxy: http://127.0.0.1\n\n客户端请求: http://example.com/api-test/client-test\n实际转发路径: http://backend/testclient-test\n\n```\n\n# 日志记录\n## 常用内置变量\n```\n$http_ 变量可以自定义比如$http_lky 请求头里面有lky:value则$http_lky等于value\n$args ： #这个变量等于请求行中的参数，同$query_string\n$content_length ： # 请求头中的Content-length字段。\n$content_type ： # 请求头中的Content-Type字段。\n$document_root ： # 当前请求在root指令中指定的值。\n$host ： # 请求主机头字段，否则为服务器名称。\n$http_user_agent ：#  客户端agent信息\n$http_cookie ： # 客户端cookie信息\n$limit_rate ： # 这个变量可以限制连接速率。\n$status  # 请求状态\n$body_bytes_sent # 发送字节\n$request_method ： # 客户端请求的动作，通常为GET或POST。\n$remote_addr ： # 客户端的IP地址。\n$remote_port ： # 客户端的端口。\n$remote_user ： # 已经经过Auth Basic Module验证的用户名。\n$request_filename ： # 当前请求的文件路径，由root或alias指令与URI请求生成。\n$scheme ： # HTTP方法（如http，https）。\n$server_protocol ： # 请求使用的协议，通常是HTTP/1.0或HTTP/1.1。\n$server_addr ： # 服务器地址，在完成一次系统调用后可以确定这个值。\n$server_name ： # 服务器名称。\n$server_port ： # 请求到达服务器的端口号。\n$request_uri ： # 包含请求参数的原始URI，不包含主机名，如：”/foo/bar.php?arg=baz”。\n$uri ： # 不带请求参数的当前URI，$uri不包含主机名，如”/foo/bar.html”。\n$document_uri ： # 与$uri相同。\n\n```\n## 日志配置变量\n```\nlocation / {\n      proxy_pass [$Domain]; #必须\n      index index.html index.htm index.jsp index.shtml;\n      proxy_redirect off;\n      proxy_set_header Host $host;\n      proxy_set_header Lky $remote_addr;\n      proxy_set_header REMOTE-HOST $remote_addr;\n      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n      proxy_set_header X-My-Header \"My Value\";\n      #在日志中使用$http_x_my_header就可以获取到值，可以写死也可以用内置变量比如set自定义\n      经测试 proxy_set_header 第一个字母必须大写，只能用-不能用_\n      log_format 日志格式必须是$http开头-需要换成_而且必须全部小写\n    }\n\nlog_format custom '$remote_addr [$time_local] \"$request\" '\n                  'Lky:$http_lky' ;\naccess_log /var/log/nginx/access.log custom;\n\n#如果是  proxy_pass http://127.0.0.1:83 第一跳记录上游日志包含真实ip，第二条是客户端访问的不包含Lky，一个请求有两个日志输出\n#127.0.0.1 - - [23/May/2025:16:31:41 +0800] \"GET / HTTP/1.0\" 200 4833 \"-\" \"curl/7.60.0\" \"10.0.1.100\" 10.0.1.100Lky:\"10.0.1.100\"\n#这里的日志可以通过proxy_set_header自定义，比如获取客户端真实IP\n\n#10.0.1.100 - - [23/May/2025:16:31:41 +0800] \"GET / HTTP/1.1\" 200 4833 \"-\" \"curl/7.60.0\" \"-\" 10.0.1.100:83Lky:\"-\"\n#这个则是客户端直接请求的日志，因为$remote_addr为空\n\n#测试响应头\nadd_header Lky $remote_addr always;\nGET / HTTP/1.1\nHost: example.com\nUser-Agent: Mozilla/5.0\nLky: 192.168.1.100\n```\n\n","slug":"nginx-todo","published":1,"updated":"2025-07-30T08:38:33.299Z","comments":1,"layout":"post","photos":[],"_id":"cmdppvvvq000clpodejs07wow","content":"<h1 id=\"proxy-pass转发策略\"><a href=\"#proxy-pass转发策略\" class=\"headerlink\" title=\"proxy_pass转发策略\"></a>proxy_pass转发策略</h1><h2 id=\"请求url和转发一致\"><a href=\"#请求url和转发一致\" class=\"headerlink\" title=\"请求url和转发一致\"></a>请求url和转发一致</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">后端服务实际处理路径为 /api/upload，与客户端请求路径一致。</span><br><span class=\"line\">Nginx配置：</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">location /api/ &#123;         # 匹配客户端请求中的 /api/ 前缀</span><br><span class=\"line\">    proxy_pass http://backend;  # 不改变路径，直接转发 /api/xxx 到后端</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">转发效果：</span><br><span class=\"line\">客户端请求 → /api/upload</span><br><span class=\"line\">Nginx转发 → http://backend/api/upload</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"后端服务需要基础路径（去掉-api-前缀）\"><a href=\"#后端服务需要基础路径（去掉-api-前缀）\" class=\"headerlink\" title=\"后端服务需要基础路径（去掉&#x2F;api&#x2F;前缀）\"></a>后端服务需要基础路径（去掉&#x2F;api&#x2F;前缀）</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">后端路由示例：</span><br><span class=\"line\">后端服务处理根路径 /upload，不需要 /api/ 前缀。</span><br><span class=\"line\">Nginx配置：</span><br><span class=\"line\">nginx</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">location /api/ &#123;</span><br><span class=\"line\">    # 通过 rewrite 移除 /api/ 前缀</span><br><span class=\"line\">    rewrite ^/api/(.*) /$1 break;  </span><br><span class=\"line\">    proxy_pass http://backend;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">或</span><br><span class=\"line\"></span><br><span class=\"line\">location /api/ &#123;</span><br><span class=\"line\">    # 直接在 proxy_pass 中追加路径</span><br><span class=\"line\">    proxy_pass http://backend/;  # 注意结尾的斜杠</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">● 转发效果：</span><br><span class=\"line\">客户端请求 → /api/upload</span><br><span class=\"line\">Nginx转发 → http://backend/upload</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"转发加url注意点\"><a href=\"#转发加url注意点\" class=\"headerlink\" title=\"转发加url注意点\"></a>转发加url注意点</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl http://127.0.0.1/api/client-test</span><br><span class=\"line\">location /api/ &#123;</span><br><span class=\"line\">    proxy_pass http://backend/test/;  # 结尾必须加斜杠</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">127.0.0.1- - [21/Jul/2025:14:32:45 +0800] &quot;GET /test/client-test HTTP/1.0&quot; 404 178 &quot;-&quot; &quot;curl/7.58.0&quot; &quot;-&quot;Proxy: http://-</span><br><span class=\"line\">127.0.0.1- - [21/Jul/2025:14:32:45 +0800] &quot;GET /api/client-test HTTP/1.1&quot; 404 178 &quot;-&quot; &quot;curl/7.58.0&quot; &quot;-&quot;Proxy: http://127.0.0.1</span><br><span class=\"line\">客户端请求 /api/client-test → 后端路径 /test/client-test</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">curl http://127.0.0.1/api-test/client-test</span><br><span class=\"line\">location /api-test/ &#123;</span><br><span class=\"line\">    proxy_pass http://backend/test;  # 无斜杠 → 路径合并</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">127.0.0.1- - [21/Jul/2025:14:32:28 +0800] &quot;GET /testclient-test HTTP/1.0&quot; 404 178 &quot;-&quot; &quot;curl/7.58.0&quot; &quot;-&quot;Proxy: http://-</span><br><span class=\"line\">127.0.0.1- - [21/Jul/2025:14:32:28 +0800] &quot;GET /api-test/client-test HTTP/1.1&quot; 404 178 &quot;-&quot; &quot;curl/7.58.0&quot; &quot;-&quot;Proxy: http://127.0.0.1</span><br><span class=\"line\"></span><br><span class=\"line\">客户端请求: http://example.com/api-test/client-test</span><br><span class=\"line\">实际转发路径: http://backend/testclient-test</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"日志记录\"><a href=\"#日志记录\" class=\"headerlink\" title=\"日志记录\"></a>日志记录</h1><h2 id=\"常用内置变量\"><a href=\"#常用内置变量\" class=\"headerlink\" title=\"常用内置变量\"></a>常用内置变量</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$http_ 变量可以自定义比如$http_lky 请求头里面有lky:value则$http_lky等于value</span><br><span class=\"line\">$args ： #这个变量等于请求行中的参数，同$query_string</span><br><span class=\"line\">$content_length ： # 请求头中的Content-length字段。</span><br><span class=\"line\">$content_type ： # 请求头中的Content-Type字段。</span><br><span class=\"line\">$document_root ： # 当前请求在root指令中指定的值。</span><br><span class=\"line\">$host ： # 请求主机头字段，否则为服务器名称。</span><br><span class=\"line\">$http_user_agent ：#  客户端agent信息</span><br><span class=\"line\">$http_cookie ： # 客户端cookie信息</span><br><span class=\"line\">$limit_rate ： # 这个变量可以限制连接速率。</span><br><span class=\"line\">$status  # 请求状态</span><br><span class=\"line\">$body_bytes_sent # 发送字节</span><br><span class=\"line\">$request_method ： # 客户端请求的动作，通常为GET或POST。</span><br><span class=\"line\">$remote_addr ： # 客户端的IP地址。</span><br><span class=\"line\">$remote_port ： # 客户端的端口。</span><br><span class=\"line\">$remote_user ： # 已经经过Auth Basic Module验证的用户名。</span><br><span class=\"line\">$request_filename ： # 当前请求的文件路径，由root或alias指令与URI请求生成。</span><br><span class=\"line\">$scheme ： # HTTP方法（如http，https）。</span><br><span class=\"line\">$server_protocol ： # 请求使用的协议，通常是HTTP/1.0或HTTP/1.1。</span><br><span class=\"line\">$server_addr ： # 服务器地址，在完成一次系统调用后可以确定这个值。</span><br><span class=\"line\">$server_name ： # 服务器名称。</span><br><span class=\"line\">$server_port ： # 请求到达服务器的端口号。</span><br><span class=\"line\">$request_uri ： # 包含请求参数的原始URI，不包含主机名，如：”/foo/bar.php?arg=baz”。</span><br><span class=\"line\">$uri ： # 不带请求参数的当前URI，$uri不包含主机名，如”/foo/bar.html”。</span><br><span class=\"line\">$document_uri ： # 与$uri相同。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"日志配置变量\"><a href=\"#日志配置变量\" class=\"headerlink\" title=\"日志配置变量\"></a>日志配置变量</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location / &#123;</span><br><span class=\"line\">      proxy_pass [$Domain]; #必须</span><br><span class=\"line\">      index index.html index.htm index.jsp index.shtml;</span><br><span class=\"line\">      proxy_redirect off;</span><br><span class=\"line\">      proxy_set_header Host $host;</span><br><span class=\"line\">      proxy_set_header Lky $remote_addr;</span><br><span class=\"line\">      proxy_set_header REMOTE-HOST $remote_addr;</span><br><span class=\"line\">      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">      proxy_set_header X-My-Header &quot;My Value&quot;;</span><br><span class=\"line\">      #在日志中使用$http_x_my_header就可以获取到值，可以写死也可以用内置变量比如set自定义</span><br><span class=\"line\">      经测试 proxy_set_header 第一个字母必须大写，只能用-不能用_</span><br><span class=\"line\">      log_format 日志格式必须是$http开头-需要换成_而且必须全部小写</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">log_format custom &#x27;$remote_addr [$time_local] &quot;$request&quot; &#x27;</span><br><span class=\"line\">                  &#x27;Lky:$http_lky&#x27; ;</span><br><span class=\"line\">access_log /var/log/nginx/access.log custom;</span><br><span class=\"line\"></span><br><span class=\"line\">#如果是  proxy_pass http://127.0.0.1:83 第一跳记录上游日志包含真实ip，第二条是客户端访问的不包含Lky，一个请求有两个日志输出</span><br><span class=\"line\">#127.0.0.1 - - [23/May/2025:16:31:41 +0800] &quot;GET / HTTP/1.0&quot; 200 4833 &quot;-&quot; &quot;curl/7.60.0&quot; &quot;10.0.1.100&quot; 10.0.1.100Lky:&quot;10.0.1.100&quot;</span><br><span class=\"line\">#这里的日志可以通过proxy_set_header自定义，比如获取客户端真实IP</span><br><span class=\"line\"></span><br><span class=\"line\">#10.0.1.100 - - [23/May/2025:16:31:41 +0800] &quot;GET / HTTP/1.1&quot; 200 4833 &quot;-&quot; &quot;curl/7.60.0&quot; &quot;-&quot; 10.0.1.100:83Lky:&quot;-&quot;</span><br><span class=\"line\">#这个则是客户端直接请求的日志，因为$remote_addr为空</span><br><span class=\"line\"></span><br><span class=\"line\">#测试响应头</span><br><span class=\"line\">add_header Lky $remote_addr always;</span><br><span class=\"line\">GET / HTTP/1.1</span><br><span class=\"line\">Host: example.com</span><br><span class=\"line\">User-Agent: Mozilla/5.0</span><br><span class=\"line\">Lky: 192.168.1.100</span><br></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<h1 id=\"proxy-pass转发策略\"><a href=\"#proxy-pass转发策略\" class=\"headerlink\" title=\"proxy_pass转发策略\"></a>proxy_pass转发策略</h1><h2 id=\"请求url和转发一致\"><a href=\"#请求url和转发一致\" class=\"headerlink\" title=\"请求url和转发一致\"></a>请求url和转发一致</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">后端服务实际处理路径为 /api/upload，与客户端请求路径一致。</span><br><span class=\"line\">Nginx配置：</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">location /api/ &#123;         # 匹配客户端请求中的 /api/ 前缀</span><br><span class=\"line\">    proxy_pass http://backend;  # 不改变路径，直接转发 /api/xxx 到后端</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">转发效果：</span><br><span class=\"line\">客户端请求 → /api/upload</span><br><span class=\"line\">Nginx转发 → http://backend/api/upload</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"后端服务需要基础路径（去掉-api-前缀）\"><a href=\"#后端服务需要基础路径（去掉-api-前缀）\" class=\"headerlink\" title=\"后端服务需要基础路径（去掉&#x2F;api&#x2F;前缀）\"></a>后端服务需要基础路径（去掉&#x2F;api&#x2F;前缀）</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">后端路由示例：</span><br><span class=\"line\">后端服务处理根路径 /upload，不需要 /api/ 前缀。</span><br><span class=\"line\">Nginx配置：</span><br><span class=\"line\">nginx</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">location /api/ &#123;</span><br><span class=\"line\">    # 通过 rewrite 移除 /api/ 前缀</span><br><span class=\"line\">    rewrite ^/api/(.*) /$1 break;  </span><br><span class=\"line\">    proxy_pass http://backend;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">或</span><br><span class=\"line\"></span><br><span class=\"line\">location /api/ &#123;</span><br><span class=\"line\">    # 直接在 proxy_pass 中追加路径</span><br><span class=\"line\">    proxy_pass http://backend/;  # 注意结尾的斜杠</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">● 转发效果：</span><br><span class=\"line\">客户端请求 → /api/upload</span><br><span class=\"line\">Nginx转发 → http://backend/upload</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"转发加url注意点\"><a href=\"#转发加url注意点\" class=\"headerlink\" title=\"转发加url注意点\"></a>转发加url注意点</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl http://127.0.0.1/api/client-test</span><br><span class=\"line\">location /api/ &#123;</span><br><span class=\"line\">    proxy_pass http://backend/test/;  # 结尾必须加斜杠</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">127.0.0.1- - [21/Jul/2025:14:32:45 +0800] &quot;GET /test/client-test HTTP/1.0&quot; 404 178 &quot;-&quot; &quot;curl/7.58.0&quot; &quot;-&quot;Proxy: http://-</span><br><span class=\"line\">127.0.0.1- - [21/Jul/2025:14:32:45 +0800] &quot;GET /api/client-test HTTP/1.1&quot; 404 178 &quot;-&quot; &quot;curl/7.58.0&quot; &quot;-&quot;Proxy: http://127.0.0.1</span><br><span class=\"line\">客户端请求 /api/client-test → 后端路径 /test/client-test</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">curl http://127.0.0.1/api-test/client-test</span><br><span class=\"line\">location /api-test/ &#123;</span><br><span class=\"line\">    proxy_pass http://backend/test;  # 无斜杠 → 路径合并</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">127.0.0.1- - [21/Jul/2025:14:32:28 +0800] &quot;GET /testclient-test HTTP/1.0&quot; 404 178 &quot;-&quot; &quot;curl/7.58.0&quot; &quot;-&quot;Proxy: http://-</span><br><span class=\"line\">127.0.0.1- - [21/Jul/2025:14:32:28 +0800] &quot;GET /api-test/client-test HTTP/1.1&quot; 404 178 &quot;-&quot; &quot;curl/7.58.0&quot; &quot;-&quot;Proxy: http://127.0.0.1</span><br><span class=\"line\"></span><br><span class=\"line\">客户端请求: http://example.com/api-test/client-test</span><br><span class=\"line\">实际转发路径: http://backend/testclient-test</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"日志记录\"><a href=\"#日志记录\" class=\"headerlink\" title=\"日志记录\"></a>日志记录</h1><h2 id=\"常用内置变量\"><a href=\"#常用内置变量\" class=\"headerlink\" title=\"常用内置变量\"></a>常用内置变量</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$http_ 变量可以自定义比如$http_lky 请求头里面有lky:value则$http_lky等于value</span><br><span class=\"line\">$args ： #这个变量等于请求行中的参数，同$query_string</span><br><span class=\"line\">$content_length ： # 请求头中的Content-length字段。</span><br><span class=\"line\">$content_type ： # 请求头中的Content-Type字段。</span><br><span class=\"line\">$document_root ： # 当前请求在root指令中指定的值。</span><br><span class=\"line\">$host ： # 请求主机头字段，否则为服务器名称。</span><br><span class=\"line\">$http_user_agent ：#  客户端agent信息</span><br><span class=\"line\">$http_cookie ： # 客户端cookie信息</span><br><span class=\"line\">$limit_rate ： # 这个变量可以限制连接速率。</span><br><span class=\"line\">$status  # 请求状态</span><br><span class=\"line\">$body_bytes_sent # 发送字节</span><br><span class=\"line\">$request_method ： # 客户端请求的动作，通常为GET或POST。</span><br><span class=\"line\">$remote_addr ： # 客户端的IP地址。</span><br><span class=\"line\">$remote_port ： # 客户端的端口。</span><br><span class=\"line\">$remote_user ： # 已经经过Auth Basic Module验证的用户名。</span><br><span class=\"line\">$request_filename ： # 当前请求的文件路径，由root或alias指令与URI请求生成。</span><br><span class=\"line\">$scheme ： # HTTP方法（如http，https）。</span><br><span class=\"line\">$server_protocol ： # 请求使用的协议，通常是HTTP/1.0或HTTP/1.1。</span><br><span class=\"line\">$server_addr ： # 服务器地址，在完成一次系统调用后可以确定这个值。</span><br><span class=\"line\">$server_name ： # 服务器名称。</span><br><span class=\"line\">$server_port ： # 请求到达服务器的端口号。</span><br><span class=\"line\">$request_uri ： # 包含请求参数的原始URI，不包含主机名，如：”/foo/bar.php?arg=baz”。</span><br><span class=\"line\">$uri ： # 不带请求参数的当前URI，$uri不包含主机名，如”/foo/bar.html”。</span><br><span class=\"line\">$document_uri ： # 与$uri相同。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"日志配置变量\"><a href=\"#日志配置变量\" class=\"headerlink\" title=\"日志配置变量\"></a>日志配置变量</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location / &#123;</span><br><span class=\"line\">      proxy_pass [$Domain]; #必须</span><br><span class=\"line\">      index index.html index.htm index.jsp index.shtml;</span><br><span class=\"line\">      proxy_redirect off;</span><br><span class=\"line\">      proxy_set_header Host $host;</span><br><span class=\"line\">      proxy_set_header Lky $remote_addr;</span><br><span class=\"line\">      proxy_set_header REMOTE-HOST $remote_addr;</span><br><span class=\"line\">      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">      proxy_set_header X-My-Header &quot;My Value&quot;;</span><br><span class=\"line\">      #在日志中使用$http_x_my_header就可以获取到值，可以写死也可以用内置变量比如set自定义</span><br><span class=\"line\">      经测试 proxy_set_header 第一个字母必须大写，只能用-不能用_</span><br><span class=\"line\">      log_format 日志格式必须是$http开头-需要换成_而且必须全部小写</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">log_format custom &#x27;$remote_addr [$time_local] &quot;$request&quot; &#x27;</span><br><span class=\"line\">                  &#x27;Lky:$http_lky&#x27; ;</span><br><span class=\"line\">access_log /var/log/nginx/access.log custom;</span><br><span class=\"line\"></span><br><span class=\"line\">#如果是  proxy_pass http://127.0.0.1:83 第一跳记录上游日志包含真实ip，第二条是客户端访问的不包含Lky，一个请求有两个日志输出</span><br><span class=\"line\">#127.0.0.1 - - [23/May/2025:16:31:41 +0800] &quot;GET / HTTP/1.0&quot; 200 4833 &quot;-&quot; &quot;curl/7.60.0&quot; &quot;10.0.1.100&quot; 10.0.1.100Lky:&quot;10.0.1.100&quot;</span><br><span class=\"line\">#这里的日志可以通过proxy_set_header自定义，比如获取客户端真实IP</span><br><span class=\"line\"></span><br><span class=\"line\">#10.0.1.100 - - [23/May/2025:16:31:41 +0800] &quot;GET / HTTP/1.1&quot; 200 4833 &quot;-&quot; &quot;curl/7.60.0&quot; &quot;-&quot; 10.0.1.100:83Lky:&quot;-&quot;</span><br><span class=\"line\">#这个则是客户端直接请求的日志，因为$remote_addr为空</span><br><span class=\"line\"></span><br><span class=\"line\">#测试响应头</span><br><span class=\"line\">add_header Lky $remote_addr always;</span><br><span class=\"line\">GET / HTTP/1.1</span><br><span class=\"line\">Host: example.com</span><br><span class=\"line\">User-Agent: Mozilla/5.0</span><br><span class=\"line\">Lky: 192.168.1.100</span><br></pre></td></tr></table></figure>\n\n"},{"title":"openvpn","date":"2025-04-21T13:11:04.000Z","_content":"# 安装\n```shell\ngit clone https://github.com/likaiyuan00/openvpn-install.git\ncd openvpn-install && bash openvpn-install.sh\n#systemctl start openvpn@client.service 启动的账号密码  auth-user-pass 控制客户端密码验证\necho \"test test@123\" >  /etc/openvpn/userfile.sh\n```\n\n# 配置文件字段解读\n## server端\n```config\n在#openvpn服务端的监听地址\nlocal 0.0.0.0\n#openvpn服务端的监听端口（默认1194）\nport 1115\n#使用的协议，tcp/udp\nproto tcp\n#使用三层路由ip隧道（tun），还是二层以太网隧道（tap），一般使用tun\ndev tun\n#ca证书、服务端证书、服务端秘钥和秘钥交换文件\nca /etc/openvpn/server/ca.crt\ncert /etc/openvpn/server/server.crt\nkey /etc/openvpn/server/server.key\ndh /etc/openvpn/server/dh.pem\n#vpn服务端为自己和客户端分配的ip地址池。\n#服务端自己获取网段的第一个地址（此处是10.8.0.1），后为客户端分配其他的可用地址。以后客户端就可以和10.8.0.1进行通信。\n注意：以下网段地址不要和已有网段冲突或重复\nserver 10.8.0.0  255.255.255.0\n#使用一个文件记录已分配虚拟ip的客户端和虚拟ip的对应关系。以后openvpn重启时，将可以按照此文件继续为对应的客户端分配此前相同的ip（自动续借ip）\nifconfig-pool-persist ipp.txt\n#使用tap模式的时候考虑此选项\nserver-bridge XXXXXX\n#vpn服务端向客户端推送vpn服务端内网网段的路由配置，以便让客户端能够找到服务端的内网。多条路由写多个push指令\npush \"route 10.0.10.0  255.255.255.0\"\npush \"route 192.168.10.0 255.255.255.0\"  #允许客户端访问的内网网段\n#让vpn客户端之间可以通信。默认情况客户端只能服务端进行通信\n#默认此项是注释的，客户端之间不能相互通信\nclient-to-client\n#允许多个客户端使用同一个vpn账号连接服务端\n#默认是注释的，不支持多个客户端登录一个账号\nduplicate-cn\n#每10秒ping一次，120秒后没收到ping就说明对方挂了\nkeepalive 10 120\n#加强认证方式，防攻击。如果配置文件中启用此项（默认是启用的），需要执行openvpn --genkey --secret ta.key，并把ta.key放到/etc/openvpn/server/目录，服务端第二个参数为0；同时客户端也要有此文件，且client.conf中此指令的第二个参数需要为1\ntls-auth /etc/openvpn/server/ta.key 0\n#选择一个密码。如果在服务器上使用了cipher选项，那么也必须在这里指定它。注意，v2.4客户端/服务端将在tls模式下自动协商AES-256-GCM\ncipher AES-256-CBC\n#openvpn 2.4版本的vpn才能设置此选项。表示服务端启用lz4的压缩功能 ，传输数据给客户端时会压缩数据包。\nPush后在客户端也配置启用lz4的压缩功能，向服务端发数据时也会压缩。如果是2.4版本以下的老版本，则使用用comp-lzo指令\ncompress lz4-v2\npush \"compress lz4-v2\"\n#启用lzo数据压缩格式，此指令用于低于2.4版本的老版本，且如果服务端配置了该指令，客户端也必须要配置\ncomp-lzo\n#并发客户端的连接数\nmax-clients 1000\n#通过ping得知超时时，当重启vpn后将使用同一个秘钥文件以及保持tun连接状态\npersist-key\npersist-tun\n#在文件中输出当前的连接信息，每分钟截断并重写一次该文件\nstatus openvpn-status.log\n#log指令表示每次启动vpn时覆盖式记录到指定日志文件中\n#log-append则表示每次启动vpn时追加式的记录到指定日志中\n#但两者只能选其一，或者不选时记录到rsyslog中\nlog  /var/log/openvpn.log\nlog-append  /var/log/openvpn.log\n#日志记录的详细级别\nverb 3\n#当服务器重新启动时，通知客户端，以便它可以自动重新连接。仅在UDP协议是可用\nexplicit-exit-notify 1\n#沉默的重复信息。最多20条相同消息类别的连续消息将输出到日志\nmute 20\n```\n## client\n```\n#标识这是个客户端\nclient\n#使用的协议，tcp/udp，服务端是什么客户端就是什么\nproto tcp\n#使用三层路由ip隧道（tun），还是二层以太网隧道（tap），服务端是什么客户端就是什么\ndev tun\n#服务端的地址和端口\nremote 10.0.0.190 1194\n#一直尝试解析OpenVPN服务器的主机名\nresolv-retry infinite\n#大多数客户机不需要绑定到特定的本地端口号\nnobind\n#初始化后的降级特权(仅非windows)\nuser nobody\ngroup nobody\n#尝试在重新启动时保留某些状态\npersist-key\npersist-tun\n#ca证书、客户端证书、客户端密钥\n#如果它们和client.conf或client.ovpn在同一个目录下则可以不写绝对路径，否则需要写绝对路径调用\nca ca.crt\ncert client.crt\nkey client.key\n#通过检查certicate是否具有正确的密钥使用设置来验证服务器证书。\nremote-cert-tls server\n#加强认证方式，防攻击。服务端有配置，则客户端必须有\ntls-auth ta.key 1\n#选择一个密码。如果在服务器上使用了cipher选项，那么您也必须在这里指定它。注意，v2.4客户端/服务器将在TLS模式下自动协商AES-256-GCM。\ncipher AES-256-CBC\n# 服务端用的什么，客户端就用的什么\n#表示客户端启用lz4的压缩功能，传输数据给客户端时会压缩数据包\ncomp-lzo\n# 日志级别\nverb 3\n#沉默的重复信息。最多20条相同消息类别的连续消息将输出到日志\nmute 20\n```\n\n# 如何直连openvpn服务端其他局域网服务器\n> 客户端（10.8.0.10） <br>\nping (服务端)172.16.1.7 正常 <br>\nping (服务端其他内网机器)172.16.1.8失败\n>>1. 第一种方法 配置路由\nroute add -net 10.8.0.0 netmask 255.255.255.0 gw 172.16.1.7<br>\n10.8.0.0  客户端IP<br>\n172.16.1.7 openvpn 服务端IP\n***\n>>2. 第二种方法使用snat转发 <br>\niptables -t nat -A POSTROUTING -d 10.8.0.0/24 -o eth0 -j MASQUERADE<br>\niptables -A FORWARD -s 10.8.0.0 -j ACCEPT\n\n\n# 额外\n服务端\nroute 192.168.0.0 255.255.0.0   指令作用是在服务端加一条路由，网关是客户端ip\n![alt text](image.png)\n\n服务端只能ping通客户端的tun0的ip，内网ip不行，即使加了路由也不行\n![alt text](image-1.png)\n\n客户端\npush \"route 192.168.10.0 255.255.255.0\"作用是在客户端多加一条路由。网关是服务端的tun0IP（也就是server 指令配置分配的地址池）\n![alt text](image-2.png)\n![alt text](image-3.png)\n\n","source":"_posts/openvpn.md","raw":"---\ntitle: openvpn\ndate: 2025-04-21 21:11:04\ntags:\ncategories: linux\n---\n# 安装\n```shell\ngit clone https://github.com/likaiyuan00/openvpn-install.git\ncd openvpn-install && bash openvpn-install.sh\n#systemctl start openvpn@client.service 启动的账号密码  auth-user-pass 控制客户端密码验证\necho \"test test@123\" >  /etc/openvpn/userfile.sh\n```\n\n# 配置文件字段解读\n## server端\n```config\n在#openvpn服务端的监听地址\nlocal 0.0.0.0\n#openvpn服务端的监听端口（默认1194）\nport 1115\n#使用的协议，tcp/udp\nproto tcp\n#使用三层路由ip隧道（tun），还是二层以太网隧道（tap），一般使用tun\ndev tun\n#ca证书、服务端证书、服务端秘钥和秘钥交换文件\nca /etc/openvpn/server/ca.crt\ncert /etc/openvpn/server/server.crt\nkey /etc/openvpn/server/server.key\ndh /etc/openvpn/server/dh.pem\n#vpn服务端为自己和客户端分配的ip地址池。\n#服务端自己获取网段的第一个地址（此处是10.8.0.1），后为客户端分配其他的可用地址。以后客户端就可以和10.8.0.1进行通信。\n注意：以下网段地址不要和已有网段冲突或重复\nserver 10.8.0.0  255.255.255.0\n#使用一个文件记录已分配虚拟ip的客户端和虚拟ip的对应关系。以后openvpn重启时，将可以按照此文件继续为对应的客户端分配此前相同的ip（自动续借ip）\nifconfig-pool-persist ipp.txt\n#使用tap模式的时候考虑此选项\nserver-bridge XXXXXX\n#vpn服务端向客户端推送vpn服务端内网网段的路由配置，以便让客户端能够找到服务端的内网。多条路由写多个push指令\npush \"route 10.0.10.0  255.255.255.0\"\npush \"route 192.168.10.0 255.255.255.0\"  #允许客户端访问的内网网段\n#让vpn客户端之间可以通信。默认情况客户端只能服务端进行通信\n#默认此项是注释的，客户端之间不能相互通信\nclient-to-client\n#允许多个客户端使用同一个vpn账号连接服务端\n#默认是注释的，不支持多个客户端登录一个账号\nduplicate-cn\n#每10秒ping一次，120秒后没收到ping就说明对方挂了\nkeepalive 10 120\n#加强认证方式，防攻击。如果配置文件中启用此项（默认是启用的），需要执行openvpn --genkey --secret ta.key，并把ta.key放到/etc/openvpn/server/目录，服务端第二个参数为0；同时客户端也要有此文件，且client.conf中此指令的第二个参数需要为1\ntls-auth /etc/openvpn/server/ta.key 0\n#选择一个密码。如果在服务器上使用了cipher选项，那么也必须在这里指定它。注意，v2.4客户端/服务端将在tls模式下自动协商AES-256-GCM\ncipher AES-256-CBC\n#openvpn 2.4版本的vpn才能设置此选项。表示服务端启用lz4的压缩功能 ，传输数据给客户端时会压缩数据包。\nPush后在客户端也配置启用lz4的压缩功能，向服务端发数据时也会压缩。如果是2.4版本以下的老版本，则使用用comp-lzo指令\ncompress lz4-v2\npush \"compress lz4-v2\"\n#启用lzo数据压缩格式，此指令用于低于2.4版本的老版本，且如果服务端配置了该指令，客户端也必须要配置\ncomp-lzo\n#并发客户端的连接数\nmax-clients 1000\n#通过ping得知超时时，当重启vpn后将使用同一个秘钥文件以及保持tun连接状态\npersist-key\npersist-tun\n#在文件中输出当前的连接信息，每分钟截断并重写一次该文件\nstatus openvpn-status.log\n#log指令表示每次启动vpn时覆盖式记录到指定日志文件中\n#log-append则表示每次启动vpn时追加式的记录到指定日志中\n#但两者只能选其一，或者不选时记录到rsyslog中\nlog  /var/log/openvpn.log\nlog-append  /var/log/openvpn.log\n#日志记录的详细级别\nverb 3\n#当服务器重新启动时，通知客户端，以便它可以自动重新连接。仅在UDP协议是可用\nexplicit-exit-notify 1\n#沉默的重复信息。最多20条相同消息类别的连续消息将输出到日志\nmute 20\n```\n## client\n```\n#标识这是个客户端\nclient\n#使用的协议，tcp/udp，服务端是什么客户端就是什么\nproto tcp\n#使用三层路由ip隧道（tun），还是二层以太网隧道（tap），服务端是什么客户端就是什么\ndev tun\n#服务端的地址和端口\nremote 10.0.0.190 1194\n#一直尝试解析OpenVPN服务器的主机名\nresolv-retry infinite\n#大多数客户机不需要绑定到特定的本地端口号\nnobind\n#初始化后的降级特权(仅非windows)\nuser nobody\ngroup nobody\n#尝试在重新启动时保留某些状态\npersist-key\npersist-tun\n#ca证书、客户端证书、客户端密钥\n#如果它们和client.conf或client.ovpn在同一个目录下则可以不写绝对路径，否则需要写绝对路径调用\nca ca.crt\ncert client.crt\nkey client.key\n#通过检查certicate是否具有正确的密钥使用设置来验证服务器证书。\nremote-cert-tls server\n#加强认证方式，防攻击。服务端有配置，则客户端必须有\ntls-auth ta.key 1\n#选择一个密码。如果在服务器上使用了cipher选项，那么您也必须在这里指定它。注意，v2.4客户端/服务器将在TLS模式下自动协商AES-256-GCM。\ncipher AES-256-CBC\n# 服务端用的什么，客户端就用的什么\n#表示客户端启用lz4的压缩功能，传输数据给客户端时会压缩数据包\ncomp-lzo\n# 日志级别\nverb 3\n#沉默的重复信息。最多20条相同消息类别的连续消息将输出到日志\nmute 20\n```\n\n# 如何直连openvpn服务端其他局域网服务器\n> 客户端（10.8.0.10） <br>\nping (服务端)172.16.1.7 正常 <br>\nping (服务端其他内网机器)172.16.1.8失败\n>>1. 第一种方法 配置路由\nroute add -net 10.8.0.0 netmask 255.255.255.0 gw 172.16.1.7<br>\n10.8.0.0  客户端IP<br>\n172.16.1.7 openvpn 服务端IP\n***\n>>2. 第二种方法使用snat转发 <br>\niptables -t nat -A POSTROUTING -d 10.8.0.0/24 -o eth0 -j MASQUERADE<br>\niptables -A FORWARD -s 10.8.0.0 -j ACCEPT\n\n\n# 额外\n服务端\nroute 192.168.0.0 255.255.0.0   指令作用是在服务端加一条路由，网关是客户端ip\n![alt text](image.png)\n\n服务端只能ping通客户端的tun0的ip，内网ip不行，即使加了路由也不行\n![alt text](image-1.png)\n\n客户端\npush \"route 192.168.10.0 255.255.255.0\"作用是在客户端多加一条路由。网关是服务端的tun0IP（也就是server 指令配置分配的地址池）\n![alt text](image-2.png)\n![alt text](image-3.png)\n\n","slug":"openvpn","published":1,"updated":"2025-07-30T08:38:33.299Z","comments":1,"layout":"post","photos":[],"_id":"cmdppvvvs000flpod2et6ddum","content":"<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/likaiyuan00/openvpn-install.git</span><br><span class=\"line\">cd openvpn-install &amp;&amp; bash openvpn-install.sh</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">systemctl start openvpn@client.service 启动的账号密码  auth-user-pass 控制客户端密码验证</span></span><br><span class=\"line\">echo &quot;test test@123&quot; &gt;  /etc/openvpn/userfile.sh</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"配置文件字段解读\"><a href=\"#配置文件字段解读\" class=\"headerlink\" title=\"配置文件字段解读\"></a>配置文件字段解读</h1><h2 id=\"server端\"><a href=\"#server端\" class=\"headerlink\" title=\"server端\"></a>server端</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在#openvpn服务端的监听地址</span><br><span class=\"line\">local 0.0.0.0</span><br><span class=\"line\">#openvpn服务端的监听端口（默认1194）</span><br><span class=\"line\">port 1115</span><br><span class=\"line\">#使用的协议，tcp/udp</span><br><span class=\"line\">proto tcp</span><br><span class=\"line\">#使用三层路由ip隧道（tun），还是二层以太网隧道（tap），一般使用tun</span><br><span class=\"line\">dev tun</span><br><span class=\"line\">#ca证书、服务端证书、服务端秘钥和秘钥交换文件</span><br><span class=\"line\">ca /etc/openvpn/server/ca.crt</span><br><span class=\"line\">cert /etc/openvpn/server/server.crt</span><br><span class=\"line\">key /etc/openvpn/server/server.key</span><br><span class=\"line\">dh /etc/openvpn/server/dh.pem</span><br><span class=\"line\">#vpn服务端为自己和客户端分配的ip地址池。</span><br><span class=\"line\">#服务端自己获取网段的第一个地址（此处是10.8.0.1），后为客户端分配其他的可用地址。以后客户端就可以和10.8.0.1进行通信。</span><br><span class=\"line\">注意：以下网段地址不要和已有网段冲突或重复</span><br><span class=\"line\">server 10.8.0.0  255.255.255.0</span><br><span class=\"line\">#使用一个文件记录已分配虚拟ip的客户端和虚拟ip的对应关系。以后openvpn重启时，将可以按照此文件继续为对应的客户端分配此前相同的ip（自动续借ip）</span><br><span class=\"line\">ifconfig-pool-persist ipp.txt</span><br><span class=\"line\">#使用tap模式的时候考虑此选项</span><br><span class=\"line\">server-bridge XXXXXX</span><br><span class=\"line\">#vpn服务端向客户端推送vpn服务端内网网段的路由配置，以便让客户端能够找到服务端的内网。多条路由写多个push指令</span><br><span class=\"line\">push &quot;route 10.0.10.0  255.255.255.0&quot;</span><br><span class=\"line\">push &quot;route 192.168.10.0 255.255.255.0&quot;  #允许客户端访问的内网网段</span><br><span class=\"line\">#让vpn客户端之间可以通信。默认情况客户端只能服务端进行通信</span><br><span class=\"line\">#默认此项是注释的，客户端之间不能相互通信</span><br><span class=\"line\">client-to-client</span><br><span class=\"line\">#允许多个客户端使用同一个vpn账号连接服务端</span><br><span class=\"line\">#默认是注释的，不支持多个客户端登录一个账号</span><br><span class=\"line\">duplicate-cn</span><br><span class=\"line\">#每10秒ping一次，120秒后没收到ping就说明对方挂了</span><br><span class=\"line\">keepalive 10 120</span><br><span class=\"line\">#加强认证方式，防攻击。如果配置文件中启用此项（默认是启用的），需要执行openvpn --genkey --secret ta.key，并把ta.key放到/etc/openvpn/server/目录，服务端第二个参数为0；同时客户端也要有此文件，且client.conf中此指令的第二个参数需要为1</span><br><span class=\"line\">tls-auth /etc/openvpn/server/ta.key 0</span><br><span class=\"line\">#选择一个密码。如果在服务器上使用了cipher选项，那么也必须在这里指定它。注意，v2.4客户端/服务端将在tls模式下自动协商AES-256-GCM</span><br><span class=\"line\">cipher AES-256-CBC</span><br><span class=\"line\">#openvpn 2.4版本的vpn才能设置此选项。表示服务端启用lz4的压缩功能 ，传输数据给客户端时会压缩数据包。</span><br><span class=\"line\">Push后在客户端也配置启用lz4的压缩功能，向服务端发数据时也会压缩。如果是2.4版本以下的老版本，则使用用comp-lzo指令</span><br><span class=\"line\">compress lz4-v2</span><br><span class=\"line\">push &quot;compress lz4-v2&quot;</span><br><span class=\"line\">#启用lzo数据压缩格式，此指令用于低于2.4版本的老版本，且如果服务端配置了该指令，客户端也必须要配置</span><br><span class=\"line\">comp-lzo</span><br><span class=\"line\">#并发客户端的连接数</span><br><span class=\"line\">max-clients 1000</span><br><span class=\"line\">#通过ping得知超时时，当重启vpn后将使用同一个秘钥文件以及保持tun连接状态</span><br><span class=\"line\">persist-key</span><br><span class=\"line\">persist-tun</span><br><span class=\"line\">#在文件中输出当前的连接信息，每分钟截断并重写一次该文件</span><br><span class=\"line\">status openvpn-status.log</span><br><span class=\"line\">#log指令表示每次启动vpn时覆盖式记录到指定日志文件中</span><br><span class=\"line\">#log-append则表示每次启动vpn时追加式的记录到指定日志中</span><br><span class=\"line\">#但两者只能选其一，或者不选时记录到rsyslog中</span><br><span class=\"line\">log  /var/log/openvpn.log</span><br><span class=\"line\">log-append  /var/log/openvpn.log</span><br><span class=\"line\">#日志记录的详细级别</span><br><span class=\"line\">verb 3</span><br><span class=\"line\">#当服务器重新启动时，通知客户端，以便它可以自动重新连接。仅在UDP协议是可用</span><br><span class=\"line\">explicit-exit-notify 1</span><br><span class=\"line\">#沉默的重复信息。最多20条相同消息类别的连续消息将输出到日志</span><br><span class=\"line\">mute 20</span><br></pre></td></tr></table></figure>\n<h2 id=\"client\"><a href=\"#client\" class=\"headerlink\" title=\"client\"></a>client</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#标识这是个客户端</span><br><span class=\"line\">client</span><br><span class=\"line\">#使用的协议，tcp/udp，服务端是什么客户端就是什么</span><br><span class=\"line\">proto tcp</span><br><span class=\"line\">#使用三层路由ip隧道（tun），还是二层以太网隧道（tap），服务端是什么客户端就是什么</span><br><span class=\"line\">dev tun</span><br><span class=\"line\">#服务端的地址和端口</span><br><span class=\"line\">remote 10.0.0.190 1194</span><br><span class=\"line\">#一直尝试解析OpenVPN服务器的主机名</span><br><span class=\"line\">resolv-retry infinite</span><br><span class=\"line\">#大多数客户机不需要绑定到特定的本地端口号</span><br><span class=\"line\">nobind</span><br><span class=\"line\">#初始化后的降级特权(仅非windows)</span><br><span class=\"line\">user nobody</span><br><span class=\"line\">group nobody</span><br><span class=\"line\">#尝试在重新启动时保留某些状态</span><br><span class=\"line\">persist-key</span><br><span class=\"line\">persist-tun</span><br><span class=\"line\">#ca证书、客户端证书、客户端密钥</span><br><span class=\"line\">#如果它们和client.conf或client.ovpn在同一个目录下则可以不写绝对路径，否则需要写绝对路径调用</span><br><span class=\"line\">ca ca.crt</span><br><span class=\"line\">cert client.crt</span><br><span class=\"line\">key client.key</span><br><span class=\"line\">#通过检查certicate是否具有正确的密钥使用设置来验证服务器证书。</span><br><span class=\"line\">remote-cert-tls server</span><br><span class=\"line\">#加强认证方式，防攻击。服务端有配置，则客户端必须有</span><br><span class=\"line\">tls-auth ta.key 1</span><br><span class=\"line\">#选择一个密码。如果在服务器上使用了cipher选项，那么您也必须在这里指定它。注意，v2.4客户端/服务器将在TLS模式下自动协商AES-256-GCM。</span><br><span class=\"line\">cipher AES-256-CBC</span><br><span class=\"line\"># 服务端用的什么，客户端就用的什么</span><br><span class=\"line\">#表示客户端启用lz4的压缩功能，传输数据给客户端时会压缩数据包</span><br><span class=\"line\">comp-lzo</span><br><span class=\"line\"># 日志级别</span><br><span class=\"line\">verb 3</span><br><span class=\"line\">#沉默的重复信息。最多20条相同消息类别的连续消息将输出到日志</span><br><span class=\"line\">mute 20</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"如何直连openvpn服务端其他局域网服务器\"><a href=\"#如何直连openvpn服务端其他局域网服务器\" class=\"headerlink\" title=\"如何直连openvpn服务端其他局域网服务器\"></a>如何直连openvpn服务端其他局域网服务器</h1><blockquote>\n<p>客户端（10.8.0.10） <br><br>ping (服务端)172.16.1.7 正常 <br><br>ping (服务端其他内网机器)172.16.1.8失败</p>\n<blockquote>\n<ol>\n<li>第一种方法 配置路由<br>route add -net 10.8.0.0 netmask 255.255.255.0 gw 172.16.1.7<br><br>10.8.0.0  客户端IP<br><br>172.16.1.7 openvpn 服务端IP</li>\n</ol>\n</blockquote>\n</blockquote>\n<hr>\n<blockquote>\n<blockquote>\n<ol start=\"2\">\n<li>第二种方法使用snat转发 <br><br>iptables -t nat -A POSTROUTING -d 10.8.0.0&#x2F;24 -o eth0 -j MASQUERADE<br><br>iptables -A FORWARD -s 10.8.0.0 -j ACCEPT</li>\n</ol>\n</blockquote>\n</blockquote>\n<h1 id=\"额外\"><a href=\"#额外\" class=\"headerlink\" title=\"额外\"></a>额外</h1><p>服务端<br>route 192.168.0.0 255.255.0.0   指令作用是在服务端加一条路由，网关是客户端ip<br><img src=\"/2025/04/21/openvpn/image.png\" alt=\"alt text\"></p>\n<p>服务端只能ping通客户端的tun0的ip，内网ip不行，即使加了路由也不行<br><img src=\"/2025/04/21/openvpn/image-1.png\" alt=\"alt text\"></p>\n<p>客户端<br>push “route 192.168.10.0 255.255.255.0”作用是在客户端多加一条路由。网关是服务端的tun0IP（也就是server 指令配置分配的地址池）<br><img src=\"/2025/04/21/openvpn/image-2.png\" alt=\"alt text\"><br><img src=\"/2025/04/21/openvpn/image-3.png\" alt=\"alt text\"></p>\n","excerpt":"","more":"<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/likaiyuan00/openvpn-install.git</span><br><span class=\"line\">cd openvpn-install &amp;&amp; bash openvpn-install.sh</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">systemctl start openvpn@client.service 启动的账号密码  auth-user-pass 控制客户端密码验证</span></span><br><span class=\"line\">echo &quot;test test@123&quot; &gt;  /etc/openvpn/userfile.sh</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"配置文件字段解读\"><a href=\"#配置文件字段解读\" class=\"headerlink\" title=\"配置文件字段解读\"></a>配置文件字段解读</h1><h2 id=\"server端\"><a href=\"#server端\" class=\"headerlink\" title=\"server端\"></a>server端</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在#openvpn服务端的监听地址</span><br><span class=\"line\">local 0.0.0.0</span><br><span class=\"line\">#openvpn服务端的监听端口（默认1194）</span><br><span class=\"line\">port 1115</span><br><span class=\"line\">#使用的协议，tcp/udp</span><br><span class=\"line\">proto tcp</span><br><span class=\"line\">#使用三层路由ip隧道（tun），还是二层以太网隧道（tap），一般使用tun</span><br><span class=\"line\">dev tun</span><br><span class=\"line\">#ca证书、服务端证书、服务端秘钥和秘钥交换文件</span><br><span class=\"line\">ca /etc/openvpn/server/ca.crt</span><br><span class=\"line\">cert /etc/openvpn/server/server.crt</span><br><span class=\"line\">key /etc/openvpn/server/server.key</span><br><span class=\"line\">dh /etc/openvpn/server/dh.pem</span><br><span class=\"line\">#vpn服务端为自己和客户端分配的ip地址池。</span><br><span class=\"line\">#服务端自己获取网段的第一个地址（此处是10.8.0.1），后为客户端分配其他的可用地址。以后客户端就可以和10.8.0.1进行通信。</span><br><span class=\"line\">注意：以下网段地址不要和已有网段冲突或重复</span><br><span class=\"line\">server 10.8.0.0  255.255.255.0</span><br><span class=\"line\">#使用一个文件记录已分配虚拟ip的客户端和虚拟ip的对应关系。以后openvpn重启时，将可以按照此文件继续为对应的客户端分配此前相同的ip（自动续借ip）</span><br><span class=\"line\">ifconfig-pool-persist ipp.txt</span><br><span class=\"line\">#使用tap模式的时候考虑此选项</span><br><span class=\"line\">server-bridge XXXXXX</span><br><span class=\"line\">#vpn服务端向客户端推送vpn服务端内网网段的路由配置，以便让客户端能够找到服务端的内网。多条路由写多个push指令</span><br><span class=\"line\">push &quot;route 10.0.10.0  255.255.255.0&quot;</span><br><span class=\"line\">push &quot;route 192.168.10.0 255.255.255.0&quot;  #允许客户端访问的内网网段</span><br><span class=\"line\">#让vpn客户端之间可以通信。默认情况客户端只能服务端进行通信</span><br><span class=\"line\">#默认此项是注释的，客户端之间不能相互通信</span><br><span class=\"line\">client-to-client</span><br><span class=\"line\">#允许多个客户端使用同一个vpn账号连接服务端</span><br><span class=\"line\">#默认是注释的，不支持多个客户端登录一个账号</span><br><span class=\"line\">duplicate-cn</span><br><span class=\"line\">#每10秒ping一次，120秒后没收到ping就说明对方挂了</span><br><span class=\"line\">keepalive 10 120</span><br><span class=\"line\">#加强认证方式，防攻击。如果配置文件中启用此项（默认是启用的），需要执行openvpn --genkey --secret ta.key，并把ta.key放到/etc/openvpn/server/目录，服务端第二个参数为0；同时客户端也要有此文件，且client.conf中此指令的第二个参数需要为1</span><br><span class=\"line\">tls-auth /etc/openvpn/server/ta.key 0</span><br><span class=\"line\">#选择一个密码。如果在服务器上使用了cipher选项，那么也必须在这里指定它。注意，v2.4客户端/服务端将在tls模式下自动协商AES-256-GCM</span><br><span class=\"line\">cipher AES-256-CBC</span><br><span class=\"line\">#openvpn 2.4版本的vpn才能设置此选项。表示服务端启用lz4的压缩功能 ，传输数据给客户端时会压缩数据包。</span><br><span class=\"line\">Push后在客户端也配置启用lz4的压缩功能，向服务端发数据时也会压缩。如果是2.4版本以下的老版本，则使用用comp-lzo指令</span><br><span class=\"line\">compress lz4-v2</span><br><span class=\"line\">push &quot;compress lz4-v2&quot;</span><br><span class=\"line\">#启用lzo数据压缩格式，此指令用于低于2.4版本的老版本，且如果服务端配置了该指令，客户端也必须要配置</span><br><span class=\"line\">comp-lzo</span><br><span class=\"line\">#并发客户端的连接数</span><br><span class=\"line\">max-clients 1000</span><br><span class=\"line\">#通过ping得知超时时，当重启vpn后将使用同一个秘钥文件以及保持tun连接状态</span><br><span class=\"line\">persist-key</span><br><span class=\"line\">persist-tun</span><br><span class=\"line\">#在文件中输出当前的连接信息，每分钟截断并重写一次该文件</span><br><span class=\"line\">status openvpn-status.log</span><br><span class=\"line\">#log指令表示每次启动vpn时覆盖式记录到指定日志文件中</span><br><span class=\"line\">#log-append则表示每次启动vpn时追加式的记录到指定日志中</span><br><span class=\"line\">#但两者只能选其一，或者不选时记录到rsyslog中</span><br><span class=\"line\">log  /var/log/openvpn.log</span><br><span class=\"line\">log-append  /var/log/openvpn.log</span><br><span class=\"line\">#日志记录的详细级别</span><br><span class=\"line\">verb 3</span><br><span class=\"line\">#当服务器重新启动时，通知客户端，以便它可以自动重新连接。仅在UDP协议是可用</span><br><span class=\"line\">explicit-exit-notify 1</span><br><span class=\"line\">#沉默的重复信息。最多20条相同消息类别的连续消息将输出到日志</span><br><span class=\"line\">mute 20</span><br></pre></td></tr></table></figure>\n<h2 id=\"client\"><a href=\"#client\" class=\"headerlink\" title=\"client\"></a>client</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#标识这是个客户端</span><br><span class=\"line\">client</span><br><span class=\"line\">#使用的协议，tcp/udp，服务端是什么客户端就是什么</span><br><span class=\"line\">proto tcp</span><br><span class=\"line\">#使用三层路由ip隧道（tun），还是二层以太网隧道（tap），服务端是什么客户端就是什么</span><br><span class=\"line\">dev tun</span><br><span class=\"line\">#服务端的地址和端口</span><br><span class=\"line\">remote 10.0.0.190 1194</span><br><span class=\"line\">#一直尝试解析OpenVPN服务器的主机名</span><br><span class=\"line\">resolv-retry infinite</span><br><span class=\"line\">#大多数客户机不需要绑定到特定的本地端口号</span><br><span class=\"line\">nobind</span><br><span class=\"line\">#初始化后的降级特权(仅非windows)</span><br><span class=\"line\">user nobody</span><br><span class=\"line\">group nobody</span><br><span class=\"line\">#尝试在重新启动时保留某些状态</span><br><span class=\"line\">persist-key</span><br><span class=\"line\">persist-tun</span><br><span class=\"line\">#ca证书、客户端证书、客户端密钥</span><br><span class=\"line\">#如果它们和client.conf或client.ovpn在同一个目录下则可以不写绝对路径，否则需要写绝对路径调用</span><br><span class=\"line\">ca ca.crt</span><br><span class=\"line\">cert client.crt</span><br><span class=\"line\">key client.key</span><br><span class=\"line\">#通过检查certicate是否具有正确的密钥使用设置来验证服务器证书。</span><br><span class=\"line\">remote-cert-tls server</span><br><span class=\"line\">#加强认证方式，防攻击。服务端有配置，则客户端必须有</span><br><span class=\"line\">tls-auth ta.key 1</span><br><span class=\"line\">#选择一个密码。如果在服务器上使用了cipher选项，那么您也必须在这里指定它。注意，v2.4客户端/服务器将在TLS模式下自动协商AES-256-GCM。</span><br><span class=\"line\">cipher AES-256-CBC</span><br><span class=\"line\"># 服务端用的什么，客户端就用的什么</span><br><span class=\"line\">#表示客户端启用lz4的压缩功能，传输数据给客户端时会压缩数据包</span><br><span class=\"line\">comp-lzo</span><br><span class=\"line\"># 日志级别</span><br><span class=\"line\">verb 3</span><br><span class=\"line\">#沉默的重复信息。最多20条相同消息类别的连续消息将输出到日志</span><br><span class=\"line\">mute 20</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"如何直连openvpn服务端其他局域网服务器\"><a href=\"#如何直连openvpn服务端其他局域网服务器\" class=\"headerlink\" title=\"如何直连openvpn服务端其他局域网服务器\"></a>如何直连openvpn服务端其他局域网服务器</h1><blockquote>\n<p>客户端（10.8.0.10） <br><br>ping (服务端)172.16.1.7 正常 <br><br>ping (服务端其他内网机器)172.16.1.8失败</p>\n<blockquote>\n<ol>\n<li>第一种方法 配置路由<br>route add -net 10.8.0.0 netmask 255.255.255.0 gw 172.16.1.7<br><br>10.8.0.0  客户端IP<br><br>172.16.1.7 openvpn 服务端IP</li>\n</ol>\n</blockquote>\n</blockquote>\n<hr>\n<blockquote>\n<blockquote>\n<ol start=\"2\">\n<li>第二种方法使用snat转发 <br><br>iptables -t nat -A POSTROUTING -d 10.8.0.0&#x2F;24 -o eth0 -j MASQUERADE<br><br>iptables -A FORWARD -s 10.8.0.0 -j ACCEPT</li>\n</ol>\n</blockquote>\n</blockquote>\n<h1 id=\"额外\"><a href=\"#额外\" class=\"headerlink\" title=\"额外\"></a>额外</h1><p>服务端<br>route 192.168.0.0 255.255.0.0   指令作用是在服务端加一条路由，网关是客户端ip<br><img src=\"/2025/04/21/openvpn/image.png\" alt=\"alt text\"></p>\n<p>服务端只能ping通客户端的tun0的ip，内网ip不行，即使加了路由也不行<br><img src=\"/2025/04/21/openvpn/image-1.png\" alt=\"alt text\"></p>\n<p>客户端<br>push “route 192.168.10.0 255.255.255.0”作用是在客户端多加一条路由。网关是服务端的tun0IP（也就是server 指令配置分配的地址池）<br><img src=\"/2025/04/21/openvpn/image-2.png\" alt=\"alt text\"><br><img src=\"/2025/04/21/openvpn/image-3.png\" alt=\"alt text\"></p>\n"},{"title":"prometheus","date":"2025-04-18T01:56:59.000Z","_content":"https://github.com/likaiyuan00/k8s-prometheus.git\n\n# k8s-prometheus\n部署kubernetes_sd_configs\n配置文件只采集了\n> 1 prometheus*  prometheus-server<br> \n> 2 container*   kubelet 的10250端口  /metrics/cadvisor<br>\n> 3 node*    node_exporter<br>\n> 4 apiserver*  apiserver 6443 端口 /metrics<br>\n> 5 kube*  kube-state-metrics组件 8080端口 /metrics<br>\n> 6 coredns*  kubernetes-pods 自动发现 pod需要配置 prometheus.io/scrape: \"true\" 不然抓取不到 默认flase<br>\n> prometheus.io/path: \"/metrics\"   # 指标路径（默认 /metrics 可不写）<br>\n> 7 kubelet*  apiserver代理端点 /api/v1/nodes/\\<node-name\\>/proxy/metrics\n其他有需要的可以自行配置\n\n\n导入镜像，执行yml文件即可\n\n## prometheus效果图\n![alt text](image-2.png)\n\n\n## grafana效果图\n![alt text](image-3.png)\n![alt text](image-4.png)\n![alt text](image-5.png)\n\n\n\n\n## kubelet 组件\n kubelet 三个指标 /metrics/probes（探针） /metrics/cadvisor（pod） /metrics（node）\n\n对应apiserver的 /api/v1/nodes/${node-name}/proxy/${url};一般为了减少apiserver的负载不建议使用这种方式 **\n\n直接访问会报401没有权限\n![alt text](image-6.png)\n\n\n需要先获取token，上面文件执行完会有一个prometheus用户\n![alt text](image-7.png)\n\n\n\npod内token路径为 /var/run/secrets/kubernetes.io/serviceaccount/token\n\n通过token再去访问发现就正常了\n\n```\n/metrics\ncurl -k -sS  -H \"Authorization: Bearer $TOKEN\"  https://127.0.0.1:6443/api/v1/nodes/master/proxy/metrics\n\ncurl -k -sS  -H \"Authorization: Bearer $TOKEN\"  https://127.0.0.1:10250/metrics\n```\n![alt text](image-8.png)\n\n\n\n对应kubelet*开头\n![alt text](image-9.png)\n\n\n```\n/metrics/probes（探针）\ncurl -k -sS  -H \"Authorization: Bearer $TOKEN\"  https://127.0.0.1:6443/api/v1/nodes/master/proxy/metrics/probes\n\ncurl -k -sS  -H \"Authorization: Bearer $TOKEN\"  https://127.0.0.1:10250/metrics/probes\n```\n![alt text](image-10.png)\n\n```\n/metrics/cadvisor（pod）\ncurl -k -sS  -H \"Authorization: Bearer $TOKEN\"  https://127.0.0.1:6443/api/v1/nodes/master/proxy/metrics/cadvisor\n\ncurl -k -sS  -H \"Authorization: Bearer $TOKEN\"  https://127.0.0.1:10250/metrics/cadvisor\n```\n![alt text](image-11.png)\n\n\n\n\n对应container*开头，容器指标\n![alt text](image-12.png)\n\n\n## node_exporter  \n端口暴露到节点了就不需要token了\n![alt text](image-13.png)\n\n\nnode*开头，节点指标\n![alt text](image-14.png)\n\n\n\n## kube-state-metrics\n集群应用状态监控比较重要的一个需要单独安装\n使用containerPort: 8080 暴露到节点了不需要token\n![alt text](image-15.png)\n\n\n\n\nkube*开头\n![alt text](image-16.png)\n\n\n## apiserver \n主要是监控apiserver的qps,查询成功率失败率等信息\n![alt text](image-17.png)\n\n\napiserver*开头\n![alt text](image-18.png)\n\n\n## kubernetes-pods 自动发现\n如果元数据内设置true，该pod才可以被抓取，默认false\n![alt text](image-19.png)\n\n\n\n以coredns为例\n![alt text](image-20.png)\n![alt text](image-21.png)\n\n\n\n\n\n以coredns*开头\n![alt text](image-22.png)\n\n\n这个自动发现还可以配置自身业务的监控，只有保证开启抓取，和符合prometheus抓取规范就可以，如果开启了prometheus.io/scrape 但是pod并没有提供数据指标的能力就会直接报错，如图404\n![alt text](image-23.png)\n\n\n比如现在我想加一个grafana的数据，只需要添加对应元数据就可以了\n![alt text](image-24.png)\n\n\nprometheus就自动发现了pod的ip\n![alt text](image-1.png)\n\n\ngrafana*开头\n![alt text](image.png)\n\n\n\n","source":"_posts/prometheus.md","raw":"---\ntitle: prometheus\ndate: 2025-04-18 09:56:59\ntags: prometheus\ncategories: prometheus\n---\nhttps://github.com/likaiyuan00/k8s-prometheus.git\n\n# k8s-prometheus\n部署kubernetes_sd_configs\n配置文件只采集了\n> 1 prometheus*  prometheus-server<br> \n> 2 container*   kubelet 的10250端口  /metrics/cadvisor<br>\n> 3 node*    node_exporter<br>\n> 4 apiserver*  apiserver 6443 端口 /metrics<br>\n> 5 kube*  kube-state-metrics组件 8080端口 /metrics<br>\n> 6 coredns*  kubernetes-pods 自动发现 pod需要配置 prometheus.io/scrape: \"true\" 不然抓取不到 默认flase<br>\n> prometheus.io/path: \"/metrics\"   # 指标路径（默认 /metrics 可不写）<br>\n> 7 kubelet*  apiserver代理端点 /api/v1/nodes/\\<node-name\\>/proxy/metrics\n其他有需要的可以自行配置\n\n\n导入镜像，执行yml文件即可\n\n## prometheus效果图\n![alt text](image-2.png)\n\n\n## grafana效果图\n![alt text](image-3.png)\n![alt text](image-4.png)\n![alt text](image-5.png)\n\n\n\n\n## kubelet 组件\n kubelet 三个指标 /metrics/probes（探针） /metrics/cadvisor（pod） /metrics（node）\n\n对应apiserver的 /api/v1/nodes/${node-name}/proxy/${url};一般为了减少apiserver的负载不建议使用这种方式 **\n\n直接访问会报401没有权限\n![alt text](image-6.png)\n\n\n需要先获取token，上面文件执行完会有一个prometheus用户\n![alt text](image-7.png)\n\n\n\npod内token路径为 /var/run/secrets/kubernetes.io/serviceaccount/token\n\n通过token再去访问发现就正常了\n\n```\n/metrics\ncurl -k -sS  -H \"Authorization: Bearer $TOKEN\"  https://127.0.0.1:6443/api/v1/nodes/master/proxy/metrics\n\ncurl -k -sS  -H \"Authorization: Bearer $TOKEN\"  https://127.0.0.1:10250/metrics\n```\n![alt text](image-8.png)\n\n\n\n对应kubelet*开头\n![alt text](image-9.png)\n\n\n```\n/metrics/probes（探针）\ncurl -k -sS  -H \"Authorization: Bearer $TOKEN\"  https://127.0.0.1:6443/api/v1/nodes/master/proxy/metrics/probes\n\ncurl -k -sS  -H \"Authorization: Bearer $TOKEN\"  https://127.0.0.1:10250/metrics/probes\n```\n![alt text](image-10.png)\n\n```\n/metrics/cadvisor（pod）\ncurl -k -sS  -H \"Authorization: Bearer $TOKEN\"  https://127.0.0.1:6443/api/v1/nodes/master/proxy/metrics/cadvisor\n\ncurl -k -sS  -H \"Authorization: Bearer $TOKEN\"  https://127.0.0.1:10250/metrics/cadvisor\n```\n![alt text](image-11.png)\n\n\n\n\n对应container*开头，容器指标\n![alt text](image-12.png)\n\n\n## node_exporter  \n端口暴露到节点了就不需要token了\n![alt text](image-13.png)\n\n\nnode*开头，节点指标\n![alt text](image-14.png)\n\n\n\n## kube-state-metrics\n集群应用状态监控比较重要的一个需要单独安装\n使用containerPort: 8080 暴露到节点了不需要token\n![alt text](image-15.png)\n\n\n\n\nkube*开头\n![alt text](image-16.png)\n\n\n## apiserver \n主要是监控apiserver的qps,查询成功率失败率等信息\n![alt text](image-17.png)\n\n\napiserver*开头\n![alt text](image-18.png)\n\n\n## kubernetes-pods 自动发现\n如果元数据内设置true，该pod才可以被抓取，默认false\n![alt text](image-19.png)\n\n\n\n以coredns为例\n![alt text](image-20.png)\n![alt text](image-21.png)\n\n\n\n\n\n以coredns*开头\n![alt text](image-22.png)\n\n\n这个自动发现还可以配置自身业务的监控，只有保证开启抓取，和符合prometheus抓取规范就可以，如果开启了prometheus.io/scrape 但是pod并没有提供数据指标的能力就会直接报错，如图404\n![alt text](image-23.png)\n\n\n比如现在我想加一个grafana的数据，只需要添加对应元数据就可以了\n![alt text](image-24.png)\n\n\nprometheus就自动发现了pod的ip\n![alt text](image-1.png)\n\n\ngrafana*开头\n![alt text](image.png)\n\n\n\n","slug":"prometheus","published":1,"updated":"2025-07-30T08:38:33.312Z","comments":1,"layout":"post","photos":[],"_id":"cmdppvvvs000glpodemuaahmv","content":"<p><a href=\"https://github.com/likaiyuan00/k8s-prometheus.git\">https://github.com/likaiyuan00/k8s-prometheus.git</a></p>\n<h1 id=\"k8s-prometheus\"><a href=\"#k8s-prometheus\" class=\"headerlink\" title=\"k8s-prometheus\"></a>k8s-prometheus</h1><p>部署kubernetes_sd_configs<br>配置文件只采集了</p>\n<blockquote>\n<p>1 prometheus*  prometheus-server<br><br>2 container*   kubelet 的10250端口  &#x2F;metrics&#x2F;cadvisor<br><br>3 node*    node_exporter<br><br>4 apiserver*  apiserver 6443 端口 &#x2F;metrics<br><br>5 kube*  kube-state-metrics组件 8080端口 &#x2F;metrics<br><br>6 coredns*  kubernetes-pods 自动发现 pod需要配置 prometheus.io&#x2F;scrape: “true” 不然抓取不到 默认flase<br><br>prometheus.io&#x2F;path: “&#x2F;metrics”   # 指标路径（默认 &#x2F;metrics 可不写）<br><br>7 kubelet*  apiserver代理端点 &#x2F;api&#x2F;v1&#x2F;nodes&#x2F;&lt;node-name&gt;&#x2F;proxy&#x2F;metrics<br>其他有需要的可以自行配置</p>\n</blockquote>\n<p>导入镜像，执行yml文件即可</p>\n<h2 id=\"prometheus效果图\"><a href=\"#prometheus效果图\" class=\"headerlink\" title=\"prometheus效果图\"></a>prometheus效果图</h2><p><img src=\"/2025/04/18/prometheus/image-2.png\" alt=\"alt text\"></p>\n<h2 id=\"grafana效果图\"><a href=\"#grafana效果图\" class=\"headerlink\" title=\"grafana效果图\"></a>grafana效果图</h2><p><img src=\"/2025/04/18/prometheus/image-3.png\" alt=\"alt text\"><br><img src=\"/2025/04/18/prometheus/image-4.png\" alt=\"alt text\"><br><img src=\"/2025/04/18/prometheus/image-5.png\" alt=\"alt text\"></p>\n<h2 id=\"kubelet-组件\"><a href=\"#kubelet-组件\" class=\"headerlink\" title=\"kubelet 组件\"></a>kubelet 组件</h2><p> kubelet 三个指标 &#x2F;metrics&#x2F;probes（探针） &#x2F;metrics&#x2F;cadvisor（pod） &#x2F;metrics（node）</p>\n<p>对应apiserver的 &#x2F;api&#x2F;v1&#x2F;nodes&#x2F;${node-name}&#x2F;proxy&#x2F;${url};一般为了减少apiserver的负载不建议使用这种方式 **</p>\n<p>直接访问会报401没有权限<br><img src=\"/2025/04/18/prometheus/image-6.png\" alt=\"alt text\"></p>\n<p>需要先获取token，上面文件执行完会有一个prometheus用户<br><img src=\"/2025/04/18/prometheus/image-7.png\" alt=\"alt text\"></p>\n<p>pod内token路径为 &#x2F;var&#x2F;run&#x2F;secrets&#x2F;kubernetes.io&#x2F;serviceaccount&#x2F;token</p>\n<p>通过token再去访问发现就正常了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/metrics</span><br><span class=\"line\">curl -k -sS  -H &quot;Authorization: Bearer $TOKEN&quot;  https://127.0.0.1:6443/api/v1/nodes/master/proxy/metrics</span><br><span class=\"line\"></span><br><span class=\"line\">curl -k -sS  -H &quot;Authorization: Bearer $TOKEN&quot;  https://127.0.0.1:10250/metrics</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2025/04/18/prometheus/image-8.png\" alt=\"alt text\"></p>\n<p>对应kubelet*开头<br><img src=\"/2025/04/18/prometheus/image-9.png\" alt=\"alt text\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/metrics/probes（探针）</span><br><span class=\"line\">curl -k -sS  -H &quot;Authorization: Bearer $TOKEN&quot;  https://127.0.0.1:6443/api/v1/nodes/master/proxy/metrics/probes</span><br><span class=\"line\"></span><br><span class=\"line\">curl -k -sS  -H &quot;Authorization: Bearer $TOKEN&quot;  https://127.0.0.1:10250/metrics/probes</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2025/04/18/prometheus/image-10.png\" alt=\"alt text\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/metrics/cadvisor（pod）</span><br><span class=\"line\">curl -k -sS  -H &quot;Authorization: Bearer $TOKEN&quot;  https://127.0.0.1:6443/api/v1/nodes/master/proxy/metrics/cadvisor</span><br><span class=\"line\"></span><br><span class=\"line\">curl -k -sS  -H &quot;Authorization: Bearer $TOKEN&quot;  https://127.0.0.1:10250/metrics/cadvisor</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2025/04/18/prometheus/image-11.png\" alt=\"alt text\"></p>\n<p>对应container*开头，容器指标<br><img src=\"/2025/04/18/prometheus/image-12.png\" alt=\"alt text\"></p>\n<h2 id=\"node-exporter\"><a href=\"#node-exporter\" class=\"headerlink\" title=\"node_exporter\"></a>node_exporter</h2><p>端口暴露到节点了就不需要token了<br><img src=\"/2025/04/18/prometheus/image-13.png\" alt=\"alt text\"></p>\n<p>node*开头，节点指标<br><img src=\"/2025/04/18/prometheus/image-14.png\" alt=\"alt text\"></p>\n<h2 id=\"kube-state-metrics\"><a href=\"#kube-state-metrics\" class=\"headerlink\" title=\"kube-state-metrics\"></a>kube-state-metrics</h2><p>集群应用状态监控比较重要的一个需要单独安装<br>使用containerPort: 8080 暴露到节点了不需要token<br><img src=\"/2025/04/18/prometheus/image-15.png\" alt=\"alt text\"></p>\n<p>kube*开头<br><img src=\"/2025/04/18/prometheus/image-16.png\" alt=\"alt text\"></p>\n<h2 id=\"apiserver\"><a href=\"#apiserver\" class=\"headerlink\" title=\"apiserver\"></a>apiserver</h2><p>主要是监控apiserver的qps,查询成功率失败率等信息<br><img src=\"/2025/04/18/prometheus/image-17.png\" alt=\"alt text\"></p>\n<p>apiserver*开头<br><img src=\"/2025/04/18/prometheus/image-18.png\" alt=\"alt text\"></p>\n<h2 id=\"kubernetes-pods-自动发现\"><a href=\"#kubernetes-pods-自动发现\" class=\"headerlink\" title=\"kubernetes-pods 自动发现\"></a>kubernetes-pods 自动发现</h2><p>如果元数据内设置true，该pod才可以被抓取，默认false<br><img src=\"/2025/04/18/prometheus/image-19.png\" alt=\"alt text\"></p>\n<p>以coredns为例<br><img src=\"/2025/04/18/prometheus/image-20.png\" alt=\"alt text\"><br><img src=\"/2025/04/18/prometheus/image-21.png\" alt=\"alt text\"></p>\n<p>以coredns*开头<br><img src=\"/2025/04/18/prometheus/image-22.png\" alt=\"alt text\"></p>\n<p>这个自动发现还可以配置自身业务的监控，只有保证开启抓取，和符合prometheus抓取规范就可以，如果开启了prometheus.io&#x2F;scrape 但是pod并没有提供数据指标的能力就会直接报错，如图404<br><img src=\"/2025/04/18/prometheus/image-23.png\" alt=\"alt text\"></p>\n<p>比如现在我想加一个grafana的数据，只需要添加对应元数据就可以了<br><img src=\"/2025/04/18/prometheus/image-24.png\" alt=\"alt text\"></p>\n<p>prometheus就自动发现了pod的ip<br><img src=\"/2025/04/18/prometheus/image-1.png\" alt=\"alt text\"></p>\n<p>grafana*开头<br><img src=\"/2025/04/18/prometheus/image.png\" alt=\"alt text\"></p>\n","excerpt":"","more":"<p><a href=\"https://github.com/likaiyuan00/k8s-prometheus.git\">https://github.com/likaiyuan00/k8s-prometheus.git</a></p>\n<h1 id=\"k8s-prometheus\"><a href=\"#k8s-prometheus\" class=\"headerlink\" title=\"k8s-prometheus\"></a>k8s-prometheus</h1><p>部署kubernetes_sd_configs<br>配置文件只采集了</p>\n<blockquote>\n<p>1 prometheus*  prometheus-server<br><br>2 container*   kubelet 的10250端口  &#x2F;metrics&#x2F;cadvisor<br><br>3 node*    node_exporter<br><br>4 apiserver*  apiserver 6443 端口 &#x2F;metrics<br><br>5 kube*  kube-state-metrics组件 8080端口 &#x2F;metrics<br><br>6 coredns*  kubernetes-pods 自动发现 pod需要配置 prometheus.io&#x2F;scrape: “true” 不然抓取不到 默认flase<br><br>prometheus.io&#x2F;path: “&#x2F;metrics”   # 指标路径（默认 &#x2F;metrics 可不写）<br><br>7 kubelet*  apiserver代理端点 &#x2F;api&#x2F;v1&#x2F;nodes&#x2F;&lt;node-name&gt;&#x2F;proxy&#x2F;metrics<br>其他有需要的可以自行配置</p>\n</blockquote>\n<p>导入镜像，执行yml文件即可</p>\n<h2 id=\"prometheus效果图\"><a href=\"#prometheus效果图\" class=\"headerlink\" title=\"prometheus效果图\"></a>prometheus效果图</h2><p><img src=\"/2025/04/18/prometheus/image-2.png\" alt=\"alt text\"></p>\n<h2 id=\"grafana效果图\"><a href=\"#grafana效果图\" class=\"headerlink\" title=\"grafana效果图\"></a>grafana效果图</h2><p><img src=\"/2025/04/18/prometheus/image-3.png\" alt=\"alt text\"><br><img src=\"/2025/04/18/prometheus/image-4.png\" alt=\"alt text\"><br><img src=\"/2025/04/18/prometheus/image-5.png\" alt=\"alt text\"></p>\n<h2 id=\"kubelet-组件\"><a href=\"#kubelet-组件\" class=\"headerlink\" title=\"kubelet 组件\"></a>kubelet 组件</h2><p> kubelet 三个指标 &#x2F;metrics&#x2F;probes（探针） &#x2F;metrics&#x2F;cadvisor（pod） &#x2F;metrics（node）</p>\n<p>对应apiserver的 &#x2F;api&#x2F;v1&#x2F;nodes&#x2F;${node-name}&#x2F;proxy&#x2F;${url};一般为了减少apiserver的负载不建议使用这种方式 **</p>\n<p>直接访问会报401没有权限<br><img src=\"/2025/04/18/prometheus/image-6.png\" alt=\"alt text\"></p>\n<p>需要先获取token，上面文件执行完会有一个prometheus用户<br><img src=\"/2025/04/18/prometheus/image-7.png\" alt=\"alt text\"></p>\n<p>pod内token路径为 &#x2F;var&#x2F;run&#x2F;secrets&#x2F;kubernetes.io&#x2F;serviceaccount&#x2F;token</p>\n<p>通过token再去访问发现就正常了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/metrics</span><br><span class=\"line\">curl -k -sS  -H &quot;Authorization: Bearer $TOKEN&quot;  https://127.0.0.1:6443/api/v1/nodes/master/proxy/metrics</span><br><span class=\"line\"></span><br><span class=\"line\">curl -k -sS  -H &quot;Authorization: Bearer $TOKEN&quot;  https://127.0.0.1:10250/metrics</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2025/04/18/prometheus/image-8.png\" alt=\"alt text\"></p>\n<p>对应kubelet*开头<br><img src=\"/2025/04/18/prometheus/image-9.png\" alt=\"alt text\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/metrics/probes（探针）</span><br><span class=\"line\">curl -k -sS  -H &quot;Authorization: Bearer $TOKEN&quot;  https://127.0.0.1:6443/api/v1/nodes/master/proxy/metrics/probes</span><br><span class=\"line\"></span><br><span class=\"line\">curl -k -sS  -H &quot;Authorization: Bearer $TOKEN&quot;  https://127.0.0.1:10250/metrics/probes</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2025/04/18/prometheus/image-10.png\" alt=\"alt text\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/metrics/cadvisor（pod）</span><br><span class=\"line\">curl -k -sS  -H &quot;Authorization: Bearer $TOKEN&quot;  https://127.0.0.1:6443/api/v1/nodes/master/proxy/metrics/cadvisor</span><br><span class=\"line\"></span><br><span class=\"line\">curl -k -sS  -H &quot;Authorization: Bearer $TOKEN&quot;  https://127.0.0.1:10250/metrics/cadvisor</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2025/04/18/prometheus/image-11.png\" alt=\"alt text\"></p>\n<p>对应container*开头，容器指标<br><img src=\"/2025/04/18/prometheus/image-12.png\" alt=\"alt text\"></p>\n<h2 id=\"node-exporter\"><a href=\"#node-exporter\" class=\"headerlink\" title=\"node_exporter\"></a>node_exporter</h2><p>端口暴露到节点了就不需要token了<br><img src=\"/2025/04/18/prometheus/image-13.png\" alt=\"alt text\"></p>\n<p>node*开头，节点指标<br><img src=\"/2025/04/18/prometheus/image-14.png\" alt=\"alt text\"></p>\n<h2 id=\"kube-state-metrics\"><a href=\"#kube-state-metrics\" class=\"headerlink\" title=\"kube-state-metrics\"></a>kube-state-metrics</h2><p>集群应用状态监控比较重要的一个需要单独安装<br>使用containerPort: 8080 暴露到节点了不需要token<br><img src=\"/2025/04/18/prometheus/image-15.png\" alt=\"alt text\"></p>\n<p>kube*开头<br><img src=\"/2025/04/18/prometheus/image-16.png\" alt=\"alt text\"></p>\n<h2 id=\"apiserver\"><a href=\"#apiserver\" class=\"headerlink\" title=\"apiserver\"></a>apiserver</h2><p>主要是监控apiserver的qps,查询成功率失败率等信息<br><img src=\"/2025/04/18/prometheus/image-17.png\" alt=\"alt text\"></p>\n<p>apiserver*开头<br><img src=\"/2025/04/18/prometheus/image-18.png\" alt=\"alt text\"></p>\n<h2 id=\"kubernetes-pods-自动发现\"><a href=\"#kubernetes-pods-自动发现\" class=\"headerlink\" title=\"kubernetes-pods 自动发现\"></a>kubernetes-pods 自动发现</h2><p>如果元数据内设置true，该pod才可以被抓取，默认false<br><img src=\"/2025/04/18/prometheus/image-19.png\" alt=\"alt text\"></p>\n<p>以coredns为例<br><img src=\"/2025/04/18/prometheus/image-20.png\" alt=\"alt text\"><br><img src=\"/2025/04/18/prometheus/image-21.png\" alt=\"alt text\"></p>\n<p>以coredns*开头<br><img src=\"/2025/04/18/prometheus/image-22.png\" alt=\"alt text\"></p>\n<p>这个自动发现还可以配置自身业务的监控，只有保证开启抓取，和符合prometheus抓取规范就可以，如果开启了prometheus.io&#x2F;scrape 但是pod并没有提供数据指标的能力就会直接报错，如图404<br><img src=\"/2025/04/18/prometheus/image-23.png\" alt=\"alt text\"></p>\n<p>比如现在我想加一个grafana的数据，只需要添加对应元数据就可以了<br><img src=\"/2025/04/18/prometheus/image-24.png\" alt=\"alt text\"></p>\n<p>prometheus就自动发现了pod的ip<br><img src=\"/2025/04/18/prometheus/image-1.png\" alt=\"alt text\"></p>\n<p>grafana*开头<br><img src=\"/2025/04/18/prometheus/image.png\" alt=\"alt text\"></p>\n"},{"title":"screen","date":"2025-04-27T03:20:26.000Z","_content":"# 多终端管理神器\n![alt text](image.png)\nctrl +a + d 退出终端\nexit 退出加销毁终端\n## 常用参数\n```config\n$> screen [-AmRvx -ls -wipe][-d <作业名称>][-h <行数>][-r <作业名称>][-s ][-S <作业名称>]\n \n-A 　将所有的视窗都调整为目前终端机的大小。\n-d   <作业名称> 　将指定的screen作业离线。\n-h   <行数> 　指定视窗的缓冲区行数。\n-m 　即使目前已在作业中的screen作业，仍强制建立新的screen作业。\n-r   <作业名称> 　恢复离线的screen作业。\n-R 　先试图恢复离线的作业。若找不到离线的作业，即建立新的screen作业。\n-s 　指定建立新视窗时，所要执行的shell。\n-S   <作业名称> 　指定screen作业的名称。\n-v 　显示版本信息。\n-x 　恢复之前离线的screen作业。\n-ls或--list 　显示目前所有的screen作业。\n-wipe 　检查目前所有的screen作业，并删除已经无法使用的screen作业。\nscreen -S yourname -> 新建一个叫yourname的session\nscreen -ls         -> 列出当前所有的session\nscreen -r yourname -> 回到yourname这个session\nscreen -d yourname -> 远程detach某个session\nscreen -d -r yourname -> 结束当前session并回到yourname这个session\n```\n## 常用快捷键\n```\nC-a ? -> 显示所有键绑定信息\nC-a c -> 创建一个新的运行shell的窗口并切换到该窗口\nC-a n -> Next，切换到下一个 window \nC-a p -> Previous，切换到前一个 window \nC-a 0..9 -> 切换到第 0..9 个 window\nCtrl+a [Space] -> 由视窗0循序切换到视窗9\nC-a C-a -> 在两个最近使用的 window 间切换 \nC-a x -> 锁住当前的 window，需用用户密码解锁\nC-a d -> detach，暂时离开当前session，将目前的 screen session (可能含有多个 windows) 丢到后台执行，并会回到还没进 screen 时的状态，此时在 screen session 里，每个 window 内运行的 process (无论是前台/后台)都在继续执行，即使 logout 也不影响。 \nC-a z -> 把当前session放到后台执行，用 shell 的 fg 命令则可回去。\nC-a w -> 显示所有窗口列表\nC-a t -> time，显示当前时间，和系统的 load \nC-a k -> kill window，强行关闭当前的 window\nC-a [ -> 进入 copy mode，在 copy mode 下可以回滚、搜索、复制就像用使用 vi 一样\n    C-b Backward，PageUp \n    C-f Forward，PageDown \n    H(大写) High，将光标移至左上角 \n    L Low，将光标移至左下角 \n    0 移到行首 \n    $ 行末 \n    w forward one word，以字为单位往前移 \n    b backward one word，以字为单位往后移 \n    Space 第一次按为标记区起点，第二次按为终点 \n    Esc 结束 copy mode \nC-a ] -> paste，把刚刚在 copy mode 选定的内容贴上\n```\n","source":"_posts/screen.md","raw":"---\ntitle: screen\ndate: 2025-04-27 11:20:26\ntags: \ncategories: linux\n---\n# 多终端管理神器\n![alt text](image.png)\nctrl +a + d 退出终端\nexit 退出加销毁终端\n## 常用参数\n```config\n$> screen [-AmRvx -ls -wipe][-d <作业名称>][-h <行数>][-r <作业名称>][-s ][-S <作业名称>]\n \n-A 　将所有的视窗都调整为目前终端机的大小。\n-d   <作业名称> 　将指定的screen作业离线。\n-h   <行数> 　指定视窗的缓冲区行数。\n-m 　即使目前已在作业中的screen作业，仍强制建立新的screen作业。\n-r   <作业名称> 　恢复离线的screen作业。\n-R 　先试图恢复离线的作业。若找不到离线的作业，即建立新的screen作业。\n-s 　指定建立新视窗时，所要执行的shell。\n-S   <作业名称> 　指定screen作业的名称。\n-v 　显示版本信息。\n-x 　恢复之前离线的screen作业。\n-ls或--list 　显示目前所有的screen作业。\n-wipe 　检查目前所有的screen作业，并删除已经无法使用的screen作业。\nscreen -S yourname -> 新建一个叫yourname的session\nscreen -ls         -> 列出当前所有的session\nscreen -r yourname -> 回到yourname这个session\nscreen -d yourname -> 远程detach某个session\nscreen -d -r yourname -> 结束当前session并回到yourname这个session\n```\n## 常用快捷键\n```\nC-a ? -> 显示所有键绑定信息\nC-a c -> 创建一个新的运行shell的窗口并切换到该窗口\nC-a n -> Next，切换到下一个 window \nC-a p -> Previous，切换到前一个 window \nC-a 0..9 -> 切换到第 0..9 个 window\nCtrl+a [Space] -> 由视窗0循序切换到视窗9\nC-a C-a -> 在两个最近使用的 window 间切换 \nC-a x -> 锁住当前的 window，需用用户密码解锁\nC-a d -> detach，暂时离开当前session，将目前的 screen session (可能含有多个 windows) 丢到后台执行，并会回到还没进 screen 时的状态，此时在 screen session 里，每个 window 内运行的 process (无论是前台/后台)都在继续执行，即使 logout 也不影响。 \nC-a z -> 把当前session放到后台执行，用 shell 的 fg 命令则可回去。\nC-a w -> 显示所有窗口列表\nC-a t -> time，显示当前时间，和系统的 load \nC-a k -> kill window，强行关闭当前的 window\nC-a [ -> 进入 copy mode，在 copy mode 下可以回滚、搜索、复制就像用使用 vi 一样\n    C-b Backward，PageUp \n    C-f Forward，PageDown \n    H(大写) High，将光标移至左上角 \n    L Low，将光标移至左下角 \n    0 移到行首 \n    $ 行末 \n    w forward one word，以字为单位往前移 \n    b backward one word，以字为单位往后移 \n    Space 第一次按为标记区起点，第二次按为终点 \n    Esc 结束 copy mode \nC-a ] -> paste，把刚刚在 copy mode 选定的内容贴上\n```\n","slug":"screen","published":1,"updated":"2025-07-30T08:38:33.408Z","comments":1,"layout":"post","photos":[],"_id":"cmdppvvvv000jlpod8p7465dy","content":"<h1 id=\"多终端管理神器\"><a href=\"#多终端管理神器\" class=\"headerlink\" title=\"多终端管理神器\"></a>多终端管理神器</h1><p><img src=\"/2025/04/27/screen/image.png\" alt=\"alt text\"><br>ctrl +a + d 退出终端<br>exit 退出加销毁终端</p>\n<h2 id=\"常用参数\"><a href=\"#常用参数\" class=\"headerlink\" title=\"常用参数\"></a>常用参数</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&gt; screen [-AmRvx -ls -wipe][-d &lt;作业名称&gt;][-h &lt;行数&gt;][-r &lt;作业名称&gt;][-s ][-S &lt;作业名称&gt;]</span><br><span class=\"line\"> </span><br><span class=\"line\">-A 　将所有的视窗都调整为目前终端机的大小。</span><br><span class=\"line\">-d   &lt;作业名称&gt; 　将指定的screen作业离线。</span><br><span class=\"line\">-h   &lt;行数&gt; 　指定视窗的缓冲区行数。</span><br><span class=\"line\">-m 　即使目前已在作业中的screen作业，仍强制建立新的screen作业。</span><br><span class=\"line\">-r   &lt;作业名称&gt; 　恢复离线的screen作业。</span><br><span class=\"line\">-R 　先试图恢复离线的作业。若找不到离线的作业，即建立新的screen作业。</span><br><span class=\"line\">-s 　指定建立新视窗时，所要执行的shell。</span><br><span class=\"line\">-S   &lt;作业名称&gt; 　指定screen作业的名称。</span><br><span class=\"line\">-v 　显示版本信息。</span><br><span class=\"line\">-x 　恢复之前离线的screen作业。</span><br><span class=\"line\">-ls或--list 　显示目前所有的screen作业。</span><br><span class=\"line\">-wipe 　检查目前所有的screen作业，并删除已经无法使用的screen作业。</span><br><span class=\"line\">screen -S yourname -&gt; 新建一个叫yourname的session</span><br><span class=\"line\">screen -ls         -&gt; 列出当前所有的session</span><br><span class=\"line\">screen -r yourname -&gt; 回到yourname这个session</span><br><span class=\"line\">screen -d yourname -&gt; 远程detach某个session</span><br><span class=\"line\">screen -d -r yourname -&gt; 结束当前session并回到yourname这个session</span><br></pre></td></tr></table></figure>\n<h2 id=\"常用快捷键\"><a href=\"#常用快捷键\" class=\"headerlink\" title=\"常用快捷键\"></a>常用快捷键</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C-a ? -&gt; 显示所有键绑定信息</span><br><span class=\"line\">C-a c -&gt; 创建一个新的运行shell的窗口并切换到该窗口</span><br><span class=\"line\">C-a n -&gt; Next，切换到下一个 window </span><br><span class=\"line\">C-a p -&gt; Previous，切换到前一个 window </span><br><span class=\"line\">C-a 0..9 -&gt; 切换到第 0..9 个 window</span><br><span class=\"line\">Ctrl+a [Space] -&gt; 由视窗0循序切换到视窗9</span><br><span class=\"line\">C-a C-a -&gt; 在两个最近使用的 window 间切换 </span><br><span class=\"line\">C-a x -&gt; 锁住当前的 window，需用用户密码解锁</span><br><span class=\"line\">C-a d -&gt; detach，暂时离开当前session，将目前的 screen session (可能含有多个 windows) 丢到后台执行，并会回到还没进 screen 时的状态，此时在 screen session 里，每个 window 内运行的 process (无论是前台/后台)都在继续执行，即使 logout 也不影响。 </span><br><span class=\"line\">C-a z -&gt; 把当前session放到后台执行，用 shell 的 fg 命令则可回去。</span><br><span class=\"line\">C-a w -&gt; 显示所有窗口列表</span><br><span class=\"line\">C-a t -&gt; time，显示当前时间，和系统的 load </span><br><span class=\"line\">C-a k -&gt; kill window，强行关闭当前的 window</span><br><span class=\"line\">C-a [ -&gt; 进入 copy mode，在 copy mode 下可以回滚、搜索、复制就像用使用 vi 一样</span><br><span class=\"line\">    C-b Backward，PageUp </span><br><span class=\"line\">    C-f Forward，PageDown </span><br><span class=\"line\">    H(大写) High，将光标移至左上角 </span><br><span class=\"line\">    L Low，将光标移至左下角 </span><br><span class=\"line\">    0 移到行首 </span><br><span class=\"line\">    $ 行末 </span><br><span class=\"line\">    w forward one word，以字为单位往前移 </span><br><span class=\"line\">    b backward one word，以字为单位往后移 </span><br><span class=\"line\">    Space 第一次按为标记区起点，第二次按为终点 </span><br><span class=\"line\">    Esc 结束 copy mode </span><br><span class=\"line\">C-a ] -&gt; paste，把刚刚在 copy mode 选定的内容贴上</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"多终端管理神器\"><a href=\"#多终端管理神器\" class=\"headerlink\" title=\"多终端管理神器\"></a>多终端管理神器</h1><p><img src=\"/2025/04/27/screen/image.png\" alt=\"alt text\"><br>ctrl +a + d 退出终端<br>exit 退出加销毁终端</p>\n<h2 id=\"常用参数\"><a href=\"#常用参数\" class=\"headerlink\" title=\"常用参数\"></a>常用参数</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&gt; screen [-AmRvx -ls -wipe][-d &lt;作业名称&gt;][-h &lt;行数&gt;][-r &lt;作业名称&gt;][-s ][-S &lt;作业名称&gt;]</span><br><span class=\"line\"> </span><br><span class=\"line\">-A 　将所有的视窗都调整为目前终端机的大小。</span><br><span class=\"line\">-d   &lt;作业名称&gt; 　将指定的screen作业离线。</span><br><span class=\"line\">-h   &lt;行数&gt; 　指定视窗的缓冲区行数。</span><br><span class=\"line\">-m 　即使目前已在作业中的screen作业，仍强制建立新的screen作业。</span><br><span class=\"line\">-r   &lt;作业名称&gt; 　恢复离线的screen作业。</span><br><span class=\"line\">-R 　先试图恢复离线的作业。若找不到离线的作业，即建立新的screen作业。</span><br><span class=\"line\">-s 　指定建立新视窗时，所要执行的shell。</span><br><span class=\"line\">-S   &lt;作业名称&gt; 　指定screen作业的名称。</span><br><span class=\"line\">-v 　显示版本信息。</span><br><span class=\"line\">-x 　恢复之前离线的screen作业。</span><br><span class=\"line\">-ls或--list 　显示目前所有的screen作业。</span><br><span class=\"line\">-wipe 　检查目前所有的screen作业，并删除已经无法使用的screen作业。</span><br><span class=\"line\">screen -S yourname -&gt; 新建一个叫yourname的session</span><br><span class=\"line\">screen -ls         -&gt; 列出当前所有的session</span><br><span class=\"line\">screen -r yourname -&gt; 回到yourname这个session</span><br><span class=\"line\">screen -d yourname -&gt; 远程detach某个session</span><br><span class=\"line\">screen -d -r yourname -&gt; 结束当前session并回到yourname这个session</span><br></pre></td></tr></table></figure>\n<h2 id=\"常用快捷键\"><a href=\"#常用快捷键\" class=\"headerlink\" title=\"常用快捷键\"></a>常用快捷键</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C-a ? -&gt; 显示所有键绑定信息</span><br><span class=\"line\">C-a c -&gt; 创建一个新的运行shell的窗口并切换到该窗口</span><br><span class=\"line\">C-a n -&gt; Next，切换到下一个 window </span><br><span class=\"line\">C-a p -&gt; Previous，切换到前一个 window </span><br><span class=\"line\">C-a 0..9 -&gt; 切换到第 0..9 个 window</span><br><span class=\"line\">Ctrl+a [Space] -&gt; 由视窗0循序切换到视窗9</span><br><span class=\"line\">C-a C-a -&gt; 在两个最近使用的 window 间切换 </span><br><span class=\"line\">C-a x -&gt; 锁住当前的 window，需用用户密码解锁</span><br><span class=\"line\">C-a d -&gt; detach，暂时离开当前session，将目前的 screen session (可能含有多个 windows) 丢到后台执行，并会回到还没进 screen 时的状态，此时在 screen session 里，每个 window 内运行的 process (无论是前台/后台)都在继续执行，即使 logout 也不影响。 </span><br><span class=\"line\">C-a z -&gt; 把当前session放到后台执行，用 shell 的 fg 命令则可回去。</span><br><span class=\"line\">C-a w -&gt; 显示所有窗口列表</span><br><span class=\"line\">C-a t -&gt; time，显示当前时间，和系统的 load </span><br><span class=\"line\">C-a k -&gt; kill window，强行关闭当前的 window</span><br><span class=\"line\">C-a [ -&gt; 进入 copy mode，在 copy mode 下可以回滚、搜索、复制就像用使用 vi 一样</span><br><span class=\"line\">    C-b Backward，PageUp </span><br><span class=\"line\">    C-f Forward，PageDown </span><br><span class=\"line\">    H(大写) High，将光标移至左上角 </span><br><span class=\"line\">    L Low，将光标移至左下角 </span><br><span class=\"line\">    0 移到行首 </span><br><span class=\"line\">    $ 行末 </span><br><span class=\"line\">    w forward one word，以字为单位往前移 </span><br><span class=\"line\">    b backward one word，以字为单位往后移 </span><br><span class=\"line\">    Space 第一次按为标记区起点，第二次按为终点 </span><br><span class=\"line\">    Esc 结束 copy mode </span><br><span class=\"line\">C-a ] -&gt; paste，把刚刚在 copy mode 选定的内容贴上</span><br></pre></td></tr></table></figure>\n"},{"title":"tcp","date":"2025-07-25T07:36:08.000Z","_content":"\n# 三握四挥\n![alt text](image.png)\n\n```\n （1）第一次握手：Client将标志位SYN置为1，随机产生一个值seq=J，并将该数据包发送给Server，Client进入SYN_SENT状态，等待Server确认。\n\n  （2）第二次握手：Server收到数据包后由标志位SYN=1知道Client请求建立连接，Server将标志位SYN和ACK都置为1，ack=J+1，随机产生一个值seq=K，并将该数据包发送给Client以确认连接请求，Server进入SYN_RCVD状态。\n\n  （3）第三次握手：Client收到确认后，检查ack是否为J+1，ACK是否为1，如果正确则将标志位ACK置为1，ack=K+1，并将该数据包发送给Server，Server检查ack是否为K+1，ACK是否为1，如果正确则连接建立成功，Client和Server进入ESTABLISHED状态，完成三次握手，随后Client与Server之间可以开始传输数据了\n\n客户端发起fin位为1的FIN报文，此时客户端进入FIN_WAIT_1状态\n服务端接受到FIN 报文后，发送ack应答报文，此时服务端进入close_wait状态\n客户端接受到ack应答报文后，进入FIN_WAIT_2状态\n服务端处理完数据后，向客户端发送FIN报文，此时服务端进入LAST_ACK状态\n客户端接受到FIN报文后，客户端发送应答ack报文，进入TIME_WAIT阶段\n服务端接受到ack报文后，断开连接，处于close状态\n客户端过一段时间后，也就是2MSL后，进入close状态\n```\n\n\n\n\n# Time Wait\n## 概念\n* 谁先关闭谁最后进入timewait状态，time_wait 状态下，TCP 连接占用的端口，无法被再次使用\n```\nclose 短连接\n每个HTTP请求都需要重新完成TCP三次握手建立连接，数据传输完成后四次挥手关闭连接\nkeep-alive 长连接\n在HTTP1.1协议中默认长连接，有个 Connection 头，Connection有两个值，close和keep-alive，这个头就相当于客户端告诉服务端，服务端你执行完成请求之后，是关闭连接还是保持连接，保持连接就意味着在保持连接期间，只能由客户端主动断开连接。还有一个keep-alive的头，设置的值就代表了服务端保持连接保持多久\n#ngx\nkeepalive 100;          # 保持的空闲连接数\nkeepalive_timeout 60s;   # 空闲超时时间\nkeepalive_requests 100;  # 单连接最大请求数\nlocation / {\n    proxy_pass http://backend_servers;\n    proxy_http_version 1.1;     # 关键：使用 HTTP/1.1\n    proxy_set_header Connection \"\";  # 清除 Connection 头（避免传递错误值）\n}\n# Linux 内核参数（默认值通常为 7200 秒）默认不启用\nsysctl -w net.ipv4.tcp_keepalive_time=1800  # 空闲 1800 秒后发送探针\nsysctl -w net.ipv4.tcp_keepalive_probes=3   # 发送 3 次无响应后关闭\nsysctl -w net.ipv4.tcp_keepalive_intvl=15   # 每次探针间隔 15 秒\n```\n## 相关参数\n```\nnetstat -ant | awk '/^tcp/ {++y[$NF]} END {for(w in y) print w, y[w]}'\nnet.ipv4.tcp_syncookies = 1 \nnet.ipv4.tcp_tw_reuse = 1 \nnet.ipv4.tcp_tw_recycle = 1\nnet.ipv4.tcp_fin_timeout = 30\n==============================================\nnet.ipv4.tcp_tw_reuse = 1\n表示开启重用。允许将一个处于TIME-WAIT状态的端口重新用于新的TCP连接，默认为0，表示关闭，其防止重复报文的原理也是时间戳\nnet.ipv4.tcp_tw_recycle = 1\n表示开启TCP连接中TIME-WAIT sockets的快速回收，意思就是系统会保存最近一次该socket连接上的传输报文（包括数据或者仅仅是ACK报文）的时间戳，当相同四元组socket过来的报文的时间戳小于缓存下来的时间戳则丢弃该数据包，并回收这个socket，默认为0，表示关闭。开启这个功能风险有点大，NAT环境可能导致DROP掉SYN包（回复RST），在NAT场景下不要使用。需要注意在Linux内核4.10版本以后该参数就已经被移除了。\nnet.ipv4.tcp_fin_timeout = 60\n这个时间不是修改2MSL的时长，主动关闭连接的一方接收到ACK之后会进入，FIN_WAIT-2状态，然后等待被动关闭一方发送FIN，这个时间是设置主动关闭的一方等待对方发送FIN的最长时长，默认是60秒。在这个状态下端口是不可能被重用的，文件描述符和内存也不会被释放，因为这个阶段被动关闭的一方有可能还有数据要发送，因为对端处于CLOSE_WAIT状态，也就是等待上层应用程序。关于这个的真实含义我希望大家清楚，而且不要调整的太小当然太大也不行，至少在3.10内核版本上这个参数不是调整的TIME_WAIT时长。\nnet.ipv4.ip_local_port_range = 32768 60999\n表示用于外连使用的随机高位端口范围，也就是作为客户端连接其他服务的时候系统从这个范围随机取出一个端口来作为源端口使用来去连接对端服务器，这个范围也就决定了最多主动能同时建立多少个外连。\nnet.ipv4.tcp_max_tw_buckets = 6000\n同时保持TIME_WAIT套接字的最大个数，超过这个数字那么该TIME_WAIT套接字将立刻被释放并在/var/log/message日志中打印警告信息（TCP: time wait bucket table overflow）。这个过多主要是消耗内存，单个TIME_WAIT占用内存非常小，但是多了就不好了，这个主要看内存以及你的服务器是否直接对外。\n使用net.ipv4.tcp_tw_reuse和net.ipv4.tcp_tw_recycle 的前提是开启时间戳net.ipv4.tcp_timestamps = 1不过这一项默认是开启的\n```\n\n# CLOSE_WAIT\n* 这种状态的含义其实是表示在等待关闭。怎么理解呢？当对方close一个SOCKET后发送FIN报文给自己，你系统毫无疑问地会回应一个ACK报文给对方，此时则进入到CLOSE_WAIT状态。接下来呢，实际上你真正需要考虑的事情是查看你是否还有数据发送给对方，如果没有的话，那么你也就可以close这个SOCKET，发送FIN报文给对方，也即关闭连接。所以你在CLOSE_WAIT状态下，需要完成的事情是等待你去关闭连接。CLOSE_WAIT一般是由于对端主动关闭，而我方没有正确处理的原因引起的，临时解决重启服务，永久解决就是修改程序逻辑\n```\n客户端（主动关闭方）          服务器（被动关闭方）\n       |                               |\n       |--- GET /bigfile.zip --------->| \n       |<--- 200 OK + 文件数据 ---------|\n       |                               |\n       |--- FIN (我要关闭) ------------>| → 客户端进入 FIN_WAIT_1\n       |<--- ACK ----------------------| → 服务端进入 CLOSE_WAIT\n       |                               |（此时服务端还在发送剩余文件数据）\n       |<--- 剩余数据包 ----------------|\n       |<--- FIN (我也关闭) ------------| → 服务端进入 LAST_ACK\n       |--- ACK ----------------------->| → 客户端进入 TIME_WAIT                \n#没有调用s.close()关闭socket，会造成大量CLOSE_WAIT\nimport socket\nimport time\n\n\ndef create_sockets(num_sockets):\n    sockets = []\n    for _ in range(num_sockets):\n        # 创建一个 TCP 套接字\n        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        print(f\"创建 socket {_ + 1}: {s.fileno()}，状态为 alloc\")\n        sockets.append(s)\n    return sockets\n\nif __name__ == \"__main__\":\n    num_sockets = 10\n    while True:\n        num_sockets  += 10\n        sockets = create_sockets(num_sockets)\n        print(f\"总共创建了 {num_sockets} 个 socket 对象。\")\n        time.sleep(10)\n\n#shell\ncat /proc/net/sockstat | grep sockets | awk '{print $3}'\nnetstat -n | awk '/^tcp/ {++state[$NF]} END {for(key in state) print key,\"\\t\",state[key]}'\nfor i in `ls /proc/ |grep '[0-9]'`\ndo\n    mycount=`ls /proc/$i/fd|wc -l`\n    echo \"$i $mycount\"\ndone\n```\n","source":"_posts/tcp.md","raw":"---\ntitle: tcp\ndate: 2025-07-25 15:36:08\ntags:\ncategories: linux\n---\n\n# 三握四挥\n![alt text](image.png)\n\n```\n （1）第一次握手：Client将标志位SYN置为1，随机产生一个值seq=J，并将该数据包发送给Server，Client进入SYN_SENT状态，等待Server确认。\n\n  （2）第二次握手：Server收到数据包后由标志位SYN=1知道Client请求建立连接，Server将标志位SYN和ACK都置为1，ack=J+1，随机产生一个值seq=K，并将该数据包发送给Client以确认连接请求，Server进入SYN_RCVD状态。\n\n  （3）第三次握手：Client收到确认后，检查ack是否为J+1，ACK是否为1，如果正确则将标志位ACK置为1，ack=K+1，并将该数据包发送给Server，Server检查ack是否为K+1，ACK是否为1，如果正确则连接建立成功，Client和Server进入ESTABLISHED状态，完成三次握手，随后Client与Server之间可以开始传输数据了\n\n客户端发起fin位为1的FIN报文，此时客户端进入FIN_WAIT_1状态\n服务端接受到FIN 报文后，发送ack应答报文，此时服务端进入close_wait状态\n客户端接受到ack应答报文后，进入FIN_WAIT_2状态\n服务端处理完数据后，向客户端发送FIN报文，此时服务端进入LAST_ACK状态\n客户端接受到FIN报文后，客户端发送应答ack报文，进入TIME_WAIT阶段\n服务端接受到ack报文后，断开连接，处于close状态\n客户端过一段时间后，也就是2MSL后，进入close状态\n```\n\n\n\n\n# Time Wait\n## 概念\n* 谁先关闭谁最后进入timewait状态，time_wait 状态下，TCP 连接占用的端口，无法被再次使用\n```\nclose 短连接\n每个HTTP请求都需要重新完成TCP三次握手建立连接，数据传输完成后四次挥手关闭连接\nkeep-alive 长连接\n在HTTP1.1协议中默认长连接，有个 Connection 头，Connection有两个值，close和keep-alive，这个头就相当于客户端告诉服务端，服务端你执行完成请求之后，是关闭连接还是保持连接，保持连接就意味着在保持连接期间，只能由客户端主动断开连接。还有一个keep-alive的头，设置的值就代表了服务端保持连接保持多久\n#ngx\nkeepalive 100;          # 保持的空闲连接数\nkeepalive_timeout 60s;   # 空闲超时时间\nkeepalive_requests 100;  # 单连接最大请求数\nlocation / {\n    proxy_pass http://backend_servers;\n    proxy_http_version 1.1;     # 关键：使用 HTTP/1.1\n    proxy_set_header Connection \"\";  # 清除 Connection 头（避免传递错误值）\n}\n# Linux 内核参数（默认值通常为 7200 秒）默认不启用\nsysctl -w net.ipv4.tcp_keepalive_time=1800  # 空闲 1800 秒后发送探针\nsysctl -w net.ipv4.tcp_keepalive_probes=3   # 发送 3 次无响应后关闭\nsysctl -w net.ipv4.tcp_keepalive_intvl=15   # 每次探针间隔 15 秒\n```\n## 相关参数\n```\nnetstat -ant | awk '/^tcp/ {++y[$NF]} END {for(w in y) print w, y[w]}'\nnet.ipv4.tcp_syncookies = 1 \nnet.ipv4.tcp_tw_reuse = 1 \nnet.ipv4.tcp_tw_recycle = 1\nnet.ipv4.tcp_fin_timeout = 30\n==============================================\nnet.ipv4.tcp_tw_reuse = 1\n表示开启重用。允许将一个处于TIME-WAIT状态的端口重新用于新的TCP连接，默认为0，表示关闭，其防止重复报文的原理也是时间戳\nnet.ipv4.tcp_tw_recycle = 1\n表示开启TCP连接中TIME-WAIT sockets的快速回收，意思就是系统会保存最近一次该socket连接上的传输报文（包括数据或者仅仅是ACK报文）的时间戳，当相同四元组socket过来的报文的时间戳小于缓存下来的时间戳则丢弃该数据包，并回收这个socket，默认为0，表示关闭。开启这个功能风险有点大，NAT环境可能导致DROP掉SYN包（回复RST），在NAT场景下不要使用。需要注意在Linux内核4.10版本以后该参数就已经被移除了。\nnet.ipv4.tcp_fin_timeout = 60\n这个时间不是修改2MSL的时长，主动关闭连接的一方接收到ACK之后会进入，FIN_WAIT-2状态，然后等待被动关闭一方发送FIN，这个时间是设置主动关闭的一方等待对方发送FIN的最长时长，默认是60秒。在这个状态下端口是不可能被重用的，文件描述符和内存也不会被释放，因为这个阶段被动关闭的一方有可能还有数据要发送，因为对端处于CLOSE_WAIT状态，也就是等待上层应用程序。关于这个的真实含义我希望大家清楚，而且不要调整的太小当然太大也不行，至少在3.10内核版本上这个参数不是调整的TIME_WAIT时长。\nnet.ipv4.ip_local_port_range = 32768 60999\n表示用于外连使用的随机高位端口范围，也就是作为客户端连接其他服务的时候系统从这个范围随机取出一个端口来作为源端口使用来去连接对端服务器，这个范围也就决定了最多主动能同时建立多少个外连。\nnet.ipv4.tcp_max_tw_buckets = 6000\n同时保持TIME_WAIT套接字的最大个数，超过这个数字那么该TIME_WAIT套接字将立刻被释放并在/var/log/message日志中打印警告信息（TCP: time wait bucket table overflow）。这个过多主要是消耗内存，单个TIME_WAIT占用内存非常小，但是多了就不好了，这个主要看内存以及你的服务器是否直接对外。\n使用net.ipv4.tcp_tw_reuse和net.ipv4.tcp_tw_recycle 的前提是开启时间戳net.ipv4.tcp_timestamps = 1不过这一项默认是开启的\n```\n\n# CLOSE_WAIT\n* 这种状态的含义其实是表示在等待关闭。怎么理解呢？当对方close一个SOCKET后发送FIN报文给自己，你系统毫无疑问地会回应一个ACK报文给对方，此时则进入到CLOSE_WAIT状态。接下来呢，实际上你真正需要考虑的事情是查看你是否还有数据发送给对方，如果没有的话，那么你也就可以close这个SOCKET，发送FIN报文给对方，也即关闭连接。所以你在CLOSE_WAIT状态下，需要完成的事情是等待你去关闭连接。CLOSE_WAIT一般是由于对端主动关闭，而我方没有正确处理的原因引起的，临时解决重启服务，永久解决就是修改程序逻辑\n```\n客户端（主动关闭方）          服务器（被动关闭方）\n       |                               |\n       |--- GET /bigfile.zip --------->| \n       |<--- 200 OK + 文件数据 ---------|\n       |                               |\n       |--- FIN (我要关闭) ------------>| → 客户端进入 FIN_WAIT_1\n       |<--- ACK ----------------------| → 服务端进入 CLOSE_WAIT\n       |                               |（此时服务端还在发送剩余文件数据）\n       |<--- 剩余数据包 ----------------|\n       |<--- FIN (我也关闭) ------------| → 服务端进入 LAST_ACK\n       |--- ACK ----------------------->| → 客户端进入 TIME_WAIT                \n#没有调用s.close()关闭socket，会造成大量CLOSE_WAIT\nimport socket\nimport time\n\n\ndef create_sockets(num_sockets):\n    sockets = []\n    for _ in range(num_sockets):\n        # 创建一个 TCP 套接字\n        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        print(f\"创建 socket {_ + 1}: {s.fileno()}，状态为 alloc\")\n        sockets.append(s)\n    return sockets\n\nif __name__ == \"__main__\":\n    num_sockets = 10\n    while True:\n        num_sockets  += 10\n        sockets = create_sockets(num_sockets)\n        print(f\"总共创建了 {num_sockets} 个 socket 对象。\")\n        time.sleep(10)\n\n#shell\ncat /proc/net/sockstat | grep sockets | awk '{print $3}'\nnetstat -n | awk '/^tcp/ {++state[$NF]} END {for(key in state) print key,\"\\t\",state[key]}'\nfor i in `ls /proc/ |grep '[0-9]'`\ndo\n    mycount=`ls /proc/$i/fd|wc -l`\n    echo \"$i $mycount\"\ndone\n```\n","slug":"tcp","published":1,"updated":"2025-07-30T08:38:33.410Z","comments":1,"layout":"post","photos":[],"_id":"cmdppvvvw000mlpod628l64wc","content":"<h1 id=\"三握四挥\"><a href=\"#三握四挥\" class=\"headerlink\" title=\"三握四挥\"></a>三握四挥</h1><p><img src=\"/2025/07/25/tcp/image.png\" alt=\"alt text\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> （1）第一次握手：Client将标志位SYN置为1，随机产生一个值seq=J，并将该数据包发送给Server，Client进入SYN_SENT状态，等待Server确认。</span><br><span class=\"line\"></span><br><span class=\"line\">  （2）第二次握手：Server收到数据包后由标志位SYN=1知道Client请求建立连接，Server将标志位SYN和ACK都置为1，ack=J+1，随机产生一个值seq=K，并将该数据包发送给Client以确认连接请求，Server进入SYN_RCVD状态。</span><br><span class=\"line\"></span><br><span class=\"line\">  （3）第三次握手：Client收到确认后，检查ack是否为J+1，ACK是否为1，如果正确则将标志位ACK置为1，ack=K+1，并将该数据包发送给Server，Server检查ack是否为K+1，ACK是否为1，如果正确则连接建立成功，Client和Server进入ESTABLISHED状态，完成三次握手，随后Client与Server之间可以开始传输数据了</span><br><span class=\"line\"></span><br><span class=\"line\">客户端发起fin位为1的FIN报文，此时客户端进入FIN_WAIT_1状态</span><br><span class=\"line\">服务端接受到FIN 报文后，发送ack应答报文，此时服务端进入close_wait状态</span><br><span class=\"line\">客户端接受到ack应答报文后，进入FIN_WAIT_2状态</span><br><span class=\"line\">服务端处理完数据后，向客户端发送FIN报文，此时服务端进入LAST_ACK状态</span><br><span class=\"line\">客户端接受到FIN报文后，客户端发送应答ack报文，进入TIME_WAIT阶段</span><br><span class=\"line\">服务端接受到ack报文后，断开连接，处于close状态</span><br><span class=\"line\">客户端过一段时间后，也就是2MSL后，进入close状态</span><br></pre></td></tr></table></figure>\n\n\n\n\n<h1 id=\"Time-Wait\"><a href=\"#Time-Wait\" class=\"headerlink\" title=\"Time Wait\"></a>Time Wait</h1><h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><ul>\n<li>谁先关闭谁最后进入timewait状态，time_wait 状态下，TCP 连接占用的端口，无法被再次使用<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">close 短连接</span><br><span class=\"line\">每个HTTP请求都需要重新完成TCP三次握手建立连接，数据传输完成后四次挥手关闭连接</span><br><span class=\"line\">keep-alive 长连接</span><br><span class=\"line\">在HTTP1.1协议中默认长连接，有个 Connection 头，Connection有两个值，close和keep-alive，这个头就相当于客户端告诉服务端，服务端你执行完成请求之后，是关闭连接还是保持连接，保持连接就意味着在保持连接期间，只能由客户端主动断开连接。还有一个keep-alive的头，设置的值就代表了服务端保持连接保持多久</span><br><span class=\"line\">#ngx</span><br><span class=\"line\">keepalive 100;          # 保持的空闲连接数</span><br><span class=\"line\">keepalive_timeout 60s;   # 空闲超时时间</span><br><span class=\"line\">keepalive_requests 100;  # 单连接最大请求数</span><br><span class=\"line\">location / &#123;</span><br><span class=\"line\">    proxy_pass http://backend_servers;</span><br><span class=\"line\">    proxy_http_version 1.1;     # 关键：使用 HTTP/1.1</span><br><span class=\"line\">    proxy_set_header Connection &quot;&quot;;  # 清除 Connection 头（避免传递错误值）</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># Linux 内核参数（默认值通常为 7200 秒）默认不启用</span><br><span class=\"line\">sysctl -w net.ipv4.tcp_keepalive_time=1800  # 空闲 1800 秒后发送探针</span><br><span class=\"line\">sysctl -w net.ipv4.tcp_keepalive_probes=3   # 发送 3 次无响应后关闭</span><br><span class=\"line\">sysctl -w net.ipv4.tcp_keepalive_intvl=15   # 每次探针间隔 15 秒</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"相关参数\"><a href=\"#相关参数\" class=\"headerlink\" title=\"相关参数\"></a>相关参数</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -ant | awk &#x27;/^tcp/ &#123;++y[$NF]&#125; END &#123;for(w in y) print w, y[w]&#125;&#x27;</span><br><span class=\"line\">net.ipv4.tcp_syncookies = 1 </span><br><span class=\"line\">net.ipv4.tcp_tw_reuse = 1 </span><br><span class=\"line\">net.ipv4.tcp_tw_recycle = 1</span><br><span class=\"line\">net.ipv4.tcp_fin_timeout = 30</span><br><span class=\"line\">==============================================</span><br><span class=\"line\">net.ipv4.tcp_tw_reuse = 1</span><br><span class=\"line\">表示开启重用。允许将一个处于TIME-WAIT状态的端口重新用于新的TCP连接，默认为0，表示关闭，其防止重复报文的原理也是时间戳</span><br><span class=\"line\">net.ipv4.tcp_tw_recycle = 1</span><br><span class=\"line\">表示开启TCP连接中TIME-WAIT sockets的快速回收，意思就是系统会保存最近一次该socket连接上的传输报文（包括数据或者仅仅是ACK报文）的时间戳，当相同四元组socket过来的报文的时间戳小于缓存下来的时间戳则丢弃该数据包，并回收这个socket，默认为0，表示关闭。开启这个功能风险有点大，NAT环境可能导致DROP掉SYN包（回复RST），在NAT场景下不要使用。需要注意在Linux内核4.10版本以后该参数就已经被移除了。</span><br><span class=\"line\">net.ipv4.tcp_fin_timeout = 60</span><br><span class=\"line\">这个时间不是修改2MSL的时长，主动关闭连接的一方接收到ACK之后会进入，FIN_WAIT-2状态，然后等待被动关闭一方发送FIN，这个时间是设置主动关闭的一方等待对方发送FIN的最长时长，默认是60秒。在这个状态下端口是不可能被重用的，文件描述符和内存也不会被释放，因为这个阶段被动关闭的一方有可能还有数据要发送，因为对端处于CLOSE_WAIT状态，也就是等待上层应用程序。关于这个的真实含义我希望大家清楚，而且不要调整的太小当然太大也不行，至少在3.10内核版本上这个参数不是调整的TIME_WAIT时长。</span><br><span class=\"line\">net.ipv4.ip_local_port_range = 32768 60999</span><br><span class=\"line\">表示用于外连使用的随机高位端口范围，也就是作为客户端连接其他服务的时候系统从这个范围随机取出一个端口来作为源端口使用来去连接对端服务器，这个范围也就决定了最多主动能同时建立多少个外连。</span><br><span class=\"line\">net.ipv4.tcp_max_tw_buckets = 6000</span><br><span class=\"line\">同时保持TIME_WAIT套接字的最大个数，超过这个数字那么该TIME_WAIT套接字将立刻被释放并在/var/log/message日志中打印警告信息（TCP: time wait bucket table overflow）。这个过多主要是消耗内存，单个TIME_WAIT占用内存非常小，但是多了就不好了，这个主要看内存以及你的服务器是否直接对外。</span><br><span class=\"line\">使用net.ipv4.tcp_tw_reuse和net.ipv4.tcp_tw_recycle 的前提是开启时间戳net.ipv4.tcp_timestamps = 1不过这一项默认是开启的</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"CLOSE-WAIT\"><a href=\"#CLOSE-WAIT\" class=\"headerlink\" title=\"CLOSE_WAIT\"></a>CLOSE_WAIT</h1><ul>\n<li>这种状态的含义其实是表示在等待关闭。怎么理解呢？当对方close一个SOCKET后发送FIN报文给自己，你系统毫无疑问地会回应一个ACK报文给对方，此时则进入到CLOSE_WAIT状态。接下来呢，实际上你真正需要考虑的事情是查看你是否还有数据发送给对方，如果没有的话，那么你也就可以close这个SOCKET，发送FIN报文给对方，也即关闭连接。所以你在CLOSE_WAIT状态下，需要完成的事情是等待你去关闭连接。CLOSE_WAIT一般是由于对端主动关闭，而我方没有正确处理的原因引起的，临时解决重启服务，永久解决就是修改程序逻辑<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">客户端（主动关闭方）          服务器（被动关闭方）</span><br><span class=\"line\">       |                               |</span><br><span class=\"line\">       |--- GET /bigfile.zip ---------&gt;| </span><br><span class=\"line\">       |&lt;--- 200 OK + 文件数据 ---------|</span><br><span class=\"line\">       |                               |</span><br><span class=\"line\">       |--- FIN (我要关闭) ------------&gt;| → 客户端进入 FIN_WAIT_1</span><br><span class=\"line\">       |&lt;--- ACK ----------------------| → 服务端进入 CLOSE_WAIT</span><br><span class=\"line\">       |                               |（此时服务端还在发送剩余文件数据）</span><br><span class=\"line\">       |&lt;--- 剩余数据包 ----------------|</span><br><span class=\"line\">       |&lt;--- FIN (我也关闭) ------------| → 服务端进入 LAST_ACK</span><br><span class=\"line\">       |--- ACK -----------------------&gt;| → 客户端进入 TIME_WAIT                </span><br><span class=\"line\">#没有调用s.close()关闭socket，会造成大量CLOSE_WAIT</span><br><span class=\"line\">import socket</span><br><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def create_sockets(num_sockets):</span><br><span class=\"line\">    sockets = []</span><br><span class=\"line\">    for _ in range(num_sockets):</span><br><span class=\"line\">        # 创建一个 TCP 套接字</span><br><span class=\"line\">        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class=\"line\">        print(f&quot;创建 socket &#123;_ + 1&#125;: &#123;s.fileno()&#125;，状态为 alloc&quot;)</span><br><span class=\"line\">        sockets.append(s)</span><br><span class=\"line\">    return sockets</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &quot;__main__&quot;:</span><br><span class=\"line\">    num_sockets = 10</span><br><span class=\"line\">    while True:</span><br><span class=\"line\">        num_sockets  += 10</span><br><span class=\"line\">        sockets = create_sockets(num_sockets)</span><br><span class=\"line\">        print(f&quot;总共创建了 &#123;num_sockets&#125; 个 socket 对象。&quot;)</span><br><span class=\"line\">        time.sleep(10)</span><br><span class=\"line\"></span><br><span class=\"line\">#shell</span><br><span class=\"line\">cat /proc/net/sockstat | grep sockets | awk &#x27;&#123;print $3&#125;&#x27;</span><br><span class=\"line\">netstat -n | awk &#x27;/^tcp/ &#123;++state[$NF]&#125; END &#123;for(key in state) print key,&quot;\\t&quot;,state[key]&#125;&#x27;</span><br><span class=\"line\">for i in `ls /proc/ |grep &#x27;[0-9]&#x27;`</span><br><span class=\"line\">do</span><br><span class=\"line\">    mycount=`ls /proc/$i/fd|wc -l`</span><br><span class=\"line\">    echo &quot;$i $mycount&quot;</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure></li>\n</ul>\n","excerpt":"","more":"<h1 id=\"三握四挥\"><a href=\"#三握四挥\" class=\"headerlink\" title=\"三握四挥\"></a>三握四挥</h1><p><img src=\"/2025/07/25/tcp/image.png\" alt=\"alt text\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> （1）第一次握手：Client将标志位SYN置为1，随机产生一个值seq=J，并将该数据包发送给Server，Client进入SYN_SENT状态，等待Server确认。</span><br><span class=\"line\"></span><br><span class=\"line\">  （2）第二次握手：Server收到数据包后由标志位SYN=1知道Client请求建立连接，Server将标志位SYN和ACK都置为1，ack=J+1，随机产生一个值seq=K，并将该数据包发送给Client以确认连接请求，Server进入SYN_RCVD状态。</span><br><span class=\"line\"></span><br><span class=\"line\">  （3）第三次握手：Client收到确认后，检查ack是否为J+1，ACK是否为1，如果正确则将标志位ACK置为1，ack=K+1，并将该数据包发送给Server，Server检查ack是否为K+1，ACK是否为1，如果正确则连接建立成功，Client和Server进入ESTABLISHED状态，完成三次握手，随后Client与Server之间可以开始传输数据了</span><br><span class=\"line\"></span><br><span class=\"line\">客户端发起fin位为1的FIN报文，此时客户端进入FIN_WAIT_1状态</span><br><span class=\"line\">服务端接受到FIN 报文后，发送ack应答报文，此时服务端进入close_wait状态</span><br><span class=\"line\">客户端接受到ack应答报文后，进入FIN_WAIT_2状态</span><br><span class=\"line\">服务端处理完数据后，向客户端发送FIN报文，此时服务端进入LAST_ACK状态</span><br><span class=\"line\">客户端接受到FIN报文后，客户端发送应答ack报文，进入TIME_WAIT阶段</span><br><span class=\"line\">服务端接受到ack报文后，断开连接，处于close状态</span><br><span class=\"line\">客户端过一段时间后，也就是2MSL后，进入close状态</span><br></pre></td></tr></table></figure>\n\n\n\n\n<h1 id=\"Time-Wait\"><a href=\"#Time-Wait\" class=\"headerlink\" title=\"Time Wait\"></a>Time Wait</h1><h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><ul>\n<li>谁先关闭谁最后进入timewait状态，time_wait 状态下，TCP 连接占用的端口，无法被再次使用<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">close 短连接</span><br><span class=\"line\">每个HTTP请求都需要重新完成TCP三次握手建立连接，数据传输完成后四次挥手关闭连接</span><br><span class=\"line\">keep-alive 长连接</span><br><span class=\"line\">在HTTP1.1协议中默认长连接，有个 Connection 头，Connection有两个值，close和keep-alive，这个头就相当于客户端告诉服务端，服务端你执行完成请求之后，是关闭连接还是保持连接，保持连接就意味着在保持连接期间，只能由客户端主动断开连接。还有一个keep-alive的头，设置的值就代表了服务端保持连接保持多久</span><br><span class=\"line\">#ngx</span><br><span class=\"line\">keepalive 100;          # 保持的空闲连接数</span><br><span class=\"line\">keepalive_timeout 60s;   # 空闲超时时间</span><br><span class=\"line\">keepalive_requests 100;  # 单连接最大请求数</span><br><span class=\"line\">location / &#123;</span><br><span class=\"line\">    proxy_pass http://backend_servers;</span><br><span class=\"line\">    proxy_http_version 1.1;     # 关键：使用 HTTP/1.1</span><br><span class=\"line\">    proxy_set_header Connection &quot;&quot;;  # 清除 Connection 头（避免传递错误值）</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># Linux 内核参数（默认值通常为 7200 秒）默认不启用</span><br><span class=\"line\">sysctl -w net.ipv4.tcp_keepalive_time=1800  # 空闲 1800 秒后发送探针</span><br><span class=\"line\">sysctl -w net.ipv4.tcp_keepalive_probes=3   # 发送 3 次无响应后关闭</span><br><span class=\"line\">sysctl -w net.ipv4.tcp_keepalive_intvl=15   # 每次探针间隔 15 秒</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"相关参数\"><a href=\"#相关参数\" class=\"headerlink\" title=\"相关参数\"></a>相关参数</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -ant | awk &#x27;/^tcp/ &#123;++y[$NF]&#125; END &#123;for(w in y) print w, y[w]&#125;&#x27;</span><br><span class=\"line\">net.ipv4.tcp_syncookies = 1 </span><br><span class=\"line\">net.ipv4.tcp_tw_reuse = 1 </span><br><span class=\"line\">net.ipv4.tcp_tw_recycle = 1</span><br><span class=\"line\">net.ipv4.tcp_fin_timeout = 30</span><br><span class=\"line\">==============================================</span><br><span class=\"line\">net.ipv4.tcp_tw_reuse = 1</span><br><span class=\"line\">表示开启重用。允许将一个处于TIME-WAIT状态的端口重新用于新的TCP连接，默认为0，表示关闭，其防止重复报文的原理也是时间戳</span><br><span class=\"line\">net.ipv4.tcp_tw_recycle = 1</span><br><span class=\"line\">表示开启TCP连接中TIME-WAIT sockets的快速回收，意思就是系统会保存最近一次该socket连接上的传输报文（包括数据或者仅仅是ACK报文）的时间戳，当相同四元组socket过来的报文的时间戳小于缓存下来的时间戳则丢弃该数据包，并回收这个socket，默认为0，表示关闭。开启这个功能风险有点大，NAT环境可能导致DROP掉SYN包（回复RST），在NAT场景下不要使用。需要注意在Linux内核4.10版本以后该参数就已经被移除了。</span><br><span class=\"line\">net.ipv4.tcp_fin_timeout = 60</span><br><span class=\"line\">这个时间不是修改2MSL的时长，主动关闭连接的一方接收到ACK之后会进入，FIN_WAIT-2状态，然后等待被动关闭一方发送FIN，这个时间是设置主动关闭的一方等待对方发送FIN的最长时长，默认是60秒。在这个状态下端口是不可能被重用的，文件描述符和内存也不会被释放，因为这个阶段被动关闭的一方有可能还有数据要发送，因为对端处于CLOSE_WAIT状态，也就是等待上层应用程序。关于这个的真实含义我希望大家清楚，而且不要调整的太小当然太大也不行，至少在3.10内核版本上这个参数不是调整的TIME_WAIT时长。</span><br><span class=\"line\">net.ipv4.ip_local_port_range = 32768 60999</span><br><span class=\"line\">表示用于外连使用的随机高位端口范围，也就是作为客户端连接其他服务的时候系统从这个范围随机取出一个端口来作为源端口使用来去连接对端服务器，这个范围也就决定了最多主动能同时建立多少个外连。</span><br><span class=\"line\">net.ipv4.tcp_max_tw_buckets = 6000</span><br><span class=\"line\">同时保持TIME_WAIT套接字的最大个数，超过这个数字那么该TIME_WAIT套接字将立刻被释放并在/var/log/message日志中打印警告信息（TCP: time wait bucket table overflow）。这个过多主要是消耗内存，单个TIME_WAIT占用内存非常小，但是多了就不好了，这个主要看内存以及你的服务器是否直接对外。</span><br><span class=\"line\">使用net.ipv4.tcp_tw_reuse和net.ipv4.tcp_tw_recycle 的前提是开启时间戳net.ipv4.tcp_timestamps = 1不过这一项默认是开启的</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"CLOSE-WAIT\"><a href=\"#CLOSE-WAIT\" class=\"headerlink\" title=\"CLOSE_WAIT\"></a>CLOSE_WAIT</h1><ul>\n<li>这种状态的含义其实是表示在等待关闭。怎么理解呢？当对方close一个SOCKET后发送FIN报文给自己，你系统毫无疑问地会回应一个ACK报文给对方，此时则进入到CLOSE_WAIT状态。接下来呢，实际上你真正需要考虑的事情是查看你是否还有数据发送给对方，如果没有的话，那么你也就可以close这个SOCKET，发送FIN报文给对方，也即关闭连接。所以你在CLOSE_WAIT状态下，需要完成的事情是等待你去关闭连接。CLOSE_WAIT一般是由于对端主动关闭，而我方没有正确处理的原因引起的，临时解决重启服务，永久解决就是修改程序逻辑<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">客户端（主动关闭方）          服务器（被动关闭方）</span><br><span class=\"line\">       |                               |</span><br><span class=\"line\">       |--- GET /bigfile.zip ---------&gt;| </span><br><span class=\"line\">       |&lt;--- 200 OK + 文件数据 ---------|</span><br><span class=\"line\">       |                               |</span><br><span class=\"line\">       |--- FIN (我要关闭) ------------&gt;| → 客户端进入 FIN_WAIT_1</span><br><span class=\"line\">       |&lt;--- ACK ----------------------| → 服务端进入 CLOSE_WAIT</span><br><span class=\"line\">       |                               |（此时服务端还在发送剩余文件数据）</span><br><span class=\"line\">       |&lt;--- 剩余数据包 ----------------|</span><br><span class=\"line\">       |&lt;--- FIN (我也关闭) ------------| → 服务端进入 LAST_ACK</span><br><span class=\"line\">       |--- ACK -----------------------&gt;| → 客户端进入 TIME_WAIT                </span><br><span class=\"line\">#没有调用s.close()关闭socket，会造成大量CLOSE_WAIT</span><br><span class=\"line\">import socket</span><br><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def create_sockets(num_sockets):</span><br><span class=\"line\">    sockets = []</span><br><span class=\"line\">    for _ in range(num_sockets):</span><br><span class=\"line\">        # 创建一个 TCP 套接字</span><br><span class=\"line\">        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class=\"line\">        print(f&quot;创建 socket &#123;_ + 1&#125;: &#123;s.fileno()&#125;，状态为 alloc&quot;)</span><br><span class=\"line\">        sockets.append(s)</span><br><span class=\"line\">    return sockets</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &quot;__main__&quot;:</span><br><span class=\"line\">    num_sockets = 10</span><br><span class=\"line\">    while True:</span><br><span class=\"line\">        num_sockets  += 10</span><br><span class=\"line\">        sockets = create_sockets(num_sockets)</span><br><span class=\"line\">        print(f&quot;总共创建了 &#123;num_sockets&#125; 个 socket 对象。&quot;)</span><br><span class=\"line\">        time.sleep(10)</span><br><span class=\"line\"></span><br><span class=\"line\">#shell</span><br><span class=\"line\">cat /proc/net/sockstat | grep sockets | awk &#x27;&#123;print $3&#125;&#x27;</span><br><span class=\"line\">netstat -n | awk &#x27;/^tcp/ &#123;++state[$NF]&#125; END &#123;for(key in state) print key,&quot;\\t&quot;,state[key]&#125;&#x27;</span><br><span class=\"line\">for i in `ls /proc/ |grep &#x27;[0-9]&#x27;`</span><br><span class=\"line\">do</span><br><span class=\"line\">    mycount=`ls /proc/$i/fd|wc -l`</span><br><span class=\"line\">    echo &quot;$i $mycount&quot;</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"使用kubekey快速安装k8s","date":"2025-04-27T03:16:46.000Z","_content":"官方地址\nhttps://github.com/kubesphere/kubekey\n\n# 安装\n> curl -sfL https://get-kk.kubesphere.io | sh -\n## 单节点测试使用\n```shell\nkk create cluster\n#默认 v1.23.17\n--with-kubernetes v1.24.1 \n#默认docker\n--container-manager containerd\n#如果不使用--with-kubesphere默认不安装；默认版本为 v3.4.1\n--with-kubesphere\n```\n## 多节点\n```shell\nkk create config -f deploy.yml\n#-f 指定配置文件开始安装\nkk create cluster -f deploy.yml\n#deploy.yml;其他节点的ip用户名密码的修改成实际的\napiVersion: kubekey.kubesphere.io/v1alpha2\nkind: Cluster\nmetadata:\n  name: sample\nspec:\n  hosts:\n  - {name: node1, address: 172.16.0.2, internalAddress: 172.16.0.2, user: ubuntu, password: \"Qcloud@123\"}\n  - {name: node2, address: 172.16.0.3, internalAddress: 172.16.0.3, user: ubuntu, password: \"Qcloud@123\"}\n  roleGroups:\n    etcd:\n    - node1\n    control-plane: \n    - node1\n    worker:\n    - node1\n    - node2\n  controlPlaneEndpoint:\n    ## Internal loadbalancer for apiservers \n    # internalLoadbalancer: haproxy\n\n    domain: lb.kubesphere.local\n    address: \"\"\n    port: 6443\n  kubernetes:\n    version: v1.23.17\n    clusterName: cluster.local\n    autoRenewCerts: true\n    containerManager: docker\n  etcd:\n    type: kubekey\n  network:\n    plugin: calico\n    kubePodsCIDR: 10.233.64.0/18\n    kubeServiceCIDR: 10.233.0.0/18\n    ## multus support. https://github.com/k8snetworkplumbingwg/multus-cni\n    multusCNI:\n      enabled: false\n  registry:\n    privateRegistry: \"\"\n    namespaceOverride: \"\"\n    registryMirrors: []\n    insecureRegistries: []\n  addons: []\n----------------------------------------------------\n#默认不安装kubesphere需要指定--with-kubesphere\nkk create config --with-kubesphere -f deploy-with.yml\n```\n# 新增删除\n```shell\n#新增节点接入集群\nkk add nodes -f  deploy.yml\n#删除节点\nkk delete node <nodeName> -f deploy.yml\n#删除集群\nkk delete cluster [-f deploy.yml]\n```\n\n# 升级集群\n```shell\n使用指定版本升级集群。\n\nkk upgrade [--with-kubernetes version] [--with-kubesphere version] \n仅支持升级 Kubernetes。\n仅支持升级 KubeSphere。\n支持升级 Kubernetes 和 KubeSphere。\n多节点\n使用指定的配置文件升级集群。\n\nkk upgrade [--with-kubernetes version] [--with-kubesphere version] [(-f | --filename) path]\n如果指定了--with-kubernetes或--with-kubesphere，配置文件也将被更新。\n用于-f指定为集群创建而生成的配置文件。\n```\n\n# 更新集群证书\n>#默认一年<br>\nkk  certs renew\n![alt text](image.png)\n","source":"_posts/使用kubekey快速安装k8s.md","raw":"---\ntitle: 使用kubekey快速安装k8s\ndate: 2025-04-27 11:16:46\ntags:\ncategories: k8s\n---\n官方地址\nhttps://github.com/kubesphere/kubekey\n\n# 安装\n> curl -sfL https://get-kk.kubesphere.io | sh -\n## 单节点测试使用\n```shell\nkk create cluster\n#默认 v1.23.17\n--with-kubernetes v1.24.1 \n#默认docker\n--container-manager containerd\n#如果不使用--with-kubesphere默认不安装；默认版本为 v3.4.1\n--with-kubesphere\n```\n## 多节点\n```shell\nkk create config -f deploy.yml\n#-f 指定配置文件开始安装\nkk create cluster -f deploy.yml\n#deploy.yml;其他节点的ip用户名密码的修改成实际的\napiVersion: kubekey.kubesphere.io/v1alpha2\nkind: Cluster\nmetadata:\n  name: sample\nspec:\n  hosts:\n  - {name: node1, address: 172.16.0.2, internalAddress: 172.16.0.2, user: ubuntu, password: \"Qcloud@123\"}\n  - {name: node2, address: 172.16.0.3, internalAddress: 172.16.0.3, user: ubuntu, password: \"Qcloud@123\"}\n  roleGroups:\n    etcd:\n    - node1\n    control-plane: \n    - node1\n    worker:\n    - node1\n    - node2\n  controlPlaneEndpoint:\n    ## Internal loadbalancer for apiservers \n    # internalLoadbalancer: haproxy\n\n    domain: lb.kubesphere.local\n    address: \"\"\n    port: 6443\n  kubernetes:\n    version: v1.23.17\n    clusterName: cluster.local\n    autoRenewCerts: true\n    containerManager: docker\n  etcd:\n    type: kubekey\n  network:\n    plugin: calico\n    kubePodsCIDR: 10.233.64.0/18\n    kubeServiceCIDR: 10.233.0.0/18\n    ## multus support. https://github.com/k8snetworkplumbingwg/multus-cni\n    multusCNI:\n      enabled: false\n  registry:\n    privateRegistry: \"\"\n    namespaceOverride: \"\"\n    registryMirrors: []\n    insecureRegistries: []\n  addons: []\n----------------------------------------------------\n#默认不安装kubesphere需要指定--with-kubesphere\nkk create config --with-kubesphere -f deploy-with.yml\n```\n# 新增删除\n```shell\n#新增节点接入集群\nkk add nodes -f  deploy.yml\n#删除节点\nkk delete node <nodeName> -f deploy.yml\n#删除集群\nkk delete cluster [-f deploy.yml]\n```\n\n# 升级集群\n```shell\n使用指定版本升级集群。\n\nkk upgrade [--with-kubernetes version] [--with-kubesphere version] \n仅支持升级 Kubernetes。\n仅支持升级 KubeSphere。\n支持升级 Kubernetes 和 KubeSphere。\n多节点\n使用指定的配置文件升级集群。\n\nkk upgrade [--with-kubernetes version] [--with-kubesphere version] [(-f | --filename) path]\n如果指定了--with-kubernetes或--with-kubesphere，配置文件也将被更新。\n用于-f指定为集群创建而生成的配置文件。\n```\n\n# 更新集群证书\n>#默认一年<br>\nkk  certs renew\n![alt text](image.png)\n","slug":"使用kubekey快速安装k8s","published":1,"updated":"2025-07-30T08:38:33.412Z","comments":1,"layout":"post","photos":[],"_id":"cmdppvvvx000plpod1af5b0vh","content":"<p>官方地址<br><a href=\"https://github.com/kubesphere/kubekey\">https://github.com/kubesphere/kubekey</a></p>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><blockquote>\n<p>curl -sfL <a href=\"https://get-kk.kubesphere.io/\">https://get-kk.kubesphere.io</a> | sh -</p>\n</blockquote>\n<h2 id=\"单节点测试使用\"><a href=\"#单节点测试使用\" class=\"headerlink\" title=\"单节点测试使用\"></a>单节点测试使用</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kk create cluster</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">默认 v1.23.17</span></span><br><span class=\"line\">--with-kubernetes v1.24.1 </span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">默认docker</span></span><br><span class=\"line\">--container-manager containerd</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">如果不使用--with-kubesphere默认不安装；默认版本为 v3.4.1</span></span><br><span class=\"line\">--with-kubesphere</span><br></pre></td></tr></table></figure>\n<h2 id=\"多节点\"><a href=\"#多节点\" class=\"headerlink\" title=\"多节点\"></a>多节点</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kk create config -f deploy.yml</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">-f 指定配置文件开始安装</span></span><br><span class=\"line\">kk create cluster -f deploy.yml</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">deploy.yml;其他节点的ip用户名密码的修改成实际的</span></span><br><span class=\"line\">apiVersion: kubekey.kubesphere.io/v1alpha2</span><br><span class=\"line\">kind: Cluster</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: sample</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  hosts:</span><br><span class=\"line\">  - &#123;name: node1, address: 172.16.0.2, internalAddress: 172.16.0.2, user: ubuntu, password: &quot;Qcloud@123&quot;&#125;</span><br><span class=\"line\">  - &#123;name: node2, address: 172.16.0.3, internalAddress: 172.16.0.3, user: ubuntu, password: &quot;Qcloud@123&quot;&#125;</span><br><span class=\"line\">  roleGroups:</span><br><span class=\"line\">    etcd:</span><br><span class=\"line\">    - node1</span><br><span class=\"line\">    control-plane: </span><br><span class=\"line\">    - node1</span><br><span class=\"line\">    worker:</span><br><span class=\"line\">    - node1</span><br><span class=\"line\">    - node2</span><br><span class=\"line\">  controlPlaneEndpoint:</span><br><span class=\"line\">    ## Internal loadbalancer for apiservers </span><br><span class=\"line\">    # internalLoadbalancer: haproxy</span><br><span class=\"line\"></span><br><span class=\"line\">    domain: lb.kubesphere.local</span><br><span class=\"line\">    address: &quot;&quot;</span><br><span class=\"line\">    port: 6443</span><br><span class=\"line\">  kubernetes:</span><br><span class=\"line\">    version: v1.23.17</span><br><span class=\"line\">    clusterName: cluster.local</span><br><span class=\"line\">    autoRenewCerts: true</span><br><span class=\"line\">    containerManager: docker</span><br><span class=\"line\">  etcd:</span><br><span class=\"line\">    type: kubekey</span><br><span class=\"line\">  network:</span><br><span class=\"line\">    plugin: calico</span><br><span class=\"line\">    kubePodsCIDR: 10.233.64.0/18</span><br><span class=\"line\">    kubeServiceCIDR: 10.233.0.0/18</span><br><span class=\"line\">    ## multus support. https://github.com/k8snetworkplumbingwg/multus-cni</span><br><span class=\"line\">    multusCNI:</span><br><span class=\"line\">      enabled: false</span><br><span class=\"line\">  registry:</span><br><span class=\"line\">    privateRegistry: &quot;&quot;</span><br><span class=\"line\">    namespaceOverride: &quot;&quot;</span><br><span class=\"line\">    registryMirrors: []</span><br><span class=\"line\">    insecureRegistries: []</span><br><span class=\"line\">  addons: []</span><br><span class=\"line\">----------------------------------------------------</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">默认不安装kubesphere需要指定--with-kubesphere</span></span><br><span class=\"line\">kk create config --with-kubesphere -f deploy-with.yml</span><br></pre></td></tr></table></figure>\n<h1 id=\"新增删除\"><a href=\"#新增删除\" class=\"headerlink\" title=\"新增删除\"></a>新增删除</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">新增节点接入集群</span></span><br><span class=\"line\">kk add nodes -f  deploy.yml</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">删除节点</span></span><br><span class=\"line\">kk delete node &lt;nodeName&gt; -f deploy.yml</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">删除集群</span></span><br><span class=\"line\">kk delete cluster [-f deploy.yml]</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"升级集群\"><a href=\"#升级集群\" class=\"headerlink\" title=\"升级集群\"></a>升级集群</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用指定版本升级集群。</span><br><span class=\"line\"></span><br><span class=\"line\">kk upgrade [--with-kubernetes version] [--with-kubesphere version] </span><br><span class=\"line\">仅支持升级 Kubernetes。</span><br><span class=\"line\">仅支持升级 KubeSphere。</span><br><span class=\"line\">支持升级 Kubernetes 和 KubeSphere。</span><br><span class=\"line\">多节点</span><br><span class=\"line\">使用指定的配置文件升级集群。</span><br><span class=\"line\"></span><br><span class=\"line\">kk upgrade [--with-kubernetes version] [--with-kubesphere version] [(-f | --filename) path]</span><br><span class=\"line\">如果指定了--with-kubernetes或--with-kubesphere，配置文件也将被更新。</span><br><span class=\"line\">用于-f指定为集群创建而生成的配置文件。</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"更新集群证书\"><a href=\"#更新集群证书\" class=\"headerlink\" title=\"更新集群证书\"></a>更新集群证书</h1><blockquote>\n<p>#默认一年<br><br>kk  certs renew<br><img src=\"/2025/04/27/%E4%BD%BF%E7%94%A8kubekey%E5%BF%AB%E9%80%9F%E5%AE%89%E8%A3%85k8s/image.png\" alt=\"alt text\"></p>\n</blockquote>\n","excerpt":"","more":"<p>官方地址<br><a href=\"https://github.com/kubesphere/kubekey\">https://github.com/kubesphere/kubekey</a></p>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><blockquote>\n<p>curl -sfL <a href=\"https://get-kk.kubesphere.io/\">https://get-kk.kubesphere.io</a> | sh -</p>\n</blockquote>\n<h2 id=\"单节点测试使用\"><a href=\"#单节点测试使用\" class=\"headerlink\" title=\"单节点测试使用\"></a>单节点测试使用</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kk create cluster</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">默认 v1.23.17</span></span><br><span class=\"line\">--with-kubernetes v1.24.1 </span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">默认docker</span></span><br><span class=\"line\">--container-manager containerd</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">如果不使用--with-kubesphere默认不安装；默认版本为 v3.4.1</span></span><br><span class=\"line\">--with-kubesphere</span><br></pre></td></tr></table></figure>\n<h2 id=\"多节点\"><a href=\"#多节点\" class=\"headerlink\" title=\"多节点\"></a>多节点</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kk create config -f deploy.yml</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">-f 指定配置文件开始安装</span></span><br><span class=\"line\">kk create cluster -f deploy.yml</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">deploy.yml;其他节点的ip用户名密码的修改成实际的</span></span><br><span class=\"line\">apiVersion: kubekey.kubesphere.io/v1alpha2</span><br><span class=\"line\">kind: Cluster</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: sample</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  hosts:</span><br><span class=\"line\">  - &#123;name: node1, address: 172.16.0.2, internalAddress: 172.16.0.2, user: ubuntu, password: &quot;Qcloud@123&quot;&#125;</span><br><span class=\"line\">  - &#123;name: node2, address: 172.16.0.3, internalAddress: 172.16.0.3, user: ubuntu, password: &quot;Qcloud@123&quot;&#125;</span><br><span class=\"line\">  roleGroups:</span><br><span class=\"line\">    etcd:</span><br><span class=\"line\">    - node1</span><br><span class=\"line\">    control-plane: </span><br><span class=\"line\">    - node1</span><br><span class=\"line\">    worker:</span><br><span class=\"line\">    - node1</span><br><span class=\"line\">    - node2</span><br><span class=\"line\">  controlPlaneEndpoint:</span><br><span class=\"line\">    ## Internal loadbalancer for apiservers </span><br><span class=\"line\">    # internalLoadbalancer: haproxy</span><br><span class=\"line\"></span><br><span class=\"line\">    domain: lb.kubesphere.local</span><br><span class=\"line\">    address: &quot;&quot;</span><br><span class=\"line\">    port: 6443</span><br><span class=\"line\">  kubernetes:</span><br><span class=\"line\">    version: v1.23.17</span><br><span class=\"line\">    clusterName: cluster.local</span><br><span class=\"line\">    autoRenewCerts: true</span><br><span class=\"line\">    containerManager: docker</span><br><span class=\"line\">  etcd:</span><br><span class=\"line\">    type: kubekey</span><br><span class=\"line\">  network:</span><br><span class=\"line\">    plugin: calico</span><br><span class=\"line\">    kubePodsCIDR: 10.233.64.0/18</span><br><span class=\"line\">    kubeServiceCIDR: 10.233.0.0/18</span><br><span class=\"line\">    ## multus support. https://github.com/k8snetworkplumbingwg/multus-cni</span><br><span class=\"line\">    multusCNI:</span><br><span class=\"line\">      enabled: false</span><br><span class=\"line\">  registry:</span><br><span class=\"line\">    privateRegistry: &quot;&quot;</span><br><span class=\"line\">    namespaceOverride: &quot;&quot;</span><br><span class=\"line\">    registryMirrors: []</span><br><span class=\"line\">    insecureRegistries: []</span><br><span class=\"line\">  addons: []</span><br><span class=\"line\">----------------------------------------------------</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">默认不安装kubesphere需要指定--with-kubesphere</span></span><br><span class=\"line\">kk create config --with-kubesphere -f deploy-with.yml</span><br></pre></td></tr></table></figure>\n<h1 id=\"新增删除\"><a href=\"#新增删除\" class=\"headerlink\" title=\"新增删除\"></a>新增删除</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">新增节点接入集群</span></span><br><span class=\"line\">kk add nodes -f  deploy.yml</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">删除节点</span></span><br><span class=\"line\">kk delete node &lt;nodeName&gt; -f deploy.yml</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">删除集群</span></span><br><span class=\"line\">kk delete cluster [-f deploy.yml]</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"升级集群\"><a href=\"#升级集群\" class=\"headerlink\" title=\"升级集群\"></a>升级集群</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用指定版本升级集群。</span><br><span class=\"line\"></span><br><span class=\"line\">kk upgrade [--with-kubernetes version] [--with-kubesphere version] </span><br><span class=\"line\">仅支持升级 Kubernetes。</span><br><span class=\"line\">仅支持升级 KubeSphere。</span><br><span class=\"line\">支持升级 Kubernetes 和 KubeSphere。</span><br><span class=\"line\">多节点</span><br><span class=\"line\">使用指定的配置文件升级集群。</span><br><span class=\"line\"></span><br><span class=\"line\">kk upgrade [--with-kubernetes version] [--with-kubesphere version] [(-f | --filename) path]</span><br><span class=\"line\">如果指定了--with-kubernetes或--with-kubesphere，配置文件也将被更新。</span><br><span class=\"line\">用于-f指定为集群创建而生成的配置文件。</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"更新集群证书\"><a href=\"#更新集群证书\" class=\"headerlink\" title=\"更新集群证书\"></a>更新集群证书</h1><blockquote>\n<p>#默认一年<br><br>kk  certs renew<br><img src=\"/2025/04/27/%E4%BD%BF%E7%94%A8kubekey%E5%BF%AB%E9%80%9F%E5%AE%89%E8%A3%85k8s/image.png\" alt=\"alt text\"></p>\n</blockquote>\n"},{"title":"websocket","date":"2025-05-28T07:43:49.000Z","_content":"# 异步\n因为websocket会使用到异步操作先了解一下异步\n```python\nimport asyncio\nimport time\n\n\nasync def task(name, duration):\n    print(f\"[{time.strftime('%H:%M:%S')}] 任务 {name} 开始\")\n    await asyncio.sleep(duration)  # 模拟并发等待\n    print(f\"[{time.strftime('%H:%M:%S')}] 任务 {name} 完成\")\n\n\ndef task_(name, duration):\n    print(f\"[{time.strftime('%H:%M:%S')}] 任务 {name} 开始\")\n    time.sleep(duration)  # 模拟耗时操作\n    print(f\"[{time.strftime('%H:%M:%S')}] 任务 {name} 完成\")\n\n\nasync def main():\n    start_time = time.time()\n    print(f\"[{time.strftime('%H:%M:%S')}] 异步任务开始\")\n\n    await asyncio.gather(\n        task(\"A\", 2),\n        task(\"B\", 3),\n        task(\"C\", 1)\n    )\n\n    end_time = time.time()\n    print(f\"[{time.strftime('%H:%M:%S')}] 异步任务总耗时: {end_time - start_time:.2f} 秒\")\n\n\ndef main_():\n    start_time = time.time()\n    print(f\"[{time.strftime('%H:%M:%S')}] 同步任务开始\")\n\n    task_(\"A\", 2)\n    task_(\"B\", 3)\n    task_(\"C\", 1)\n\n    end_time = time.time()\n    print(f\"[{time.strftime('%H:%M:%S')}] 同步任务总耗时: {end_time - start_time:.2f} 秒\")\n\n\nif __name__ == \"__main__\":\n    print(\"======================异步==========================\")\n    asyncio.run(main())\n    print(\"======================同步==========================\")\n    main_()\n\n\n#结果可以看出异步不需要等待会直接执行下一步操作，任务完成可以使用await来回调处理完成结果\n======================异步==========================\n[14:45:43] 异步任务开始\n[14:45:43] 任务 A 开始\n[14:45:43] 任务 B 开始\n[14:45:43] 任务 C 开始\n[14:45:44] 任务 C 完成\n[14:45:45] 任务 A 完成\n[14:45:46] 任务 B 完成\n[14:45:46] 异步任务总耗时: 3.00 秒\n======================同步==========================\n[14:45:46] 同步任务开始\n[14:45:46] 任务 A 开始\n[14:45:48] 任务 A 完成\n[14:45:48] 任务 B 开始\n[14:45:51] 任务 B 完成\n[14:45:51] 任务 C 开始\n[14:45:52] 任务 C 完成\n[14:45:52] 同步任务总耗时: 6.00 秒\n```\n# websocket\n\n## 服务端\n```python\nimport asyncio\nimport websockets\n#https://websockets.readthedocs.io/en/stable/\n# 处理客户端连接\nasync def handle_client(websocket):\n    async for message in websocket:\n        print(f\"收到客户端消息: {message}\")\n        reply = f\"机器人回复：你说的是 '{message}' 对吗？\"\n        await websocket.send(reply)\n\n\n# async def main_logic(websocket, path):\n#    # await check_permit(websocket)\n#\n#     await handle_client(websocket)\n\n# 启动服务器\nasync def main():\n    async with websockets.serve(handle_client, \"localhost\", 8765):\n        print(\"WebSocket 服务器已启动，端口 8765\")\n        await asyncio.Future()  # 永久运行\n\nasyncio.run(main())\n```\n\n\n\n## 客户端\n```python\nimport asyncio\nimport websockets\n\nasync def client():\n    async with websockets.connect(\"ws://localhost:8765\") as websocket:\n        while True:\n            message = input(\"请输入消息（输入 q 退出）: \")\n            if message == 'q':\n                break\n            await websocket.send(message)\n            response = await websocket.recv()\n            print(f\"收到回复: {response}\")\n\nasyncio.run(client())\n#效果，相当于打开了一个通道双方都可以发消息\nWebSocket 服务器已启动，端口 8765\n请输入消息（输入 q 退出）: hello websockets\n收到回复: 机器人回复：你说的是 'hello websockets' 对吗？\n请输入消息（输入 q 退出）: \n```\n# 额外\n## fastapi框架使用websocket\n```python\nfrom fastapi import FastAPI, WebSocket, WebSocketDisconnect\nfrom fastapi.responses import HTMLResponse\nfrom fastapi.middleware.cors import CORSMiddleware\nimport json\n\napp = FastAPI()\n\n# 配置CORS跨域\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\n# HTML页面（修改了前端WebSocket实现）\nHTML_TEMPLATE = '''\n<!DOCTYPE html>\n<html>\n<head>\n    <title>FastAPI 聊天</title>\n    <style>\n        body { max-width: 800px; margin: 20px auto; padding: 20px; }\n        #output { \n            height: 300px; \n            border: 1px solid #ccc; \n            overflow-y: auto; \n            padding: 10px; \n            margin-bottom: 10px;\n        }\n        #input { \n            width: 80%; \n            padding: 8px;\n            margin-right: 10px;\n        }\n        button {\n            padding: 8px 16px;\n            background: #007bff;\n            color: white;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n        }\n        button:hover {\n            opacity: 0.8;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"output\"></div>\n    <input type=\"text\" id=\"input\" placeholder=\"输入消息...\">\n    <button onclick=\"sendMessage()\">发送</button>\n\n    <script>\n        // 初始化WebSocket连接\n        const socket = new WebSocket(`ws://${window.location.host}/ws`);\n\n        // 连接成功回调\n        socket.onopen = () => {\n            addMessage('系统', '已连接到服务器');\n        };\n\n        // 接收消息处理\n        socket.onmessage = (event) => {\n            const data = JSON.parse(event.data);\n            addMessage('机器人', data.message);\n        };\n\n        // 错误处理\n        socket.onerror = (error) => {\n            addMessage('系统', `连接错误: ${error.message}`);\n        };\n\n        // 关闭连接处理\n        socket.onclose = () => {\n            addMessage('系统', '连接已断开');\n        };\n\n        // 发送消息\n        function sendMessage() {\n            const input = document.getElementById('input');\n            const message = input.value.trim();\n            if (message) {\n                socket.send(JSON.stringify({\n                    type: \"user_message\",\n                    content: message\n                }));\n                addMessage('我', message);\n                input.value = '';\n            }\n        }\n\n        // 添加消息到界面\n        function addMessage(sender, content) {\n            const output = document.getElementById('output');\n            const div = document.createElement('div');\n            div.innerHTML = `<strong>${sender}:</strong> ${content}`;\n            output.appendChild(div);\n            // 自动滚动到底部\n            output.scrollTop = output.scrollHeight;\n        }\n    </script>\n</body>\n</html>\n'''\n\n\n@app.get(\"/\")\nasync def index():\n    return HTMLResponse(HTML_TEMPLATE)\n\n\n# WebSocket端点\n@app.websocket(\"/ws\")\nasync def websocket_endpoint(websocket: WebSocket):\n    await websocket.accept()\n    try:\n        while True:\n            # 接收客户端消息\n            data = await websocket.receive_text()\n            message_data = json.loads(data)\n\n            # 处理客户端消息\n            if message_data['type'] == 'user_message':\n                print(f\"收到客户端消息: {message_data['content']}\")\n\n                # 构造回复消息\n                reply = {\n                    \"type\": \"server_response\",\n                    \"message\": f\"机器人回复：你说的是 '{message_data['content']}' 对吗？\"\n                }\n\n                # 发送回复\n                await websocket.send_json(reply)\n\n    except WebSocketDisconnect:\n        print(\"客户端断开连接\")\n    except Exception as e:\n        print(f\"发生错误: {str(e)}\")\n\n\nif __name__ == \"__main__\":\n    import uvicorn\n\n    uvicorn.run(app, host=\"0.0.0.0\", port=8001)\n```\n## flask使用websocket\n```python\nimport eventlet\neventlet.monkey_patch()  # 关键：启用异步支持\nfrom flask import Flask, render_template_string\n#pip install flask-socketio eventlet\nfrom flask_socketio import SocketIO, emit\n\n\napp = Flask(__name__)\napp.config['SECRET_KEY'] = 'secret!'\nsocketio = SocketIO(app, cors_allowed_origins=\"*\")  # 允许跨域\n\n\n@app.route('/')\ndef index():\n    return render_template_string('''\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Socket.IO 聊天</title>\n        <script src=\"https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.7.2/socket.io.js\"></script>\n        <style>\n            /* 保持原有样式不变 */\n            body { max-width: 800px; margin: 20px auto; padding: 20px; }\n            #output { height: 300px; border: 1px solid #ccc; overflow-y: auto; padding: 10px; }\n        </style>\n    </head>\n    <body>\n        <div id=\"output\"></div>\n        <input id=\"input\" placeholder=\"输入消息\">\n        <button onclick=\"send()\">发送</button>\n\n        <script>\n            const socket = io();  // 自动连接当前域名\n\n            // 连接成功回调\n            socket.on('connect', () => {\n                addMessage('系统', '已连接到服务器');\n            });\n\n            // 接收服务器消息\n            socket.on('server_response', (data) => {\n                addMessage('机器人', data.message);\n            });\n\n            // 发送消息\n            function send() {\n                const input = document.getElementById('input');\n                const message = input.value.trim();\n                if (message) {\n                    socket.emit('client_message', message);\n                    addMessage('我', message);\n                    input.value = '';\n                }\n            }\n\n            // 添加消息到界面\n            function addMessage(sender, content) {\n                const div = document.createElement('div');\n                div.innerHTML = `<strong>${sender}:</strong> ${content}`;\n                document.getElementById('output').appendChild(div);\n                // 自动滚动到底部\n                const output = document.getElementById('output');\n                output.scrollTop = output.scrollHeight;\n            }\n        </script>\n    </body>\n    </html>\n    ''')\n\n\n# Socket.IO 事件处理\n@socketio.on('client_message')\ndef handle_message(message):\n    print(f'收到客户端消息: {message}')\n    # 构造回复消息\n    reply = f\"机器人回复：你说的是 '{message}' 对吗？\"\n    # 发送消息给客户端\n    emit('server_response', {'message': reply})\n\n\nif __name__ == '__main__':\n    socketio.run(app, host='0.0.0.0', port=8000, debug=True)\n```\n## 大模型使用websocket聊天\n```python\n# main.py\nfrom fastapi import FastAPI, WebSocket\nfrom fastapi.responses import HTMLResponse\nimport requests\nimport json\n\napp = FastAPI()\n\n# 存储对话历史 (生产环境建议使用数据库)\nconversation_history = []\n\n# 集成前端页面与后端逻辑\nHTML_TEMPLATE = \"\"\"\n<!DOCTYPE html>\n<html>\n<head>\n    <title>AI 对话助手</title>\n    <style>\n        body {\n            max-width: 800px;\n            margin: 0 auto;\n            padding: 20px;\n            font-family: Arial, sans-serif;\n        }\n        #chatContainer {\n            height: 60vh;\n            border: 1px solid #ddd;\n            border-radius: 8px;\n            overflow-y: auto;\n            padding: 15px;\n            margin-bottom: 15px;\n            background: #f9f9f9;\n        }\n        .message {\n            margin: 10px 0;\n            padding: 12px;\n            border-radius: 15px;\n            max-width: 80%;\n            word-wrap: break-word;\n        }\n        .user-message {\n            background: #e3f2fd;\n            margin-left: auto;\n            border-bottom-right-radius: 5px;\n        }\n        .bot-message {\n            background: #fff;\n            border: 1px solid #eee;\n            margin-right: auto;\n            border-bottom-left-radius: 5px;\n        }\n        #inputContainer {\n            display: flex;\n            gap: 10px;\n        }\n        #userInput {\n            flex: 1;\n            padding: 12px;\n            border: 1px solid #ddd;\n            border-radius: 25px;\n            outline: none;\n        }\n        button {\n            padding: 12px 25px;\n            background: #007bff;\n            color: white;\n            border: none;\n            border-radius: 25px;\n            cursor: pointer;\n            transition: background 0.3s;\n        }\n        button:hover {\n            background: #0056b3;\n        }\n        .status {\n            color: #666;\n            text-align: center;\n            padding: 10px;\n        }\n    </style>\n</head>\n<body>\n    <h1>AI 对话助手</h1>\n    <div id=\"chatContainer\"></div>\n    <div id=\"inputContainer\">\n        <input type=\"text\" id=\"userInput\" placeholder=\"输入消息...\" />\n        <button onclick=\"sendMessage()\">发送</button>\n    </div>\n    <div class=\"status\" id=\"status\">连接状态：正常</div>\n    \n   // <iframe\n   //      src=\"http://47.237.81.149/chatbot/9h9nyQcblGTesiGJ\"\n    //     style=\"width: 100%; height: 100%; min-height: 700px\"\n   //      frameborder=\"0\"\n  //       allow=\"microphone\">\n   // </iframe>\n\n    <script>\n        const ws = new WebSocket('ws://' + window.location.host + '/ws');\n        const chatContainer = document.getElementById('chatContainer');\n        let isBotResponding = false;\n\n        // WebSocket 事件处理\n        ws.onopen = () => updateStatus('已连接');\n        ws.onclose = () => updateStatus('连接已断开');\n        ws.onerror = () => updateStatus('连接错误');\n\n        ws.onmessage = (event) => {\n            const data = JSON.parse(event.data);\n            handleResponse(data);\n        };\n\n        function handleResponse(data) {\n            switch(data.type) {\n                case 'user_message':\n                    appendMessage(data.content, 'user');\n                    break;\n                case 'assistant_start':\n                    isBotResponding = true;\n                    appendMessage('', 'bot');\n                    break;\n                case 'assistant_chunk':\n                    appendChunk(data.content);\n                    break;\n                case 'assistant_end':\n                    isBotResponding = false;\n                    break;\n                case 'error':\n                    appendMessage(`错误：${data.content}`, 'error');\n                    break;\n            }\n        }\n\n        function appendMessage(content, role) {\n            const div = document.createElement('div');\n            div.className = `message ${role}-message`;\n            div.textContent = content;\n            chatContainer.appendChild(div);\n            scrollToBottom();\n        }\n\n        function appendChunk(content) {\n            const messages = document.getElementsByClassName('bot-message');\n            const lastMsg = messages[messages.length - 1];\n            lastMsg.textContent += content;\n            scrollToBottom();\n        }\n\n        function scrollToBottom() {\n            chatContainer.scrollTop = chatContainer.scrollHeight;\n        }\n\n        function updateStatus(text) {\n            document.getElementById('status').textContent = `状态：${text}`;\n        }\n\n        function sendMessage() {\n            const input = document.getElementById('userInput');\n            const message = input.value.trim();\n            if (message && !isBotResponding) {\n                ws.send(message);\n                input.value = '';\n            }\n        }\n\n        // 支持回车发送\n        document.getElementById('userInput').addEventListener('keypress', (e) => {\n            if (e.key === 'Enter') sendMessage();\n        });\n    </script>\n</body>\n</html>\n\"\"\"\n\n\n@app.get(\"/\")\nasync def get():\n    return HTMLResponse(HTML_TEMPLATE)\n\n\n@app.websocket(\"/ws\")\nasync def websocket_endpoint(websocket: WebSocket):\n    await websocket.accept()\n    try:\n        while True:\n            # 接收用户消息\n            user_message = await websocket.receive_text()\n\n            # 更新对话历史\n            conversation_history.append({\"role\": \"user\", \"content\": user_message})\n\n            # 发送用户消息到前端\n            await websocket.send_json({\n                \"type\": \"user_message\",\n                \"content\": user_message\n            })\n\n            # 准备流式请求\n            await websocket.send_json({\"type\": \"assistant_start\"})\n\n            # 构造请求数据\n            request_data = {\n                \"model\": \"deepseek-r1:latest\",\n                \"messages\": conversation_history,\n                \"stream\": True\n            }\n\n            # 流式获取响应\n            full_response = []\n            with requests.post(\n                    \"http://1.1.1.1:11434/api/chat\",#大模型接口地址\n                    json=request_data,\n                    stream=True\n            ) as response:\n                response.raise_for_status()\n                for line in response.iter_lines():\n                    if line:\n                        chunk = json.loads(line.decode('utf-8'))\n                        if 'message' in chunk:\n                            content = chunk['message']['content']\n                            full_response.append(content)\n                            await websocket.send_json({\n                                \"type\": \"assistant_chunk\",\n                                \"content\": content\n                            })\n\n            # 保存完整响应\n            conversation_history.append({\n                \"role\": \"assistant\",\n                \"content\": \"\".join(full_response)\n            })\n            await websocket.send_json({\"type\": \"assistant_end\"})\n\n    except Exception as e:\n        await websocket.send_json({\n            \"type\": \"error\",\n            \"content\": f\"系统错误: {str(e)}\"\n        })\n    finally:\n        await websocket.close()\n\n\nif __name__ == \"__main__\":\n    import uvicorn\n\n    uvicorn.run(app, host=\"0.0.0.0\", port=8000)\n```","source":"_posts/websocket.md","raw":"---\ntitle: websocket\ndate: 2025-05-28 15:43:49\ntags: websocket\n---\n# 异步\n因为websocket会使用到异步操作先了解一下异步\n```python\nimport asyncio\nimport time\n\n\nasync def task(name, duration):\n    print(f\"[{time.strftime('%H:%M:%S')}] 任务 {name} 开始\")\n    await asyncio.sleep(duration)  # 模拟并发等待\n    print(f\"[{time.strftime('%H:%M:%S')}] 任务 {name} 完成\")\n\n\ndef task_(name, duration):\n    print(f\"[{time.strftime('%H:%M:%S')}] 任务 {name} 开始\")\n    time.sleep(duration)  # 模拟耗时操作\n    print(f\"[{time.strftime('%H:%M:%S')}] 任务 {name} 完成\")\n\n\nasync def main():\n    start_time = time.time()\n    print(f\"[{time.strftime('%H:%M:%S')}] 异步任务开始\")\n\n    await asyncio.gather(\n        task(\"A\", 2),\n        task(\"B\", 3),\n        task(\"C\", 1)\n    )\n\n    end_time = time.time()\n    print(f\"[{time.strftime('%H:%M:%S')}] 异步任务总耗时: {end_time - start_time:.2f} 秒\")\n\n\ndef main_():\n    start_time = time.time()\n    print(f\"[{time.strftime('%H:%M:%S')}] 同步任务开始\")\n\n    task_(\"A\", 2)\n    task_(\"B\", 3)\n    task_(\"C\", 1)\n\n    end_time = time.time()\n    print(f\"[{time.strftime('%H:%M:%S')}] 同步任务总耗时: {end_time - start_time:.2f} 秒\")\n\n\nif __name__ == \"__main__\":\n    print(\"======================异步==========================\")\n    asyncio.run(main())\n    print(\"======================同步==========================\")\n    main_()\n\n\n#结果可以看出异步不需要等待会直接执行下一步操作，任务完成可以使用await来回调处理完成结果\n======================异步==========================\n[14:45:43] 异步任务开始\n[14:45:43] 任务 A 开始\n[14:45:43] 任务 B 开始\n[14:45:43] 任务 C 开始\n[14:45:44] 任务 C 完成\n[14:45:45] 任务 A 完成\n[14:45:46] 任务 B 完成\n[14:45:46] 异步任务总耗时: 3.00 秒\n======================同步==========================\n[14:45:46] 同步任务开始\n[14:45:46] 任务 A 开始\n[14:45:48] 任务 A 完成\n[14:45:48] 任务 B 开始\n[14:45:51] 任务 B 完成\n[14:45:51] 任务 C 开始\n[14:45:52] 任务 C 完成\n[14:45:52] 同步任务总耗时: 6.00 秒\n```\n# websocket\n\n## 服务端\n```python\nimport asyncio\nimport websockets\n#https://websockets.readthedocs.io/en/stable/\n# 处理客户端连接\nasync def handle_client(websocket):\n    async for message in websocket:\n        print(f\"收到客户端消息: {message}\")\n        reply = f\"机器人回复：你说的是 '{message}' 对吗？\"\n        await websocket.send(reply)\n\n\n# async def main_logic(websocket, path):\n#    # await check_permit(websocket)\n#\n#     await handle_client(websocket)\n\n# 启动服务器\nasync def main():\n    async with websockets.serve(handle_client, \"localhost\", 8765):\n        print(\"WebSocket 服务器已启动，端口 8765\")\n        await asyncio.Future()  # 永久运行\n\nasyncio.run(main())\n```\n\n\n\n## 客户端\n```python\nimport asyncio\nimport websockets\n\nasync def client():\n    async with websockets.connect(\"ws://localhost:8765\") as websocket:\n        while True:\n            message = input(\"请输入消息（输入 q 退出）: \")\n            if message == 'q':\n                break\n            await websocket.send(message)\n            response = await websocket.recv()\n            print(f\"收到回复: {response}\")\n\nasyncio.run(client())\n#效果，相当于打开了一个通道双方都可以发消息\nWebSocket 服务器已启动，端口 8765\n请输入消息（输入 q 退出）: hello websockets\n收到回复: 机器人回复：你说的是 'hello websockets' 对吗？\n请输入消息（输入 q 退出）: \n```\n# 额外\n## fastapi框架使用websocket\n```python\nfrom fastapi import FastAPI, WebSocket, WebSocketDisconnect\nfrom fastapi.responses import HTMLResponse\nfrom fastapi.middleware.cors import CORSMiddleware\nimport json\n\napp = FastAPI()\n\n# 配置CORS跨域\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\n# HTML页面（修改了前端WebSocket实现）\nHTML_TEMPLATE = '''\n<!DOCTYPE html>\n<html>\n<head>\n    <title>FastAPI 聊天</title>\n    <style>\n        body { max-width: 800px; margin: 20px auto; padding: 20px; }\n        #output { \n            height: 300px; \n            border: 1px solid #ccc; \n            overflow-y: auto; \n            padding: 10px; \n            margin-bottom: 10px;\n        }\n        #input { \n            width: 80%; \n            padding: 8px;\n            margin-right: 10px;\n        }\n        button {\n            padding: 8px 16px;\n            background: #007bff;\n            color: white;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n        }\n        button:hover {\n            opacity: 0.8;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"output\"></div>\n    <input type=\"text\" id=\"input\" placeholder=\"输入消息...\">\n    <button onclick=\"sendMessage()\">发送</button>\n\n    <script>\n        // 初始化WebSocket连接\n        const socket = new WebSocket(`ws://${window.location.host}/ws`);\n\n        // 连接成功回调\n        socket.onopen = () => {\n            addMessage('系统', '已连接到服务器');\n        };\n\n        // 接收消息处理\n        socket.onmessage = (event) => {\n            const data = JSON.parse(event.data);\n            addMessage('机器人', data.message);\n        };\n\n        // 错误处理\n        socket.onerror = (error) => {\n            addMessage('系统', `连接错误: ${error.message}`);\n        };\n\n        // 关闭连接处理\n        socket.onclose = () => {\n            addMessage('系统', '连接已断开');\n        };\n\n        // 发送消息\n        function sendMessage() {\n            const input = document.getElementById('input');\n            const message = input.value.trim();\n            if (message) {\n                socket.send(JSON.stringify({\n                    type: \"user_message\",\n                    content: message\n                }));\n                addMessage('我', message);\n                input.value = '';\n            }\n        }\n\n        // 添加消息到界面\n        function addMessage(sender, content) {\n            const output = document.getElementById('output');\n            const div = document.createElement('div');\n            div.innerHTML = `<strong>${sender}:</strong> ${content}`;\n            output.appendChild(div);\n            // 自动滚动到底部\n            output.scrollTop = output.scrollHeight;\n        }\n    </script>\n</body>\n</html>\n'''\n\n\n@app.get(\"/\")\nasync def index():\n    return HTMLResponse(HTML_TEMPLATE)\n\n\n# WebSocket端点\n@app.websocket(\"/ws\")\nasync def websocket_endpoint(websocket: WebSocket):\n    await websocket.accept()\n    try:\n        while True:\n            # 接收客户端消息\n            data = await websocket.receive_text()\n            message_data = json.loads(data)\n\n            # 处理客户端消息\n            if message_data['type'] == 'user_message':\n                print(f\"收到客户端消息: {message_data['content']}\")\n\n                # 构造回复消息\n                reply = {\n                    \"type\": \"server_response\",\n                    \"message\": f\"机器人回复：你说的是 '{message_data['content']}' 对吗？\"\n                }\n\n                # 发送回复\n                await websocket.send_json(reply)\n\n    except WebSocketDisconnect:\n        print(\"客户端断开连接\")\n    except Exception as e:\n        print(f\"发生错误: {str(e)}\")\n\n\nif __name__ == \"__main__\":\n    import uvicorn\n\n    uvicorn.run(app, host=\"0.0.0.0\", port=8001)\n```\n## flask使用websocket\n```python\nimport eventlet\neventlet.monkey_patch()  # 关键：启用异步支持\nfrom flask import Flask, render_template_string\n#pip install flask-socketio eventlet\nfrom flask_socketio import SocketIO, emit\n\n\napp = Flask(__name__)\napp.config['SECRET_KEY'] = 'secret!'\nsocketio = SocketIO(app, cors_allowed_origins=\"*\")  # 允许跨域\n\n\n@app.route('/')\ndef index():\n    return render_template_string('''\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Socket.IO 聊天</title>\n        <script src=\"https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.7.2/socket.io.js\"></script>\n        <style>\n            /* 保持原有样式不变 */\n            body { max-width: 800px; margin: 20px auto; padding: 20px; }\n            #output { height: 300px; border: 1px solid #ccc; overflow-y: auto; padding: 10px; }\n        </style>\n    </head>\n    <body>\n        <div id=\"output\"></div>\n        <input id=\"input\" placeholder=\"输入消息\">\n        <button onclick=\"send()\">发送</button>\n\n        <script>\n            const socket = io();  // 自动连接当前域名\n\n            // 连接成功回调\n            socket.on('connect', () => {\n                addMessage('系统', '已连接到服务器');\n            });\n\n            // 接收服务器消息\n            socket.on('server_response', (data) => {\n                addMessage('机器人', data.message);\n            });\n\n            // 发送消息\n            function send() {\n                const input = document.getElementById('input');\n                const message = input.value.trim();\n                if (message) {\n                    socket.emit('client_message', message);\n                    addMessage('我', message);\n                    input.value = '';\n                }\n            }\n\n            // 添加消息到界面\n            function addMessage(sender, content) {\n                const div = document.createElement('div');\n                div.innerHTML = `<strong>${sender}:</strong> ${content}`;\n                document.getElementById('output').appendChild(div);\n                // 自动滚动到底部\n                const output = document.getElementById('output');\n                output.scrollTop = output.scrollHeight;\n            }\n        </script>\n    </body>\n    </html>\n    ''')\n\n\n# Socket.IO 事件处理\n@socketio.on('client_message')\ndef handle_message(message):\n    print(f'收到客户端消息: {message}')\n    # 构造回复消息\n    reply = f\"机器人回复：你说的是 '{message}' 对吗？\"\n    # 发送消息给客户端\n    emit('server_response', {'message': reply})\n\n\nif __name__ == '__main__':\n    socketio.run(app, host='0.0.0.0', port=8000, debug=True)\n```\n## 大模型使用websocket聊天\n```python\n# main.py\nfrom fastapi import FastAPI, WebSocket\nfrom fastapi.responses import HTMLResponse\nimport requests\nimport json\n\napp = FastAPI()\n\n# 存储对话历史 (生产环境建议使用数据库)\nconversation_history = []\n\n# 集成前端页面与后端逻辑\nHTML_TEMPLATE = \"\"\"\n<!DOCTYPE html>\n<html>\n<head>\n    <title>AI 对话助手</title>\n    <style>\n        body {\n            max-width: 800px;\n            margin: 0 auto;\n            padding: 20px;\n            font-family: Arial, sans-serif;\n        }\n        #chatContainer {\n            height: 60vh;\n            border: 1px solid #ddd;\n            border-radius: 8px;\n            overflow-y: auto;\n            padding: 15px;\n            margin-bottom: 15px;\n            background: #f9f9f9;\n        }\n        .message {\n            margin: 10px 0;\n            padding: 12px;\n            border-radius: 15px;\n            max-width: 80%;\n            word-wrap: break-word;\n        }\n        .user-message {\n            background: #e3f2fd;\n            margin-left: auto;\n            border-bottom-right-radius: 5px;\n        }\n        .bot-message {\n            background: #fff;\n            border: 1px solid #eee;\n            margin-right: auto;\n            border-bottom-left-radius: 5px;\n        }\n        #inputContainer {\n            display: flex;\n            gap: 10px;\n        }\n        #userInput {\n            flex: 1;\n            padding: 12px;\n            border: 1px solid #ddd;\n            border-radius: 25px;\n            outline: none;\n        }\n        button {\n            padding: 12px 25px;\n            background: #007bff;\n            color: white;\n            border: none;\n            border-radius: 25px;\n            cursor: pointer;\n            transition: background 0.3s;\n        }\n        button:hover {\n            background: #0056b3;\n        }\n        .status {\n            color: #666;\n            text-align: center;\n            padding: 10px;\n        }\n    </style>\n</head>\n<body>\n    <h1>AI 对话助手</h1>\n    <div id=\"chatContainer\"></div>\n    <div id=\"inputContainer\">\n        <input type=\"text\" id=\"userInput\" placeholder=\"输入消息...\" />\n        <button onclick=\"sendMessage()\">发送</button>\n    </div>\n    <div class=\"status\" id=\"status\">连接状态：正常</div>\n    \n   // <iframe\n   //      src=\"http://47.237.81.149/chatbot/9h9nyQcblGTesiGJ\"\n    //     style=\"width: 100%; height: 100%; min-height: 700px\"\n   //      frameborder=\"0\"\n  //       allow=\"microphone\">\n   // </iframe>\n\n    <script>\n        const ws = new WebSocket('ws://' + window.location.host + '/ws');\n        const chatContainer = document.getElementById('chatContainer');\n        let isBotResponding = false;\n\n        // WebSocket 事件处理\n        ws.onopen = () => updateStatus('已连接');\n        ws.onclose = () => updateStatus('连接已断开');\n        ws.onerror = () => updateStatus('连接错误');\n\n        ws.onmessage = (event) => {\n            const data = JSON.parse(event.data);\n            handleResponse(data);\n        };\n\n        function handleResponse(data) {\n            switch(data.type) {\n                case 'user_message':\n                    appendMessage(data.content, 'user');\n                    break;\n                case 'assistant_start':\n                    isBotResponding = true;\n                    appendMessage('', 'bot');\n                    break;\n                case 'assistant_chunk':\n                    appendChunk(data.content);\n                    break;\n                case 'assistant_end':\n                    isBotResponding = false;\n                    break;\n                case 'error':\n                    appendMessage(`错误：${data.content}`, 'error');\n                    break;\n            }\n        }\n\n        function appendMessage(content, role) {\n            const div = document.createElement('div');\n            div.className = `message ${role}-message`;\n            div.textContent = content;\n            chatContainer.appendChild(div);\n            scrollToBottom();\n        }\n\n        function appendChunk(content) {\n            const messages = document.getElementsByClassName('bot-message');\n            const lastMsg = messages[messages.length - 1];\n            lastMsg.textContent += content;\n            scrollToBottom();\n        }\n\n        function scrollToBottom() {\n            chatContainer.scrollTop = chatContainer.scrollHeight;\n        }\n\n        function updateStatus(text) {\n            document.getElementById('status').textContent = `状态：${text}`;\n        }\n\n        function sendMessage() {\n            const input = document.getElementById('userInput');\n            const message = input.value.trim();\n            if (message && !isBotResponding) {\n                ws.send(message);\n                input.value = '';\n            }\n        }\n\n        // 支持回车发送\n        document.getElementById('userInput').addEventListener('keypress', (e) => {\n            if (e.key === 'Enter') sendMessage();\n        });\n    </script>\n</body>\n</html>\n\"\"\"\n\n\n@app.get(\"/\")\nasync def get():\n    return HTMLResponse(HTML_TEMPLATE)\n\n\n@app.websocket(\"/ws\")\nasync def websocket_endpoint(websocket: WebSocket):\n    await websocket.accept()\n    try:\n        while True:\n            # 接收用户消息\n            user_message = await websocket.receive_text()\n\n            # 更新对话历史\n            conversation_history.append({\"role\": \"user\", \"content\": user_message})\n\n            # 发送用户消息到前端\n            await websocket.send_json({\n                \"type\": \"user_message\",\n                \"content\": user_message\n            })\n\n            # 准备流式请求\n            await websocket.send_json({\"type\": \"assistant_start\"})\n\n            # 构造请求数据\n            request_data = {\n                \"model\": \"deepseek-r1:latest\",\n                \"messages\": conversation_history,\n                \"stream\": True\n            }\n\n            # 流式获取响应\n            full_response = []\n            with requests.post(\n                    \"http://1.1.1.1:11434/api/chat\",#大模型接口地址\n                    json=request_data,\n                    stream=True\n            ) as response:\n                response.raise_for_status()\n                for line in response.iter_lines():\n                    if line:\n                        chunk = json.loads(line.decode('utf-8'))\n                        if 'message' in chunk:\n                            content = chunk['message']['content']\n                            full_response.append(content)\n                            await websocket.send_json({\n                                \"type\": \"assistant_chunk\",\n                                \"content\": content\n                            })\n\n            # 保存完整响应\n            conversation_history.append({\n                \"role\": \"assistant\",\n                \"content\": \"\".join(full_response)\n            })\n            await websocket.send_json({\"type\": \"assistant_end\"})\n\n    except Exception as e:\n        await websocket.send_json({\n            \"type\": \"error\",\n            \"content\": f\"系统错误: {str(e)}\"\n        })\n    finally:\n        await websocket.close()\n\n\nif __name__ == \"__main__\":\n    import uvicorn\n\n    uvicorn.run(app, host=\"0.0.0.0\", port=8000)\n```","slug":"websocket","published":1,"updated":"2025-07-30T08:38:33.412Z","comments":1,"layout":"post","photos":[],"_id":"cmdppvvvy000rlpodd9at444a","content":"<h1 id=\"异步\"><a href=\"#异步\" class=\"headerlink\" title=\"异步\"></a>异步</h1><p>因为websocket会使用到异步操作先了解一下异步</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">task</span>(<span class=\"params\">name, duration</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;[<span class=\"subst\">&#123;time.strftime(<span class=\"string\">&#x27;%H:%M:%S&#x27;</span>)&#125;</span>] 任务 <span class=\"subst\">&#123;name&#125;</span> 开始&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> asyncio.sleep(duration)  <span class=\"comment\"># 模拟并发等待</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;[<span class=\"subst\">&#123;time.strftime(<span class=\"string\">&#x27;%H:%M:%S&#x27;</span>)&#125;</span>] 任务 <span class=\"subst\">&#123;name&#125;</span> 完成&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">task_</span>(<span class=\"params\">name, duration</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;[<span class=\"subst\">&#123;time.strftime(<span class=\"string\">&#x27;%H:%M:%S&#x27;</span>)&#125;</span>] 任务 <span class=\"subst\">&#123;name&#125;</span> 开始&quot;</span>)</span><br><span class=\"line\">    time.sleep(duration)  <span class=\"comment\"># 模拟耗时操作</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;[<span class=\"subst\">&#123;time.strftime(<span class=\"string\">&#x27;%H:%M:%S&#x27;</span>)&#125;</span>] 任务 <span class=\"subst\">&#123;name&#125;</span> 完成&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    start_time = time.time()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;[<span class=\"subst\">&#123;time.strftime(<span class=\"string\">&#x27;%H:%M:%S&#x27;</span>)&#125;</span>] 异步任务开始&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">await</span> asyncio.gather(</span><br><span class=\"line\">        task(<span class=\"string\">&quot;A&quot;</span>, <span class=\"number\">2</span>),</span><br><span class=\"line\">        task(<span class=\"string\">&quot;B&quot;</span>, <span class=\"number\">3</span>),</span><br><span class=\"line\">        task(<span class=\"string\">&quot;C&quot;</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    end_time = time.time()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;[<span class=\"subst\">&#123;time.strftime(<span class=\"string\">&#x27;%H:%M:%S&#x27;</span>)&#125;</span>] 异步任务总耗时: <span class=\"subst\">&#123;end_time - start_time:<span class=\"number\">.2</span>f&#125;</span> 秒&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main_</span>():</span><br><span class=\"line\">    start_time = time.time()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;[<span class=\"subst\">&#123;time.strftime(<span class=\"string\">&#x27;%H:%M:%S&#x27;</span>)&#125;</span>] 同步任务开始&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    task_(<span class=\"string\">&quot;A&quot;</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">    task_(<span class=\"string\">&quot;B&quot;</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">    task_(<span class=\"string\">&quot;C&quot;</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    end_time = time.time()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;[<span class=\"subst\">&#123;time.strftime(<span class=\"string\">&#x27;%H:%M:%S&#x27;</span>)&#125;</span>] 同步任务总耗时: <span class=\"subst\">&#123;end_time - start_time:<span class=\"number\">.2</span>f&#125;</span> 秒&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;======================异步==========================&quot;</span>)</span><br><span class=\"line\">    asyncio.run(main())</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;======================同步==========================&quot;</span>)</span><br><span class=\"line\">    main_()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#结果可以看出异步不需要等待会直接执行下一步操作，任务完成可以使用await来回调处理完成结果</span></span><br><span class=\"line\">======================异步==========================</span><br><span class=\"line\">[<span class=\"number\">14</span>:<span class=\"number\">45</span>:<span class=\"number\">43</span>] 异步任务开始</span><br><span class=\"line\">[<span class=\"number\">14</span>:<span class=\"number\">45</span>:<span class=\"number\">43</span>] 任务 A 开始</span><br><span class=\"line\">[<span class=\"number\">14</span>:<span class=\"number\">45</span>:<span class=\"number\">43</span>] 任务 B 开始</span><br><span class=\"line\">[<span class=\"number\">14</span>:<span class=\"number\">45</span>:<span class=\"number\">43</span>] 任务 C 开始</span><br><span class=\"line\">[<span class=\"number\">14</span>:<span class=\"number\">45</span>:<span class=\"number\">44</span>] 任务 C 完成</span><br><span class=\"line\">[<span class=\"number\">14</span>:<span class=\"number\">45</span>:<span class=\"number\">45</span>] 任务 A 完成</span><br><span class=\"line\">[<span class=\"number\">14</span>:<span class=\"number\">45</span>:<span class=\"number\">46</span>] 任务 B 完成</span><br><span class=\"line\">[<span class=\"number\">14</span>:<span class=\"number\">45</span>:<span class=\"number\">46</span>] 异步任务总耗时: <span class=\"number\">3.00</span> 秒</span><br><span class=\"line\">======================同步==========================</span><br><span class=\"line\">[<span class=\"number\">14</span>:<span class=\"number\">45</span>:<span class=\"number\">46</span>] 同步任务开始</span><br><span class=\"line\">[<span class=\"number\">14</span>:<span class=\"number\">45</span>:<span class=\"number\">46</span>] 任务 A 开始</span><br><span class=\"line\">[<span class=\"number\">14</span>:<span class=\"number\">45</span>:<span class=\"number\">48</span>] 任务 A 完成</span><br><span class=\"line\">[<span class=\"number\">14</span>:<span class=\"number\">45</span>:<span class=\"number\">48</span>] 任务 B 开始</span><br><span class=\"line\">[<span class=\"number\">14</span>:<span class=\"number\">45</span>:<span class=\"number\">51</span>] 任务 B 完成</span><br><span class=\"line\">[<span class=\"number\">14</span>:<span class=\"number\">45</span>:<span class=\"number\">51</span>] 任务 C 开始</span><br><span class=\"line\">[<span class=\"number\">14</span>:<span class=\"number\">45</span>:<span class=\"number\">52</span>] 任务 C 完成</span><br><span class=\"line\">[<span class=\"number\">14</span>:<span class=\"number\">45</span>:<span class=\"number\">52</span>] 同步任务总耗时: <span class=\"number\">6.00</span> 秒</span><br></pre></td></tr></table></figure>\n<h1 id=\"websocket\"><a href=\"#websocket\" class=\"headerlink\" title=\"websocket\"></a>websocket</h1><h2 id=\"服务端\"><a href=\"#服务端\" class=\"headerlink\" title=\"服务端\"></a>服务端</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"><span class=\"keyword\">import</span> websockets</span><br><span class=\"line\"><span class=\"comment\">#https://websockets.readthedocs.io/en/stable/</span></span><br><span class=\"line\"><span class=\"comment\"># 处理客户端连接</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">handle_client</span>(<span class=\"params\">websocket</span>):</span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"keyword\">for</span> message <span class=\"keyword\">in</span> websocket:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;收到客户端消息: <span class=\"subst\">&#123;message&#125;</span>&quot;</span>)</span><br><span class=\"line\">        reply = <span class=\"string\">f&quot;机器人回复：你说的是 &#x27;<span class=\"subst\">&#123;message&#125;</span>&#x27; 对吗？&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">await</span> websocket.send(reply)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># async def main_logic(websocket, path):</span></span><br><span class=\"line\"><span class=\"comment\">#    # await check_permit(websocket)</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#     await handle_client(websocket)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动服务器</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"keyword\">with</span> websockets.serve(handle_client, <span class=\"string\">&quot;localhost&quot;</span>, <span class=\"number\">8765</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;WebSocket 服务器已启动，端口 8765&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">await</span> asyncio.Future()  <span class=\"comment\"># 永久运行</span></span><br><span class=\"line\"></span><br><span class=\"line\">asyncio.run(main())</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"><span class=\"keyword\">import</span> websockets</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">client</span>():</span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"keyword\">with</span> websockets.connect(<span class=\"string\">&quot;ws://localhost:8765&quot;</span>) <span class=\"keyword\">as</span> websocket:</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            message = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入消息（输入 q 退出）: &quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> message == <span class=\"string\">&#x27;q&#x27;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            <span class=\"keyword\">await</span> websocket.send(message)</span><br><span class=\"line\">            response = <span class=\"keyword\">await</span> websocket.recv()</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;收到回复: <span class=\"subst\">&#123;response&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">asyncio.run(client())</span><br><span class=\"line\"><span class=\"comment\">#效果，相当于打开了一个通道双方都可以发消息</span></span><br><span class=\"line\">WebSocket 服务器已启动，端口 <span class=\"number\">8765</span></span><br><span class=\"line\">请输入消息（输入 q 退出）: hello websockets</span><br><span class=\"line\">收到回复: 机器人回复：你说的是 <span class=\"string\">&#x27;hello websockets&#x27;</span> 对吗？</span><br><span class=\"line\">请输入消息（输入 q 退出）: </span><br></pre></td></tr></table></figure>\n<h1 id=\"额外\"><a href=\"#额外\" class=\"headerlink\" title=\"额外\"></a>额外</h1><h2 id=\"fastapi框架使用websocket\"><a href=\"#fastapi框架使用websocket\" class=\"headerlink\" title=\"fastapi框架使用websocket\"></a>fastapi框架使用websocket</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> fastapi <span class=\"keyword\">import</span> FastAPI, WebSocket, WebSocketDisconnect</span><br><span class=\"line\"><span class=\"keyword\">from</span> fastapi.responses <span class=\"keyword\">import</span> HTMLResponse</span><br><span class=\"line\"><span class=\"keyword\">from</span> fastapi.middleware.cors <span class=\"keyword\">import</span> CORSMiddleware</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\">app = FastAPI()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置CORS跨域</span></span><br><span class=\"line\">app.add_middleware(</span><br><span class=\"line\">    CORSMiddleware,</span><br><span class=\"line\">    allow_origins=[<span class=\"string\">&quot;*&quot;</span>],</span><br><span class=\"line\">    allow_credentials=<span class=\"literal\">True</span>,</span><br><span class=\"line\">    allow_methods=[<span class=\"string\">&quot;*&quot;</span>],</span><br><span class=\"line\">    allow_headers=[<span class=\"string\">&quot;*&quot;</span>],</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># HTML页面（修改了前端WebSocket实现）</span></span><br><span class=\"line\">HTML_TEMPLATE = <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;html&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;head&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;title&gt;FastAPI 聊天&lt;/title&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;style&gt;</span></span><br><span class=\"line\"><span class=\"string\">        body &#123; max-width: 800px; margin: 20px auto; padding: 20px; &#125;</span></span><br><span class=\"line\"><span class=\"string\">        #output &#123; </span></span><br><span class=\"line\"><span class=\"string\">            height: 300px; </span></span><br><span class=\"line\"><span class=\"string\">            border: 1px solid #ccc; </span></span><br><span class=\"line\"><span class=\"string\">            overflow-y: auto; </span></span><br><span class=\"line\"><span class=\"string\">            padding: 10px; </span></span><br><span class=\"line\"><span class=\"string\">            margin-bottom: 10px;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">        #input &#123; </span></span><br><span class=\"line\"><span class=\"string\">            width: 80%; </span></span><br><span class=\"line\"><span class=\"string\">            padding: 8px;</span></span><br><span class=\"line\"><span class=\"string\">            margin-right: 10px;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">        button &#123;</span></span><br><span class=\"line\"><span class=\"string\">            padding: 8px 16px;</span></span><br><span class=\"line\"><span class=\"string\">            background: #007bff;</span></span><br><span class=\"line\"><span class=\"string\">            color: white;</span></span><br><span class=\"line\"><span class=\"string\">            border: none;</span></span><br><span class=\"line\"><span class=\"string\">            border-radius: 4px;</span></span><br><span class=\"line\"><span class=\"string\">            cursor: pointer;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">        button:hover &#123;</span></span><br><span class=\"line\"><span class=\"string\">            opacity: 0.8;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/style&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/head&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;body&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div id=&quot;output&quot;&gt;&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;input type=&quot;text&quot; id=&quot;input&quot; placeholder=&quot;输入消息...&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;button onclick=&quot;sendMessage()&quot;&gt;发送&lt;/button&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    &lt;script&gt;</span></span><br><span class=\"line\"><span class=\"string\">        // 初始化WebSocket连接</span></span><br><span class=\"line\"><span class=\"string\">        const socket = new WebSocket(`ws://$&#123;window.location.host&#125;/ws`);</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        // 连接成功回调</span></span><br><span class=\"line\"><span class=\"string\">        socket.onopen = () =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"string\">            addMessage(&#x27;系统&#x27;, &#x27;已连接到服务器&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">        &#125;;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        // 接收消息处理</span></span><br><span class=\"line\"><span class=\"string\">        socket.onmessage = (event) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"string\">            const data = JSON.parse(event.data);</span></span><br><span class=\"line\"><span class=\"string\">            addMessage(&#x27;机器人&#x27;, data.message);</span></span><br><span class=\"line\"><span class=\"string\">        &#125;;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        // 错误处理</span></span><br><span class=\"line\"><span class=\"string\">        socket.onerror = (error) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"string\">            addMessage(&#x27;系统&#x27;, `连接错误: $&#123;error.message&#125;`);</span></span><br><span class=\"line\"><span class=\"string\">        &#125;;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        // 关闭连接处理</span></span><br><span class=\"line\"><span class=\"string\">        socket.onclose = () =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"string\">            addMessage(&#x27;系统&#x27;, &#x27;连接已断开&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">        &#125;;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        // 发送消息</span></span><br><span class=\"line\"><span class=\"string\">        function sendMessage() &#123;</span></span><br><span class=\"line\"><span class=\"string\">            const input = document.getElementById(&#x27;input&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">            const message = input.value.trim();</span></span><br><span class=\"line\"><span class=\"string\">            if (message) &#123;</span></span><br><span class=\"line\"><span class=\"string\">                socket.send(JSON.stringify(&#123;</span></span><br><span class=\"line\"><span class=\"string\">                    type: &quot;user_message&quot;,</span></span><br><span class=\"line\"><span class=\"string\">                    content: message</span></span><br><span class=\"line\"><span class=\"string\">                &#125;));</span></span><br><span class=\"line\"><span class=\"string\">                addMessage(&#x27;我&#x27;, message);</span></span><br><span class=\"line\"><span class=\"string\">                input.value = &#x27;&#x27;;</span></span><br><span class=\"line\"><span class=\"string\">            &#125;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        // 添加消息到界面</span></span><br><span class=\"line\"><span class=\"string\">        function addMessage(sender, content) &#123;</span></span><br><span class=\"line\"><span class=\"string\">            const output = document.getElementById(&#x27;output&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">            const div = document.createElement(&#x27;div&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">            div.innerHTML = `&lt;strong&gt;$&#123;sender&#125;:&lt;/strong&gt; $&#123;content&#125;`;</span></span><br><span class=\"line\"><span class=\"string\">            output.appendChild(div);</span></span><br><span class=\"line\"><span class=\"string\">            // 自动滚动到底部</span></span><br><span class=\"line\"><span class=\"string\">            output.scrollTop = output.scrollHeight;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/body&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/html&gt;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.get(<span class=\"params\"><span class=\"string\">&quot;/&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">index</span>():</span><br><span class=\"line\">    <span class=\"keyword\">return</span> HTMLResponse(HTML_TEMPLATE)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># WebSocket端点</span></span><br><span class=\"line\"><span class=\"meta\">@app.websocket(<span class=\"params\"><span class=\"string\">&quot;/ws&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">websocket_endpoint</span>(<span class=\"params\">websocket: WebSocket</span>):</span><br><span class=\"line\">    <span class=\"keyword\">await</span> websocket.accept()</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 接收客户端消息</span></span><br><span class=\"line\">            data = <span class=\"keyword\">await</span> websocket.receive_text()</span><br><span class=\"line\">            message_data = json.loads(data)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># 处理客户端消息</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> message_data[<span class=\"string\">&#x27;type&#x27;</span>] == <span class=\"string\">&#x27;user_message&#x27;</span>:</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;收到客户端消息: <span class=\"subst\">&#123;message_data[<span class=\"string\">&#x27;content&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\"># 构造回复消息</span></span><br><span class=\"line\">                reply = &#123;</span><br><span class=\"line\">                    <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;server_response&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;message&quot;</span>: <span class=\"string\">f&quot;机器人回复：你说的是 &#x27;<span class=\"subst\">&#123;message_data[<span class=\"string\">&#x27;content&#x27;</span>]&#125;</span>&#x27; 对吗？&quot;</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\"># 发送回复</span></span><br><span class=\"line\">                <span class=\"keyword\">await</span> websocket.send_json(reply)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">except</span> WebSocketDisconnect:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;客户端断开连接&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;发生错误: <span class=\"subst\">&#123;<span class=\"built_in\">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    <span class=\"keyword\">import</span> uvicorn</span><br><span class=\"line\"></span><br><span class=\"line\">    uvicorn.run(app, host=<span class=\"string\">&quot;0.0.0.0&quot;</span>, port=<span class=\"number\">8001</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"flask使用websocket\"><a href=\"#flask使用websocket\" class=\"headerlink\" title=\"flask使用websocket\"></a>flask使用websocket</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> eventlet</span><br><span class=\"line\">eventlet.monkey_patch()  <span class=\"comment\"># 关键：启用异步支持</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, render_template_string</span><br><span class=\"line\"><span class=\"comment\">#pip install flask-socketio eventlet</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_socketio <span class=\"keyword\">import</span> SocketIO, emit</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\">app.config[<span class=\"string\">&#x27;SECRET_KEY&#x27;</span>] = <span class=\"string\">&#x27;secret!&#x27;</span></span><br><span class=\"line\">socketio = SocketIO(app, cors_allowed_origins=<span class=\"string\">&quot;*&quot;</span>)  <span class=\"comment\"># 允许跨域</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">index</span>():</span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template_string(<span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;html&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;head&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;title&gt;Socket.IO 聊天&lt;/title&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.7.2/socket.io.js&quot;&gt;&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;style&gt;</span></span><br><span class=\"line\"><span class=\"string\">            /* 保持原有样式不变 */</span></span><br><span class=\"line\"><span class=\"string\">            body &#123; max-width: 800px; margin: 20px auto; padding: 20px; &#125;</span></span><br><span class=\"line\"><span class=\"string\">            #output &#123; height: 300px; border: 1px solid #ccc; overflow-y: auto; padding: 10px; &#125;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/style&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/head&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;body&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;div id=&quot;output&quot;&gt;&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;input id=&quot;input&quot; placeholder=&quot;输入消息&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;button onclick=&quot;send()&quot;&gt;发送&lt;/button&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        &lt;script&gt;</span></span><br><span class=\"line\"><span class=\"string\">            const socket = io();  // 自动连接当前域名</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">            // 连接成功回调</span></span><br><span class=\"line\"><span class=\"string\">            socket.on(&#x27;connect&#x27;, () =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"string\">                addMessage(&#x27;系统&#x27;, &#x27;已连接到服务器&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">            &#125;);</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">            // 接收服务器消息</span></span><br><span class=\"line\"><span class=\"string\">            socket.on(&#x27;server_response&#x27;, (data) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"string\">                addMessage(&#x27;机器人&#x27;, data.message);</span></span><br><span class=\"line\"><span class=\"string\">            &#125;);</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">            // 发送消息</span></span><br><span class=\"line\"><span class=\"string\">            function send() &#123;</span></span><br><span class=\"line\"><span class=\"string\">                const input = document.getElementById(&#x27;input&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">                const message = input.value.trim();</span></span><br><span class=\"line\"><span class=\"string\">                if (message) &#123;</span></span><br><span class=\"line\"><span class=\"string\">                    socket.emit(&#x27;client_message&#x27;, message);</span></span><br><span class=\"line\"><span class=\"string\">                    addMessage(&#x27;我&#x27;, message);</span></span><br><span class=\"line\"><span class=\"string\">                    input.value = &#x27;&#x27;;</span></span><br><span class=\"line\"><span class=\"string\">                &#125;</span></span><br><span class=\"line\"><span class=\"string\">            &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">            // 添加消息到界面</span></span><br><span class=\"line\"><span class=\"string\">            function addMessage(sender, content) &#123;</span></span><br><span class=\"line\"><span class=\"string\">                const div = document.createElement(&#x27;div&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">                div.innerHTML = `&lt;strong&gt;$&#123;sender&#125;:&lt;/strong&gt; $&#123;content&#125;`;</span></span><br><span class=\"line\"><span class=\"string\">                document.getElementById(&#x27;output&#x27;).appendChild(div);</span></span><br><span class=\"line\"><span class=\"string\">                // 自动滚动到底部</span></span><br><span class=\"line\"><span class=\"string\">                const output = document.getElementById(&#x27;output&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">                output.scrollTop = output.scrollHeight;</span></span><br><span class=\"line\"><span class=\"string\">            &#125;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/body&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/html&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &#x27;&#x27;&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Socket.IO 事件处理</span></span><br><span class=\"line\"><span class=\"meta\">@socketio.on(<span class=\"params\"><span class=\"string\">&#x27;client_message&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">handle_message</span>(<span class=\"params\">message</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;收到客户端消息: <span class=\"subst\">&#123;message&#125;</span>&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 构造回复消息</span></span><br><span class=\"line\">    reply = <span class=\"string\">f&quot;机器人回复：你说的是 &#x27;<span class=\"subst\">&#123;message&#125;</span>&#x27; 对吗？&quot;</span></span><br><span class=\"line\">    <span class=\"comment\"># 发送消息给客户端</span></span><br><span class=\"line\">    emit(<span class=\"string\">&#x27;server_response&#x27;</span>, &#123;<span class=\"string\">&#x27;message&#x27;</span>: reply&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    socketio.run(app, host=<span class=\"string\">&#x27;0.0.0.0&#x27;</span>, port=<span class=\"number\">8000</span>, debug=<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"大模型使用websocket聊天\"><a href=\"#大模型使用websocket聊天\" class=\"headerlink\" title=\"大模型使用websocket聊天\"></a>大模型使用websocket聊天</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># main.py</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> fastapi <span class=\"keyword\">import</span> FastAPI, WebSocket</span><br><span class=\"line\"><span class=\"keyword\">from</span> fastapi.responses <span class=\"keyword\">import</span> HTMLResponse</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\">app = FastAPI()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 存储对话历史 (生产环境建议使用数据库)</span></span><br><span class=\"line\">conversation_history = []</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 集成前端页面与后端逻辑</span></span><br><span class=\"line\">HTML_TEMPLATE = <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;html&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;head&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;title&gt;AI 对话助手&lt;/title&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;style&gt;</span></span><br><span class=\"line\"><span class=\"string\">        body &#123;</span></span><br><span class=\"line\"><span class=\"string\">            max-width: 800px;</span></span><br><span class=\"line\"><span class=\"string\">            margin: 0 auto;</span></span><br><span class=\"line\"><span class=\"string\">            padding: 20px;</span></span><br><span class=\"line\"><span class=\"string\">            font-family: Arial, sans-serif;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">        #chatContainer &#123;</span></span><br><span class=\"line\"><span class=\"string\">            height: 60vh;</span></span><br><span class=\"line\"><span class=\"string\">            border: 1px solid #ddd;</span></span><br><span class=\"line\"><span class=\"string\">            border-radius: 8px;</span></span><br><span class=\"line\"><span class=\"string\">            overflow-y: auto;</span></span><br><span class=\"line\"><span class=\"string\">            padding: 15px;</span></span><br><span class=\"line\"><span class=\"string\">            margin-bottom: 15px;</span></span><br><span class=\"line\"><span class=\"string\">            background: #f9f9f9;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">        .message &#123;</span></span><br><span class=\"line\"><span class=\"string\">            margin: 10px 0;</span></span><br><span class=\"line\"><span class=\"string\">            padding: 12px;</span></span><br><span class=\"line\"><span class=\"string\">            border-radius: 15px;</span></span><br><span class=\"line\"><span class=\"string\">            max-width: 80%;</span></span><br><span class=\"line\"><span class=\"string\">            word-wrap: break-word;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">        .user-message &#123;</span></span><br><span class=\"line\"><span class=\"string\">            background: #e3f2fd;</span></span><br><span class=\"line\"><span class=\"string\">            margin-left: auto;</span></span><br><span class=\"line\"><span class=\"string\">            border-bottom-right-radius: 5px;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">        .bot-message &#123;</span></span><br><span class=\"line\"><span class=\"string\">            background: #fff;</span></span><br><span class=\"line\"><span class=\"string\">            border: 1px solid #eee;</span></span><br><span class=\"line\"><span class=\"string\">            margin-right: auto;</span></span><br><span class=\"line\"><span class=\"string\">            border-bottom-left-radius: 5px;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">        #inputContainer &#123;</span></span><br><span class=\"line\"><span class=\"string\">            display: flex;</span></span><br><span class=\"line\"><span class=\"string\">            gap: 10px;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">        #userInput &#123;</span></span><br><span class=\"line\"><span class=\"string\">            flex: 1;</span></span><br><span class=\"line\"><span class=\"string\">            padding: 12px;</span></span><br><span class=\"line\"><span class=\"string\">            border: 1px solid #ddd;</span></span><br><span class=\"line\"><span class=\"string\">            border-radius: 25px;</span></span><br><span class=\"line\"><span class=\"string\">            outline: none;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">        button &#123;</span></span><br><span class=\"line\"><span class=\"string\">            padding: 12px 25px;</span></span><br><span class=\"line\"><span class=\"string\">            background: #007bff;</span></span><br><span class=\"line\"><span class=\"string\">            color: white;</span></span><br><span class=\"line\"><span class=\"string\">            border: none;</span></span><br><span class=\"line\"><span class=\"string\">            border-radius: 25px;</span></span><br><span class=\"line\"><span class=\"string\">            cursor: pointer;</span></span><br><span class=\"line\"><span class=\"string\">            transition: background 0.3s;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">        button:hover &#123;</span></span><br><span class=\"line\"><span class=\"string\">            background: #0056b3;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">        .status &#123;</span></span><br><span class=\"line\"><span class=\"string\">            color: #666;</span></span><br><span class=\"line\"><span class=\"string\">            text-align: center;</span></span><br><span class=\"line\"><span class=\"string\">            padding: 10px;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/style&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/head&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;body&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;h1&gt;AI 对话助手&lt;/h1&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div id=&quot;chatContainer&quot;&gt;&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div id=&quot;inputContainer&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;input type=&quot;text&quot; id=&quot;userInput&quot; placeholder=&quot;输入消息...&quot; /&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;button onclick=&quot;sendMessage()&quot;&gt;发送&lt;/button&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div class=&quot;status&quot; id=&quot;status&quot;&gt;连接状态：正常&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    </span></span><br><span class=\"line\"><span class=\"string\">   // &lt;iframe</span></span><br><span class=\"line\"><span class=\"string\">   //      src=&quot;http://47.237.81.149/chatbot/9h9nyQcblGTesiGJ&quot;</span></span><br><span class=\"line\"><span class=\"string\">    //     style=&quot;width: 100%; height: 100%; min-height: 700px&quot;</span></span><br><span class=\"line\"><span class=\"string\">   //      frameborder=&quot;0&quot;</span></span><br><span class=\"line\"><span class=\"string\">  //       allow=&quot;microphone&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">   // &lt;/iframe&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    &lt;script&gt;</span></span><br><span class=\"line\"><span class=\"string\">        const ws = new WebSocket(&#x27;ws://&#x27; + window.location.host + &#x27;/ws&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">        const chatContainer = document.getElementById(&#x27;chatContainer&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">        let isBotResponding = false;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        // WebSocket 事件处理</span></span><br><span class=\"line\"><span class=\"string\">        ws.onopen = () =&gt; updateStatus(&#x27;已连接&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">        ws.onclose = () =&gt; updateStatus(&#x27;连接已断开&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">        ws.onerror = () =&gt; updateStatus(&#x27;连接错误&#x27;);</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        ws.onmessage = (event) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"string\">            const data = JSON.parse(event.data);</span></span><br><span class=\"line\"><span class=\"string\">            handleResponse(data);</span></span><br><span class=\"line\"><span class=\"string\">        &#125;;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        function handleResponse(data) &#123;</span></span><br><span class=\"line\"><span class=\"string\">            switch(data.type) &#123;</span></span><br><span class=\"line\"><span class=\"string\">                case &#x27;user_message&#x27;:</span></span><br><span class=\"line\"><span class=\"string\">                    appendMessage(data.content, &#x27;user&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">                    break;</span></span><br><span class=\"line\"><span class=\"string\">                case &#x27;assistant_start&#x27;:</span></span><br><span class=\"line\"><span class=\"string\">                    isBotResponding = true;</span></span><br><span class=\"line\"><span class=\"string\">                    appendMessage(&#x27;&#x27;, &#x27;bot&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">                    break;</span></span><br><span class=\"line\"><span class=\"string\">                case &#x27;assistant_chunk&#x27;:</span></span><br><span class=\"line\"><span class=\"string\">                    appendChunk(data.content);</span></span><br><span class=\"line\"><span class=\"string\">                    break;</span></span><br><span class=\"line\"><span class=\"string\">                case &#x27;assistant_end&#x27;:</span></span><br><span class=\"line\"><span class=\"string\">                    isBotResponding = false;</span></span><br><span class=\"line\"><span class=\"string\">                    break;</span></span><br><span class=\"line\"><span class=\"string\">                case &#x27;error&#x27;:</span></span><br><span class=\"line\"><span class=\"string\">                    appendMessage(`错误：$&#123;data.content&#125;`, &#x27;error&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">                    break;</span></span><br><span class=\"line\"><span class=\"string\">            &#125;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        function appendMessage(content, role) &#123;</span></span><br><span class=\"line\"><span class=\"string\">            const div = document.createElement(&#x27;div&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">            div.className = `message $&#123;role&#125;-message`;</span></span><br><span class=\"line\"><span class=\"string\">            div.textContent = content;</span></span><br><span class=\"line\"><span class=\"string\">            chatContainer.appendChild(div);</span></span><br><span class=\"line\"><span class=\"string\">            scrollToBottom();</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        function appendChunk(content) &#123;</span></span><br><span class=\"line\"><span class=\"string\">            const messages = document.getElementsByClassName(&#x27;bot-message&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">            const lastMsg = messages[messages.length - 1];</span></span><br><span class=\"line\"><span class=\"string\">            lastMsg.textContent += content;</span></span><br><span class=\"line\"><span class=\"string\">            scrollToBottom();</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        function scrollToBottom() &#123;</span></span><br><span class=\"line\"><span class=\"string\">            chatContainer.scrollTop = chatContainer.scrollHeight;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        function updateStatus(text) &#123;</span></span><br><span class=\"line\"><span class=\"string\">            document.getElementById(&#x27;status&#x27;).textContent = `状态：$&#123;text&#125;`;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        function sendMessage() &#123;</span></span><br><span class=\"line\"><span class=\"string\">            const input = document.getElementById(&#x27;userInput&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">            const message = input.value.trim();</span></span><br><span class=\"line\"><span class=\"string\">            if (message &amp;&amp; !isBotResponding) &#123;</span></span><br><span class=\"line\"><span class=\"string\">                ws.send(message);</span></span><br><span class=\"line\"><span class=\"string\">                input.value = &#x27;&#x27;;</span></span><br><span class=\"line\"><span class=\"string\">            &#125;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        // 支持回车发送</span></span><br><span class=\"line\"><span class=\"string\">        document.getElementById(&#x27;userInput&#x27;).addEventListener(&#x27;keypress&#x27;, (e) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"string\">            if (e.key === &#x27;Enter&#x27;) sendMessage();</span></span><br><span class=\"line\"><span class=\"string\">        &#125;);</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/body&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/html&gt;</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.get(<span class=\"params\"><span class=\"string\">&quot;/&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">get</span>():</span><br><span class=\"line\">    <span class=\"keyword\">return</span> HTMLResponse(HTML_TEMPLATE)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.websocket(<span class=\"params\"><span class=\"string\">&quot;/ws&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">websocket_endpoint</span>(<span class=\"params\">websocket: WebSocket</span>):</span><br><span class=\"line\">    <span class=\"keyword\">await</span> websocket.accept()</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 接收用户消息</span></span><br><span class=\"line\">            user_message = <span class=\"keyword\">await</span> websocket.receive_text()</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># 更新对话历史</span></span><br><span class=\"line\">            conversation_history.append(&#123;<span class=\"string\">&quot;role&quot;</span>: <span class=\"string\">&quot;user&quot;</span>, <span class=\"string\">&quot;content&quot;</span>: user_message&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># 发送用户消息到前端</span></span><br><span class=\"line\">            <span class=\"keyword\">await</span> websocket.send_json(&#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;user_message&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;content&quot;</span>: user_message</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># 准备流式请求</span></span><br><span class=\"line\">            <span class=\"keyword\">await</span> websocket.send_json(&#123;<span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;assistant_start&quot;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># 构造请求数据</span></span><br><span class=\"line\">            request_data = &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;model&quot;</span>: <span class=\"string\">&quot;deepseek-r1:latest&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;messages&quot;</span>: conversation_history,</span><br><span class=\"line\">                <span class=\"string\">&quot;stream&quot;</span>: <span class=\"literal\">True</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># 流式获取响应</span></span><br><span class=\"line\">            full_response = []</span><br><span class=\"line\">            <span class=\"keyword\">with</span> requests.post(</span><br><span class=\"line\">                    <span class=\"string\">&quot;http://1.1.1.1:11434/api/chat&quot;</span>,<span class=\"comment\">#大模型接口地址</span></span><br><span class=\"line\">                    json=request_data,</span><br><span class=\"line\">                    stream=<span class=\"literal\">True</span></span><br><span class=\"line\">            ) <span class=\"keyword\">as</span> response:</span><br><span class=\"line\">                response.raise_for_status()</span><br><span class=\"line\">                <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> response.iter_lines():</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> line:</span><br><span class=\"line\">                        chunk = json.loads(line.decode(<span class=\"string\">&#x27;utf-8&#x27;</span>))</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> <span class=\"string\">&#x27;message&#x27;</span> <span class=\"keyword\">in</span> chunk:</span><br><span class=\"line\">                            content = chunk[<span class=\"string\">&#x27;message&#x27;</span>][<span class=\"string\">&#x27;content&#x27;</span>]</span><br><span class=\"line\">                            full_response.append(content)</span><br><span class=\"line\">                            <span class=\"keyword\">await</span> websocket.send_json(&#123;</span><br><span class=\"line\">                                <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;assistant_chunk&quot;</span>,</span><br><span class=\"line\">                                <span class=\"string\">&quot;content&quot;</span>: content</span><br><span class=\"line\">                            &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># 保存完整响应</span></span><br><span class=\"line\">            conversation_history.append(&#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;role&quot;</span>: <span class=\"string\">&quot;assistant&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;content&quot;</span>: <span class=\"string\">&quot;&quot;</span>.join(full_response)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            <span class=\"keyword\">await</span> websocket.send_json(&#123;<span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;assistant_end&quot;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        <span class=\"keyword\">await</span> websocket.send_json(&#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;error&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;content&quot;</span>: <span class=\"string\">f&quot;系统错误: <span class=\"subst\">&#123;<span class=\"built_in\">str</span>(e)&#125;</span>&quot;</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">finally</span>:</span><br><span class=\"line\">        <span class=\"keyword\">await</span> websocket.close()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    <span class=\"keyword\">import</span> uvicorn</span><br><span class=\"line\"></span><br><span class=\"line\">    uvicorn.run(app, host=<span class=\"string\">&quot;0.0.0.0&quot;</span>, port=<span class=\"number\">8000</span>)</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h1 id=\"异步\"><a href=\"#异步\" class=\"headerlink\" title=\"异步\"></a>异步</h1><p>因为websocket会使用到异步操作先了解一下异步</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">task</span>(<span class=\"params\">name, duration</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;[<span class=\"subst\">&#123;time.strftime(<span class=\"string\">&#x27;%H:%M:%S&#x27;</span>)&#125;</span>] 任务 <span class=\"subst\">&#123;name&#125;</span> 开始&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> asyncio.sleep(duration)  <span class=\"comment\"># 模拟并发等待</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;[<span class=\"subst\">&#123;time.strftime(<span class=\"string\">&#x27;%H:%M:%S&#x27;</span>)&#125;</span>] 任务 <span class=\"subst\">&#123;name&#125;</span> 完成&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">task_</span>(<span class=\"params\">name, duration</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;[<span class=\"subst\">&#123;time.strftime(<span class=\"string\">&#x27;%H:%M:%S&#x27;</span>)&#125;</span>] 任务 <span class=\"subst\">&#123;name&#125;</span> 开始&quot;</span>)</span><br><span class=\"line\">    time.sleep(duration)  <span class=\"comment\"># 模拟耗时操作</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;[<span class=\"subst\">&#123;time.strftime(<span class=\"string\">&#x27;%H:%M:%S&#x27;</span>)&#125;</span>] 任务 <span class=\"subst\">&#123;name&#125;</span> 完成&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    start_time = time.time()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;[<span class=\"subst\">&#123;time.strftime(<span class=\"string\">&#x27;%H:%M:%S&#x27;</span>)&#125;</span>] 异步任务开始&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">await</span> asyncio.gather(</span><br><span class=\"line\">        task(<span class=\"string\">&quot;A&quot;</span>, <span class=\"number\">2</span>),</span><br><span class=\"line\">        task(<span class=\"string\">&quot;B&quot;</span>, <span class=\"number\">3</span>),</span><br><span class=\"line\">        task(<span class=\"string\">&quot;C&quot;</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    end_time = time.time()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;[<span class=\"subst\">&#123;time.strftime(<span class=\"string\">&#x27;%H:%M:%S&#x27;</span>)&#125;</span>] 异步任务总耗时: <span class=\"subst\">&#123;end_time - start_time:<span class=\"number\">.2</span>f&#125;</span> 秒&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main_</span>():</span><br><span class=\"line\">    start_time = time.time()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;[<span class=\"subst\">&#123;time.strftime(<span class=\"string\">&#x27;%H:%M:%S&#x27;</span>)&#125;</span>] 同步任务开始&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    task_(<span class=\"string\">&quot;A&quot;</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">    task_(<span class=\"string\">&quot;B&quot;</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">    task_(<span class=\"string\">&quot;C&quot;</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    end_time = time.time()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;[<span class=\"subst\">&#123;time.strftime(<span class=\"string\">&#x27;%H:%M:%S&#x27;</span>)&#125;</span>] 同步任务总耗时: <span class=\"subst\">&#123;end_time - start_time:<span class=\"number\">.2</span>f&#125;</span> 秒&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;======================异步==========================&quot;</span>)</span><br><span class=\"line\">    asyncio.run(main())</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;======================同步==========================&quot;</span>)</span><br><span class=\"line\">    main_()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#结果可以看出异步不需要等待会直接执行下一步操作，任务完成可以使用await来回调处理完成结果</span></span><br><span class=\"line\">======================异步==========================</span><br><span class=\"line\">[<span class=\"number\">14</span>:<span class=\"number\">45</span>:<span class=\"number\">43</span>] 异步任务开始</span><br><span class=\"line\">[<span class=\"number\">14</span>:<span class=\"number\">45</span>:<span class=\"number\">43</span>] 任务 A 开始</span><br><span class=\"line\">[<span class=\"number\">14</span>:<span class=\"number\">45</span>:<span class=\"number\">43</span>] 任务 B 开始</span><br><span class=\"line\">[<span class=\"number\">14</span>:<span class=\"number\">45</span>:<span class=\"number\">43</span>] 任务 C 开始</span><br><span class=\"line\">[<span class=\"number\">14</span>:<span class=\"number\">45</span>:<span class=\"number\">44</span>] 任务 C 完成</span><br><span class=\"line\">[<span class=\"number\">14</span>:<span class=\"number\">45</span>:<span class=\"number\">45</span>] 任务 A 完成</span><br><span class=\"line\">[<span class=\"number\">14</span>:<span class=\"number\">45</span>:<span class=\"number\">46</span>] 任务 B 完成</span><br><span class=\"line\">[<span class=\"number\">14</span>:<span class=\"number\">45</span>:<span class=\"number\">46</span>] 异步任务总耗时: <span class=\"number\">3.00</span> 秒</span><br><span class=\"line\">======================同步==========================</span><br><span class=\"line\">[<span class=\"number\">14</span>:<span class=\"number\">45</span>:<span class=\"number\">46</span>] 同步任务开始</span><br><span class=\"line\">[<span class=\"number\">14</span>:<span class=\"number\">45</span>:<span class=\"number\">46</span>] 任务 A 开始</span><br><span class=\"line\">[<span class=\"number\">14</span>:<span class=\"number\">45</span>:<span class=\"number\">48</span>] 任务 A 完成</span><br><span class=\"line\">[<span class=\"number\">14</span>:<span class=\"number\">45</span>:<span class=\"number\">48</span>] 任务 B 开始</span><br><span class=\"line\">[<span class=\"number\">14</span>:<span class=\"number\">45</span>:<span class=\"number\">51</span>] 任务 B 完成</span><br><span class=\"line\">[<span class=\"number\">14</span>:<span class=\"number\">45</span>:<span class=\"number\">51</span>] 任务 C 开始</span><br><span class=\"line\">[<span class=\"number\">14</span>:<span class=\"number\">45</span>:<span class=\"number\">52</span>] 任务 C 完成</span><br><span class=\"line\">[<span class=\"number\">14</span>:<span class=\"number\">45</span>:<span class=\"number\">52</span>] 同步任务总耗时: <span class=\"number\">6.00</span> 秒</span><br></pre></td></tr></table></figure>\n<h1 id=\"websocket\"><a href=\"#websocket\" class=\"headerlink\" title=\"websocket\"></a>websocket</h1><h2 id=\"服务端\"><a href=\"#服务端\" class=\"headerlink\" title=\"服务端\"></a>服务端</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"><span class=\"keyword\">import</span> websockets</span><br><span class=\"line\"><span class=\"comment\">#https://websockets.readthedocs.io/en/stable/</span></span><br><span class=\"line\"><span class=\"comment\"># 处理客户端连接</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">handle_client</span>(<span class=\"params\">websocket</span>):</span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"keyword\">for</span> message <span class=\"keyword\">in</span> websocket:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;收到客户端消息: <span class=\"subst\">&#123;message&#125;</span>&quot;</span>)</span><br><span class=\"line\">        reply = <span class=\"string\">f&quot;机器人回复：你说的是 &#x27;<span class=\"subst\">&#123;message&#125;</span>&#x27; 对吗？&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">await</span> websocket.send(reply)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># async def main_logic(websocket, path):</span></span><br><span class=\"line\"><span class=\"comment\">#    # await check_permit(websocket)</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#     await handle_client(websocket)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动服务器</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"keyword\">with</span> websockets.serve(handle_client, <span class=\"string\">&quot;localhost&quot;</span>, <span class=\"number\">8765</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;WebSocket 服务器已启动，端口 8765&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">await</span> asyncio.Future()  <span class=\"comment\"># 永久运行</span></span><br><span class=\"line\"></span><br><span class=\"line\">asyncio.run(main())</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"><span class=\"keyword\">import</span> websockets</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">client</span>():</span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"keyword\">with</span> websockets.connect(<span class=\"string\">&quot;ws://localhost:8765&quot;</span>) <span class=\"keyword\">as</span> websocket:</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            message = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入消息（输入 q 退出）: &quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> message == <span class=\"string\">&#x27;q&#x27;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            <span class=\"keyword\">await</span> websocket.send(message)</span><br><span class=\"line\">            response = <span class=\"keyword\">await</span> websocket.recv()</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;收到回复: <span class=\"subst\">&#123;response&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">asyncio.run(client())</span><br><span class=\"line\"><span class=\"comment\">#效果，相当于打开了一个通道双方都可以发消息</span></span><br><span class=\"line\">WebSocket 服务器已启动，端口 <span class=\"number\">8765</span></span><br><span class=\"line\">请输入消息（输入 q 退出）: hello websockets</span><br><span class=\"line\">收到回复: 机器人回复：你说的是 <span class=\"string\">&#x27;hello websockets&#x27;</span> 对吗？</span><br><span class=\"line\">请输入消息（输入 q 退出）: </span><br></pre></td></tr></table></figure>\n<h1 id=\"额外\"><a href=\"#额外\" class=\"headerlink\" title=\"额外\"></a>额外</h1><h2 id=\"fastapi框架使用websocket\"><a href=\"#fastapi框架使用websocket\" class=\"headerlink\" title=\"fastapi框架使用websocket\"></a>fastapi框架使用websocket</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> fastapi <span class=\"keyword\">import</span> FastAPI, WebSocket, WebSocketDisconnect</span><br><span class=\"line\"><span class=\"keyword\">from</span> fastapi.responses <span class=\"keyword\">import</span> HTMLResponse</span><br><span class=\"line\"><span class=\"keyword\">from</span> fastapi.middleware.cors <span class=\"keyword\">import</span> CORSMiddleware</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\">app = FastAPI()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置CORS跨域</span></span><br><span class=\"line\">app.add_middleware(</span><br><span class=\"line\">    CORSMiddleware,</span><br><span class=\"line\">    allow_origins=[<span class=\"string\">&quot;*&quot;</span>],</span><br><span class=\"line\">    allow_credentials=<span class=\"literal\">True</span>,</span><br><span class=\"line\">    allow_methods=[<span class=\"string\">&quot;*&quot;</span>],</span><br><span class=\"line\">    allow_headers=[<span class=\"string\">&quot;*&quot;</span>],</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># HTML页面（修改了前端WebSocket实现）</span></span><br><span class=\"line\">HTML_TEMPLATE = <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;html&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;head&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;title&gt;FastAPI 聊天&lt;/title&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;style&gt;</span></span><br><span class=\"line\"><span class=\"string\">        body &#123; max-width: 800px; margin: 20px auto; padding: 20px; &#125;</span></span><br><span class=\"line\"><span class=\"string\">        #output &#123; </span></span><br><span class=\"line\"><span class=\"string\">            height: 300px; </span></span><br><span class=\"line\"><span class=\"string\">            border: 1px solid #ccc; </span></span><br><span class=\"line\"><span class=\"string\">            overflow-y: auto; </span></span><br><span class=\"line\"><span class=\"string\">            padding: 10px; </span></span><br><span class=\"line\"><span class=\"string\">            margin-bottom: 10px;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">        #input &#123; </span></span><br><span class=\"line\"><span class=\"string\">            width: 80%; </span></span><br><span class=\"line\"><span class=\"string\">            padding: 8px;</span></span><br><span class=\"line\"><span class=\"string\">            margin-right: 10px;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">        button &#123;</span></span><br><span class=\"line\"><span class=\"string\">            padding: 8px 16px;</span></span><br><span class=\"line\"><span class=\"string\">            background: #007bff;</span></span><br><span class=\"line\"><span class=\"string\">            color: white;</span></span><br><span class=\"line\"><span class=\"string\">            border: none;</span></span><br><span class=\"line\"><span class=\"string\">            border-radius: 4px;</span></span><br><span class=\"line\"><span class=\"string\">            cursor: pointer;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">        button:hover &#123;</span></span><br><span class=\"line\"><span class=\"string\">            opacity: 0.8;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/style&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/head&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;body&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div id=&quot;output&quot;&gt;&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;input type=&quot;text&quot; id=&quot;input&quot; placeholder=&quot;输入消息...&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;button onclick=&quot;sendMessage()&quot;&gt;发送&lt;/button&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    &lt;script&gt;</span></span><br><span class=\"line\"><span class=\"string\">        // 初始化WebSocket连接</span></span><br><span class=\"line\"><span class=\"string\">        const socket = new WebSocket(`ws://$&#123;window.location.host&#125;/ws`);</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        // 连接成功回调</span></span><br><span class=\"line\"><span class=\"string\">        socket.onopen = () =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"string\">            addMessage(&#x27;系统&#x27;, &#x27;已连接到服务器&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">        &#125;;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        // 接收消息处理</span></span><br><span class=\"line\"><span class=\"string\">        socket.onmessage = (event) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"string\">            const data = JSON.parse(event.data);</span></span><br><span class=\"line\"><span class=\"string\">            addMessage(&#x27;机器人&#x27;, data.message);</span></span><br><span class=\"line\"><span class=\"string\">        &#125;;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        // 错误处理</span></span><br><span class=\"line\"><span class=\"string\">        socket.onerror = (error) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"string\">            addMessage(&#x27;系统&#x27;, `连接错误: $&#123;error.message&#125;`);</span></span><br><span class=\"line\"><span class=\"string\">        &#125;;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        // 关闭连接处理</span></span><br><span class=\"line\"><span class=\"string\">        socket.onclose = () =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"string\">            addMessage(&#x27;系统&#x27;, &#x27;连接已断开&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">        &#125;;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        // 发送消息</span></span><br><span class=\"line\"><span class=\"string\">        function sendMessage() &#123;</span></span><br><span class=\"line\"><span class=\"string\">            const input = document.getElementById(&#x27;input&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">            const message = input.value.trim();</span></span><br><span class=\"line\"><span class=\"string\">            if (message) &#123;</span></span><br><span class=\"line\"><span class=\"string\">                socket.send(JSON.stringify(&#123;</span></span><br><span class=\"line\"><span class=\"string\">                    type: &quot;user_message&quot;,</span></span><br><span class=\"line\"><span class=\"string\">                    content: message</span></span><br><span class=\"line\"><span class=\"string\">                &#125;));</span></span><br><span class=\"line\"><span class=\"string\">                addMessage(&#x27;我&#x27;, message);</span></span><br><span class=\"line\"><span class=\"string\">                input.value = &#x27;&#x27;;</span></span><br><span class=\"line\"><span class=\"string\">            &#125;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        // 添加消息到界面</span></span><br><span class=\"line\"><span class=\"string\">        function addMessage(sender, content) &#123;</span></span><br><span class=\"line\"><span class=\"string\">            const output = document.getElementById(&#x27;output&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">            const div = document.createElement(&#x27;div&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">            div.innerHTML = `&lt;strong&gt;$&#123;sender&#125;:&lt;/strong&gt; $&#123;content&#125;`;</span></span><br><span class=\"line\"><span class=\"string\">            output.appendChild(div);</span></span><br><span class=\"line\"><span class=\"string\">            // 自动滚动到底部</span></span><br><span class=\"line\"><span class=\"string\">            output.scrollTop = output.scrollHeight;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/body&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/html&gt;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.get(<span class=\"params\"><span class=\"string\">&quot;/&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">index</span>():</span><br><span class=\"line\">    <span class=\"keyword\">return</span> HTMLResponse(HTML_TEMPLATE)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># WebSocket端点</span></span><br><span class=\"line\"><span class=\"meta\">@app.websocket(<span class=\"params\"><span class=\"string\">&quot;/ws&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">websocket_endpoint</span>(<span class=\"params\">websocket: WebSocket</span>):</span><br><span class=\"line\">    <span class=\"keyword\">await</span> websocket.accept()</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 接收客户端消息</span></span><br><span class=\"line\">            data = <span class=\"keyword\">await</span> websocket.receive_text()</span><br><span class=\"line\">            message_data = json.loads(data)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># 处理客户端消息</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> message_data[<span class=\"string\">&#x27;type&#x27;</span>] == <span class=\"string\">&#x27;user_message&#x27;</span>:</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;收到客户端消息: <span class=\"subst\">&#123;message_data[<span class=\"string\">&#x27;content&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\"># 构造回复消息</span></span><br><span class=\"line\">                reply = &#123;</span><br><span class=\"line\">                    <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;server_response&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;message&quot;</span>: <span class=\"string\">f&quot;机器人回复：你说的是 &#x27;<span class=\"subst\">&#123;message_data[<span class=\"string\">&#x27;content&#x27;</span>]&#125;</span>&#x27; 对吗？&quot;</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\"># 发送回复</span></span><br><span class=\"line\">                <span class=\"keyword\">await</span> websocket.send_json(reply)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">except</span> WebSocketDisconnect:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;客户端断开连接&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;发生错误: <span class=\"subst\">&#123;<span class=\"built_in\">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    <span class=\"keyword\">import</span> uvicorn</span><br><span class=\"line\"></span><br><span class=\"line\">    uvicorn.run(app, host=<span class=\"string\">&quot;0.0.0.0&quot;</span>, port=<span class=\"number\">8001</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"flask使用websocket\"><a href=\"#flask使用websocket\" class=\"headerlink\" title=\"flask使用websocket\"></a>flask使用websocket</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> eventlet</span><br><span class=\"line\">eventlet.monkey_patch()  <span class=\"comment\"># 关键：启用异步支持</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, render_template_string</span><br><span class=\"line\"><span class=\"comment\">#pip install flask-socketio eventlet</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_socketio <span class=\"keyword\">import</span> SocketIO, emit</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\">app.config[<span class=\"string\">&#x27;SECRET_KEY&#x27;</span>] = <span class=\"string\">&#x27;secret!&#x27;</span></span><br><span class=\"line\">socketio = SocketIO(app, cors_allowed_origins=<span class=\"string\">&quot;*&quot;</span>)  <span class=\"comment\"># 允许跨域</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">index</span>():</span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template_string(<span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;html&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;head&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;title&gt;Socket.IO 聊天&lt;/title&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.7.2/socket.io.js&quot;&gt;&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;style&gt;</span></span><br><span class=\"line\"><span class=\"string\">            /* 保持原有样式不变 */</span></span><br><span class=\"line\"><span class=\"string\">            body &#123; max-width: 800px; margin: 20px auto; padding: 20px; &#125;</span></span><br><span class=\"line\"><span class=\"string\">            #output &#123; height: 300px; border: 1px solid #ccc; overflow-y: auto; padding: 10px; &#125;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/style&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/head&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;body&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;div id=&quot;output&quot;&gt;&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;input id=&quot;input&quot; placeholder=&quot;输入消息&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;button onclick=&quot;send()&quot;&gt;发送&lt;/button&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        &lt;script&gt;</span></span><br><span class=\"line\"><span class=\"string\">            const socket = io();  // 自动连接当前域名</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">            // 连接成功回调</span></span><br><span class=\"line\"><span class=\"string\">            socket.on(&#x27;connect&#x27;, () =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"string\">                addMessage(&#x27;系统&#x27;, &#x27;已连接到服务器&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">            &#125;);</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">            // 接收服务器消息</span></span><br><span class=\"line\"><span class=\"string\">            socket.on(&#x27;server_response&#x27;, (data) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"string\">                addMessage(&#x27;机器人&#x27;, data.message);</span></span><br><span class=\"line\"><span class=\"string\">            &#125;);</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">            // 发送消息</span></span><br><span class=\"line\"><span class=\"string\">            function send() &#123;</span></span><br><span class=\"line\"><span class=\"string\">                const input = document.getElementById(&#x27;input&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">                const message = input.value.trim();</span></span><br><span class=\"line\"><span class=\"string\">                if (message) &#123;</span></span><br><span class=\"line\"><span class=\"string\">                    socket.emit(&#x27;client_message&#x27;, message);</span></span><br><span class=\"line\"><span class=\"string\">                    addMessage(&#x27;我&#x27;, message);</span></span><br><span class=\"line\"><span class=\"string\">                    input.value = &#x27;&#x27;;</span></span><br><span class=\"line\"><span class=\"string\">                &#125;</span></span><br><span class=\"line\"><span class=\"string\">            &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">            // 添加消息到界面</span></span><br><span class=\"line\"><span class=\"string\">            function addMessage(sender, content) &#123;</span></span><br><span class=\"line\"><span class=\"string\">                const div = document.createElement(&#x27;div&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">                div.innerHTML = `&lt;strong&gt;$&#123;sender&#125;:&lt;/strong&gt; $&#123;content&#125;`;</span></span><br><span class=\"line\"><span class=\"string\">                document.getElementById(&#x27;output&#x27;).appendChild(div);</span></span><br><span class=\"line\"><span class=\"string\">                // 自动滚动到底部</span></span><br><span class=\"line\"><span class=\"string\">                const output = document.getElementById(&#x27;output&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">                output.scrollTop = output.scrollHeight;</span></span><br><span class=\"line\"><span class=\"string\">            &#125;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/body&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/html&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &#x27;&#x27;&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Socket.IO 事件处理</span></span><br><span class=\"line\"><span class=\"meta\">@socketio.on(<span class=\"params\"><span class=\"string\">&#x27;client_message&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">handle_message</span>(<span class=\"params\">message</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;收到客户端消息: <span class=\"subst\">&#123;message&#125;</span>&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 构造回复消息</span></span><br><span class=\"line\">    reply = <span class=\"string\">f&quot;机器人回复：你说的是 &#x27;<span class=\"subst\">&#123;message&#125;</span>&#x27; 对吗？&quot;</span></span><br><span class=\"line\">    <span class=\"comment\"># 发送消息给客户端</span></span><br><span class=\"line\">    emit(<span class=\"string\">&#x27;server_response&#x27;</span>, &#123;<span class=\"string\">&#x27;message&#x27;</span>: reply&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    socketio.run(app, host=<span class=\"string\">&#x27;0.0.0.0&#x27;</span>, port=<span class=\"number\">8000</span>, debug=<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"大模型使用websocket聊天\"><a href=\"#大模型使用websocket聊天\" class=\"headerlink\" title=\"大模型使用websocket聊天\"></a>大模型使用websocket聊天</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># main.py</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> fastapi <span class=\"keyword\">import</span> FastAPI, WebSocket</span><br><span class=\"line\"><span class=\"keyword\">from</span> fastapi.responses <span class=\"keyword\">import</span> HTMLResponse</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\">app = FastAPI()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 存储对话历史 (生产环境建议使用数据库)</span></span><br><span class=\"line\">conversation_history = []</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 集成前端页面与后端逻辑</span></span><br><span class=\"line\">HTML_TEMPLATE = <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;html&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;head&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;title&gt;AI 对话助手&lt;/title&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;style&gt;</span></span><br><span class=\"line\"><span class=\"string\">        body &#123;</span></span><br><span class=\"line\"><span class=\"string\">            max-width: 800px;</span></span><br><span class=\"line\"><span class=\"string\">            margin: 0 auto;</span></span><br><span class=\"line\"><span class=\"string\">            padding: 20px;</span></span><br><span class=\"line\"><span class=\"string\">            font-family: Arial, sans-serif;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">        #chatContainer &#123;</span></span><br><span class=\"line\"><span class=\"string\">            height: 60vh;</span></span><br><span class=\"line\"><span class=\"string\">            border: 1px solid #ddd;</span></span><br><span class=\"line\"><span class=\"string\">            border-radius: 8px;</span></span><br><span class=\"line\"><span class=\"string\">            overflow-y: auto;</span></span><br><span class=\"line\"><span class=\"string\">            padding: 15px;</span></span><br><span class=\"line\"><span class=\"string\">            margin-bottom: 15px;</span></span><br><span class=\"line\"><span class=\"string\">            background: #f9f9f9;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">        .message &#123;</span></span><br><span class=\"line\"><span class=\"string\">            margin: 10px 0;</span></span><br><span class=\"line\"><span class=\"string\">            padding: 12px;</span></span><br><span class=\"line\"><span class=\"string\">            border-radius: 15px;</span></span><br><span class=\"line\"><span class=\"string\">            max-width: 80%;</span></span><br><span class=\"line\"><span class=\"string\">            word-wrap: break-word;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">        .user-message &#123;</span></span><br><span class=\"line\"><span class=\"string\">            background: #e3f2fd;</span></span><br><span class=\"line\"><span class=\"string\">            margin-left: auto;</span></span><br><span class=\"line\"><span class=\"string\">            border-bottom-right-radius: 5px;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">        .bot-message &#123;</span></span><br><span class=\"line\"><span class=\"string\">            background: #fff;</span></span><br><span class=\"line\"><span class=\"string\">            border: 1px solid #eee;</span></span><br><span class=\"line\"><span class=\"string\">            margin-right: auto;</span></span><br><span class=\"line\"><span class=\"string\">            border-bottom-left-radius: 5px;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">        #inputContainer &#123;</span></span><br><span class=\"line\"><span class=\"string\">            display: flex;</span></span><br><span class=\"line\"><span class=\"string\">            gap: 10px;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">        #userInput &#123;</span></span><br><span class=\"line\"><span class=\"string\">            flex: 1;</span></span><br><span class=\"line\"><span class=\"string\">            padding: 12px;</span></span><br><span class=\"line\"><span class=\"string\">            border: 1px solid #ddd;</span></span><br><span class=\"line\"><span class=\"string\">            border-radius: 25px;</span></span><br><span class=\"line\"><span class=\"string\">            outline: none;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">        button &#123;</span></span><br><span class=\"line\"><span class=\"string\">            padding: 12px 25px;</span></span><br><span class=\"line\"><span class=\"string\">            background: #007bff;</span></span><br><span class=\"line\"><span class=\"string\">            color: white;</span></span><br><span class=\"line\"><span class=\"string\">            border: none;</span></span><br><span class=\"line\"><span class=\"string\">            border-radius: 25px;</span></span><br><span class=\"line\"><span class=\"string\">            cursor: pointer;</span></span><br><span class=\"line\"><span class=\"string\">            transition: background 0.3s;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">        button:hover &#123;</span></span><br><span class=\"line\"><span class=\"string\">            background: #0056b3;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">        .status &#123;</span></span><br><span class=\"line\"><span class=\"string\">            color: #666;</span></span><br><span class=\"line\"><span class=\"string\">            text-align: center;</span></span><br><span class=\"line\"><span class=\"string\">            padding: 10px;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/style&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/head&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;body&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;h1&gt;AI 对话助手&lt;/h1&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div id=&quot;chatContainer&quot;&gt;&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div id=&quot;inputContainer&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;input type=&quot;text&quot; id=&quot;userInput&quot; placeholder=&quot;输入消息...&quot; /&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;button onclick=&quot;sendMessage()&quot;&gt;发送&lt;/button&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div class=&quot;status&quot; id=&quot;status&quot;&gt;连接状态：正常&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    </span></span><br><span class=\"line\"><span class=\"string\">   // &lt;iframe</span></span><br><span class=\"line\"><span class=\"string\">   //      src=&quot;http://47.237.81.149/chatbot/9h9nyQcblGTesiGJ&quot;</span></span><br><span class=\"line\"><span class=\"string\">    //     style=&quot;width: 100%; height: 100%; min-height: 700px&quot;</span></span><br><span class=\"line\"><span class=\"string\">   //      frameborder=&quot;0&quot;</span></span><br><span class=\"line\"><span class=\"string\">  //       allow=&quot;microphone&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">   // &lt;/iframe&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    &lt;script&gt;</span></span><br><span class=\"line\"><span class=\"string\">        const ws = new WebSocket(&#x27;ws://&#x27; + window.location.host + &#x27;/ws&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">        const chatContainer = document.getElementById(&#x27;chatContainer&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">        let isBotResponding = false;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        // WebSocket 事件处理</span></span><br><span class=\"line\"><span class=\"string\">        ws.onopen = () =&gt; updateStatus(&#x27;已连接&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">        ws.onclose = () =&gt; updateStatus(&#x27;连接已断开&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">        ws.onerror = () =&gt; updateStatus(&#x27;连接错误&#x27;);</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        ws.onmessage = (event) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"string\">            const data = JSON.parse(event.data);</span></span><br><span class=\"line\"><span class=\"string\">            handleResponse(data);</span></span><br><span class=\"line\"><span class=\"string\">        &#125;;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        function handleResponse(data) &#123;</span></span><br><span class=\"line\"><span class=\"string\">            switch(data.type) &#123;</span></span><br><span class=\"line\"><span class=\"string\">                case &#x27;user_message&#x27;:</span></span><br><span class=\"line\"><span class=\"string\">                    appendMessage(data.content, &#x27;user&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">                    break;</span></span><br><span class=\"line\"><span class=\"string\">                case &#x27;assistant_start&#x27;:</span></span><br><span class=\"line\"><span class=\"string\">                    isBotResponding = true;</span></span><br><span class=\"line\"><span class=\"string\">                    appendMessage(&#x27;&#x27;, &#x27;bot&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">                    break;</span></span><br><span class=\"line\"><span class=\"string\">                case &#x27;assistant_chunk&#x27;:</span></span><br><span class=\"line\"><span class=\"string\">                    appendChunk(data.content);</span></span><br><span class=\"line\"><span class=\"string\">                    break;</span></span><br><span class=\"line\"><span class=\"string\">                case &#x27;assistant_end&#x27;:</span></span><br><span class=\"line\"><span class=\"string\">                    isBotResponding = false;</span></span><br><span class=\"line\"><span class=\"string\">                    break;</span></span><br><span class=\"line\"><span class=\"string\">                case &#x27;error&#x27;:</span></span><br><span class=\"line\"><span class=\"string\">                    appendMessage(`错误：$&#123;data.content&#125;`, &#x27;error&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">                    break;</span></span><br><span class=\"line\"><span class=\"string\">            &#125;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        function appendMessage(content, role) &#123;</span></span><br><span class=\"line\"><span class=\"string\">            const div = document.createElement(&#x27;div&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">            div.className = `message $&#123;role&#125;-message`;</span></span><br><span class=\"line\"><span class=\"string\">            div.textContent = content;</span></span><br><span class=\"line\"><span class=\"string\">            chatContainer.appendChild(div);</span></span><br><span class=\"line\"><span class=\"string\">            scrollToBottom();</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        function appendChunk(content) &#123;</span></span><br><span class=\"line\"><span class=\"string\">            const messages = document.getElementsByClassName(&#x27;bot-message&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">            const lastMsg = messages[messages.length - 1];</span></span><br><span class=\"line\"><span class=\"string\">            lastMsg.textContent += content;</span></span><br><span class=\"line\"><span class=\"string\">            scrollToBottom();</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        function scrollToBottom() &#123;</span></span><br><span class=\"line\"><span class=\"string\">            chatContainer.scrollTop = chatContainer.scrollHeight;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        function updateStatus(text) &#123;</span></span><br><span class=\"line\"><span class=\"string\">            document.getElementById(&#x27;status&#x27;).textContent = `状态：$&#123;text&#125;`;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        function sendMessage() &#123;</span></span><br><span class=\"line\"><span class=\"string\">            const input = document.getElementById(&#x27;userInput&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">            const message = input.value.trim();</span></span><br><span class=\"line\"><span class=\"string\">            if (message &amp;&amp; !isBotResponding) &#123;</span></span><br><span class=\"line\"><span class=\"string\">                ws.send(message);</span></span><br><span class=\"line\"><span class=\"string\">                input.value = &#x27;&#x27;;</span></span><br><span class=\"line\"><span class=\"string\">            &#125;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        // 支持回车发送</span></span><br><span class=\"line\"><span class=\"string\">        document.getElementById(&#x27;userInput&#x27;).addEventListener(&#x27;keypress&#x27;, (e) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"string\">            if (e.key === &#x27;Enter&#x27;) sendMessage();</span></span><br><span class=\"line\"><span class=\"string\">        &#125;);</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/body&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/html&gt;</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.get(<span class=\"params\"><span class=\"string\">&quot;/&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">get</span>():</span><br><span class=\"line\">    <span class=\"keyword\">return</span> HTMLResponse(HTML_TEMPLATE)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.websocket(<span class=\"params\"><span class=\"string\">&quot;/ws&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">websocket_endpoint</span>(<span class=\"params\">websocket: WebSocket</span>):</span><br><span class=\"line\">    <span class=\"keyword\">await</span> websocket.accept()</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 接收用户消息</span></span><br><span class=\"line\">            user_message = <span class=\"keyword\">await</span> websocket.receive_text()</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># 更新对话历史</span></span><br><span class=\"line\">            conversation_history.append(&#123;<span class=\"string\">&quot;role&quot;</span>: <span class=\"string\">&quot;user&quot;</span>, <span class=\"string\">&quot;content&quot;</span>: user_message&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># 发送用户消息到前端</span></span><br><span class=\"line\">            <span class=\"keyword\">await</span> websocket.send_json(&#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;user_message&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;content&quot;</span>: user_message</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># 准备流式请求</span></span><br><span class=\"line\">            <span class=\"keyword\">await</span> websocket.send_json(&#123;<span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;assistant_start&quot;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># 构造请求数据</span></span><br><span class=\"line\">            request_data = &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;model&quot;</span>: <span class=\"string\">&quot;deepseek-r1:latest&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;messages&quot;</span>: conversation_history,</span><br><span class=\"line\">                <span class=\"string\">&quot;stream&quot;</span>: <span class=\"literal\">True</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># 流式获取响应</span></span><br><span class=\"line\">            full_response = []</span><br><span class=\"line\">            <span class=\"keyword\">with</span> requests.post(</span><br><span class=\"line\">                    <span class=\"string\">&quot;http://1.1.1.1:11434/api/chat&quot;</span>,<span class=\"comment\">#大模型接口地址</span></span><br><span class=\"line\">                    json=request_data,</span><br><span class=\"line\">                    stream=<span class=\"literal\">True</span></span><br><span class=\"line\">            ) <span class=\"keyword\">as</span> response:</span><br><span class=\"line\">                response.raise_for_status()</span><br><span class=\"line\">                <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> response.iter_lines():</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> line:</span><br><span class=\"line\">                        chunk = json.loads(line.decode(<span class=\"string\">&#x27;utf-8&#x27;</span>))</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> <span class=\"string\">&#x27;message&#x27;</span> <span class=\"keyword\">in</span> chunk:</span><br><span class=\"line\">                            content = chunk[<span class=\"string\">&#x27;message&#x27;</span>][<span class=\"string\">&#x27;content&#x27;</span>]</span><br><span class=\"line\">                            full_response.append(content)</span><br><span class=\"line\">                            <span class=\"keyword\">await</span> websocket.send_json(&#123;</span><br><span class=\"line\">                                <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;assistant_chunk&quot;</span>,</span><br><span class=\"line\">                                <span class=\"string\">&quot;content&quot;</span>: content</span><br><span class=\"line\">                            &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># 保存完整响应</span></span><br><span class=\"line\">            conversation_history.append(&#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;role&quot;</span>: <span class=\"string\">&quot;assistant&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;content&quot;</span>: <span class=\"string\">&quot;&quot;</span>.join(full_response)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            <span class=\"keyword\">await</span> websocket.send_json(&#123;<span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;assistant_end&quot;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        <span class=\"keyword\">await</span> websocket.send_json(&#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;type&quot;</span>: <span class=\"string\">&quot;error&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;content&quot;</span>: <span class=\"string\">f&quot;系统错误: <span class=\"subst\">&#123;<span class=\"built_in\">str</span>(e)&#125;</span>&quot;</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">finally</span>:</span><br><span class=\"line\">        <span class=\"keyword\">await</span> websocket.close()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    <span class=\"keyword\">import</span> uvicorn</span><br><span class=\"line\"></span><br><span class=\"line\">    uvicorn.run(app, host=<span class=\"string\">&quot;0.0.0.0&quot;</span>, port=<span class=\"number\">8000</span>)</span><br></pre></td></tr></table></figure>"},{"title":"使用maven打包","date":"2025-05-12T02:25:14.000Z","_content":"# 使用springboot\n```config\n<parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.5.9</version>\n        <relativePath/>\n    </parent>\n\n    <groupId>org.ecs</groupId>\n    <artifactId>springboot01</artifactId>\n    <version>1.0-SNAPSHOT</version>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n```\n# 其他\n```config\n<groupId>org.example</groupId>\n    <artifactId>CpuLoad</artifactId>\n    <version>1.0-SNAPSHOT</version>\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-jar-plugin</artifactId>\n                <version>3.1.0</version>\n                <configuration>\n                    <archive>\n                        <manifest>\n                            <!-- 指定入口函数 -->                             \n\t\t\t    <mainClass>org.example.CpuLoad</mainClass>\n                            <!-- 是否添加依赖的jar路径配置 -->\n                            <addClasspath>true</addClasspath>\n                            <!-- 依赖的jar包存放未知，和生成的jar放在同一级目录下 -->\n                            <classpathPrefix>lib/</classpathPrefix>\n                        </manifest>\n                    </archive>\n                    <!-- 不打包com.yh.excludes下面的所有类 -->\n                    <excludes>com/xx/excludes/*</excludes>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n```\n","source":"_posts/使用maven打包.md","raw":"---\ntitle: 使用maven打包\ndate: 2025-05-12 10:25:14\ntags: maven\n---\n# 使用springboot\n```config\n<parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.5.9</version>\n        <relativePath/>\n    </parent>\n\n    <groupId>org.ecs</groupId>\n    <artifactId>springboot01</artifactId>\n    <version>1.0-SNAPSHOT</version>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n```\n# 其他\n```config\n<groupId>org.example</groupId>\n    <artifactId>CpuLoad</artifactId>\n    <version>1.0-SNAPSHOT</version>\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-jar-plugin</artifactId>\n                <version>3.1.0</version>\n                <configuration>\n                    <archive>\n                        <manifest>\n                            <!-- 指定入口函数 -->                             \n\t\t\t    <mainClass>org.example.CpuLoad</mainClass>\n                            <!-- 是否添加依赖的jar路径配置 -->\n                            <addClasspath>true</addClasspath>\n                            <!-- 依赖的jar包存放未知，和生成的jar放在同一级目录下 -->\n                            <classpathPrefix>lib/</classpathPrefix>\n                        </manifest>\n                    </archive>\n                    <!-- 不打包com.yh.excludes下面的所有类 -->\n                    <excludes>com/xx/excludes/*</excludes>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n```\n","slug":"使用maven打包","published":1,"updated":"2025-07-30T08:38:33.417Z","comments":1,"layout":"post","photos":[],"_id":"cmdppvvvz000vlpoddpm45hwv","content":"<h1 id=\"使用springboot\"><a href=\"#使用springboot\" class=\"headerlink\" title=\"使用springboot\"></a>使用springboot</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;parent&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;2.5.9&lt;/version&gt;</span><br><span class=\"line\">        &lt;relativePath/&gt;</span><br><span class=\"line\">    &lt;/parent&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;groupId&gt;org.ecs&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;springboot01&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;build&gt;</span><br><span class=\"line\">        &lt;plugins&gt;</span><br><span class=\"line\">            &lt;plugin&gt;</span><br><span class=\"line\">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;/plugin&gt;</span><br><span class=\"line\">        &lt;/plugins&gt;</span><br><span class=\"line\">    &lt;/build&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;groupId&gt;org.example&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;CpuLoad&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">    &lt;build&gt;</span><br><span class=\"line\">        &lt;plugins&gt;</span><br><span class=\"line\">            &lt;plugin&gt;</span><br><span class=\"line\">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">                &lt;version&gt;3.1.0&lt;/version&gt;</span><br><span class=\"line\">                &lt;configuration&gt;</span><br><span class=\"line\">                    &lt;archive&gt;</span><br><span class=\"line\">                        &lt;manifest&gt;</span><br><span class=\"line\">                            &lt;!-- 指定入口函数 --&gt;                             </span><br><span class=\"line\">\t\t\t    &lt;mainClass&gt;org.example.CpuLoad&lt;/mainClass&gt;</span><br><span class=\"line\">                            &lt;!-- 是否添加依赖的jar路径配置 --&gt;</span><br><span class=\"line\">                            &lt;addClasspath&gt;true&lt;/addClasspath&gt;</span><br><span class=\"line\">                            &lt;!-- 依赖的jar包存放未知，和生成的jar放在同一级目录下 --&gt;</span><br><span class=\"line\">                            &lt;classpathPrefix&gt;lib/&lt;/classpathPrefix&gt;</span><br><span class=\"line\">                        &lt;/manifest&gt;</span><br><span class=\"line\">                    &lt;/archive&gt;</span><br><span class=\"line\">                    &lt;!-- 不打包com.yh.excludes下面的所有类 --&gt;</span><br><span class=\"line\">                    &lt;excludes&gt;com/xx/excludes/*&lt;/excludes&gt;</span><br><span class=\"line\">                &lt;/configuration&gt;</span><br><span class=\"line\">            &lt;/plugin&gt;</span><br><span class=\"line\">        &lt;/plugins&gt;</span><br><span class=\"line\">    &lt;/build&gt;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"使用springboot\"><a href=\"#使用springboot\" class=\"headerlink\" title=\"使用springboot\"></a>使用springboot</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;parent&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;2.5.9&lt;/version&gt;</span><br><span class=\"line\">        &lt;relativePath/&gt;</span><br><span class=\"line\">    &lt;/parent&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;groupId&gt;org.ecs&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;springboot01&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;build&gt;</span><br><span class=\"line\">        &lt;plugins&gt;</span><br><span class=\"line\">            &lt;plugin&gt;</span><br><span class=\"line\">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;/plugin&gt;</span><br><span class=\"line\">        &lt;/plugins&gt;</span><br><span class=\"line\">    &lt;/build&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;groupId&gt;org.example&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;CpuLoad&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">    &lt;build&gt;</span><br><span class=\"line\">        &lt;plugins&gt;</span><br><span class=\"line\">            &lt;plugin&gt;</span><br><span class=\"line\">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">                &lt;version&gt;3.1.0&lt;/version&gt;</span><br><span class=\"line\">                &lt;configuration&gt;</span><br><span class=\"line\">                    &lt;archive&gt;</span><br><span class=\"line\">                        &lt;manifest&gt;</span><br><span class=\"line\">                            &lt;!-- 指定入口函数 --&gt;                             </span><br><span class=\"line\">\t\t\t    &lt;mainClass&gt;org.example.CpuLoad&lt;/mainClass&gt;</span><br><span class=\"line\">                            &lt;!-- 是否添加依赖的jar路径配置 --&gt;</span><br><span class=\"line\">                            &lt;addClasspath&gt;true&lt;/addClasspath&gt;</span><br><span class=\"line\">                            &lt;!-- 依赖的jar包存放未知，和生成的jar放在同一级目录下 --&gt;</span><br><span class=\"line\">                            &lt;classpathPrefix&gt;lib/&lt;/classpathPrefix&gt;</span><br><span class=\"line\">                        &lt;/manifest&gt;</span><br><span class=\"line\">                    &lt;/archive&gt;</span><br><span class=\"line\">                    &lt;!-- 不打包com.yh.excludes下面的所有类 --&gt;</span><br><span class=\"line\">                    &lt;excludes&gt;com/xx/excludes/*&lt;/excludes&gt;</span><br><span class=\"line\">                &lt;/configuration&gt;</span><br><span class=\"line\">            &lt;/plugin&gt;</span><br><span class=\"line\">        &lt;/plugins&gt;</span><br><span class=\"line\">    &lt;/build&gt;</span><br></pre></td></tr></table></figure>\n"},{"title":"数据库","date":"2025-07-24T09:30:42.000Z","_content":"\n# 数据库\n\n\n## mysql\n[索引失效情况](https://cloud.tencent.com/developer/article/1992920)\n### 回表概念\n```shell\n1.聚集索引的B+树，性能最优，叶子节点存储的数据是整行的所有字段数据(主键索引)\n2.非聚集索引的B+树，非聚集索引列可能是一列，也可能是多列（联合索引），\n  叶子节点存储的数据是非聚集索引列（1列或多列）的数据和聚集索引列\n\n\n用户user表4列（id, userCode, userName, userSex）\nid是主键（聚集索引）；userCode 是非聚集索引，此时会创建2个索引的B+树\n\n聚集索引的B+树，叶子节点保存了4列（id, userCode, userName, userSex）的数据\n非聚集索引的B+树，叶子节点保存了2列（id, userCode）的数据\n\n不回表\n走主键索引不回表，因为挂载的是整列数据\nselect * from user where id = 1 \n走非聚集索引不回表，因为叶子结点挂载了非聚集索引和聚集索引的值\nselect id,userCode from user where userCode = 1 \n\n\n回表\n因为查询的列除了主键id和非聚集索引userCode还有\nuserName, userSex，这两个叶子节点没有存数据，会通过主键索引id回表来\n查询userName, userSex的值，因为主键索引id挂载的整列的值\nselect id,userCode，userSex from user where userCode = 1\nselect id,userCode，userName from user where userCode = 1\nselect * from user where userCode = 1\n\n```\n### 常用sql元数据\n```sql\n#指定数据库的详细信息\nSELECT \n  TABLE_SCHEMA AS '数据库',\n  TABLE_NAME AS '表名',\n  TABLE_ROWS AS `行数`,\n  ROUND( (DATA_LENGTH + INDEX_LENGTH) / 1024 / 1024, 2) AS '总大小(MB)',\n  ROUND(DATA_LENGTH / 1024 / 1024, 2) AS '数据大小(MB)',\n  ROUND(INDEX_LENGTH / 1024 / 1024, 2) AS '索引大小(MB)',\n  TABLE_ROWS AS '数据行数（估算值）'\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = 'y_back'  -- 替换为你的数据库名\nORDER BY (DATA_LENGTH + INDEX_LENGTH) DESC;  -- 按总大小排序\n\n\n\n#数据库表的行数\nSELECT \n  TABLE_NAME AS '表名',\n  TABLE_ROWS AS '估算行数',\n  (SELECT COUNT(*) FROM y_back.t_work) AS '精确行数'  -- 替换为实际表名\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = 'y_back';\n\n#all\nSELECT\n\ttable_schema AS '数据库',\n\tsum( table_rows ) AS '记录数',\n\tsum(\n\tTRUNCATE ( data_length / 1024 / 1024, 2 )) AS '数据容量(MB)',\n\tsum(\n\tTRUNCATE ( index_length / 1024 / 1024, 2 )) AS '索引容量(MB)' \nFROM\n\tinformation_schema.TABLES \nGROUP BY\n\ttable_schema \nORDER BY\n\tsum( data_length ) DESC,\n\tsum( index_length ) DESC;\n\n#过滤元数据库\nSELECT\n  table_schema AS '数据库',\n  SUM(table_rows) AS '记录数',\n  TRUNCATE(SUM(data_length) / 1024 / 1024, 2) AS '数据容量(MB)',  -- 先求和再转换单位\n  TRUNCATE(SUM(index_length) / 1024 / 1024, 2) AS '索引容量(MB)'\nFROM\n  information_schema.TABLES\nWHERE\n  table_schema NOT IN (\n    'information_schema', \n    'mysql', \n    'performance_schema', \n    'sys'\n  )\nGROUP BY\n  table_schema\nORDER BY\n  SUM(data_length) DESC,\n  SUM(index_length) DESC;\n\nANALYZE TABLE - 更新统计信息\nOPTIMIZE TABLE - 表优化重组俗称清理碎片\n\n#造数据\nCREATE TABLE `t_work_db01` (\n  `id` bigint NOT NULL AUTO_INCREMENT,\n  `name` varchar(256) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL,\n  `age` int DEFAULT NULL,\n  `sex` char(1) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL,\n  `money` float DEFAULT NULL COMMENT '金额',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=100001 DEFAULT CHARSET=utf8mb3 ROW_FORMAT=DYNAMIC\n\n\nDELIMITER $$\nCREATE PROCEDURE InsertDummyData()\nBEGIN\n    DECLARE i INT DEFAULT 0;\n    WHILE i < 100000 DO\n        INSERT INTO t_work (NAME, age, sex, money)\n        VALUES (\n            -- 随机生成用户名（示例：User_XXXX）\n            CONCAT('User_', SUBSTRING(MD5(RAND()) FROM 1 FOR 8)),\n            -- 随机年龄 18~65 岁\n            FLOOR(18 + RAND() * 48),\n            -- 随机性别（M/F）\n            IF(RAND() < 0.5, 'M', 'F'),\n            -- 随机金额 1000~10000（保留两位小数）\n            ROUND(1000 + RAND() * 9000, 2)\n        );\n        SET i = i + 1;\n    END WHILE;\nEND$$\nDELIMITER ;\n\n-- 执行存储过程\nCALL InsertDummyData();\n\nDROP PROCEDURE IF EXISTS InsertDummyData;  -- 强制删除（如果存在）\n```\n### mysql读写分离\n[github](https://github.com/sysown/proxysql) <br>\n[ProxySql](https://www.cnblogs.com/keme/p/12290977.html)<br>\n[MaxScale](https://www.cnblogs.com/ejiyuan/p/17156065.html)\n\n### mysql分表分库\n[mycat](https://cloud.tencent.com/developer/article/2349899)\n\n## pgsql\n[PostgreSQL psql 常用命令](https://www.sjkjc.com/postgresql/psql-commands/)\n### 概念\n```\nPUBLIC 是 PostgreSQL 数据库中一个特殊的角色组，在元数据表（pg_roles）中都查不到该角色，\n数据库中所创建的角色都可以理解为是 PUBLIC 角色组成员。\n而且对 PUBLIC 权限的继承完全不受 NOINHERIT 的控制，\n一旦创建了一个拥有 login 权限的角色，它会立即继承 PUBLIC 角色组拥有的权限，\n此时如果想通过 revoke（比如 revoke connect on database）来回收的话不会成功，\n只能从 PUBLIC 组回收相关权限（比如 revoke connect on database from PUBLIC）\n\nREVOKE CONNECT ON DATABASE test FROM PUBLIC;\n--这样普通用户就无法自由切换数据库，默认数据库下面有一个public的scheme\n\nMySQL 的 datadir ≈ PostgreSQL 的默认表空间 pg_default\nPostgreSQL 的 pg_default 表空间对应默认数据目录（由参数 data_directory 配置），类似于 MySQL 的 datadir。\nPostgreSQL 的数据库 ≈ MySQL 的实例（但更轻量）。\nPostgreSQL 的模式 ≈ MySQL 的数据库\n```\n\n### 基本使用命令\n```\ndocker run -id --name=pgsql -v postgre-data:/var/lib/postgresql/data -p 54222:5432 -e POSTGRES_PASSWORD=123456 -e LANG=C.UTF-8 bitnami/postgresql\n\ndocker exec -it -uroot pgsql bash\npsql -U postgres -W -n\ncat .psql_history \npsql -h host -p port -d dbname -U  user -W\n\n使用反斜线作为命令前缀.\n  postgres=# \\db\n# 输出的信息如下：\n       List of tablespaces\n    Name    |  Owner   | Location \n------------+----------+----------\n pg_default | postgres | \n pg_global  | postgres | \n(2 rows)\n\n退出    \\q\n 列出所有的数据库      \\l\n 列出所有的数据库的大小      \\l+\n 更改当前连接的数据库       \\c\n 列出当前数据库的连接信息    \\connect\n 列出当前数据库和连接的详细信息 \\conninfo\n 查看当前数据库里面的表和拥有者和表大小         \\dt+\n 展示所有用户           \\dg\n ​模式 \\dn\n 查看所有表名的列表             \\d\n 获取表结构                   \\da\n 展示所有用户               \\du\n 查看t_sms表的结构      \\d t_sms \n 展示数据库里面的所有的表         \\dt\n 列出所有的数据库的详细信息（包括数据库大小和字符格式）         \\l+\n 显示用户访问权限。                            \\z或\\dp\n 显示所有可设置的访问权限                     \\h GRAN\n 显示用户的对所有数据库表的详细访问权限     \\dp或者\\z\n 确认当前连接的用户为超级用户postgres，且该用户后创建角色和数据库的权限等     #select current_user;\n 在超级用户连接postgres后，设置不允许普通用户a连接数据库         #alter role a nologin;\n ​\n 使用普通用户a连接数据库正常                   #\\c highgo a\n\n\n\n快速查看当前所有用户：\\du\n查看详细用户信息：select * from pg_user;\n查看详细角色信息：select * from pg_roles;\n查看当前登录用户：select user;\n一般建议先创建用户然后使用这个用户去创建数据库模式，因为数据库那个用户创建的默认Owner就是这个用户\n创建用户：CREATE USER $user_name PASSWORD '$password';\n创建角色：CREATE ROLE $role_name;\n \n修改用户与角色：ALTER USER[ROLE] $user_name \n        e.g.\n        //修改用户名：ALTER USER U2 RENAME TO U22;\n        //修改用户的密码：ALTER USER U22 PASSWORD'U22;\n        //修改用户的权限：ALTER USER u22 CREATEROLE;\n        //修改数据库 testdb中的参数重设为默认值：ALTER USER u22 IN DATABASE testdb RESET all1;\n        //修改角色的名字：ALTER ROLE dev RENAME TO dev1;\n        //修改角色的权限：ALTER ROLE dev1 SUPERUSER;\n        //修改角色的权限：ALTER ROLE dev1 LOGIN;\n \n删除用户与角色：DROP USER[ROLE] [IF EXISTS] $user_name\n \n授权用户某个角色:GRANT $role_name TO $user_name;    (授权后set role $role_name启用生效）\n \n\ncreate user test with password 'rong ';\nCREATE DATABASE testdb OWNER test;\nGRANT ALL PRIVILEGES ON DATABASE testdb TO test;\nalter user qh with password '123';\n\\password qh;  //需要输入两次密码（推荐）\n\n\n```\n\n\n\n## manggodb\n[详细使用教程](https://www.runoob.com/mongodb/mongodb-tutorial.html)\n```\ndocker run -itd --name mongo -v /docker_volume/mongodb/data:/data/db -p 27017:27017 mongo:4.4 --auth\n–auth：需要密码才能访问容器服务；\nmongodb安装好后第一次进入是不需要密码的，也没有任何用户，通过shell命令可直接进入\nuse admin 使用admin数据库并进行验证，如果不验证，是做不了任何操作的\ndb.auth(\"root\",\"123456\")  返回1表示成功 \n验证之后还是做不了操作，因为root只有用户管理权限，下面创建用户，用户都跟着库走\nuse mydb \ndb.createUser({user: \"admin\",pwd: \"123456\",roles: [{ role: \"readWrite\", db: \"mydb\" }]}) \n通过admin用户增删改查\n\n\ndocker exec -it mongo mongo admin\n\n\ndb.createUser({ user:'root',pwd:'123456',roles:[ { role:'userAdminAnyDatabase', db: 'admin'},'readWriteAnyDatabase']});\n【role:‘userAdminAnyDatabase’】：只在admin数据库中可用，赋予用户所有数据库的userAdmin权限\n【db: ‘admin’】：可操作的数据库\n【‘readWriteAnyDatabase’】：赋予用户读写权限\nmongoDB 没有无敌用户root，只有能管理用户的用户 userAdminAnyDatabase \n\n\nSQL 术语/概念\tMongoDB 术语/概念   解释/说明\ndatabase\t    database\t       数据库\ntable\t        collection\t       数据库表/集合\nrow\t            document\t       数据记录行/文档\ncolumn\t        field\t           数据字段/域\nindex\t        index\t           索引\ntable joins\t \t表连接,            MongoDB不支持\nprimary key\t    primary key\t       主键,MongoDB自动将_id字段设置为主键\n```\n## sqlserver\n```\ndocker run -d \\\n  --name sqlserver --user=root \\\n  -e \"ACCEPT_EULA=Y\" \\\n  -e \"SA_PASSWORD=Testing@123\"  -p 1433:1433  -v /data/sqlserver:/var/opt/mssql \\\n  --cap-add SYS_PTRACE mcr.microsoft.com/mssql/server:2019-latest\n\n  /opt/mssql-tools18/bin/sqlcmd -S localhost -U SA -P \"Testing@123\" -C\n  \n-- 数据库级\n  SELECT name, type_desc FROM sys.database_principals WHERE type IN ('S', 'U', 'G');\n  select * from master.dbo.SysDatabases\n  --服务器级\n  SELECT name, type_desc FROM sys.server_principals WHERE type IN ('S', 'U', 'G');\n  go\n  SELECT DB_NAME() AS [CurrentDatabase];\n  USE master; SELECT name FROM sys.schemas\n  USE master; SELECT name FROM sys.tables\n  SELECT name, USER_NAME(principal_id) FROM sys.schemas;\n\nCREATE TABLE Users (    UserID INT PRIMARY KEY IDENTITY(1,1),     UserName NVARCHAR(50) NOT NULL,   Email NVARCHAR(100) NOT NULL, RegistrationDate DATETIME DEFAULT GETDATE(), IsActive BIT DEFAULT 1);\nINSERT INTO Users (UserName, Email) VALUES     ('王五', 'wangwu@example.com'),    ('赵六', 'zhaoliu@example.com'),    ('孙七', 'sunqi@example.com');\n\n--cdc\nuse y_test\nEXEC sys.sp_cdc_enable_db;\ngo\n SELECT name AS [y_test],    is_cdc_enabled AS [CDCEnabled]FROM   sys.databases WHERE     name = DB_NAME(); \n```\n","source":"_posts/数据库.md","raw":"---\ntitle: 数据库\ndate: 2025-07-24 17:30:42\ntags:\ncategories: db\n---\n\n# 数据库\n\n\n## mysql\n[索引失效情况](https://cloud.tencent.com/developer/article/1992920)\n### 回表概念\n```shell\n1.聚集索引的B+树，性能最优，叶子节点存储的数据是整行的所有字段数据(主键索引)\n2.非聚集索引的B+树，非聚集索引列可能是一列，也可能是多列（联合索引），\n  叶子节点存储的数据是非聚集索引列（1列或多列）的数据和聚集索引列\n\n\n用户user表4列（id, userCode, userName, userSex）\nid是主键（聚集索引）；userCode 是非聚集索引，此时会创建2个索引的B+树\n\n聚集索引的B+树，叶子节点保存了4列（id, userCode, userName, userSex）的数据\n非聚集索引的B+树，叶子节点保存了2列（id, userCode）的数据\n\n不回表\n走主键索引不回表，因为挂载的是整列数据\nselect * from user where id = 1 \n走非聚集索引不回表，因为叶子结点挂载了非聚集索引和聚集索引的值\nselect id,userCode from user where userCode = 1 \n\n\n回表\n因为查询的列除了主键id和非聚集索引userCode还有\nuserName, userSex，这两个叶子节点没有存数据，会通过主键索引id回表来\n查询userName, userSex的值，因为主键索引id挂载的整列的值\nselect id,userCode，userSex from user where userCode = 1\nselect id,userCode，userName from user where userCode = 1\nselect * from user where userCode = 1\n\n```\n### 常用sql元数据\n```sql\n#指定数据库的详细信息\nSELECT \n  TABLE_SCHEMA AS '数据库',\n  TABLE_NAME AS '表名',\n  TABLE_ROWS AS `行数`,\n  ROUND( (DATA_LENGTH + INDEX_LENGTH) / 1024 / 1024, 2) AS '总大小(MB)',\n  ROUND(DATA_LENGTH / 1024 / 1024, 2) AS '数据大小(MB)',\n  ROUND(INDEX_LENGTH / 1024 / 1024, 2) AS '索引大小(MB)',\n  TABLE_ROWS AS '数据行数（估算值）'\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = 'y_back'  -- 替换为你的数据库名\nORDER BY (DATA_LENGTH + INDEX_LENGTH) DESC;  -- 按总大小排序\n\n\n\n#数据库表的行数\nSELECT \n  TABLE_NAME AS '表名',\n  TABLE_ROWS AS '估算行数',\n  (SELECT COUNT(*) FROM y_back.t_work) AS '精确行数'  -- 替换为实际表名\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = 'y_back';\n\n#all\nSELECT\n\ttable_schema AS '数据库',\n\tsum( table_rows ) AS '记录数',\n\tsum(\n\tTRUNCATE ( data_length / 1024 / 1024, 2 )) AS '数据容量(MB)',\n\tsum(\n\tTRUNCATE ( index_length / 1024 / 1024, 2 )) AS '索引容量(MB)' \nFROM\n\tinformation_schema.TABLES \nGROUP BY\n\ttable_schema \nORDER BY\n\tsum( data_length ) DESC,\n\tsum( index_length ) DESC;\n\n#过滤元数据库\nSELECT\n  table_schema AS '数据库',\n  SUM(table_rows) AS '记录数',\n  TRUNCATE(SUM(data_length) / 1024 / 1024, 2) AS '数据容量(MB)',  -- 先求和再转换单位\n  TRUNCATE(SUM(index_length) / 1024 / 1024, 2) AS '索引容量(MB)'\nFROM\n  information_schema.TABLES\nWHERE\n  table_schema NOT IN (\n    'information_schema', \n    'mysql', \n    'performance_schema', \n    'sys'\n  )\nGROUP BY\n  table_schema\nORDER BY\n  SUM(data_length) DESC,\n  SUM(index_length) DESC;\n\nANALYZE TABLE - 更新统计信息\nOPTIMIZE TABLE - 表优化重组俗称清理碎片\n\n#造数据\nCREATE TABLE `t_work_db01` (\n  `id` bigint NOT NULL AUTO_INCREMENT,\n  `name` varchar(256) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL,\n  `age` int DEFAULT NULL,\n  `sex` char(1) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci DEFAULT NULL,\n  `money` float DEFAULT NULL COMMENT '金额',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=100001 DEFAULT CHARSET=utf8mb3 ROW_FORMAT=DYNAMIC\n\n\nDELIMITER $$\nCREATE PROCEDURE InsertDummyData()\nBEGIN\n    DECLARE i INT DEFAULT 0;\n    WHILE i < 100000 DO\n        INSERT INTO t_work (NAME, age, sex, money)\n        VALUES (\n            -- 随机生成用户名（示例：User_XXXX）\n            CONCAT('User_', SUBSTRING(MD5(RAND()) FROM 1 FOR 8)),\n            -- 随机年龄 18~65 岁\n            FLOOR(18 + RAND() * 48),\n            -- 随机性别（M/F）\n            IF(RAND() < 0.5, 'M', 'F'),\n            -- 随机金额 1000~10000（保留两位小数）\n            ROUND(1000 + RAND() * 9000, 2)\n        );\n        SET i = i + 1;\n    END WHILE;\nEND$$\nDELIMITER ;\n\n-- 执行存储过程\nCALL InsertDummyData();\n\nDROP PROCEDURE IF EXISTS InsertDummyData;  -- 强制删除（如果存在）\n```\n### mysql读写分离\n[github](https://github.com/sysown/proxysql) <br>\n[ProxySql](https://www.cnblogs.com/keme/p/12290977.html)<br>\n[MaxScale](https://www.cnblogs.com/ejiyuan/p/17156065.html)\n\n### mysql分表分库\n[mycat](https://cloud.tencent.com/developer/article/2349899)\n\n## pgsql\n[PostgreSQL psql 常用命令](https://www.sjkjc.com/postgresql/psql-commands/)\n### 概念\n```\nPUBLIC 是 PostgreSQL 数据库中一个特殊的角色组，在元数据表（pg_roles）中都查不到该角色，\n数据库中所创建的角色都可以理解为是 PUBLIC 角色组成员。\n而且对 PUBLIC 权限的继承完全不受 NOINHERIT 的控制，\n一旦创建了一个拥有 login 权限的角色，它会立即继承 PUBLIC 角色组拥有的权限，\n此时如果想通过 revoke（比如 revoke connect on database）来回收的话不会成功，\n只能从 PUBLIC 组回收相关权限（比如 revoke connect on database from PUBLIC）\n\nREVOKE CONNECT ON DATABASE test FROM PUBLIC;\n--这样普通用户就无法自由切换数据库，默认数据库下面有一个public的scheme\n\nMySQL 的 datadir ≈ PostgreSQL 的默认表空间 pg_default\nPostgreSQL 的 pg_default 表空间对应默认数据目录（由参数 data_directory 配置），类似于 MySQL 的 datadir。\nPostgreSQL 的数据库 ≈ MySQL 的实例（但更轻量）。\nPostgreSQL 的模式 ≈ MySQL 的数据库\n```\n\n### 基本使用命令\n```\ndocker run -id --name=pgsql -v postgre-data:/var/lib/postgresql/data -p 54222:5432 -e POSTGRES_PASSWORD=123456 -e LANG=C.UTF-8 bitnami/postgresql\n\ndocker exec -it -uroot pgsql bash\npsql -U postgres -W -n\ncat .psql_history \npsql -h host -p port -d dbname -U  user -W\n\n使用反斜线作为命令前缀.\n  postgres=# \\db\n# 输出的信息如下：\n       List of tablespaces\n    Name    |  Owner   | Location \n------------+----------+----------\n pg_default | postgres | \n pg_global  | postgres | \n(2 rows)\n\n退出    \\q\n 列出所有的数据库      \\l\n 列出所有的数据库的大小      \\l+\n 更改当前连接的数据库       \\c\n 列出当前数据库的连接信息    \\connect\n 列出当前数据库和连接的详细信息 \\conninfo\n 查看当前数据库里面的表和拥有者和表大小         \\dt+\n 展示所有用户           \\dg\n ​模式 \\dn\n 查看所有表名的列表             \\d\n 获取表结构                   \\da\n 展示所有用户               \\du\n 查看t_sms表的结构      \\d t_sms \n 展示数据库里面的所有的表         \\dt\n 列出所有的数据库的详细信息（包括数据库大小和字符格式）         \\l+\n 显示用户访问权限。                            \\z或\\dp\n 显示所有可设置的访问权限                     \\h GRAN\n 显示用户的对所有数据库表的详细访问权限     \\dp或者\\z\n 确认当前连接的用户为超级用户postgres，且该用户后创建角色和数据库的权限等     #select current_user;\n 在超级用户连接postgres后，设置不允许普通用户a连接数据库         #alter role a nologin;\n ​\n 使用普通用户a连接数据库正常                   #\\c highgo a\n\n\n\n快速查看当前所有用户：\\du\n查看详细用户信息：select * from pg_user;\n查看详细角色信息：select * from pg_roles;\n查看当前登录用户：select user;\n一般建议先创建用户然后使用这个用户去创建数据库模式，因为数据库那个用户创建的默认Owner就是这个用户\n创建用户：CREATE USER $user_name PASSWORD '$password';\n创建角色：CREATE ROLE $role_name;\n \n修改用户与角色：ALTER USER[ROLE] $user_name \n        e.g.\n        //修改用户名：ALTER USER U2 RENAME TO U22;\n        //修改用户的密码：ALTER USER U22 PASSWORD'U22;\n        //修改用户的权限：ALTER USER u22 CREATEROLE;\n        //修改数据库 testdb中的参数重设为默认值：ALTER USER u22 IN DATABASE testdb RESET all1;\n        //修改角色的名字：ALTER ROLE dev RENAME TO dev1;\n        //修改角色的权限：ALTER ROLE dev1 SUPERUSER;\n        //修改角色的权限：ALTER ROLE dev1 LOGIN;\n \n删除用户与角色：DROP USER[ROLE] [IF EXISTS] $user_name\n \n授权用户某个角色:GRANT $role_name TO $user_name;    (授权后set role $role_name启用生效）\n \n\ncreate user test with password 'rong ';\nCREATE DATABASE testdb OWNER test;\nGRANT ALL PRIVILEGES ON DATABASE testdb TO test;\nalter user qh with password '123';\n\\password qh;  //需要输入两次密码（推荐）\n\n\n```\n\n\n\n## manggodb\n[详细使用教程](https://www.runoob.com/mongodb/mongodb-tutorial.html)\n```\ndocker run -itd --name mongo -v /docker_volume/mongodb/data:/data/db -p 27017:27017 mongo:4.4 --auth\n–auth：需要密码才能访问容器服务；\nmongodb安装好后第一次进入是不需要密码的，也没有任何用户，通过shell命令可直接进入\nuse admin 使用admin数据库并进行验证，如果不验证，是做不了任何操作的\ndb.auth(\"root\",\"123456\")  返回1表示成功 \n验证之后还是做不了操作，因为root只有用户管理权限，下面创建用户，用户都跟着库走\nuse mydb \ndb.createUser({user: \"admin\",pwd: \"123456\",roles: [{ role: \"readWrite\", db: \"mydb\" }]}) \n通过admin用户增删改查\n\n\ndocker exec -it mongo mongo admin\n\n\ndb.createUser({ user:'root',pwd:'123456',roles:[ { role:'userAdminAnyDatabase', db: 'admin'},'readWriteAnyDatabase']});\n【role:‘userAdminAnyDatabase’】：只在admin数据库中可用，赋予用户所有数据库的userAdmin权限\n【db: ‘admin’】：可操作的数据库\n【‘readWriteAnyDatabase’】：赋予用户读写权限\nmongoDB 没有无敌用户root，只有能管理用户的用户 userAdminAnyDatabase \n\n\nSQL 术语/概念\tMongoDB 术语/概念   解释/说明\ndatabase\t    database\t       数据库\ntable\t        collection\t       数据库表/集合\nrow\t            document\t       数据记录行/文档\ncolumn\t        field\t           数据字段/域\nindex\t        index\t           索引\ntable joins\t \t表连接,            MongoDB不支持\nprimary key\t    primary key\t       主键,MongoDB自动将_id字段设置为主键\n```\n## sqlserver\n```\ndocker run -d \\\n  --name sqlserver --user=root \\\n  -e \"ACCEPT_EULA=Y\" \\\n  -e \"SA_PASSWORD=Testing@123\"  -p 1433:1433  -v /data/sqlserver:/var/opt/mssql \\\n  --cap-add SYS_PTRACE mcr.microsoft.com/mssql/server:2019-latest\n\n  /opt/mssql-tools18/bin/sqlcmd -S localhost -U SA -P \"Testing@123\" -C\n  \n-- 数据库级\n  SELECT name, type_desc FROM sys.database_principals WHERE type IN ('S', 'U', 'G');\n  select * from master.dbo.SysDatabases\n  --服务器级\n  SELECT name, type_desc FROM sys.server_principals WHERE type IN ('S', 'U', 'G');\n  go\n  SELECT DB_NAME() AS [CurrentDatabase];\n  USE master; SELECT name FROM sys.schemas\n  USE master; SELECT name FROM sys.tables\n  SELECT name, USER_NAME(principal_id) FROM sys.schemas;\n\nCREATE TABLE Users (    UserID INT PRIMARY KEY IDENTITY(1,1),     UserName NVARCHAR(50) NOT NULL,   Email NVARCHAR(100) NOT NULL, RegistrationDate DATETIME DEFAULT GETDATE(), IsActive BIT DEFAULT 1);\nINSERT INTO Users (UserName, Email) VALUES     ('王五', 'wangwu@example.com'),    ('赵六', 'zhaoliu@example.com'),    ('孙七', 'sunqi@example.com');\n\n--cdc\nuse y_test\nEXEC sys.sp_cdc_enable_db;\ngo\n SELECT name AS [y_test],    is_cdc_enabled AS [CDCEnabled]FROM   sys.databases WHERE     name = DB_NAME(); \n```\n","slug":"数据库","published":1,"updated":"2025-07-30T08:41:38.483Z","comments":1,"layout":"post","photos":[],"_id":"cmdppvvw0000ylpod9wi38nxg","content":"<h1 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h1><h2 id=\"mysql\"><a href=\"#mysql\" class=\"headerlink\" title=\"mysql\"></a>mysql</h2><p><a href=\"https://cloud.tencent.com/developer/article/1992920\">索引失效情况</a></p>\n<h3 id=\"回表概念\"><a href=\"#回表概念\" class=\"headerlink\" title=\"回表概念\"></a>回表概念</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.聚集索引的B+树，性能最优，叶子节点存储的数据是整行的所有字段数据(主键索引)</span><br><span class=\"line\">2.非聚集索引的B+树，非聚集索引列可能是一列，也可能是多列（联合索引），</span><br><span class=\"line\">  叶子节点存储的数据是非聚集索引列（1列或多列）的数据和聚集索引列</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">用户user表4列（id, userCode, userName, userSex）</span><br><span class=\"line\">id是主键（聚集索引）；userCode 是非聚集索引，此时会创建2个索引的B+树</span><br><span class=\"line\"></span><br><span class=\"line\">聚集索引的B+树，叶子节点保存了4列（id, userCode, userName, userSex）的数据</span><br><span class=\"line\">非聚集索引的B+树，叶子节点保存了2列（id, userCode）的数据</span><br><span class=\"line\"></span><br><span class=\"line\">不回表</span><br><span class=\"line\">走主键索引不回表，因为挂载的是整列数据</span><br><span class=\"line\">select * from user where id = 1 </span><br><span class=\"line\">走非聚集索引不回表，因为叶子结点挂载了非聚集索引和聚集索引的值</span><br><span class=\"line\">select id,userCode from user where userCode = 1 </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">回表</span><br><span class=\"line\">因为查询的列除了主键id和非聚集索引userCode还有</span><br><span class=\"line\">userName, userSex，这两个叶子节点没有存数据，会通过主键索引id回表来</span><br><span class=\"line\">查询userName, userSex的值，因为主键索引id挂载的整列的值</span><br><span class=\"line\">select id,userCode，userSex from user where userCode = 1</span><br><span class=\"line\">select id,userCode，userName from user where userCode = 1</span><br><span class=\"line\">select * from user where userCode = 1</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"常用sql元数据\"><a href=\"#常用sql元数据\" class=\"headerlink\" title=\"常用sql元数据\"></a>常用sql元数据</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#指定数据库的详细信息</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> </span><br><span class=\"line\">  TABLE_SCHEMA <span class=\"keyword\">AS</span> <span class=\"string\">&#x27;数据库&#x27;</span>,</span><br><span class=\"line\">  TABLE_NAME <span class=\"keyword\">AS</span> <span class=\"string\">&#x27;表名&#x27;</span>,</span><br><span class=\"line\">  TABLE_ROWS <span class=\"keyword\">AS</span> `行数`,</span><br><span class=\"line\">  ROUND( (DATA_LENGTH <span class=\"operator\">+</span> INDEX_LENGTH) <span class=\"operator\">/</span> <span class=\"number\">1024</span> <span class=\"operator\">/</span> <span class=\"number\">1024</span>, <span class=\"number\">2</span>) <span class=\"keyword\">AS</span> <span class=\"string\">&#x27;总大小(MB)&#x27;</span>,</span><br><span class=\"line\">  ROUND(DATA_LENGTH <span class=\"operator\">/</span> <span class=\"number\">1024</span> <span class=\"operator\">/</span> <span class=\"number\">1024</span>, <span class=\"number\">2</span>) <span class=\"keyword\">AS</span> <span class=\"string\">&#x27;数据大小(MB)&#x27;</span>,</span><br><span class=\"line\">  ROUND(INDEX_LENGTH <span class=\"operator\">/</span> <span class=\"number\">1024</span> <span class=\"operator\">/</span> <span class=\"number\">1024</span>, <span class=\"number\">2</span>) <span class=\"keyword\">AS</span> <span class=\"string\">&#x27;索引大小(MB)&#x27;</span>,</span><br><span class=\"line\">  TABLE_ROWS <span class=\"keyword\">AS</span> <span class=\"string\">&#x27;数据行数（估算值）&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> information_schema.TABLES</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> TABLE_SCHEMA <span class=\"operator\">=</span> <span class=\"string\">&#x27;y_back&#x27;</span>  <span class=\"comment\">-- 替换为你的数据库名</span></span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> (DATA_LENGTH <span class=\"operator\">+</span> INDEX_LENGTH) <span class=\"keyword\">DESC</span>;  <span class=\"comment\">-- 按总大小排序</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#数据库表的行数</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> </span><br><span class=\"line\">  TABLE_NAME <span class=\"keyword\">AS</span> <span class=\"string\">&#x27;表名&#x27;</span>,</span><br><span class=\"line\">  TABLE_ROWS <span class=\"keyword\">AS</span> <span class=\"string\">&#x27;估算行数&#x27;</span>,</span><br><span class=\"line\">  (<span class=\"keyword\">SELECT</span> <span class=\"built_in\">COUNT</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">FROM</span> y_back.t_work) <span class=\"keyword\">AS</span> <span class=\"string\">&#x27;精确行数&#x27;</span>  <span class=\"comment\">-- 替换为实际表名</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> information_schema.TABLES</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> TABLE_SCHEMA <span class=\"operator\">=</span> <span class=\"string\">&#x27;y_back&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">#<span class=\"keyword\">all</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">\ttable_schema <span class=\"keyword\">AS</span> <span class=\"string\">&#x27;数据库&#x27;</span>,</span><br><span class=\"line\">\t<span class=\"built_in\">sum</span>( table_rows ) <span class=\"keyword\">AS</span> <span class=\"string\">&#x27;记录数&#x27;</span>,</span><br><span class=\"line\">\t<span class=\"built_in\">sum</span>(</span><br><span class=\"line\">\t<span class=\"keyword\">TRUNCATE</span> ( data_length <span class=\"operator\">/</span> <span class=\"number\">1024</span> <span class=\"operator\">/</span> <span class=\"number\">1024</span>, <span class=\"number\">2</span> )) <span class=\"keyword\">AS</span> <span class=\"string\">&#x27;数据容量(MB)&#x27;</span>,</span><br><span class=\"line\">\t<span class=\"built_in\">sum</span>(</span><br><span class=\"line\">\t<span class=\"keyword\">TRUNCATE</span> ( index_length <span class=\"operator\">/</span> <span class=\"number\">1024</span> <span class=\"operator\">/</span> <span class=\"number\">1024</span>, <span class=\"number\">2</span> )) <span class=\"keyword\">AS</span> <span class=\"string\">&#x27;索引容量(MB)&#x27;</span> </span><br><span class=\"line\"><span class=\"keyword\">FROM</span></span><br><span class=\"line\">\tinformation_schema.TABLES </span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span></span><br><span class=\"line\">\ttable_schema </span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span></span><br><span class=\"line\">\t<span class=\"built_in\">sum</span>( data_length ) <span class=\"keyword\">DESC</span>,</span><br><span class=\"line\">\t<span class=\"built_in\">sum</span>( index_length ) <span class=\"keyword\">DESC</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">#过滤元数据库</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">  table_schema <span class=\"keyword\">AS</span> <span class=\"string\">&#x27;数据库&#x27;</span>,</span><br><span class=\"line\">  <span class=\"built_in\">SUM</span>(table_rows) <span class=\"keyword\">AS</span> <span class=\"string\">&#x27;记录数&#x27;</span>,</span><br><span class=\"line\">  <span class=\"keyword\">TRUNCATE</span>(<span class=\"built_in\">SUM</span>(data_length) <span class=\"operator\">/</span> <span class=\"number\">1024</span> <span class=\"operator\">/</span> <span class=\"number\">1024</span>, <span class=\"number\">2</span>) <span class=\"keyword\">AS</span> <span class=\"string\">&#x27;数据容量(MB)&#x27;</span>,  <span class=\"comment\">-- 先求和再转换单位</span></span><br><span class=\"line\">  <span class=\"keyword\">TRUNCATE</span>(<span class=\"built_in\">SUM</span>(index_length) <span class=\"operator\">/</span> <span class=\"number\">1024</span> <span class=\"operator\">/</span> <span class=\"number\">1024</span>, <span class=\"number\">2</span>) <span class=\"keyword\">AS</span> <span class=\"string\">&#x27;索引容量(MB)&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span></span><br><span class=\"line\">  information_schema.TABLES</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span></span><br><span class=\"line\">  table_schema <span class=\"keyword\">NOT</span> <span class=\"keyword\">IN</span> (</span><br><span class=\"line\">    <span class=\"string\">&#x27;information_schema&#x27;</span>, </span><br><span class=\"line\">    <span class=\"string\">&#x27;mysql&#x27;</span>, </span><br><span class=\"line\">    <span class=\"string\">&#x27;performance_schema&#x27;</span>, </span><br><span class=\"line\">    <span class=\"string\">&#x27;sys&#x27;</span></span><br><span class=\"line\">  )</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span></span><br><span class=\"line\">  table_schema</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span></span><br><span class=\"line\">  <span class=\"built_in\">SUM</span>(data_length) <span class=\"keyword\">DESC</span>,</span><br><span class=\"line\">  <span class=\"built_in\">SUM</span>(index_length) <span class=\"keyword\">DESC</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">ANALYZE <span class=\"keyword\">TABLE</span> <span class=\"operator\">-</span> 更新统计信息</span><br><span class=\"line\">OPTIMIZE <span class=\"keyword\">TABLE</span> <span class=\"operator\">-</span> 表优化重组俗称清理碎片</span><br><span class=\"line\"></span><br><span class=\"line\">#造数据</span><br><span class=\"line\"><span class=\"keyword\">CREATE TABLE</span> `t_work_db01` (</span><br><span class=\"line\">  `id` <span class=\"type\">bigint</span> <span class=\"keyword\">NOT NULL</span> AUTO_INCREMENT,</span><br><span class=\"line\">  `name` <span class=\"type\">varchar</span>(<span class=\"number\">256</span>) <span class=\"keyword\">CHARACTER SET</span> utf8mb3 <span class=\"keyword\">COLLATE</span> utf8mb3_general_ci <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  `age` <span class=\"type\">int</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  `sex` <span class=\"type\">char</span>(<span class=\"number\">1</span>) <span class=\"keyword\">CHARACTER SET</span> utf8mb3 <span class=\"keyword\">COLLATE</span> utf8mb3_general_ci <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  `money` <span class=\"type\">float</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;金额&#x27;</span>,</span><br><span class=\"line\">  <span class=\"keyword\">PRIMARY KEY</span> (`id`)</span><br><span class=\"line\">) ENGINE<span class=\"operator\">=</span>InnoDB AUTO_INCREMENT<span class=\"operator\">=</span><span class=\"number\">100001</span> <span class=\"keyword\">DEFAULT</span> CHARSET<span class=\"operator\">=</span>utf8mb3 ROW_FORMAT<span class=\"operator\">=</span><span class=\"keyword\">DYNAMIC</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">DELIMITER $$</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> InsertDummyData()</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">    <span class=\"keyword\">DECLARE</span> i <span class=\"type\">INT</span> <span class=\"keyword\">DEFAULT</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    WHILE i <span class=\"operator\">&lt;</span> <span class=\"number\">100000</span> DO</span><br><span class=\"line\">        <span class=\"keyword\">INSERT INTO</span> t_work (NAME, age, sex, money)</span><br><span class=\"line\">        <span class=\"keyword\">VALUES</span> (</span><br><span class=\"line\">            <span class=\"comment\">-- 随机生成用户名（示例：User_XXXX）</span></span><br><span class=\"line\">            CONCAT(<span class=\"string\">&#x27;User_&#x27;</span>, <span class=\"built_in\">SUBSTRING</span>(MD5(RAND()) <span class=\"keyword\">FROM</span> <span class=\"number\">1</span> <span class=\"keyword\">FOR</span> <span class=\"number\">8</span>)),</span><br><span class=\"line\">            <span class=\"comment\">-- 随机年龄 18~65 岁</span></span><br><span class=\"line\">            <span class=\"built_in\">FLOOR</span>(<span class=\"number\">18</span> <span class=\"operator\">+</span> RAND() <span class=\"operator\">*</span> <span class=\"number\">48</span>),</span><br><span class=\"line\">            <span class=\"comment\">-- 随机性别（M/F）</span></span><br><span class=\"line\">            IF(RAND() <span class=\"operator\">&lt;</span> <span class=\"number\">0.5</span>, <span class=\"string\">&#x27;M&#x27;</span>, <span class=\"string\">&#x27;F&#x27;</span>),</span><br><span class=\"line\">            <span class=\"comment\">-- 随机金额 1000~10000（保留两位小数）</span></span><br><span class=\"line\">            ROUND(<span class=\"number\">1000</span> <span class=\"operator\">+</span> RAND() <span class=\"operator\">*</span> <span class=\"number\">9000</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">        );</span><br><span class=\"line\">        <span class=\"keyword\">SET</span> i <span class=\"operator\">=</span> i <span class=\"operator\">+</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">END</span> WHILE;</span><br><span class=\"line\"><span class=\"keyword\">END</span>$$</span><br><span class=\"line\">DELIMITER ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 执行存储过程</span></span><br><span class=\"line\"><span class=\"keyword\">CALL</span> InsertDummyData();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">PROCEDURE</span> IF <span class=\"keyword\">EXISTS</span> InsertDummyData;  <span class=\"comment\">-- 强制删除（如果存在）</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"mysql读写分离\"><a href=\"#mysql读写分离\" class=\"headerlink\" title=\"mysql读写分离\"></a>mysql读写分离</h3><p><a href=\"https://github.com/sysown/proxysql\">github</a> <br><br><a href=\"https://www.cnblogs.com/keme/p/12290977.html\">ProxySql</a><br><br><a href=\"https://www.cnblogs.com/ejiyuan/p/17156065.html\">MaxScale</a></p>\n<h3 id=\"mysql分表分库\"><a href=\"#mysql分表分库\" class=\"headerlink\" title=\"mysql分表分库\"></a>mysql分表分库</h3><p><a href=\"https://cloud.tencent.com/developer/article/2349899\">mycat</a></p>\n<h2 id=\"pgsql\"><a href=\"#pgsql\" class=\"headerlink\" title=\"pgsql\"></a>pgsql</h2><p><a href=\"https://www.sjkjc.com/postgresql/psql-commands/\">PostgreSQL psql 常用命令</a></p>\n<h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PUBLIC 是 PostgreSQL 数据库中一个特殊的角色组，在元数据表（pg_roles）中都查不到该角色，</span><br><span class=\"line\">数据库中所创建的角色都可以理解为是 PUBLIC 角色组成员。</span><br><span class=\"line\">而且对 PUBLIC 权限的继承完全不受 NOINHERIT 的控制，</span><br><span class=\"line\">一旦创建了一个拥有 login 权限的角色，它会立即继承 PUBLIC 角色组拥有的权限，</span><br><span class=\"line\">此时如果想通过 revoke（比如 revoke connect on database）来回收的话不会成功，</span><br><span class=\"line\">只能从 PUBLIC 组回收相关权限（比如 revoke connect on database from PUBLIC）</span><br><span class=\"line\"></span><br><span class=\"line\">REVOKE CONNECT ON DATABASE test FROM PUBLIC;</span><br><span class=\"line\">--这样普通用户就无法自由切换数据库，默认数据库下面有一个public的scheme</span><br><span class=\"line\"></span><br><span class=\"line\">MySQL 的 datadir ≈ PostgreSQL 的默认表空间 pg_default</span><br><span class=\"line\">PostgreSQL 的 pg_default 表空间对应默认数据目录（由参数 data_directory 配置），类似于 MySQL 的 datadir。</span><br><span class=\"line\">PostgreSQL 的数据库 ≈ MySQL 的实例（但更轻量）。</span><br><span class=\"line\">PostgreSQL 的模式 ≈ MySQL 的数据库</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"基本使用命令\"><a href=\"#基本使用命令\" class=\"headerlink\" title=\"基本使用命令\"></a>基本使用命令</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -id --name=pgsql -v postgre-data:/var/lib/postgresql/data -p 54222:5432 -e POSTGRES_PASSWORD=123456 -e LANG=C.UTF-8 bitnami/postgresql</span><br><span class=\"line\"></span><br><span class=\"line\">docker exec -it -uroot pgsql bash</span><br><span class=\"line\">psql -U postgres -W -n</span><br><span class=\"line\">cat .psql_history </span><br><span class=\"line\">psql -h host -p port -d dbname -U  user -W</span><br><span class=\"line\"></span><br><span class=\"line\">使用反斜线作为命令前缀.</span><br><span class=\"line\">  postgres=# \\db</span><br><span class=\"line\"># 输出的信息如下：</span><br><span class=\"line\">       List of tablespaces</span><br><span class=\"line\">    Name    |  Owner   | Location </span><br><span class=\"line\">------------+----------+----------</span><br><span class=\"line\"> pg_default | postgres | </span><br><span class=\"line\"> pg_global  | postgres | </span><br><span class=\"line\">(2 rows)</span><br><span class=\"line\"></span><br><span class=\"line\">退出    \\q</span><br><span class=\"line\"> 列出所有的数据库      \\l</span><br><span class=\"line\"> 列出所有的数据库的大小      \\l+</span><br><span class=\"line\"> 更改当前连接的数据库       \\c</span><br><span class=\"line\"> 列出当前数据库的连接信息    \\connect</span><br><span class=\"line\"> 列出当前数据库和连接的详细信息 \\conninfo</span><br><span class=\"line\"> 查看当前数据库里面的表和拥有者和表大小         \\dt+</span><br><span class=\"line\"> 展示所有用户           \\dg</span><br><span class=\"line\"> ​模式 \\dn</span><br><span class=\"line\"> 查看所有表名的列表             \\d</span><br><span class=\"line\"> 获取表结构                   \\da</span><br><span class=\"line\"> 展示所有用户               \\du</span><br><span class=\"line\"> 查看t_sms表的结构      \\d t_sms </span><br><span class=\"line\"> 展示数据库里面的所有的表         \\dt</span><br><span class=\"line\"> 列出所有的数据库的详细信息（包括数据库大小和字符格式）         \\l+</span><br><span class=\"line\"> 显示用户访问权限。                            \\z或\\dp</span><br><span class=\"line\"> 显示所有可设置的访问权限                     \\h GRAN</span><br><span class=\"line\"> 显示用户的对所有数据库表的详细访问权限     \\dp或者\\z</span><br><span class=\"line\"> 确认当前连接的用户为超级用户postgres，且该用户后创建角色和数据库的权限等     #select current_user;</span><br><span class=\"line\"> 在超级用户连接postgres后，设置不允许普通用户a连接数据库         #alter role a nologin;</span><br><span class=\"line\"> ​</span><br><span class=\"line\"> 使用普通用户a连接数据库正常                   #\\c highgo a</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">快速查看当前所有用户：\\du</span><br><span class=\"line\">查看详细用户信息：select * from pg_user;</span><br><span class=\"line\">查看详细角色信息：select * from pg_roles;</span><br><span class=\"line\">查看当前登录用户：select user;</span><br><span class=\"line\">一般建议先创建用户然后使用这个用户去创建数据库模式，因为数据库那个用户创建的默认Owner就是这个用户</span><br><span class=\"line\">创建用户：CREATE USER $user_name PASSWORD &#x27;$password&#x27;;</span><br><span class=\"line\">创建角色：CREATE ROLE $role_name;</span><br><span class=\"line\"> </span><br><span class=\"line\">修改用户与角色：ALTER USER[ROLE] $user_name </span><br><span class=\"line\">        e.g.</span><br><span class=\"line\">        //修改用户名：ALTER USER U2 RENAME TO U22;</span><br><span class=\"line\">        //修改用户的密码：ALTER USER U22 PASSWORD&#x27;U22;</span><br><span class=\"line\">        //修改用户的权限：ALTER USER u22 CREATEROLE;</span><br><span class=\"line\">        //修改数据库 testdb中的参数重设为默认值：ALTER USER u22 IN DATABASE testdb RESET all1;</span><br><span class=\"line\">        //修改角色的名字：ALTER ROLE dev RENAME TO dev1;</span><br><span class=\"line\">        //修改角色的权限：ALTER ROLE dev1 SUPERUSER;</span><br><span class=\"line\">        //修改角色的权限：ALTER ROLE dev1 LOGIN;</span><br><span class=\"line\"> </span><br><span class=\"line\">删除用户与角色：DROP USER[ROLE] [IF EXISTS] $user_name</span><br><span class=\"line\"> </span><br><span class=\"line\">授权用户某个角色:GRANT $role_name TO $user_name;    (授权后set role $role_name启用生效）</span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">create user test with password &#x27;rong &#x27;;</span><br><span class=\"line\">CREATE DATABASE testdb OWNER test;</span><br><span class=\"line\">GRANT ALL PRIVILEGES ON DATABASE testdb TO test;</span><br><span class=\"line\">alter user qh with password &#x27;123&#x27;;</span><br><span class=\"line\">\\password qh;  //需要输入两次密码（推荐）</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"manggodb\"><a href=\"#manggodb\" class=\"headerlink\" title=\"manggodb\"></a>manggodb</h2><p><a href=\"https://www.runoob.com/mongodb/mongodb-tutorial.html\">详细使用教程</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -itd --name mongo -v /docker_volume/mongodb/data:/data/db -p 27017:27017 mongo:4.4 --auth</span><br><span class=\"line\">–auth：需要密码才能访问容器服务；</span><br><span class=\"line\">mongodb安装好后第一次进入是不需要密码的，也没有任何用户，通过shell命令可直接进入</span><br><span class=\"line\">use admin 使用admin数据库并进行验证，如果不验证，是做不了任何操作的</span><br><span class=\"line\">db.auth(&quot;root&quot;,&quot;123456&quot;)  返回1表示成功 </span><br><span class=\"line\">验证之后还是做不了操作，因为root只有用户管理权限，下面创建用户，用户都跟着库走</span><br><span class=\"line\">use mydb </span><br><span class=\"line\">db.createUser(&#123;user: &quot;admin&quot;,pwd: &quot;123456&quot;,roles: [&#123; role: &quot;readWrite&quot;, db: &quot;mydb&quot; &#125;]&#125;) </span><br><span class=\"line\">通过admin用户增删改查</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">docker exec -it mongo mongo admin</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">db.createUser(&#123; user:&#x27;root&#x27;,pwd:&#x27;123456&#x27;,roles:[ &#123; role:&#x27;userAdminAnyDatabase&#x27;, db: &#x27;admin&#x27;&#125;,&#x27;readWriteAnyDatabase&#x27;]&#125;);</span><br><span class=\"line\">【role:‘userAdminAnyDatabase’】：只在admin数据库中可用，赋予用户所有数据库的userAdmin权限</span><br><span class=\"line\">【db: ‘admin’】：可操作的数据库</span><br><span class=\"line\">【‘readWriteAnyDatabase’】：赋予用户读写权限</span><br><span class=\"line\">mongoDB 没有无敌用户root，只有能管理用户的用户 userAdminAnyDatabase </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">SQL 术语/概念\tMongoDB 术语/概念   解释/说明</span><br><span class=\"line\">database\t    database\t       数据库</span><br><span class=\"line\">table\t        collection\t       数据库表/集合</span><br><span class=\"line\">row\t            document\t       数据记录行/文档</span><br><span class=\"line\">column\t        field\t           数据字段/域</span><br><span class=\"line\">index\t        index\t           索引</span><br><span class=\"line\">table joins\t \t表连接,            MongoDB不支持</span><br><span class=\"line\">primary key\t    primary key\t       主键,MongoDB自动将_id字段设置为主键</span><br></pre></td></tr></table></figure>\n<h2 id=\"sqlserver\"><a href=\"#sqlserver\" class=\"headerlink\" title=\"sqlserver\"></a>sqlserver</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d \\</span><br><span class=\"line\">  --name sqlserver --user=root \\</span><br><span class=\"line\">  -e &quot;ACCEPT_EULA=Y&quot; \\</span><br><span class=\"line\">  -e &quot;SA_PASSWORD=Testing@123&quot;  -p 1433:1433  -v /data/sqlserver:/var/opt/mssql \\</span><br><span class=\"line\">  --cap-add SYS_PTRACE mcr.microsoft.com/mssql/server:2019-latest</span><br><span class=\"line\"></span><br><span class=\"line\">  /opt/mssql-tools18/bin/sqlcmd -S localhost -U SA -P &quot;Testing@123&quot; -C</span><br><span class=\"line\">  </span><br><span class=\"line\">-- 数据库级</span><br><span class=\"line\">  SELECT name, type_desc FROM sys.database_principals WHERE type IN (&#x27;S&#x27;, &#x27;U&#x27;, &#x27;G&#x27;);</span><br><span class=\"line\">  select * from master.dbo.SysDatabases</span><br><span class=\"line\">  --服务器级</span><br><span class=\"line\">  SELECT name, type_desc FROM sys.server_principals WHERE type IN (&#x27;S&#x27;, &#x27;U&#x27;, &#x27;G&#x27;);</span><br><span class=\"line\">  go</span><br><span class=\"line\">  SELECT DB_NAME() AS [CurrentDatabase];</span><br><span class=\"line\">  USE master; SELECT name FROM sys.schemas</span><br><span class=\"line\">  USE master; SELECT name FROM sys.tables</span><br><span class=\"line\">  SELECT name, USER_NAME(principal_id) FROM sys.schemas;</span><br><span class=\"line\"></span><br><span class=\"line\">CREATE TABLE Users (    UserID INT PRIMARY KEY IDENTITY(1,1),     UserName NVARCHAR(50) NOT NULL,   Email NVARCHAR(100) NOT NULL, RegistrationDate DATETIME DEFAULT GETDATE(), IsActive BIT DEFAULT 1);</span><br><span class=\"line\">INSERT INTO Users (UserName, Email) VALUES     (&#x27;王五&#x27;, &#x27;wangwu@example.com&#x27;),    (&#x27;赵六&#x27;, &#x27;zhaoliu@example.com&#x27;),    (&#x27;孙七&#x27;, &#x27;sunqi@example.com&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">--cdc</span><br><span class=\"line\">use y_test</span><br><span class=\"line\">EXEC sys.sp_cdc_enable_db;</span><br><span class=\"line\">go</span><br><span class=\"line\"> SELECT name AS [y_test],    is_cdc_enabled AS [CDCEnabled]FROM   sys.databases WHERE     name = DB_NAME(); </span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h1><h2 id=\"mysql\"><a href=\"#mysql\" class=\"headerlink\" title=\"mysql\"></a>mysql</h2><p><a href=\"https://cloud.tencent.com/developer/article/1992920\">索引失效情况</a></p>\n<h3 id=\"回表概念\"><a href=\"#回表概念\" class=\"headerlink\" title=\"回表概念\"></a>回表概念</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.聚集索引的B+树，性能最优，叶子节点存储的数据是整行的所有字段数据(主键索引)</span><br><span class=\"line\">2.非聚集索引的B+树，非聚集索引列可能是一列，也可能是多列（联合索引），</span><br><span class=\"line\">  叶子节点存储的数据是非聚集索引列（1列或多列）的数据和聚集索引列</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">用户user表4列（id, userCode, userName, userSex）</span><br><span class=\"line\">id是主键（聚集索引）；userCode 是非聚集索引，此时会创建2个索引的B+树</span><br><span class=\"line\"></span><br><span class=\"line\">聚集索引的B+树，叶子节点保存了4列（id, userCode, userName, userSex）的数据</span><br><span class=\"line\">非聚集索引的B+树，叶子节点保存了2列（id, userCode）的数据</span><br><span class=\"line\"></span><br><span class=\"line\">不回表</span><br><span class=\"line\">走主键索引不回表，因为挂载的是整列数据</span><br><span class=\"line\">select * from user where id = 1 </span><br><span class=\"line\">走非聚集索引不回表，因为叶子结点挂载了非聚集索引和聚集索引的值</span><br><span class=\"line\">select id,userCode from user where userCode = 1 </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">回表</span><br><span class=\"line\">因为查询的列除了主键id和非聚集索引userCode还有</span><br><span class=\"line\">userName, userSex，这两个叶子节点没有存数据，会通过主键索引id回表来</span><br><span class=\"line\">查询userName, userSex的值，因为主键索引id挂载的整列的值</span><br><span class=\"line\">select id,userCode，userSex from user where userCode = 1</span><br><span class=\"line\">select id,userCode，userName from user where userCode = 1</span><br><span class=\"line\">select * from user where userCode = 1</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"常用sql元数据\"><a href=\"#常用sql元数据\" class=\"headerlink\" title=\"常用sql元数据\"></a>常用sql元数据</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#指定数据库的详细信息</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> </span><br><span class=\"line\">  TABLE_SCHEMA <span class=\"keyword\">AS</span> <span class=\"string\">&#x27;数据库&#x27;</span>,</span><br><span class=\"line\">  TABLE_NAME <span class=\"keyword\">AS</span> <span class=\"string\">&#x27;表名&#x27;</span>,</span><br><span class=\"line\">  TABLE_ROWS <span class=\"keyword\">AS</span> `行数`,</span><br><span class=\"line\">  ROUND( (DATA_LENGTH <span class=\"operator\">+</span> INDEX_LENGTH) <span class=\"operator\">/</span> <span class=\"number\">1024</span> <span class=\"operator\">/</span> <span class=\"number\">1024</span>, <span class=\"number\">2</span>) <span class=\"keyword\">AS</span> <span class=\"string\">&#x27;总大小(MB)&#x27;</span>,</span><br><span class=\"line\">  ROUND(DATA_LENGTH <span class=\"operator\">/</span> <span class=\"number\">1024</span> <span class=\"operator\">/</span> <span class=\"number\">1024</span>, <span class=\"number\">2</span>) <span class=\"keyword\">AS</span> <span class=\"string\">&#x27;数据大小(MB)&#x27;</span>,</span><br><span class=\"line\">  ROUND(INDEX_LENGTH <span class=\"operator\">/</span> <span class=\"number\">1024</span> <span class=\"operator\">/</span> <span class=\"number\">1024</span>, <span class=\"number\">2</span>) <span class=\"keyword\">AS</span> <span class=\"string\">&#x27;索引大小(MB)&#x27;</span>,</span><br><span class=\"line\">  TABLE_ROWS <span class=\"keyword\">AS</span> <span class=\"string\">&#x27;数据行数（估算值）&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> information_schema.TABLES</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> TABLE_SCHEMA <span class=\"operator\">=</span> <span class=\"string\">&#x27;y_back&#x27;</span>  <span class=\"comment\">-- 替换为你的数据库名</span></span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> (DATA_LENGTH <span class=\"operator\">+</span> INDEX_LENGTH) <span class=\"keyword\">DESC</span>;  <span class=\"comment\">-- 按总大小排序</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#数据库表的行数</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> </span><br><span class=\"line\">  TABLE_NAME <span class=\"keyword\">AS</span> <span class=\"string\">&#x27;表名&#x27;</span>,</span><br><span class=\"line\">  TABLE_ROWS <span class=\"keyword\">AS</span> <span class=\"string\">&#x27;估算行数&#x27;</span>,</span><br><span class=\"line\">  (<span class=\"keyword\">SELECT</span> <span class=\"built_in\">COUNT</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">FROM</span> y_back.t_work) <span class=\"keyword\">AS</span> <span class=\"string\">&#x27;精确行数&#x27;</span>  <span class=\"comment\">-- 替换为实际表名</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> information_schema.TABLES</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> TABLE_SCHEMA <span class=\"operator\">=</span> <span class=\"string\">&#x27;y_back&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">#<span class=\"keyword\">all</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">\ttable_schema <span class=\"keyword\">AS</span> <span class=\"string\">&#x27;数据库&#x27;</span>,</span><br><span class=\"line\">\t<span class=\"built_in\">sum</span>( table_rows ) <span class=\"keyword\">AS</span> <span class=\"string\">&#x27;记录数&#x27;</span>,</span><br><span class=\"line\">\t<span class=\"built_in\">sum</span>(</span><br><span class=\"line\">\t<span class=\"keyword\">TRUNCATE</span> ( data_length <span class=\"operator\">/</span> <span class=\"number\">1024</span> <span class=\"operator\">/</span> <span class=\"number\">1024</span>, <span class=\"number\">2</span> )) <span class=\"keyword\">AS</span> <span class=\"string\">&#x27;数据容量(MB)&#x27;</span>,</span><br><span class=\"line\">\t<span class=\"built_in\">sum</span>(</span><br><span class=\"line\">\t<span class=\"keyword\">TRUNCATE</span> ( index_length <span class=\"operator\">/</span> <span class=\"number\">1024</span> <span class=\"operator\">/</span> <span class=\"number\">1024</span>, <span class=\"number\">2</span> )) <span class=\"keyword\">AS</span> <span class=\"string\">&#x27;索引容量(MB)&#x27;</span> </span><br><span class=\"line\"><span class=\"keyword\">FROM</span></span><br><span class=\"line\">\tinformation_schema.TABLES </span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span></span><br><span class=\"line\">\ttable_schema </span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span></span><br><span class=\"line\">\t<span class=\"built_in\">sum</span>( data_length ) <span class=\"keyword\">DESC</span>,</span><br><span class=\"line\">\t<span class=\"built_in\">sum</span>( index_length ) <span class=\"keyword\">DESC</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">#过滤元数据库</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">  table_schema <span class=\"keyword\">AS</span> <span class=\"string\">&#x27;数据库&#x27;</span>,</span><br><span class=\"line\">  <span class=\"built_in\">SUM</span>(table_rows) <span class=\"keyword\">AS</span> <span class=\"string\">&#x27;记录数&#x27;</span>,</span><br><span class=\"line\">  <span class=\"keyword\">TRUNCATE</span>(<span class=\"built_in\">SUM</span>(data_length) <span class=\"operator\">/</span> <span class=\"number\">1024</span> <span class=\"operator\">/</span> <span class=\"number\">1024</span>, <span class=\"number\">2</span>) <span class=\"keyword\">AS</span> <span class=\"string\">&#x27;数据容量(MB)&#x27;</span>,  <span class=\"comment\">-- 先求和再转换单位</span></span><br><span class=\"line\">  <span class=\"keyword\">TRUNCATE</span>(<span class=\"built_in\">SUM</span>(index_length) <span class=\"operator\">/</span> <span class=\"number\">1024</span> <span class=\"operator\">/</span> <span class=\"number\">1024</span>, <span class=\"number\">2</span>) <span class=\"keyword\">AS</span> <span class=\"string\">&#x27;索引容量(MB)&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span></span><br><span class=\"line\">  information_schema.TABLES</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span></span><br><span class=\"line\">  table_schema <span class=\"keyword\">NOT</span> <span class=\"keyword\">IN</span> (</span><br><span class=\"line\">    <span class=\"string\">&#x27;information_schema&#x27;</span>, </span><br><span class=\"line\">    <span class=\"string\">&#x27;mysql&#x27;</span>, </span><br><span class=\"line\">    <span class=\"string\">&#x27;performance_schema&#x27;</span>, </span><br><span class=\"line\">    <span class=\"string\">&#x27;sys&#x27;</span></span><br><span class=\"line\">  )</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span></span><br><span class=\"line\">  table_schema</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span></span><br><span class=\"line\">  <span class=\"built_in\">SUM</span>(data_length) <span class=\"keyword\">DESC</span>,</span><br><span class=\"line\">  <span class=\"built_in\">SUM</span>(index_length) <span class=\"keyword\">DESC</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">ANALYZE <span class=\"keyword\">TABLE</span> <span class=\"operator\">-</span> 更新统计信息</span><br><span class=\"line\">OPTIMIZE <span class=\"keyword\">TABLE</span> <span class=\"operator\">-</span> 表优化重组俗称清理碎片</span><br><span class=\"line\"></span><br><span class=\"line\">#造数据</span><br><span class=\"line\"><span class=\"keyword\">CREATE TABLE</span> `t_work_db01` (</span><br><span class=\"line\">  `id` <span class=\"type\">bigint</span> <span class=\"keyword\">NOT NULL</span> AUTO_INCREMENT,</span><br><span class=\"line\">  `name` <span class=\"type\">varchar</span>(<span class=\"number\">256</span>) <span class=\"keyword\">CHARACTER SET</span> utf8mb3 <span class=\"keyword\">COLLATE</span> utf8mb3_general_ci <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  `age` <span class=\"type\">int</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  `sex` <span class=\"type\">char</span>(<span class=\"number\">1</span>) <span class=\"keyword\">CHARACTER SET</span> utf8mb3 <span class=\"keyword\">COLLATE</span> utf8mb3_general_ci <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  `money` <span class=\"type\">float</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;金额&#x27;</span>,</span><br><span class=\"line\">  <span class=\"keyword\">PRIMARY KEY</span> (`id`)</span><br><span class=\"line\">) ENGINE<span class=\"operator\">=</span>InnoDB AUTO_INCREMENT<span class=\"operator\">=</span><span class=\"number\">100001</span> <span class=\"keyword\">DEFAULT</span> CHARSET<span class=\"operator\">=</span>utf8mb3 ROW_FORMAT<span class=\"operator\">=</span><span class=\"keyword\">DYNAMIC</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">DELIMITER $$</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> InsertDummyData()</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">    <span class=\"keyword\">DECLARE</span> i <span class=\"type\">INT</span> <span class=\"keyword\">DEFAULT</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    WHILE i <span class=\"operator\">&lt;</span> <span class=\"number\">100000</span> DO</span><br><span class=\"line\">        <span class=\"keyword\">INSERT INTO</span> t_work (NAME, age, sex, money)</span><br><span class=\"line\">        <span class=\"keyword\">VALUES</span> (</span><br><span class=\"line\">            <span class=\"comment\">-- 随机生成用户名（示例：User_XXXX）</span></span><br><span class=\"line\">            CONCAT(<span class=\"string\">&#x27;User_&#x27;</span>, <span class=\"built_in\">SUBSTRING</span>(MD5(RAND()) <span class=\"keyword\">FROM</span> <span class=\"number\">1</span> <span class=\"keyword\">FOR</span> <span class=\"number\">8</span>)),</span><br><span class=\"line\">            <span class=\"comment\">-- 随机年龄 18~65 岁</span></span><br><span class=\"line\">            <span class=\"built_in\">FLOOR</span>(<span class=\"number\">18</span> <span class=\"operator\">+</span> RAND() <span class=\"operator\">*</span> <span class=\"number\">48</span>),</span><br><span class=\"line\">            <span class=\"comment\">-- 随机性别（M/F）</span></span><br><span class=\"line\">            IF(RAND() <span class=\"operator\">&lt;</span> <span class=\"number\">0.5</span>, <span class=\"string\">&#x27;M&#x27;</span>, <span class=\"string\">&#x27;F&#x27;</span>),</span><br><span class=\"line\">            <span class=\"comment\">-- 随机金额 1000~10000（保留两位小数）</span></span><br><span class=\"line\">            ROUND(<span class=\"number\">1000</span> <span class=\"operator\">+</span> RAND() <span class=\"operator\">*</span> <span class=\"number\">9000</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">        );</span><br><span class=\"line\">        <span class=\"keyword\">SET</span> i <span class=\"operator\">=</span> i <span class=\"operator\">+</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">END</span> WHILE;</span><br><span class=\"line\"><span class=\"keyword\">END</span>$$</span><br><span class=\"line\">DELIMITER ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 执行存储过程</span></span><br><span class=\"line\"><span class=\"keyword\">CALL</span> InsertDummyData();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">PROCEDURE</span> IF <span class=\"keyword\">EXISTS</span> InsertDummyData;  <span class=\"comment\">-- 强制删除（如果存在）</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"mysql读写分离\"><a href=\"#mysql读写分离\" class=\"headerlink\" title=\"mysql读写分离\"></a>mysql读写分离</h3><p><a href=\"https://github.com/sysown/proxysql\">github</a> <br><br><a href=\"https://www.cnblogs.com/keme/p/12290977.html\">ProxySql</a><br><br><a href=\"https://www.cnblogs.com/ejiyuan/p/17156065.html\">MaxScale</a></p>\n<h3 id=\"mysql分表分库\"><a href=\"#mysql分表分库\" class=\"headerlink\" title=\"mysql分表分库\"></a>mysql分表分库</h3><p><a href=\"https://cloud.tencent.com/developer/article/2349899\">mycat</a></p>\n<h2 id=\"pgsql\"><a href=\"#pgsql\" class=\"headerlink\" title=\"pgsql\"></a>pgsql</h2><p><a href=\"https://www.sjkjc.com/postgresql/psql-commands/\">PostgreSQL psql 常用命令</a></p>\n<h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PUBLIC 是 PostgreSQL 数据库中一个特殊的角色组，在元数据表（pg_roles）中都查不到该角色，</span><br><span class=\"line\">数据库中所创建的角色都可以理解为是 PUBLIC 角色组成员。</span><br><span class=\"line\">而且对 PUBLIC 权限的继承完全不受 NOINHERIT 的控制，</span><br><span class=\"line\">一旦创建了一个拥有 login 权限的角色，它会立即继承 PUBLIC 角色组拥有的权限，</span><br><span class=\"line\">此时如果想通过 revoke（比如 revoke connect on database）来回收的话不会成功，</span><br><span class=\"line\">只能从 PUBLIC 组回收相关权限（比如 revoke connect on database from PUBLIC）</span><br><span class=\"line\"></span><br><span class=\"line\">REVOKE CONNECT ON DATABASE test FROM PUBLIC;</span><br><span class=\"line\">--这样普通用户就无法自由切换数据库，默认数据库下面有一个public的scheme</span><br><span class=\"line\"></span><br><span class=\"line\">MySQL 的 datadir ≈ PostgreSQL 的默认表空间 pg_default</span><br><span class=\"line\">PostgreSQL 的 pg_default 表空间对应默认数据目录（由参数 data_directory 配置），类似于 MySQL 的 datadir。</span><br><span class=\"line\">PostgreSQL 的数据库 ≈ MySQL 的实例（但更轻量）。</span><br><span class=\"line\">PostgreSQL 的模式 ≈ MySQL 的数据库</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"基本使用命令\"><a href=\"#基本使用命令\" class=\"headerlink\" title=\"基本使用命令\"></a>基本使用命令</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -id --name=pgsql -v postgre-data:/var/lib/postgresql/data -p 54222:5432 -e POSTGRES_PASSWORD=123456 -e LANG=C.UTF-8 bitnami/postgresql</span><br><span class=\"line\"></span><br><span class=\"line\">docker exec -it -uroot pgsql bash</span><br><span class=\"line\">psql -U postgres -W -n</span><br><span class=\"line\">cat .psql_history </span><br><span class=\"line\">psql -h host -p port -d dbname -U  user -W</span><br><span class=\"line\"></span><br><span class=\"line\">使用反斜线作为命令前缀.</span><br><span class=\"line\">  postgres=# \\db</span><br><span class=\"line\"># 输出的信息如下：</span><br><span class=\"line\">       List of tablespaces</span><br><span class=\"line\">    Name    |  Owner   | Location </span><br><span class=\"line\">------------+----------+----------</span><br><span class=\"line\"> pg_default | postgres | </span><br><span class=\"line\"> pg_global  | postgres | </span><br><span class=\"line\">(2 rows)</span><br><span class=\"line\"></span><br><span class=\"line\">退出    \\q</span><br><span class=\"line\"> 列出所有的数据库      \\l</span><br><span class=\"line\"> 列出所有的数据库的大小      \\l+</span><br><span class=\"line\"> 更改当前连接的数据库       \\c</span><br><span class=\"line\"> 列出当前数据库的连接信息    \\connect</span><br><span class=\"line\"> 列出当前数据库和连接的详细信息 \\conninfo</span><br><span class=\"line\"> 查看当前数据库里面的表和拥有者和表大小         \\dt+</span><br><span class=\"line\"> 展示所有用户           \\dg</span><br><span class=\"line\"> ​模式 \\dn</span><br><span class=\"line\"> 查看所有表名的列表             \\d</span><br><span class=\"line\"> 获取表结构                   \\da</span><br><span class=\"line\"> 展示所有用户               \\du</span><br><span class=\"line\"> 查看t_sms表的结构      \\d t_sms </span><br><span class=\"line\"> 展示数据库里面的所有的表         \\dt</span><br><span class=\"line\"> 列出所有的数据库的详细信息（包括数据库大小和字符格式）         \\l+</span><br><span class=\"line\"> 显示用户访问权限。                            \\z或\\dp</span><br><span class=\"line\"> 显示所有可设置的访问权限                     \\h GRAN</span><br><span class=\"line\"> 显示用户的对所有数据库表的详细访问权限     \\dp或者\\z</span><br><span class=\"line\"> 确认当前连接的用户为超级用户postgres，且该用户后创建角色和数据库的权限等     #select current_user;</span><br><span class=\"line\"> 在超级用户连接postgres后，设置不允许普通用户a连接数据库         #alter role a nologin;</span><br><span class=\"line\"> ​</span><br><span class=\"line\"> 使用普通用户a连接数据库正常                   #\\c highgo a</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">快速查看当前所有用户：\\du</span><br><span class=\"line\">查看详细用户信息：select * from pg_user;</span><br><span class=\"line\">查看详细角色信息：select * from pg_roles;</span><br><span class=\"line\">查看当前登录用户：select user;</span><br><span class=\"line\">一般建议先创建用户然后使用这个用户去创建数据库模式，因为数据库那个用户创建的默认Owner就是这个用户</span><br><span class=\"line\">创建用户：CREATE USER $user_name PASSWORD &#x27;$password&#x27;;</span><br><span class=\"line\">创建角色：CREATE ROLE $role_name;</span><br><span class=\"line\"> </span><br><span class=\"line\">修改用户与角色：ALTER USER[ROLE] $user_name </span><br><span class=\"line\">        e.g.</span><br><span class=\"line\">        //修改用户名：ALTER USER U2 RENAME TO U22;</span><br><span class=\"line\">        //修改用户的密码：ALTER USER U22 PASSWORD&#x27;U22;</span><br><span class=\"line\">        //修改用户的权限：ALTER USER u22 CREATEROLE;</span><br><span class=\"line\">        //修改数据库 testdb中的参数重设为默认值：ALTER USER u22 IN DATABASE testdb RESET all1;</span><br><span class=\"line\">        //修改角色的名字：ALTER ROLE dev RENAME TO dev1;</span><br><span class=\"line\">        //修改角色的权限：ALTER ROLE dev1 SUPERUSER;</span><br><span class=\"line\">        //修改角色的权限：ALTER ROLE dev1 LOGIN;</span><br><span class=\"line\"> </span><br><span class=\"line\">删除用户与角色：DROP USER[ROLE] [IF EXISTS] $user_name</span><br><span class=\"line\"> </span><br><span class=\"line\">授权用户某个角色:GRANT $role_name TO $user_name;    (授权后set role $role_name启用生效）</span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">create user test with password &#x27;rong &#x27;;</span><br><span class=\"line\">CREATE DATABASE testdb OWNER test;</span><br><span class=\"line\">GRANT ALL PRIVILEGES ON DATABASE testdb TO test;</span><br><span class=\"line\">alter user qh with password &#x27;123&#x27;;</span><br><span class=\"line\">\\password qh;  //需要输入两次密码（推荐）</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"manggodb\"><a href=\"#manggodb\" class=\"headerlink\" title=\"manggodb\"></a>manggodb</h2><p><a href=\"https://www.runoob.com/mongodb/mongodb-tutorial.html\">详细使用教程</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -itd --name mongo -v /docker_volume/mongodb/data:/data/db -p 27017:27017 mongo:4.4 --auth</span><br><span class=\"line\">–auth：需要密码才能访问容器服务；</span><br><span class=\"line\">mongodb安装好后第一次进入是不需要密码的，也没有任何用户，通过shell命令可直接进入</span><br><span class=\"line\">use admin 使用admin数据库并进行验证，如果不验证，是做不了任何操作的</span><br><span class=\"line\">db.auth(&quot;root&quot;,&quot;123456&quot;)  返回1表示成功 </span><br><span class=\"line\">验证之后还是做不了操作，因为root只有用户管理权限，下面创建用户，用户都跟着库走</span><br><span class=\"line\">use mydb </span><br><span class=\"line\">db.createUser(&#123;user: &quot;admin&quot;,pwd: &quot;123456&quot;,roles: [&#123; role: &quot;readWrite&quot;, db: &quot;mydb&quot; &#125;]&#125;) </span><br><span class=\"line\">通过admin用户增删改查</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">docker exec -it mongo mongo admin</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">db.createUser(&#123; user:&#x27;root&#x27;,pwd:&#x27;123456&#x27;,roles:[ &#123; role:&#x27;userAdminAnyDatabase&#x27;, db: &#x27;admin&#x27;&#125;,&#x27;readWriteAnyDatabase&#x27;]&#125;);</span><br><span class=\"line\">【role:‘userAdminAnyDatabase’】：只在admin数据库中可用，赋予用户所有数据库的userAdmin权限</span><br><span class=\"line\">【db: ‘admin’】：可操作的数据库</span><br><span class=\"line\">【‘readWriteAnyDatabase’】：赋予用户读写权限</span><br><span class=\"line\">mongoDB 没有无敌用户root，只有能管理用户的用户 userAdminAnyDatabase </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">SQL 术语/概念\tMongoDB 术语/概念   解释/说明</span><br><span class=\"line\">database\t    database\t       数据库</span><br><span class=\"line\">table\t        collection\t       数据库表/集合</span><br><span class=\"line\">row\t            document\t       数据记录行/文档</span><br><span class=\"line\">column\t        field\t           数据字段/域</span><br><span class=\"line\">index\t        index\t           索引</span><br><span class=\"line\">table joins\t \t表连接,            MongoDB不支持</span><br><span class=\"line\">primary key\t    primary key\t       主键,MongoDB自动将_id字段设置为主键</span><br></pre></td></tr></table></figure>\n<h2 id=\"sqlserver\"><a href=\"#sqlserver\" class=\"headerlink\" title=\"sqlserver\"></a>sqlserver</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d \\</span><br><span class=\"line\">  --name sqlserver --user=root \\</span><br><span class=\"line\">  -e &quot;ACCEPT_EULA=Y&quot; \\</span><br><span class=\"line\">  -e &quot;SA_PASSWORD=Testing@123&quot;  -p 1433:1433  -v /data/sqlserver:/var/opt/mssql \\</span><br><span class=\"line\">  --cap-add SYS_PTRACE mcr.microsoft.com/mssql/server:2019-latest</span><br><span class=\"line\"></span><br><span class=\"line\">  /opt/mssql-tools18/bin/sqlcmd -S localhost -U SA -P &quot;Testing@123&quot; -C</span><br><span class=\"line\">  </span><br><span class=\"line\">-- 数据库级</span><br><span class=\"line\">  SELECT name, type_desc FROM sys.database_principals WHERE type IN (&#x27;S&#x27;, &#x27;U&#x27;, &#x27;G&#x27;);</span><br><span class=\"line\">  select * from master.dbo.SysDatabases</span><br><span class=\"line\">  --服务器级</span><br><span class=\"line\">  SELECT name, type_desc FROM sys.server_principals WHERE type IN (&#x27;S&#x27;, &#x27;U&#x27;, &#x27;G&#x27;);</span><br><span class=\"line\">  go</span><br><span class=\"line\">  SELECT DB_NAME() AS [CurrentDatabase];</span><br><span class=\"line\">  USE master; SELECT name FROM sys.schemas</span><br><span class=\"line\">  USE master; SELECT name FROM sys.tables</span><br><span class=\"line\">  SELECT name, USER_NAME(principal_id) FROM sys.schemas;</span><br><span class=\"line\"></span><br><span class=\"line\">CREATE TABLE Users (    UserID INT PRIMARY KEY IDENTITY(1,1),     UserName NVARCHAR(50) NOT NULL,   Email NVARCHAR(100) NOT NULL, RegistrationDate DATETIME DEFAULT GETDATE(), IsActive BIT DEFAULT 1);</span><br><span class=\"line\">INSERT INTO Users (UserName, Email) VALUES     (&#x27;王五&#x27;, &#x27;wangwu@example.com&#x27;),    (&#x27;赵六&#x27;, &#x27;zhaoliu@example.com&#x27;),    (&#x27;孙七&#x27;, &#x27;sunqi@example.com&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">--cdc</span><br><span class=\"line\">use y_test</span><br><span class=\"line\">EXEC sys.sp_cdc_enable_db;</span><br><span class=\"line\">go</span><br><span class=\"line\"> SELECT name AS [y_test],    is_cdc_enabled AS [CDCEnabled]FROM   sys.databases WHERE     name = DB_NAME(); </span><br></pre></td></tr></table></figure>\n"},{"title":"部署本地大模型","date":"2025-05-12T03:13:37.000Z","_content":"# 模型框架\n>1. 企业级服务，SGLang 是不二之选：凭借卓越的性能，其吞吐量和结构化输出能力堪称行业翘楚，为企业级应用筑牢根基。<br>\nhttps://docs.sglang.ai/start/install.html<br>\nhttps://github.com/sgl-project/sglang<br>\n>2. 在线高并发场景，VLLM 独占鳌头：凭借动态批处理和先进的内存管理技术，确保服务在高并发压力下依然稳定高效，保障业务流畅运行。<br>\nhttps://docs.vllm.com.cn/en/latest/getting_started/installation/gpu.html<br>\nhttps://github.com/vllm-project/vllm<br>\n>3. 个人开发领域，Ollama 崭露头角：简单易用，跨平台支持搭配丰富的模型库，让创意灵感瞬间触手可及，助力个人开发者快速实现想法。<br>\nhttps://github.com/ollama/ollama?tab=readme-ov-file\n\n# LLM webui\n>1. Dify：适合企业开发复杂 AI 应用，如智能客服、合同处理系统等，支持多模型协作和业务流程自动化。\nhttps://dify.ai/zh<br>\nhttps://github.com/langgenius/dify/blob/main/README_CN.md<br>\n>2. Open-WebUI：适合个人开发者快速测试本地模型（如 Ollama 部署的 Llama3），或作为 ChatGPT 替代品进行日常交互。<br>\nhttps://docs.openwebui.com/<br>\n>3. Chatbox：面向非技术用户，提供无需代码的对话界面，支持快速体验多模型（如 GPT、Claude）的聊天能力。<br>\nhttps://chatboxai.app/zh<br>\nhttps://github.com/chatboxai/chatbox\n\n# 部署\n* 由于vllm和sglang需要资源较多，我们这里采用ollama + openwebui + deepseek\n* 前提条件服务器已经配置了驱动和cuda nvidia-smi（驱动命令）nvcc（cuda命令）\n* https://www.nvidia.cn/drivers/lookup/ 显卡下载run脚本运行\n* https://developer.nvidia.com/cuda-toolkit-archive cuda下载\n\n## 安装ollama\n```shell\n#https://github.com/ollama/ollama/tree/main/docs\n#OLLAMA_MODELS 模型下载位置默认/usr/share/ollama/.ollama/models\n#OLLAMA_HOST 监控地址默认127.0.0.1\ncurl -fsSL https://ollama.com/install.sh | sh\nsed -i '/^Environment=\"PATH=/a Environment=\"OLLAMA_HOST=0.0.0.0\"' /etc/systemd/system/ollama.service\nsystemctl daemon-reload\nsystemctl restart ollama.service\nollama run deepseek-r1\n```\n## 安装docker和nvidia-container-toolkit\n```shell\n#添加Docker软件包源\n#添加Docker软件包源\nsudo wget -O /etc/yum.repos.d/docker-ce.repo http://mirrors.cloud.aliyuncs.com/docker-ce/linux/centos/docker-ce.repo\nsudo sed -i 's|https://mirrors.aliyun.com|http://mirrors.cloud.aliyuncs.com|g' /etc/yum.repos.d/docker-ce.repo\n#安装Docker社区版本，容器运行时containerd.io，以及Docker构建和Compose插件\nsudo yum -y install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n#启动Docker\nsudo systemctl start docker\n#设置Docker守护进程在系统启动时自动启动\nsudo systemctl enable docker\n#配置生产存储库\ncurl -s -L https://nvidia.github.io/libnvidia-container/stable/rpm/nvidia-container-toolkit.repo | \\\n  sudo tee /etc/yum.repos.d/nvidia-container-toolkit.repo\n#安装 NVIDIA Container Toolkit 软件包\nsudo yum install -y nvidia-container-toolkit\n#重启docker\nsudo systemctl restart docker\n```\n## 安装webui\n```shell\n#可以通过-e OLLAMA_BASE_URL 配置ollama地址,进入web界面也可以配置,镜像差不多9G,在国外需要配置加速源\ndocker run -d -p 3000:8080 --gpus all -v open-webui:/app/backend/data --name open-webui ghcr.io/open-webui/open-webui:cuda\n```\n\n# 额外\n* dify功能比Open-WebUI更强大，支持agent和工作流和很多插件，如果不想只单独通过webui来交互建议使用dify\n```shell\ncurl -SL https://github.com/docker/compose/releases/download/v2.30.3/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose\n#将可执行权限赋予安装目标路径中的独立二进制文件\nsudo chmod +x /usr/local/bin/docker-compose\nsudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose\ngit clone https://github.com/langgenius/dify.git\ncd dify\ncd docker\ncp .env.example .env\ndocker compose up -d\n```\n","source":"_posts/部署本地大模型.md","raw":"---\ntitle: 部署本地大模型\ndate: 2025-05-12 11:13:37\ntags: llm\n---\n# 模型框架\n>1. 企业级服务，SGLang 是不二之选：凭借卓越的性能，其吞吐量和结构化输出能力堪称行业翘楚，为企业级应用筑牢根基。<br>\nhttps://docs.sglang.ai/start/install.html<br>\nhttps://github.com/sgl-project/sglang<br>\n>2. 在线高并发场景，VLLM 独占鳌头：凭借动态批处理和先进的内存管理技术，确保服务在高并发压力下依然稳定高效，保障业务流畅运行。<br>\nhttps://docs.vllm.com.cn/en/latest/getting_started/installation/gpu.html<br>\nhttps://github.com/vllm-project/vllm<br>\n>3. 个人开发领域，Ollama 崭露头角：简单易用，跨平台支持搭配丰富的模型库，让创意灵感瞬间触手可及，助力个人开发者快速实现想法。<br>\nhttps://github.com/ollama/ollama?tab=readme-ov-file\n\n# LLM webui\n>1. Dify：适合企业开发复杂 AI 应用，如智能客服、合同处理系统等，支持多模型协作和业务流程自动化。\nhttps://dify.ai/zh<br>\nhttps://github.com/langgenius/dify/blob/main/README_CN.md<br>\n>2. Open-WebUI：适合个人开发者快速测试本地模型（如 Ollama 部署的 Llama3），或作为 ChatGPT 替代品进行日常交互。<br>\nhttps://docs.openwebui.com/<br>\n>3. Chatbox：面向非技术用户，提供无需代码的对话界面，支持快速体验多模型（如 GPT、Claude）的聊天能力。<br>\nhttps://chatboxai.app/zh<br>\nhttps://github.com/chatboxai/chatbox\n\n# 部署\n* 由于vllm和sglang需要资源较多，我们这里采用ollama + openwebui + deepseek\n* 前提条件服务器已经配置了驱动和cuda nvidia-smi（驱动命令）nvcc（cuda命令）\n* https://www.nvidia.cn/drivers/lookup/ 显卡下载run脚本运行\n* https://developer.nvidia.com/cuda-toolkit-archive cuda下载\n\n## 安装ollama\n```shell\n#https://github.com/ollama/ollama/tree/main/docs\n#OLLAMA_MODELS 模型下载位置默认/usr/share/ollama/.ollama/models\n#OLLAMA_HOST 监控地址默认127.0.0.1\ncurl -fsSL https://ollama.com/install.sh | sh\nsed -i '/^Environment=\"PATH=/a Environment=\"OLLAMA_HOST=0.0.0.0\"' /etc/systemd/system/ollama.service\nsystemctl daemon-reload\nsystemctl restart ollama.service\nollama run deepseek-r1\n```\n## 安装docker和nvidia-container-toolkit\n```shell\n#添加Docker软件包源\n#添加Docker软件包源\nsudo wget -O /etc/yum.repos.d/docker-ce.repo http://mirrors.cloud.aliyuncs.com/docker-ce/linux/centos/docker-ce.repo\nsudo sed -i 's|https://mirrors.aliyun.com|http://mirrors.cloud.aliyuncs.com|g' /etc/yum.repos.d/docker-ce.repo\n#安装Docker社区版本，容器运行时containerd.io，以及Docker构建和Compose插件\nsudo yum -y install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n#启动Docker\nsudo systemctl start docker\n#设置Docker守护进程在系统启动时自动启动\nsudo systemctl enable docker\n#配置生产存储库\ncurl -s -L https://nvidia.github.io/libnvidia-container/stable/rpm/nvidia-container-toolkit.repo | \\\n  sudo tee /etc/yum.repos.d/nvidia-container-toolkit.repo\n#安装 NVIDIA Container Toolkit 软件包\nsudo yum install -y nvidia-container-toolkit\n#重启docker\nsudo systemctl restart docker\n```\n## 安装webui\n```shell\n#可以通过-e OLLAMA_BASE_URL 配置ollama地址,进入web界面也可以配置,镜像差不多9G,在国外需要配置加速源\ndocker run -d -p 3000:8080 --gpus all -v open-webui:/app/backend/data --name open-webui ghcr.io/open-webui/open-webui:cuda\n```\n\n# 额外\n* dify功能比Open-WebUI更强大，支持agent和工作流和很多插件，如果不想只单独通过webui来交互建议使用dify\n```shell\ncurl -SL https://github.com/docker/compose/releases/download/v2.30.3/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose\n#将可执行权限赋予安装目标路径中的独立二进制文件\nsudo chmod +x /usr/local/bin/docker-compose\nsudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose\ngit clone https://github.com/langgenius/dify.git\ncd dify\ncd docker\ncp .env.example .env\ndocker compose up -d\n```\n","slug":"部署本地大模型","published":1,"updated":"2025-07-30T08:38:33.417Z","comments":1,"layout":"post","photos":[],"_id":"cmdppvvw60019lpoden1pgu56","content":"<h1 id=\"模型框架\"><a href=\"#模型框架\" class=\"headerlink\" title=\"模型框架\"></a>模型框架</h1><blockquote>\n<ol>\n<li>企业级服务，SGLang 是不二之选：凭借卓越的性能，其吞吐量和结构化输出能力堪称行业翘楚，为企业级应用筑牢根基。<br><br><a href=\"https://docs.sglang.ai/start/install.html\">https://docs.sglang.ai/start/install.html</a><br><br><a href=\"https://github.com/sgl-project/sglang\">https://github.com/sgl-project/sglang</a><br></li>\n<li>在线高并发场景，VLLM 独占鳌头：凭借动态批处理和先进的内存管理技术，确保服务在高并发压力下依然稳定高效，保障业务流畅运行。<br><br><a href=\"https://docs.vllm.com.cn/en/latest/getting_started/installation/gpu.html\">https://docs.vllm.com.cn/en/latest/getting_started/installation/gpu.html</a><br><br><a href=\"https://github.com/vllm-project/vllm\">https://github.com/vllm-project/vllm</a><br></li>\n<li>个人开发领域，Ollama 崭露头角：简单易用，跨平台支持搭配丰富的模型库，让创意灵感瞬间触手可及，助力个人开发者快速实现想法。<br><br><a href=\"https://github.com/ollama/ollama?tab=readme-ov-file\">https://github.com/ollama/ollama?tab=readme-ov-file</a></li>\n</ol>\n</blockquote>\n<h1 id=\"LLM-webui\"><a href=\"#LLM-webui\" class=\"headerlink\" title=\"LLM webui\"></a>LLM webui</h1><blockquote>\n<ol>\n<li>Dify：适合企业开发复杂 AI 应用，如智能客服、合同处理系统等，支持多模型协作和业务流程自动化。<br><a href=\"https://dify.ai/zh\">https://dify.ai/zh</a><br><br><a href=\"https://github.com/langgenius/dify/blob/main/README_CN.md\">https://github.com/langgenius/dify/blob/main/README_CN.md</a><br></li>\n<li>Open-WebUI：适合个人开发者快速测试本地模型（如 Ollama 部署的 Llama3），或作为 ChatGPT 替代品进行日常交互。<br><br><a href=\"https://docs.openwebui.com/\">https://docs.openwebui.com/</a><br></li>\n<li>Chatbox：面向非技术用户，提供无需代码的对话界面，支持快速体验多模型（如 GPT、Claude）的聊天能力。<br><br><a href=\"https://chatboxai.app/zh\">https://chatboxai.app/zh</a><br><br><a href=\"https://github.com/chatboxai/chatbox\">https://github.com/chatboxai/chatbox</a></li>\n</ol>\n</blockquote>\n<h1 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h1><ul>\n<li>由于vllm和sglang需要资源较多，我们这里采用ollama + openwebui + deepseek</li>\n<li>前提条件服务器已经配置了驱动和cuda nvidia-smi（驱动命令）nvcc（cuda命令）</li>\n<li><a href=\"https://www.nvidia.cn/drivers/lookup/\">https://www.nvidia.cn/drivers/lookup/</a> 显卡下载run脚本运行</li>\n<li><a href=\"https://developer.nvidia.com/cuda-toolkit-archive\">https://developer.nvidia.com/cuda-toolkit-archive</a> cuda下载</li>\n</ul>\n<h2 id=\"安装ollama\"><a href=\"#安装ollama\" class=\"headerlink\" title=\"安装ollama\"></a>安装ollama</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">https://github.com/ollama/ollama/tree/main/docs</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">OLLAMA_MODELS 模型下载位置默认/usr/share/ollama/.ollama/models</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">OLLAMA_HOST 监控地址默认127.0.0.1</span></span><br><span class=\"line\">curl -fsSL https://ollama.com/install.sh | sh</span><br><span class=\"line\">sed -i &#x27;/^Environment=&quot;PATH=/a Environment=&quot;OLLAMA_HOST=0.0.0.0&quot;&#x27; /etc/systemd/system/ollama.service</span><br><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">systemctl restart ollama.service</span><br><span class=\"line\">ollama run deepseek-r1</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装docker和nvidia-container-toolkit\"><a href=\"#安装docker和nvidia-container-toolkit\" class=\"headerlink\" title=\"安装docker和nvidia-container-toolkit\"></a>安装docker和nvidia-container-toolkit</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">添加Docker软件包源</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">添加Docker软件包源</span></span><br><span class=\"line\">sudo wget -O /etc/yum.repos.d/docker-ce.repo http://mirrors.cloud.aliyuncs.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class=\"line\">sudo sed -i &#x27;s|https://mirrors.aliyun.com|http://mirrors.cloud.aliyuncs.com|g&#x27; /etc/yum.repos.d/docker-ce.repo</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">安装Docker社区版本，容器运行时containerd.io，以及Docker构建和Compose插件</span></span><br><span class=\"line\">sudo yum -y install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">启动Docker</span></span><br><span class=\"line\">sudo systemctl start docker</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">设置Docker守护进程在系统启动时自动启动</span></span><br><span class=\"line\">sudo systemctl enable docker</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">配置生产存储库</span></span><br><span class=\"line\">curl -s -L https://nvidia.github.io/libnvidia-container/stable/rpm/nvidia-container-toolkit.repo | \\</span><br><span class=\"line\">  sudo tee /etc/yum.repos.d/nvidia-container-toolkit.repo</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">安装 NVIDIA Container Toolkit 软件包</span></span><br><span class=\"line\">sudo yum install -y nvidia-container-toolkit</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">重启docker</span></span><br><span class=\"line\">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装webui\"><a href=\"#安装webui\" class=\"headerlink\" title=\"安装webui\"></a>安装webui</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">可以通过-e OLLAMA_BASE_URL 配置ollama地址,进入web界面也可以配置,镜像差不多9G,在国外需要配置加速源</span></span><br><span class=\"line\">docker run -d -p 3000:8080 --gpus all -v open-webui:/app/backend/data --name open-webui ghcr.io/open-webui/open-webui:cuda</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"额外\"><a href=\"#额外\" class=\"headerlink\" title=\"额外\"></a>额外</h1><ul>\n<li>dify功能比Open-WebUI更强大，支持agent和工作流和很多插件，如果不想只单独通过webui来交互建议使用dify<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -SL https://github.com/docker/compose/releases/download/v2.30.3/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">将可执行权限赋予安装目标路径中的独立二进制文件</span></span><br><span class=\"line\">sudo chmod +x /usr/local/bin/docker-compose</span><br><span class=\"line\">sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose</span><br><span class=\"line\">git clone https://github.com/langgenius/dify.git</span><br><span class=\"line\">cd dify</span><br><span class=\"line\">cd docker</span><br><span class=\"line\">cp .env.example .env</span><br><span class=\"line\">docker compose up -d</span><br></pre></td></tr></table></figure></li>\n</ul>\n","excerpt":"","more":"<h1 id=\"模型框架\"><a href=\"#模型框架\" class=\"headerlink\" title=\"模型框架\"></a>模型框架</h1><blockquote>\n<ol>\n<li>企业级服务，SGLang 是不二之选：凭借卓越的性能，其吞吐量和结构化输出能力堪称行业翘楚，为企业级应用筑牢根基。<br><br><a href=\"https://docs.sglang.ai/start/install.html\">https://docs.sglang.ai/start/install.html</a><br><br><a href=\"https://github.com/sgl-project/sglang\">https://github.com/sgl-project/sglang</a><br></li>\n<li>在线高并发场景，VLLM 独占鳌头：凭借动态批处理和先进的内存管理技术，确保服务在高并发压力下依然稳定高效，保障业务流畅运行。<br><br><a href=\"https://docs.vllm.com.cn/en/latest/getting_started/installation/gpu.html\">https://docs.vllm.com.cn/en/latest/getting_started/installation/gpu.html</a><br><br><a href=\"https://github.com/vllm-project/vllm\">https://github.com/vllm-project/vllm</a><br></li>\n<li>个人开发领域，Ollama 崭露头角：简单易用，跨平台支持搭配丰富的模型库，让创意灵感瞬间触手可及，助力个人开发者快速实现想法。<br><br><a href=\"https://github.com/ollama/ollama?tab=readme-ov-file\">https://github.com/ollama/ollama?tab=readme-ov-file</a></li>\n</ol>\n</blockquote>\n<h1 id=\"LLM-webui\"><a href=\"#LLM-webui\" class=\"headerlink\" title=\"LLM webui\"></a>LLM webui</h1><blockquote>\n<ol>\n<li>Dify：适合企业开发复杂 AI 应用，如智能客服、合同处理系统等，支持多模型协作和业务流程自动化。<br><a href=\"https://dify.ai/zh\">https://dify.ai/zh</a><br><br><a href=\"https://github.com/langgenius/dify/blob/main/README_CN.md\">https://github.com/langgenius/dify/blob/main/README_CN.md</a><br></li>\n<li>Open-WebUI：适合个人开发者快速测试本地模型（如 Ollama 部署的 Llama3），或作为 ChatGPT 替代品进行日常交互。<br><br><a href=\"https://docs.openwebui.com/\">https://docs.openwebui.com/</a><br></li>\n<li>Chatbox：面向非技术用户，提供无需代码的对话界面，支持快速体验多模型（如 GPT、Claude）的聊天能力。<br><br><a href=\"https://chatboxai.app/zh\">https://chatboxai.app/zh</a><br><br><a href=\"https://github.com/chatboxai/chatbox\">https://github.com/chatboxai/chatbox</a></li>\n</ol>\n</blockquote>\n<h1 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h1><ul>\n<li>由于vllm和sglang需要资源较多，我们这里采用ollama + openwebui + deepseek</li>\n<li>前提条件服务器已经配置了驱动和cuda nvidia-smi（驱动命令）nvcc（cuda命令）</li>\n<li><a href=\"https://www.nvidia.cn/drivers/lookup/\">https://www.nvidia.cn/drivers/lookup/</a> 显卡下载run脚本运行</li>\n<li><a href=\"https://developer.nvidia.com/cuda-toolkit-archive\">https://developer.nvidia.com/cuda-toolkit-archive</a> cuda下载</li>\n</ul>\n<h2 id=\"安装ollama\"><a href=\"#安装ollama\" class=\"headerlink\" title=\"安装ollama\"></a>安装ollama</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">https://github.com/ollama/ollama/tree/main/docs</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">OLLAMA_MODELS 模型下载位置默认/usr/share/ollama/.ollama/models</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">OLLAMA_HOST 监控地址默认127.0.0.1</span></span><br><span class=\"line\">curl -fsSL https://ollama.com/install.sh | sh</span><br><span class=\"line\">sed -i &#x27;/^Environment=&quot;PATH=/a Environment=&quot;OLLAMA_HOST=0.0.0.0&quot;&#x27; /etc/systemd/system/ollama.service</span><br><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">systemctl restart ollama.service</span><br><span class=\"line\">ollama run deepseek-r1</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装docker和nvidia-container-toolkit\"><a href=\"#安装docker和nvidia-container-toolkit\" class=\"headerlink\" title=\"安装docker和nvidia-container-toolkit\"></a>安装docker和nvidia-container-toolkit</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">添加Docker软件包源</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">添加Docker软件包源</span></span><br><span class=\"line\">sudo wget -O /etc/yum.repos.d/docker-ce.repo http://mirrors.cloud.aliyuncs.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class=\"line\">sudo sed -i &#x27;s|https://mirrors.aliyun.com|http://mirrors.cloud.aliyuncs.com|g&#x27; /etc/yum.repos.d/docker-ce.repo</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">安装Docker社区版本，容器运行时containerd.io，以及Docker构建和Compose插件</span></span><br><span class=\"line\">sudo yum -y install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">启动Docker</span></span><br><span class=\"line\">sudo systemctl start docker</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">设置Docker守护进程在系统启动时自动启动</span></span><br><span class=\"line\">sudo systemctl enable docker</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">配置生产存储库</span></span><br><span class=\"line\">curl -s -L https://nvidia.github.io/libnvidia-container/stable/rpm/nvidia-container-toolkit.repo | \\</span><br><span class=\"line\">  sudo tee /etc/yum.repos.d/nvidia-container-toolkit.repo</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">安装 NVIDIA Container Toolkit 软件包</span></span><br><span class=\"line\">sudo yum install -y nvidia-container-toolkit</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">重启docker</span></span><br><span class=\"line\">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装webui\"><a href=\"#安装webui\" class=\"headerlink\" title=\"安装webui\"></a>安装webui</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">可以通过-e OLLAMA_BASE_URL 配置ollama地址,进入web界面也可以配置,镜像差不多9G,在国外需要配置加速源</span></span><br><span class=\"line\">docker run -d -p 3000:8080 --gpus all -v open-webui:/app/backend/data --name open-webui ghcr.io/open-webui/open-webui:cuda</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"额外\"><a href=\"#额外\" class=\"headerlink\" title=\"额外\"></a>额外</h1><ul>\n<li>dify功能比Open-WebUI更强大，支持agent和工作流和很多插件，如果不想只单独通过webui来交互建议使用dify<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -SL https://github.com/docker/compose/releases/download/v2.30.3/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">将可执行权限赋予安装目标路径中的独立二进制文件</span></span><br><span class=\"line\">sudo chmod +x /usr/local/bin/docker-compose</span><br><span class=\"line\">sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose</span><br><span class=\"line\">git clone https://github.com/langgenius/dify.git</span><br><span class=\"line\">cd dify</span><br><span class=\"line\">cd docker</span><br><span class=\"line\">cp .env.example .env</span><br><span class=\"line\">docker compose up -d</span><br></pre></td></tr></table></figure></li>\n</ul>\n"}],"PostAsset":[{"_id":"source/_posts/alertmanager/image.png","slug":"image.png","post":"cmdppvvve0001lpodb82v5cme","modified":0,"renderable":0},{"_id":"source/_posts/ftp/image-1.png","slug":"image-1.png","post":"cmdppvvvm0006lpodbv1z61jd","modified":0,"renderable":0},{"_id":"source/_posts/ftp/image.png","slug":"image.png","post":"cmdppvvvm0006lpodbv1z61jd","modified":0,"renderable":0},{"_id":"source/_posts/iptables防止ddos-cc/image-1.png","slug":"image-1.png","post":"cmdppvvvn0008lpod0qp2aerk","modified":0,"renderable":0},{"_id":"source/_posts/iptables防止ddos-cc/image-2.png","slug":"image-2.png","post":"cmdppvvvn0008lpod0qp2aerk","modified":0,"renderable":0},{"_id":"source/_posts/iptables防止ddos-cc/image.png","slug":"image.png","post":"cmdppvvvn0008lpod0qp2aerk","modified":0,"renderable":0},{"_id":"source/_posts/openvpn/image-1.png","slug":"image-1.png","post":"cmdppvvvs000flpod2et6ddum","modified":0,"renderable":0},{"_id":"source/_posts/openvpn/image-2.png","slug":"image-2.png","post":"cmdppvvvs000flpod2et6ddum","modified":0,"renderable":0},{"_id":"source/_posts/openvpn/image-3.png","slug":"image-3.png","post":"cmdppvvvs000flpod2et6ddum","modified":0,"renderable":0},{"_id":"source/_posts/openvpn/image.png","slug":"image.png","post":"cmdppvvvs000flpod2et6ddum","modified":0,"renderable":0},{"_id":"source/_posts/prometheus/image-1.png","slug":"image-1.png","post":"cmdppvvvs000glpodemuaahmv","modified":0,"renderable":0},{"_id":"source/_posts/prometheus/image-10.png","slug":"image-10.png","post":"cmdppvvvs000glpodemuaahmv","modified":0,"renderable":0},{"_id":"source/_posts/prometheus/image-11.png","slug":"image-11.png","post":"cmdppvvvs000glpodemuaahmv","modified":0,"renderable":0},{"_id":"source/_posts/prometheus/image-12.png","slug":"image-12.png","post":"cmdppvvvs000glpodemuaahmv","modified":0,"renderable":0},{"_id":"source/_posts/prometheus/image-13.png","slug":"image-13.png","post":"cmdppvvvs000glpodemuaahmv","modified":0,"renderable":0},{"_id":"source/_posts/prometheus/image-14.png","slug":"image-14.png","post":"cmdppvvvs000glpodemuaahmv","modified":0,"renderable":0},{"_id":"source/_posts/prometheus/image-15.png","slug":"image-15.png","post":"cmdppvvvs000glpodemuaahmv","modified":0,"renderable":0},{"_id":"source/_posts/prometheus/image-16.png","slug":"image-16.png","post":"cmdppvvvs000glpodemuaahmv","modified":0,"renderable":0},{"_id":"source/_posts/prometheus/image-17.png","slug":"image-17.png","post":"cmdppvvvs000glpodemuaahmv","modified":0,"renderable":0},{"_id":"source/_posts/prometheus/image-18.png","slug":"image-18.png","post":"cmdppvvvs000glpodemuaahmv","modified":0,"renderable":0},{"_id":"source/_posts/prometheus/image-19.png","slug":"image-19.png","post":"cmdppvvvs000glpodemuaahmv","modified":0,"renderable":0},{"_id":"source/_posts/prometheus/image-2.png","slug":"image-2.png","post":"cmdppvvvs000glpodemuaahmv","modified":0,"renderable":0},{"_id":"source/_posts/prometheus/image-20.png","slug":"image-20.png","post":"cmdppvvvs000glpodemuaahmv","modified":0,"renderable":0},{"_id":"source/_posts/prometheus/image-21.png","slug":"image-21.png","post":"cmdppvvvs000glpodemuaahmv","modified":0,"renderable":0},{"_id":"source/_posts/prometheus/image-22.png","slug":"image-22.png","post":"cmdppvvvs000glpodemuaahmv","modified":0,"renderable":0},{"_id":"source/_posts/prometheus/image-23.png","slug":"image-23.png","post":"cmdppvvvs000glpodemuaahmv","modified":0,"renderable":0},{"_id":"source/_posts/prometheus/image-24.png","slug":"image-24.png","post":"cmdppvvvs000glpodemuaahmv","modified":0,"renderable":0},{"_id":"source/_posts/prometheus/image-3.png","slug":"image-3.png","post":"cmdppvvvs000glpodemuaahmv","modified":0,"renderable":0},{"_id":"source/_posts/prometheus/image-4.png","slug":"image-4.png","post":"cmdppvvvs000glpodemuaahmv","modified":0,"renderable":0},{"_id":"source/_posts/prometheus/image-5.png","slug":"image-5.png","post":"cmdppvvvs000glpodemuaahmv","modified":0,"renderable":0},{"_id":"source/_posts/prometheus/image-6.png","slug":"image-6.png","post":"cmdppvvvs000glpodemuaahmv","modified":0,"renderable":0},{"_id":"source/_posts/prometheus/image-7.png","slug":"image-7.png","post":"cmdppvvvs000glpodemuaahmv","modified":0,"renderable":0},{"_id":"source/_posts/prometheus/image-8.png","slug":"image-8.png","post":"cmdppvvvs000glpodemuaahmv","modified":0,"renderable":0},{"_id":"source/_posts/prometheus/image-9.png","slug":"image-9.png","post":"cmdppvvvs000glpodemuaahmv","modified":0,"renderable":0},{"_id":"source/_posts/prometheus/image.png","slug":"image.png","post":"cmdppvvvs000glpodemuaahmv","modified":0,"renderable":0},{"_id":"source/_posts/screen/image.png","slug":"image.png","post":"cmdppvvvv000jlpod8p7465dy","modified":0,"renderable":0},{"_id":"source/_posts/tcp/image.png","slug":"image.png","post":"cmdppvvvw000mlpod628l64wc","modified":0,"renderable":0},{"_id":"source/_posts/使用kubekey快速安装k8s/image.png","slug":"image.png","post":"cmdppvvvx000plpod1af5b0vh","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cmdppvvve0001lpodb82v5cme","category_id":"cmdppvvvj0004lpod7svp6rkw","_id":"cmdppvvvr000dlpodb38q4xkf"},{"post_id":"cmdppvvvi0003lpodewydh19a","category_id":"cmdppvvvp000alpode1zr31iw","_id":"cmdppvvvt000hlpod7o873jmi"},{"post_id":"cmdppvvvq000clpodejs07wow","category_id":"cmdppvvvp000alpode1zr31iw","_id":"cmdppvvvv000klpod64bv56e4"},{"post_id":"cmdppvvvs000flpod2et6ddum","category_id":"cmdppvvvr000elpodeou53jyy","_id":"cmdppvvvx000nlpodbs6idlh0"},{"post_id":"cmdppvvvm0006lpodbv1z61jd","category_id":"cmdppvvvr000elpodeou53jyy","_id":"cmdppvvvy000qlpodb8w320x4"},{"post_id":"cmdppvvvs000glpodemuaahmv","category_id":"cmdppvvvj0004lpod7svp6rkw","_id":"cmdppvvvz000slpod3gzs49fk"},{"post_id":"cmdppvvvv000jlpod8p7465dy","category_id":"cmdppvvvr000elpodeou53jyy","_id":"cmdppvvw0000wlpod6e8hdejc"},{"post_id":"cmdppvvvn0008lpod0qp2aerk","category_id":"cmdppvvvr000elpodeou53jyy","_id":"cmdppvvw1000zlpod2mui100j"},{"post_id":"cmdppvvvw000mlpod628l64wc","category_id":"cmdppvvvr000elpodeou53jyy","_id":"cmdppvvw10010lpod45b31dqs"},{"post_id":"cmdppvvvx000plpod1af5b0vh","category_id":"cmdppvvvx000olpod6orh1piz","_id":"cmdppvvw20013lpod22sh20c7"},{"post_id":"cmdppvvvo0009lpod36389tz6","category_id":"cmdppvvvx000olpod6orh1piz","_id":"cmdppvvw20015lpod98kqc5mh"},{"post_id":"cmdppvvvq000blpod115e8in1","category_id":"cmdppvvvz000ulpodco5vdcmb","_id":"cmdppvvw20016lpodh8yh7zek"},{"post_id":"cmdppvvw0000ylpod9wi38nxg","category_id":"cmdppvvw10011lpodct6k2ci5","_id":"cmdppvvw20018lpoddcose0ei"}],"PostTag":[{"post_id":"cmdppvvvs000glpodemuaahmv","tag_id":"cmdppvvvw000llpodh37galr2","_id":"cmdppvvvz000tlpod9besh4wr"},{"post_id":"cmdppvvvy000rlpodd9at444a","tag_id":"cmdppvvw0000xlpod5kf7hg69","_id":"cmdppvvw20014lpod4u9qcio7"},{"post_id":"cmdppvvvz000vlpoddpm45hwv","tag_id":"cmdppvvw10012lpodfh1m1rmf","_id":"cmdppvvw20017lpodhbikdb7b"},{"post_id":"cmdppvvw60019lpoden1pgu56","tag_id":"cmdppvvw7001alpodhlwo7bar","_id":"cmdppvvw7001blpodfmdffrmx"}],"Tag":[{"name":"prometheus","_id":"cmdppvvvw000llpodh37galr2"},{"name":"websocket","_id":"cmdppvvw0000xlpod5kf7hg69"},{"name":"maven","_id":"cmdppvvw10012lpodfh1m1rmf"},{"name":"llm","_id":"cmdppvvw7001alpodhlwo7bar"}]}}